!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/be621aec/
ACT_COPY	FileActionScript.h	/^		ACT_COPY = 1, \/**< Copy the item(s). *\/$/;"	e	enum:FileAction::ACT_TYPE
ACT_DEL	FileActionScript.h	/^		ACT_DEL,      \/**< Delete the item(s). *\/$/;"	e	enum:FileAction::ACT_TYPE
ACT_MOVE	FileActionScript.h	/^		ACT_MOVE,     \/**< Move the item(s). *\/$/;"	e	enum:FileAction::ACT_TYPE
ACT_RENAME	FileActionScript.h	/^		ACT_RENAME,   \/**< Rename the item(s). *\/$/;"	e	enum:FileAction::ACT_TYPE
ACT_TYPE	FileActionScript.h	/^	enum ACT_TYPE$/;"	g	struct:FileAction
ADJUST_OFFSET	WinIMergeLib.h	/^		NONE = 0, MOVE, ADJUST_OFFSET$/;"	e	enum:IImgMergeWindow::DRAGGING_MODE
ALIGN_CENTER	DirViewColItems.h	/^		ALIGN_CENTER = 2  \/\/ LVCFMT_CENTER$/;"	e	enum:DirColInfo::ColAlign
ALIGN_LEFT	DirViewColItems.h	/^		ALIGN_LEFT = 0,   \/\/ LVCFMT_LEFT$/;"	e	enum:DirColInfo::ColAlign
ALIGN_RIGHT	DirViewColItems.h	/^		ALIGN_RIGHT = 1,  \/\/ LVCFMT_RIGHT$/;"	e	enum:DirColInfo::ColAlign
ALL	DiffItem.h	/^		SIDEFLAGS=0x700U, FIRST=0x100U, SECOND=0x200U, THIRD=0x400U, BOTH=0x300U, ALL=0x700U,$/;"	e	enum:DIFFCODE::__anon902ab4a30103
AM_READ	Common/UniFile.h	/^		AM_READ = 0,$/;"	e	enum:UniMemFile::AccessMode
AM_WRITE	Common/UniFile.h	/^		AM_WRITE$/;"	e	enum:UniMemFile::AccessMode
ATL	Common/Bitmap.h	/^namespace ATL { class CImage; }$/;"	n
AUTO_COMPLETE_DISABLED	Common/SuperComboBox.h	/^		AUTO_COMPLETE_DISABLED		= 0,$/;"	e	enum:CSuperComboBox::__anon5d35905b0103
AUTO_COMPLETE_FILE_SYSTEM	Common/SuperComboBox.h	/^		AUTO_COMPLETE_FILE_SYSTEM,$/;"	e	enum:CSuperComboBox::__anon5d35905b0103
AUTO_COMPLETE_RECENTLY_USED	Common/SuperComboBox.h	/^		AUTO_COMPLETE_RECENTLY_USED$/;"	e	enum:CSuperComboBox::__anon5d35905b0103
AVA_TSTR	Common/lwdisp.h	/^#define AVA_TSTR /;"	d
Abort	DiffThread.h	/^	void Abort() { m_bAborting = true; }$/;"	f	class:CDiffThread	typeref:typename:void
AbortCurrentScan	DirDoc.cpp	/^void CDirDoc::AbortCurrentScan()$/;"	f	class:CDirDoc	typeref:typename:void
AboutInfo	MergeApp.cpp	/^AboutInfo::AboutInfo()$/;"	f	class:AboutInfo
AboutInfo	MergeApp.h	/^struct AboutInfo$/;"	s
AccessMode	Common/UniFile.h	/^	enum AccessMode$/;"	g	class:UniMemFile
ActivateFrame	DirFrame.cpp	/^void CDirFrame::ActivateFrame(int nCmdShow) $/;"	f	class:CDirFrame	typeref:typename:void
ActivateFrame	HexMergeFrm.cpp	/^void CHexMergeFrame::ActivateFrame(int nCmdShow) $/;"	f	class:CHexMergeFrame	typeref:typename:void
ActivateFrame	MainFrm.cpp	/^void CMainFrame::ActivateFrame(int nCmdShow) $/;"	f	class:CMainFrame	typeref:typename:void
ActivateFrame	MergeEditFrm.cpp	/^void CMergeEditFrame::ActivateFrame(int nCmdShow) $/;"	f	class:CMergeEditFrame	typeref:typename:void
ActivateFrame	MergeFrameCommon.cpp	/^void CMergeFrameCommon::ActivateFrame(int nCmdShow)$/;"	f	class:CMergeFrameCommon	typeref:typename:void
ActivateFrame	OpenFrm.cpp	/^void COpenFrame::ActivateFrame(int nCmdShow) $/;"	f	class:COpenFrame	typeref:typename:void
Add	Common/PidlContainer.h	/^	void Add(LPITEMIDLIST pidl) { m_container.push_back(pidl); } $/;"	f	class:CPidlContainer	typeref:typename:void
Add	Merge7zFormatRegister.h	/^	static void Add(Merge7z::Format *(*pfnGuessFormat)(const String& path))$/;"	f	struct:Merge7zFormatRegister	typeref:typename:void
Add	MovedBlocks.cpp	/^	void Add(int lineno, int eqcode, int nside)$/;"	f	class:CodeToGroupMap	typeref:typename:void	file:
Add	MovedBlocks.cpp	/^	void Add(int val) { m_map[val] = 1; }$/;"	f	class:IntSet	typeref:typename:void	file:
Add	MovedLines.cpp	/^void MovedLines::Add(ML_SIDE side1, unsigned line1,	unsigned line2)$/;"	f	class:MovedLines	typeref:typename:void
Add	Plugins.cpp	/^void CAllThreadsScripts::Add(CScriptsOfThread * scripts)$/;"	f	class:CAllThreadsScripts	typeref:typename:void
AddActionItem	FileActionScript.h	/^	void AddActionItem(FileActionItem & item) { m_actions.push_back(item); }$/;"	f	class:FileActionScript	typeref:typename:void
AddBitmapToImageList	Common/BCMenu.cpp	/^bool BCMenu::AddBitmapToImageList(CImageList *bmplist,UINT nResourceID, bool bDisabled\/*= false/;"	f	class:BCMenu	typeref:typename:bool
AddButton	Common/MessageBoxDialog.cpp	/^void CMessageBoxDialog::AddButton ( UINT nID, UINT nTitle, bool bIsDefault \/*= false*\/,$/;"	f	class:CMessageBoxDialog	typeref:typename:void
AddChildToParent	DiffItem.cpp	/^void DIFFITEM::AddChildToParent(DIFFITEM *p)$/;"	f	class:DIFFITEM	typeref:typename:void
AddColumn	DirColsDlg.h	/^	void AddColumn(const String & name, const String & desc, int log, int phy=-1)$/;"	f	class:CDirColsDlg	typeref:typename:void
AddDefColumn	DirColsDlg.h	/^	void AddDefColumn(const String & name, int log, int phy=-1)$/;"	f	class:CDirColsDlg	typeref:typename:void
AddDiff	DiffList.cpp	/^void DiffList::AddDiff(const DIFFRANGE & di)$/;"	f	class:DiffList	typeref:typename:void
AddDiffRange	DiffWrapper.cpp	/^void CDiffWrapper::AddDiffRange(DiffList *pDiffList, DIFFRANGE &dr)$/;"	f	class:CDiffWrapper	typeref:typename:void
AddDiffRange	DiffWrapper.cpp	/^void CDiffWrapper::AddDiffRange(DiffList *pDiffList, unsigned begin0, unsigned end0, unsigned be/;"	f	class:CDiffWrapper	typeref:typename:void
AddFiles	PatchTool.cpp	/^void CPatchTool::AddFiles(const String &file1, const String &altPath1,$/;"	f	class:CPatchTool	typeref:typename:void
AddFiles	PatchTool.cpp	/^void CPatchTool::AddFiles(const String &file1, const String &file2)$/;"	f	class:CPatchTool	typeref:typename:void
AddFilter	FileFilterMgr.cpp	/^int FileFilterMgr::AddFilter(const String& szFilterFile)$/;"	f	class:FileFilterMgr	typeref:typename:int
AddFilter	LineFiltersList.cpp	/^void LineFiltersList::AddFilter(const String& filter, bool enabled)$/;"	f	class:LineFiltersList	typeref:typename:void
AddFilterPattern	FileFilterMgr.cpp	/^static void AddFilterPattern(vector<FileFilterElementPtr> *filterList, String & str)$/;"	f	typeref:typename:void	file:
AddItem	Common/ShellContextMenu.cpp	/^void CShellContextMenu::AddItem(const FileEntry& fileEntry)$/;"	f	class:CShellContextMenu	typeref:typename:void
AddItem	Common/ShellContextMenu.cpp	/^void CShellContextMenu::AddItem(const String& path,$/;"	f	class:CShellContextMenu	typeref:typename:void
AddItem	CompareStats.cpp	/^void CompareStats::AddItem(int code)$/;"	f	class:CompareStats	typeref:typename:void
AddItem	PatchDlg.h	/^inline void CPatchDlg::AddItem(const PATCHFILES& pf)$/;"	f	class:CPatchDlg	typeref:typename:void
AddListener	DiffThread.h	/^	void AddListener(T *pObj, void (T::*pMethod)(int& state)) {$/;"	f	class:CDiffThread	typeref:typename:void
AddMergeDoc	DirDoc.cpp	/^void CDirDoc::AddMergeDoc(IMergeDoc * pMergeDoc)$/;"	f	class:CDirDoc	typeref:typename:void
AddMergeViews	MergeDoc.cpp	/^void CMergeDoc::AddMergeViews(CMergeEditView *pView[3])$/;"	f	class:CMergeDoc	typeref:typename:void
AddModifier	files.h	/^	static void AddModifier(DWORD & flr, DWORD modifier) { flr = (flr | modifier); }$/;"	f	class:FileLoadResult	typeref:typename:void
AddNewDiff	DiffItemList.cpp	/^DIFFITEM *DiffItemList::AddNewDiff(DIFFITEM *par)$/;"	f	class:DiffItemList	typeref:typename:DIFFITEM *
AddNewItem	DirView.cpp	/^int CDirView::AddNewItem(int i, DIFFITEM *diffpos, int iImage, int iIndent)$/;"	f	class:CDirView	typeref:typename:int
AddOperation	Merge.h	/^	void AddOperation() { InterlockedIncrement(&m_nActiveOperations); }$/;"	f	class:CMergeApp	typeref:typename:void
AddOption	Common/OptionsMgr.cpp	/^int COptionsMgr::AddOption(const String& name, const varprop::VariantValue& defaultValue)$/;"	f	class:COptionsMgr	typeref:typename:int
AddPage	Common/PreferencesDlg.cpp	/^void CPreferencesDlg::AddPage(CPropertyPage* pPage, LPCTSTR szPath)$/;"	f	class:CPreferencesDlg	typeref:typename:void
AddPage	Common/PreferencesDlg.cpp	/^void CPreferencesDlg::AddPage(CPropertyPage* pPage, UINT nResourceID)$/;"	f	class:CPreferencesDlg	typeref:typename:void
AddPage	Common/PreferencesDlg.cpp	/^void CPreferencesDlg::AddPage(CPropertyPage* pPage, UINT nTopHeading, UINT nSubHeading)$/;"	f	class:CPreferencesDlg	typeref:typename:void
AddPage	Common/PropertyPageHost.cpp	/^bool CPropertyPageHost::AddPage(CPropertyPage* pPage, LPCTSTR szTitle \/*= nullptr*\/, DWORD dwI/;"	f	class:CPropertyPageHost	typeref:typename:bool
AddParentFolderItem	DirView.cpp	/^void CDirView::AddParentFolderItem(bool bEnable)$/;"	f	class:CDirView	typeref:typename:void
AddPath	MergeCmdLineInfo.cpp	/^void MergeCmdLineInfo::AddPath(const String &path)$/;"	f	class:MergeCmdLineInfo	typeref:typename:void
AddPlugins	PluginsListDlg.cpp	/^void PluginsListDlg::AddPlugins()$/;"	f	class:PluginsListDlg	typeref:typename:void
AddPluginsToList	PluginsListDlg.cpp	/^void PluginsListDlg::AddPluginsToList(const wchar_t *pluginEvent, const String& pluginType)$/;"	f	class:PluginsListDlg	typeref:typename:void
AddRef	Common/lwdisp.c	/^static ULONG STDMETHODCALLTYPE AddRef(struct LWDispatch *This)$/;"	f	typeref:typename:ULONG STDMETHODCALLTYPE	file:
AddRef	DropHandler.cpp	/^ULONG STDMETHODCALLTYPE DropHandler::AddRef(void)$/;"	f	class:DropHandler	typeref:typename:ULONG STDMETHODCALLTYPE
AddRegExp	FilterList.cpp	/^void FilterList::AddRegExp(const std::string& regularExpression)$/;"	f	class:FilterList	typeref:typename:void
AddRow	LineFiltersDlg.cpp	/^int LineFiltersDlg::AddRow(const String& filter \/*= nullptr*\/, bool enabled \/*= false*\/)$/;"	f	class:LineFiltersDlg	typeref:typename:int
AddSource	Common/ShellFileOperations.cpp	/^void ShellFileOperations::AddSource(const String &source)$/;"	f	class:ShellFileOperations	typeref:typename:void
AddSourceAndDestination	Common/ShellFileOperations.cpp	/^void ShellFileOperations::AddSourceAndDestination(const String &source,$/;"	f	class:ShellFileOperations	typeref:typename:void
AddSpecialItems	DirView.cpp	/^int CDirView::AddSpecialItems()$/;"	f	class:CDirView	typeref:typename:int
AddString	Common/SuperComboBox.cpp	/^int CSuperComboBox::AddString(LPCTSTR lpszItem)$/;"	f	class:CSuperComboBox	typeref:typename:int
AddSyncPoint	MergeDoc.cpp	/^void CMergeDoc::AddSyncPoint()$/;"	f	class:CMergeDoc	typeref:typename:void
AddToGlobalImageList	Common/BCMenu.cpp	/^INT_PTR BCMenu::AddToGlobalImageList(CImageList *il,int xoffset,int nID)$/;"	f	class:BCMenu	typeref:typename:INT_PTR
AddToGlobalImageList	Common/BCMenu.cpp	/^INT_PTR BCMenu::AddToGlobalImageList(int nIconNormal,int nID)$/;"	f	class:BCMenu	typeref:typename:INT_PTR
AddToGrid	FileFiltersDlg.cpp	/^void FileFiltersDlg::AddToGrid(int filterIndex)$/;"	f	class:FileFiltersDlg	typeref:typename:void
AddToList	DirScan.cpp	/^static DIFFITEM *AddToList(const String& sDir1, const String& sDir2, const String& sDir3,$/;"	f	typeref:typename:DIFFITEM *	file:
AddToList	DirScan.cpp	/^static DIFFITEM *AddToList(const String& sLeftDir, const String& sRightDir,$/;"	f	typeref:typename:DIFFITEM *	file:
AddToRecentDocs	JumpList.cpp	/^bool AddToRecentDocs(const String& app_path, const String& params, const String& title, const St/;"	f	namespace:JumpList	typeref:typename:bool
AddToRecentDocs	MainFrm.cpp	/^static bool AddToRecentDocs(const PathContext& paths, const unsigned flags[], bool recurse, cons/;"	f	typeref:typename:bool	file:
AddToRecentProjectsMRU	Merge.cpp	/^void CMergeApp::AddToRecentProjectsMRU(LPCTSTR sPathName)$/;"	f	class:CMergeApp	typeref:typename:void
AddTrailingSlash	paths.h	/^inline String AddTrailingSlash(const String& path) { return !EndsWithSlash(path) ? path + _T("\\/;"	f	namespace:paths	typeref:typename:String
AddUndoRecord	DiffTextBuffer.cpp	/^AddUndoRecord(bool bInsert, const CPoint & ptStartPos,$/;"	f	class:CDiffTextBuffer	typeref:typename:void
AddUndoRecord	GhostTextBuffer.cpp	/^AddUndoRecord(bool bInsert, const CPoint & ptStartPos,$/;"	f	class:CGhostTextBuffer	typeref:typename:void
AdjustDiffBlock	MergeDocDiffSync.cpp	/^void CMergeDoc::AdjustDiffBlock(DiffMap & diffMap, const DIFFRANGE & diffrange, int lo0, int hi0/;"	f	class:CMergeDoc	typeref:typename:void
AdjustDiffBlocks	MergeDocDiffSync.cpp	/^void CMergeDoc::AdjustDiffBlocks()$/;"	f	class:CMergeDoc	typeref:typename:void
AdjustRectangle	Common/sizecbar.cpp	/^static void AdjustRectangle(CRect& rect, CPoint pt)$/;"	f	typeref:typename:void	file:
AdvanceOverWhitespace	stringdiffs.cpp	/^AdvanceOverWhitespace(const TCHAR **pcurrent, const TCHAR *end)$/;"	f	namespace:strdiff	typeref:typename:void	file:
AdvancedContextMenuCheck	PropShell.cpp	/^void PropShell::AdvancedContextMenuCheck()$/;"	f	class:PropShell	typeref:typename:void
AlignControlBars	Common/sizecbar.cpp	/^void CSizingControlBar::AlignControlBars()$/;"	f	class:CSizingControlBar	typeref:typename:void
AllocDispinfoText	DirView.cpp	/^static LPTSTR NTAPI AllocDispinfoText(const String &s)$/;"	f	typeref:typename:LPTSTR NTAPI	file:
AllowHeightShrink	Common/CMoveConstraint.cpp	/^CMoveConstraint::AllowHeightShrink()$/;"	f	class:prdlg::CMoveConstraint	typeref:typename:void
AllowUpwardDirectory	DirActions.h	/^struct AllowUpwardDirectory$/;"	s
AllowWidthShrink	Common/CMoveConstraint.cpp	/^CMoveConstraint::AllowWidthShrink()$/;"	f	class:prdlg::CMoveConstraint	typeref:typename:void
Altered	7zCommon.h	/^		Altered = 0x80,$/;"	e	enum:DirItemEnumerator::__anond3316a350103
AnyCodepageToUTF8	Common/multiformatText.cpp	/^bool AnyCodepageToUTF8(int codepage, const String& filepath, const String& filepathDst, int & nF/;"	f	typeref:typename:bool
AnyCodepageToUTF8	FileTransform.cpp	/^bool AnyCodepageToUTF8(int codepage, String & filepath, bool bMayOverwrite)$/;"	f	namespace:FileTransform	typeref:typename:bool
AppErrorMessageBox	MergeApp.cpp	/^void AppErrorMessageBox(const String& msg)$/;"	f	typeref:typename:void
AppMsgBox	MergeApp.cpp	/^namespace AppMsgBox$/;"	n	file:
AppMsgBox	MergeApp.h	/^namespace AppMsgBox$/;"	n
ApparentLastRealLine	GhostTextBuffer.cpp	/^int CGhostTextBuffer::ApparentLastRealLine() const$/;"	f	class:CGhostTextBuffer	typeref:typename:int
Append	Common/UniFile.cpp	/^static void Append(String &strBuffer, const TCHAR *pchTail,$/;"	f	typeref:typename:void	file:
AppendDiffList	DiffList.cpp	/^void DiffList::AppendDiffList(const DiffList& list, int offset[] \/*= nullptr*\/, int doffset \//;"	f	class:DiffList	typeref:typename:void
AppendMenu	Common/BCMenu.cpp	/^bool BCMenu::AppendMenu (BCMenu* pMenuToAdd, bool add_separator \/*= true*\/, int num_items_to_r/;"	f	class:BCMenu	typeref:typename:bool
AppendMenu	Common/BCMenu.h	/^#define AppendMenu /;"	d
AppendMenuA	Common/BCMenu.h	/^	bool AppendMenuA(UINT nFlags,UINT_PTR nIDNewItem,const char *lpszNewItem,CBitmap *bmp)$/;"	f	class:BCMenu	typeref:typename:bool
AppendMenuA	Common/BCMenu.h	/^	bool AppendMenuA(UINT nFlags,UINT_PTR nIDNewItem,const char *lpszNewItem,CImageList *il,int xof/;"	f	class:BCMenu	typeref:typename:bool
AppendMenuA	Common/BCMenu.h	/^	bool AppendMenuA(UINT nFlags,UINT_PTR nIDNewItem=0,const char *lpszNewItem=nullptr,int nIconNor/;"	f	class:BCMenu	typeref:typename:bool
AppendMenuW	Common/BCMenu.cpp	/^bool BCMenu::AppendMenuW(UINT nFlags,UINT_PTR nIDNewItem \/*= 0*\/,const wchar_t *lpszNewItem \//;"	f	class:BCMenu	typeref:typename:bool
AppendMenuW	Common/BCMenu.cpp	/^bool BCMenu::AppendMenuW(UINT nFlags,UINT_PTR nIDNewItem,const wchar_t *lpszNewItem,CBitmap *bmp/;"	f	class:BCMenu	typeref:typename:bool
AppendMenuW	Common/BCMenu.cpp	/^bool BCMenu::AppendMenuW(UINT nFlags,UINT_PTR nIDNewItem,const wchar_t *lpszNewItem,CImageList */;"	f	class:BCMenu	typeref:typename:bool
AppendODMenu	Common/BCMenu.h	/^#define AppendODMenu /;"	d
AppendODMenuA	Common/BCMenu.h	/^	bool AppendODMenuA(LPCSTR lpstrText,UINT nFlags,UINT_PTR nID,$/;"	f	class:BCMenu	typeref:typename:bool
AppendODMenuW	Common/BCMenu.cpp	/^bool BCMenu::AppendODMenuW(const wchar_t *lpstrText,UINT nFlags,UINT_PTR nID,$/;"	f	class:BCMenu	typeref:typename:bool
AppendODPopupMenu	Common/BCMenu.h	/^#define AppendODPopupMenu /;"	d
AppendODPopupMenuA	Common/BCMenu.h	/^	BCMenu* AppendODPopupMenuA(LPCSTR lpstrText)$/;"	f	class:BCMenu	typeref:typename:BCMenu *
AppendODPopupMenuW	Common/BCMenu.cpp	/^BCMenu* BCMenu::AppendODPopupMenuW(const wchar_t *lpstrText)$/;"	f	class:BCMenu	typeref:typename:BCMenu *
AppendResult	TestFilterDlg.cpp	/^void CTestFilterDlg::AppendResult(const String& result)$/;"	f	class:CTestFilterDlg	typeref:typename:void
AppendSibling	DiffItem.cpp	/^void DIFFITEM::AppendSibling(DIFFITEM *p)$/;"	f	class:DIFFITEM	typeref:typename:void
ApplyCodepage	DirActions.h	/^void ApplyCodepage(const InputIterator& begin, const InputIterator& end, CDiffContext& ctxt, con/;"	f	typeref:typename:void
ApplyCommandLineConfigOptions	Merge.cpp	/^void CMergeApp::ApplyCommandLineConfigOptions(MergeCmdLineInfo& cmdInfo)$/;"	f	class:CMergeApp	typeref:typename:void
ApplyDiffOptions	MainFrm.cpp	/^void CMainFrame::ApplyDiffOptions() $/;"	f	class:CMainFrame	typeref:typename:void
ApplyDisplayRoot	DirDoc.cpp	/^void CDirDoc::ApplyDisplayRoot(int nIndex, String &sText)$/;"	f	class:CDirDoc	typeref:typename:void
ApplyFolderNameAndFileName	DirActions.h	/^void ApplyFolderNameAndFileName(const InputIterator& begin, const InputIterator& end, SIDE_TYPE /;"	f	typeref:typename:void
ApplyPluginPrediffSetting	DirActions.h	/^void ApplyPluginPrediffSetting(const InputIterator& begin, const InputIterator& end, const CDiff/;"	f	typeref:typename:void
ArchiveGuessFormat	7zCommon.cpp	/^Merge7z::Format *ArchiveGuessFormat(const String& path)$/;"	f	typeref:typename:Merge7z::Format *
AreItemsOpenable	DirActions.cpp	/^bool AreItemsOpenable(const CDiffContext& ctxt, SELECTIONTYPE selectionType, const DIFFITEM &di1/;"	f	typeref:typename:bool
AreItemsOpenable	DirActions.cpp	/^bool AreItemsOpenable(const CDiffContext& ctxt, const DIFFITEM &di1, const DIFFITEM &di2, const /;"	f	typeref:typename:bool
AreWordsSame	stringdiffs.cpp	/^stringdiffs::AreWordsSame(const word & word1, const word & word2) const$/;"	f	class:strdiff::stringdiffs	typeref:typename:bool
AskCloseConfirmation	MainFrm.cpp	/^bool CMainFrame::AskCloseConfirmation()$/;"	f	class:CMainFrame	typeref:typename:bool
AskProjectFileName	OpenView.cpp	/^String COpenView::AskProjectFileName(bool bOpen)$/;"	f	class:COpenView	typeref:typename:String
Assign	7zCommon.cpp	/^inline BSTR Assign(CString &dst, BSTR src)$/;"	f	typeref:typename:BSTR
Attach	Common/MyCom.h	/^  void Attach(T* p2)$/;"	f	class:CMyComPtr	typeref:typename:void
AttachSystemImageList	Common/SuperComboBox.cpp	/^bool CSuperComboBox::AttachSystemImageList()$/;"	f	class:CSuperComboBox	typeref:typename:bool
AttachToBuffer	GhostTextView.cpp	/^AttachToBuffer (CCrystalTextBuffer * pBuf \/*= nullptr*\/ )$/;"	f	class:CGhostTextView	typeref:typename:void
AutoReleaser	Plugins.cpp	/^	explicit AutoReleaser(T *ptr) : p(ptr) {}$/;"	f	struct:AutoReleaser	file:
AutoReleaser	Plugins.cpp	/^template<class T> struct AutoReleaser$/;"	s	file:
AutoResizePanes	Common/SplitterWndEx.h	/^	void AutoResizePanes(bool bState=true){m_bAutoResizePanes=bState;};$/;"	f	class:CSplitterWndEx	typeref:typename:void
BACKUP_FILE_EXT	Merge.cpp	/^static const TCHAR BACKUP_FILE_EXT[] = _T("bak");$/;"	v	typeref:typename:const TCHAR[]	file:
BACKUP_FOLDER	PropBackups.h	/^	enum BACKUP_FOLDER$/;"	g	class:PropBackups
BAD_MAP_ENTRY	DiffList.h	/^		BAD_MAP_ENTRY = -999999999,$/;"	e	enum:DiffMap::__anon966aec100203
BAR_0	LocationView.cpp	/^	BAR_0,			\/**< first bar in given coords *\/$/;"	e	enum:LOCBAR_TYPE	file:
BAR_1	LocationView.cpp	/^	BAR_1,			\/**< second bar in given coords *\/$/;"	e	enum:LOCBAR_TYPE	file:
BAR_2	LocationView.cpp	/^	BAR_2,			\/**< third side bar in given coords *\/$/;"	e	enum:LOCBAR_TYPE	file:
BAR_NONE	LocationView.cpp	/^	BAR_NONE = -1,	\/**< No bar in given coords *\/$/;"	e	enum:LOCBAR_TYPE	file:
BAR_YAREA	LocationView.cpp	/^	BAR_YAREA,		\/**< Y-Coord in bar area *\/$/;"	e	enum:LOCBAR_TYPE	file:
BCMENU_BOTH	Common/BCMenu.h	/^typedef enum {BCMENU_NONE, BCMENU_HEAD, BCMENU_TAIL, BCMENU_BOTH} BC_Seperator;$/;"	e	enum:__anon64d15f0d0103
BCMENU_GAP	Common/BCMenu.cpp	/^#define BCMENU_GAP /;"	d	file:
BCMENU_HEAD	Common/BCMenu.h	/^typedef enum {BCMENU_NONE, BCMENU_HEAD, BCMENU_TAIL, BCMENU_BOTH} BC_Seperator;$/;"	e	enum:__anon64d15f0d0103
BCMENU_NONE	Common/BCMenu.h	/^typedef enum {BCMENU_NONE, BCMENU_HEAD, BCMENU_TAIL, BCMENU_BOTH} BC_Seperator;$/;"	e	enum:__anon64d15f0d0103
BCMENU_TAIL	Common/BCMenu.h	/^typedef enum {BCMENU_NONE, BCMENU_HEAD, BCMENU_TAIL, BCMENU_BOTH} BC_Seperator;$/;"	e	enum:__anon64d15f0d0103
BCM_SETSHIELD	PropShell.cpp	/^#define BCM_SETSHIELD /;"	d	file:
BCMenu	Common/BCMenu.h	/^class BCMenu : public CMenu$/;"	c
BCMenuData	Common/BCMenu.h	/^	BCMenuData () {menuIconNormal=-1;xoffset=-1;bitmap=nullptr;pContext=nullptr;$/;"	f	class:BCMenuData
BCMenuData	Common/BCMenu.h	/^class BCMenuData$/;"	c
BCN_DROPDOWN	OpenView.cpp	/^#define BCN_DROPDOWN /;"	d	file:
BC_Seperator	Common/BCMenu.h	/^typedef enum {BCMENU_NONE, BCMENU_HEAD, BCMENU_TAIL, BCMENU_BOTH} BC_Seperator;$/;"	t	typeref:enum:__anon64d15f0d0103
BEGIN_MESSAGE_MAP	AboutDlg.cpp	/^BEGIN_MESSAGE_MAP(CAboutDlg::Impl, CTrDialog)$/;"	f
BEGIN_MESSAGE_MAP	Common/MessageBoxDialog.cpp	/^BEGIN_MESSAGE_MAP(CMessageBoxDialog, CDialog)$/;"	f
BEGIN_MESSAGE_MAP	Common/PreferencesDlg.cpp	/^BEGIN_MESSAGE_MAP(CPreferencesDlg, CDialog)$/;"	f
BEGIN_MESSAGE_MAP	Common/PropertyPageHost.cpp	/^BEGIN_MESSAGE_MAP(CPropertyPageHost, CWnd)$/;"	f
BEGIN_MESSAGE_MAP	Common/SplitterWndEx.cpp	/^BEGIN_MESSAGE_MAP(CSplitterWndEx, CSplitterWnd)$/;"	f
BEGIN_MESSAGE_MAP	Common/SuperComboBox.cpp	/^BEGIN_MESSAGE_MAP(CSuperComboBox, CComboBoxEx)$/;"	f
BEGIN_MESSAGE_MAP	Common/scbarcf.cpp	/^BEGIN_MESSAGE_MAP(CSizingControlBarCF, baseCSizingControlBarCF)$/;"	f
BEGIN_MESSAGE_MAP	Common/scbarg.cpp	/^BEGIN_MESSAGE_MAP(CSizingControlBarG, baseCSizingControlBarG)$/;"	f
BEGIN_MESSAGE_MAP	Common/sizecbar.cpp	/^BEGIN_MESSAGE_MAP(CSCBMiniDockFrameWnd, baseCSCBMiniDockFrameWnd)$/;"	f
BEGIN_MESSAGE_MAP	Common/sizecbar.cpp	/^BEGIN_MESSAGE_MAP(CSizingControlBar, baseCSizingControlBar)$/;"	f
BEGIN_MESSAGE_MAP	CompareStatisticsDlg.cpp	/^BEGIN_MESSAGE_MAP(CompareStatisticsDlg, CTrDialog)$/;"	f
BEGIN_MESSAGE_MAP	ConfirmFolderCopyDlg.cpp	/^BEGIN_MESSAGE_MAP(ConfirmFolderCopyDlg, CTrDialog)$/;"	f
BEGIN_MESSAGE_MAP	DiffViewBar.cpp	/^BEGIN_MESSAGE_MAP(CDiffViewBar, TViewBarBase)$/;"	f
BEGIN_MESSAGE_MAP	DirColsDlg.cpp	/^BEGIN_MESSAGE_MAP(CDirColsDlg, CTrDialog)$/;"	f
BEGIN_MESSAGE_MAP	DirCompProgressBar.cpp	/^BEGIN_MESSAGE_MAP(DirCompProgressBar, CDialogBar)$/;"	f
BEGIN_MESSAGE_MAP	DirDoc.cpp	/^BEGIN_MESSAGE_MAP(CDirDoc, CDocument)$/;"	f
BEGIN_MESSAGE_MAP	DirFrame.cpp	/^BEGIN_MESSAGE_MAP(CDirFrame, CMergeFrameCommon)$/;"	f
BEGIN_MESSAGE_MAP	DirSelectFilesDlg.cpp	/^BEGIN_MESSAGE_MAP(DirSelectFilesDlg::Impl, CTrDialog)$/;"	f
BEGIN_MESSAGE_MAP	DirView.cpp	/^BEGIN_MESSAGE_MAP(CDirView, CListView)$/;"	f
BEGIN_MESSAGE_MAP	EditorFilepathBar.cpp	/^BEGIN_MESSAGE_MAP(CEditorFilePathBar, CDialogBar)$/;"	f
BEGIN_MESSAGE_MAP	EncodingErrorBar.cpp	/^BEGIN_MESSAGE_MAP(CEncodingErrorBar, CDialogBar)$/;"	f
BEGIN_MESSAGE_MAP	FileFiltersDlg.cpp	/^BEGIN_MESSAGE_MAP(FileFiltersDlg, CDialog)$/;"	f
BEGIN_MESSAGE_MAP	FilepathEdit.cpp	/^BEGIN_MESSAGE_MAP(CFilepathEdit, CEdit)$/;"	f	file:
BEGIN_MESSAGE_MAP	GhostTextBuffer.cpp	/^BEGIN_MESSAGE_MAP (CGhostTextBuffer, CCrystalTextBuffer)$/;"	f
BEGIN_MESSAGE_MAP	LineFiltersDlg.cpp	/^BEGIN_MESSAGE_MAP(LineFiltersDlg, CPropertyPage)$/;"	f
BEGIN_MESSAGE_MAP	LoadSaveCodepageDlg.cpp	/^BEGIN_MESSAGE_MAP(CLoadSaveCodepageDlg, CTrDialog)$/;"	f
BEGIN_MESSAGE_MAP	LocationBar.cpp	/^BEGIN_MESSAGE_MAP(CLocationBar, TViewBarBase)$/;"	f
BEGIN_MESSAGE_MAP	LocationView.cpp	/^BEGIN_MESSAGE_MAP(CLocationView, CView)$/;"	f
BEGIN_MESSAGE_MAP	Merge.cpp	/^BEGIN_MESSAGE_MAP(CMergeApp, CWinApp)$/;"	f
BEGIN_MESSAGE_MAP	MergeEditSplitterView.cpp	/^BEGIN_MESSAGE_MAP(CMergeEditSplitterView, CView)$/;"	f
BEGIN_MESSAGE_MAP	MergeEditView.cpp	/^BEGIN_MESSAGE_MAP(CMergeEditView, CCrystalEditViewEx)$/;"	f
BEGIN_MESSAGE_MAP	MergeStatusBar.cpp	/^BEGIN_MESSAGE_MAP(CMergeStatusBar, CStatusBar)$/;"	f
BEGIN_MESSAGE_MAP	PatchDlg.cpp	/^BEGIN_MESSAGE_MAP(CPatchDlg, CTrDialog)$/;"	f
BEGIN_MESSAGE_MAP	PropArchive.cpp	/^BEGIN_MESSAGE_MAP(PropArchive, CPropertyPage)$/;"	f
BEGIN_MESSAGE_MAP	PropBackups.cpp	/^BEGIN_MESSAGE_MAP(PropBackups, CPropertyPage)$/;"	f
BEGIN_MESSAGE_MAP	PropCodepage.cpp	/^BEGIN_MESSAGE_MAP(PropCodepage, CPropertyPage)$/;"	f
BEGIN_MESSAGE_MAP	PropColors.cpp	/^BEGIN_MESSAGE_MAP(PropMergeColors, CDialog)$/;"	f
BEGIN_MESSAGE_MAP	PropCompare.cpp	/^BEGIN_MESSAGE_MAP(PropCompare, CPropertyPage)$/;"	f
BEGIN_MESSAGE_MAP	PropCompareBinary.cpp	/^BEGIN_MESSAGE_MAP(PropCompareBinary, CPropertyPage)$/;"	f
BEGIN_MESSAGE_MAP	PropCompareFolder.cpp	/^BEGIN_MESSAGE_MAP(PropCompareFolder, CPropertyPage)$/;"	f
BEGIN_MESSAGE_MAP	PropCompareImage.cpp	/^BEGIN_MESSAGE_MAP(PropCompareImage, CPropertyPage)$/;"	f
BEGIN_MESSAGE_MAP	PropDirColors.cpp	/^BEGIN_MESSAGE_MAP(PropDirColors, CDialog)$/;"	f
BEGIN_MESSAGE_MAP	PropEditor.cpp	/^BEGIN_MESSAGE_MAP(PropEditor, CDialog)$/;"	f
BEGIN_MESSAGE_MAP	PropGeneral.cpp	/^BEGIN_MESSAGE_MAP(PropGeneral, CPropertyPage)$/;"	f
BEGIN_MESSAGE_MAP	PropMarkerColors.cpp	/^BEGIN_MESSAGE_MAP(PropMarkerColors, CDialog)$/;"	f
BEGIN_MESSAGE_MAP	PropRegistry.cpp	/^BEGIN_MESSAGE_MAP(PropRegistry, CDialog)$/;"	f
BEGIN_MESSAGE_MAP	PropShell.cpp	/^BEGIN_MESSAGE_MAP(PropShell, CPropertyPage)$/;"	f
BEGIN_MESSAGE_MAP	PropSyntaxColors.cpp	/^BEGIN_MESSAGE_MAP(PropSyntaxColors, CPropertyPage)$/;"	f
BEGIN_MESSAGE_MAP	PropTextColors.cpp	/^BEGIN_MESSAGE_MAP(PropTextColors, CDialog)$/;"	f
BEGIN_MESSAGE_MAP	SaveClosingDlg.cpp	/^BEGIN_MESSAGE_MAP(SaveClosingDlg, CTrDialog)$/;"	f
BEGIN_MESSAGE_MAP	SelectUnpackerDlg.cpp	/^BEGIN_MESSAGE_MAP(CSelectUnpackerDlg, CTrDialog)$/;"	f
BEGIN_MESSAGE_MAP	TestFilterDlg.cpp	/^BEGIN_MESSAGE_MAP(CTestFilterDlg, CTrDialog)$/;"	f
BEGIN_MESSAGE_MAP	WMGotoDlg.cpp	/^BEGIN_MESSAGE_MAP(WMGotoDlg::Impl, CTrDialog)$/;"	f
BIN	DiffItem.h	/^		TEXTFLAGS=0x1FU, TEXT=0x1U, BIN=0x2U, BINSIDE1=0x4U, BINSIDE2=0x8U, BINSIDE3=0x10U,$/;"	e	enum:DIFFCODE::__anon902ab4a30103
BINFILE_NONE	DiffItem.h	/^	BINFILE_NONE = 0, \/**< No binary files detected. *\/$/;"	e	enum:BINFILE_SIDE
BINFILE_SIDE	DiffItem.h	/^enum BINFILE_SIDE$/;"	g
BINFILE_SIDE1	DiffItem.h	/^	BINFILE_SIDE1, \/**< First file was detected as binary file. *\/$/;"	e	enum:BINFILE_SIDE
BINFILE_SIDE2	DiffItem.h	/^	BINFILE_SIDE2, \/**< Second file was detected as binart file. *\/$/;"	e	enum:BINFILE_SIDE
BINSIDE1	DiffItem.h	/^		TEXTFLAGS=0x1FU, TEXT=0x1U, BIN=0x2U, BINSIDE1=0x4U, BINSIDE2=0x8U, BINSIDE3=0x10U,$/;"	e	enum:DIFFCODE::__anon902ab4a30103
BINSIDE2	DiffItem.h	/^		TEXTFLAGS=0x1FU, TEXT=0x1U, BIN=0x2U, BINSIDE1=0x4U, BINSIDE2=0x8U, BINSIDE3=0x10U,$/;"	e	enum:DIFFCODE::__anon902ab4a30103
BINSIDE3	DiffItem.h	/^		TEXTFLAGS=0x1FU, TEXT=0x1U, BIN=0x2U, BINSIDE1=0x4U, BINSIDE2=0x8U, BINSIDE3=0x10U,$/;"	e	enum:DIFFCODE::__anon902ab4a30103
BOTH	DiffItem.h	/^		SIDEFLAGS=0x700U, FIRST=0x100U, SECOND=0x200U, THIRD=0x400U, BOTH=0x300U, ALL=0x700U,$/;"	e	enum:DIFFCODE::__anon902ab4a30103
BUFFERTYPE	HexMergeDoc.h	/^	enum BUFFERTYPE$/;"	g	class:CHexMergeDoc
BUFFERTYPE	ImgMergeFrm.h	/^	enum BUFFERTYPE$/;"	g	class:CImgMergeFrame
BUFFERTYPE	MergeDoc.h	/^enum BUFFERTYPE$/;"	g
BUFFER_NORMAL	HexMergeDoc.h	/^		BUFFER_NORMAL = 0, \/**< Normal, file loaded from disk *\/$/;"	e	enum:CHexMergeDoc::BUFFERTYPE
BUFFER_NORMAL	ImgMergeFrm.h	/^		BUFFER_NORMAL = 0, \/**< Normal, file loaded from disk *\/$/;"	e	enum:CImgMergeFrame::BUFFERTYPE
BUFFER_NORMAL	MergeDoc.h	/^	BUFFER_NORMAL = 0, \/**< Normal, file loaded from disk *\/$/;"	e	enum:BUFFERTYPE
BUFFER_NORMAL_NAMED	HexMergeDoc.h	/^		BUFFER_NORMAL_NAMED, \/**< Normal, description given *\/$/;"	e	enum:CHexMergeDoc::BUFFERTYPE
BUFFER_NORMAL_NAMED	ImgMergeFrm.h	/^		BUFFER_NORMAL_NAMED, \/**< Normal, description given *\/$/;"	e	enum:CImgMergeFrame::BUFFERTYPE
BUFFER_NORMAL_NAMED	MergeDoc.h	/^	BUFFER_NORMAL_NAMED, \/**< Normal, description given *\/$/;"	e	enum:BUFFERTYPE
BUFFER_UNNAMED	HexMergeDoc.h	/^		BUFFER_UNNAMED, \/**< Empty, created buffer *\/$/;"	e	enum:CHexMergeDoc::BUFFERTYPE
BUFFER_UNNAMED	ImgMergeFrm.h	/^		BUFFER_UNNAMED, \/**< Empty, created buffer *\/$/;"	e	enum:CImgMergeFrame::BUFFERTYPE
BUFFER_UNNAMED	MergeDoc.h	/^	BUFFER_UNNAMED, \/**< Empty, created buffer *\/$/;"	e	enum:BUFFERTYPE
BUFFER_UNNAMED_SAVED	HexMergeDoc.h	/^		BUFFER_UNNAMED_SAVED, \/**< Empty buffer saved with filename *\/$/;"	e	enum:CHexMergeDoc::BUFFERTYPE
BUFFER_UNNAMED_SAVED	ImgMergeFrm.h	/^		BUFFER_UNNAMED_SAVED, \/**< Empty buffer saved with filename *\/$/;"	e	enum:CImgMergeFrame::BUFFERTYPE
BUFFER_UNNAMED_SAVED	MergeDoc.h	/^	BUFFER_UNNAMED_SAVED, \/**< Empty buffer saved with filename *\/$/;"	e	enum:BUFFERTYPE
BYTEDIFF	MergeDoc.h	/^	typedef enum { BYTEDIFF, WORDDIFF } DIFFLEVEL;$/;"	e	enum:CMergeDoc::__anon80996cc10403
BYTE_ENDIAN	heksedit.h	/^	enum BYTE_ENDIAN$/;"	g	class:IHexEditorWindow
BalanceFolders	7zCommon.h	/^		BalanceFolders = 0x200$/;"	e	enum:DirItemEnumerator::__anond3316a350103
BaseBegin	ConflictFileParser.cpp	/^static const TCHAR BaseBegin[] = _T("||||||| ");$/;"	v	typeref:typename:const TCHAR[]	file:
Begin	DirView.h	/^	DirItemIterator Begin() const { return DirItemIterator(m_pIList.get()); }$/;"	f	class:CDirView	typeref:typename:DirItemIterator
BeginCompare	CompareStats.h	/^	void BeginCompare(const DIFFITEM *di, int iCompareThread)$/;"	f	class:CompareStats	typeref:typename:void
BeginEl	DirCmpReport.cpp	/^static String BeginEl(const String& elName, const String& attr = _T(""))$/;"	f	typeref:typename:String	file:
BinaryCompare	CompareEngines/BinaryCompare.cpp	/^BinaryCompare::BinaryCompare()$/;"	f	class:CompareEngines::BinaryCompare
BinaryCompare	CompareEngines/BinaryCompare.h	/^class BinaryCompare$/;"	c	namespace:CompareEngines
Blink	DiffItem.h	/^	DIFFITEM *Blink;				\/**< Backward "sibling" link.  The backward linkage is circular,$/;"	m	class:DIFFITEM	typeref:typename:DIFFITEM *
BreakCharDefaults	stringdiffs.cpp	/^static TCHAR BreakCharDefaults[] = _T(",.;:");$/;"	v	namespace:strdiff	typeref:typename:TCHAR[]	file:
BreakChars	stringdiffs.cpp	/^static TCHAR *BreakChars;$/;"	v	namespace:strdiff	typeref:typename:TCHAR *	file:
BrowseCallbackProc	FileOrFolderSelect.cpp	/^static int CALLBACK BrowseCallbackProc(HWND hwnd, UINT uMsg, LPARAM lParam,$/;"	f	typeref:typename:int CALLBACK	file:
BrowseColor	PropColors.cpp	/^void PropMergeColors::BrowseColor(CColorButton & colorButton)$/;"	f	class:PropMergeColors	typeref:typename:void
BrowseColor	PropDirColors.cpp	/^void PropDirColors::BrowseColor(CColorButton & colorButton)$/;"	f	class:PropDirColors	typeref:typename:void
BrowseColorAndSave	PropMarkerColors.cpp	/^void PropMarkerColors::BrowseColorAndSave(CColorButton & colorButton, int colorIndex)$/;"	f	class:PropMarkerColors	typeref:typename:void
BrowseColorAndSave	PropSyntaxColors.cpp	/^void PropSyntaxColors::BrowseColorAndSave(unsigned colorIndex)$/;"	f	class:PropSyntaxColors	typeref:typename:void
BrowseColorAndSave	PropTextColors.cpp	/^void PropTextColors::BrowseColorAndSave(CColorButton & colorButton, int colorIndex)$/;"	f	class:PropTextColors	typeref:typename:void
BufSize	codepage_detect.h	/^static const int BufSize = 65536;$/;"	v	typeref:typename:const int
BuildWordDiffList	stringdiffs.cpp	/^stringdiffs::BuildWordDiffList()$/;"	f	class:strdiff::stringdiffs	typeref:typename:void
BuildWordDiffList_DP	stringdiffs.cpp	/^stringdiffs::BuildWordDiffList_DP()$/;"	f	class:strdiff::stringdiffs	typeref:typename:bool
BuildWordsArray	stringdiffs.cpp	/^stringdiffs::BuildWordsArray(const String & str)$/;"	f	class:strdiff::stringdiffs	typeref:typename:std::vector<stringdiffs::word>
ByteComparator	CompareEngines/ByteComparator.cpp	/^ByteComparator::ByteComparator(const QuickCompareOptions * options)$/;"	f	class:CompareEngines::ByteComparator
ByteComparator	CompareEngines/ByteComparator.h	/^class ByteComparator$/;"	c	namespace:CompareEngines
ByteCompare	CompareEngines/ByteCompare.cpp	/^ByteCompare::ByteCompare()$/;"	f	class:CompareEngines::ByteCompare
ByteCompare	CompareEngines/ByteCompare.h	/^class ByteCompare$/;"	c	namespace:CompareEngines
CANCEL	MergeApp.h	/^		CANCEL = 8,$/;"	e	enum:AppMsgBox::__anon8063e6ec0103
CAPTION_PATH_MAX	MergeDoc.cpp	/^static const UINT CAPTION_PATH_MAX = 50;$/;"	v	typeref:typename:const UINT	file:
CAboutDlg	AboutDlg.cpp	/^CAboutDlg::CAboutDlg() : m_pimpl(new CAboutDlg::Impl(this)) {}$/;"	f	class:CAboutDlg
CAboutDlg	AboutDlg.h	/^class CAboutDlg$/;"	c
CAllThreadsScripts	Plugins.h	/^class CAllThreadsScripts$/;"	c
CAssureScriptsForThread	Plugins.cpp	/^CAssureScriptsForThread::CAssureScriptsForThread()$/;"	f	class:CAssureScriptsForThread
CAssureScriptsForThread	Plugins.h	/^class CAssureScriptsForThread$/;"	c
CColorButton	Common/ColorButton.cpp	/^CColorButton::CColorButton()$/;"	f	class:CColorButton
CColorButton	Common/ColorButton.cpp	/^CColorButton::CColorButton(COLORREF clrFill)$/;"	f	class:CColorButton
CColorButton	Common/ColorButton.h	/^class CColorButton : public CButton$/;"	c
CConfigLog	ConfigLog.cpp	/^CConfigLog::CConfigLog()$/;"	f	class:CConfigLog
CConfigLog	ConfigLog.h	/^class CConfigLog$/;"	c
CDiffContext	DiffContext.cpp	/^CDiffContext::CDiffContext(const PathContext & paths, int compareMethod)$/;"	f	class:CDiffContext
CDiffContext	DiffContext.h	/^class CDiffContext : public DiffItemList$/;"	c
CDiffTextBuffer	DiffTextBuffer.cpp	/^CDiffTextBuffer::CDiffTextBuffer(CMergeDoc * pDoc, int pane)$/;"	f	class:CDiffTextBuffer
CDiffTextBuffer	DiffTextBuffer.h	/^class CDiffTextBuffer : public CGhostTextBuffer$/;"	c
CDiffThread	DiffThread.cpp	/^CDiffThread::CDiffThread()$/;"	f	class:CDiffThread
CDiffThread	DiffThread.h	/^class CDiffThread$/;"	c
CDiffViewBar	DiffViewBar.cpp	/^CDiffViewBar::CDiffViewBar()$/;"	f	class:CDiffViewBar
CDiffViewBar	DiffViewBar.h	/^class CDiffViewBar : public TViewBarBase$/;"	c
CDiffWrapper	DiffWrapper.cpp	/^CDiffWrapper::CDiffWrapper()$/;"	f	class:CDiffWrapper
CDiffWrapper	DiffWrapper.h	/^class CDiffWrapper$/;"	c
CDirColsDlg	DirColsDlg.cpp	/^CDirColsDlg::CDirColsDlg(CWnd* pParent \/*= nullptr*\/)$/;"	f	class:CDirColsDlg
CDirColsDlg	DirColsDlg.h	/^class CDirColsDlg : public CTrDialog$/;"	c
CDirDoc	DirDoc.h	/^class CDirDoc : public CDocument$/;"	c
CDirFrame	DirFrame.h	/^class CDirFrame : public CMergeFrameCommon$/;"	c
CDirView	DirView.h	/^class CDirView : public CListView$/;"	c
CE_ACTION_MERGE	MergeDoc.h	/^	CE_ACTION_MERGE = 100, \/**< Merging action *\/$/;"	e	enum:__anon80996cc10103
CEditorFilePathBar	EditorFilepathBar.h	/^class CEditorFilePathBar : public CDialogBar, public IHeaderBar$/;"	c
CEncodingErrorBar	EncodingErrorBar.cpp	/^CEncodingErrorBar::CEncodingErrorBar()$/;"	f	class:CEncodingErrorBar
CEncodingErrorBar	EncodingErrorBar.h	/^class CEncodingErrorBar : public CTrDialogBar$/;"	c
CExconverterMLang	Common/ExConverter.cpp	/^	CExconverterMLang()$/;"	f	class:CExconverterMLang	file:
CExconverterMLang	Common/ExConverter.cpp	/^class CExconverterMLang: public IExconverter {$/;"	c	file:
CF_HTML	DirCmpReport.cpp	/^UINT CF_HTML = RegisterClipboardFormat(_T("HTML Format"));$/;"	v	typeref:typename:UINT
CFilepathEdit	FilepathEdit.cpp	/^CFilepathEdit::CFilepathEdit()$/;"	f	class:CFilepathEdit
CFilepathEdit	FilepathEdit.h	/^class CFilepathEdit : public CEdit$/;"	c
CGhostTextBuffer	GhostTextBuffer.h	/^class EDITPADC_CLASS CGhostTextBuffer : public CCrystalTextBuffer$/;"	c
CGhostTextView	GhostTextView.h	/^class EDITPADC_CLASS CGhostTextView : public CCrystalEditViewEx$/;"	c
CHANGED	diffutils/src/diff.h	/^  CHANGED$/;"	e	enum:line_class
CHAR_BIT	diffutils/src/system.h	/^#define CHAR_BIT /;"	d
CHECKFILES_TIMEOUT	OpenView.cpp	/^const UINT CHECKFILES_TIMEOUT = 1000; \/\/ milliseconds$/;"	v	typeref:typename:const UINT
CHexMergeDoc	HexMergeDoc.h	/^class CHexMergeDoc : public CDocument, public IMergeDoc$/;"	c
CHexMergeFrame	HexMergeFrm.cpp	/^CHexMergeFrame::CHexMergeFrame()$/;"	f	class:CHexMergeFrame
CHexMergeFrame	HexMergeFrm.h	/^class CHexMergeFrame : public CMergeFrameCommon$/;"	c
CHexMergeView	HexMergeView.h	/^class CHexMergeView : public CView$/;"	c
CINTERFACE	Common/lwdisp.c	/^#define CINTERFACE	/;"	d	file:
CImgMergeFrame	ImgMergeFrm.cpp	/^CImgMergeFrame::CImgMergeFrame()$/;"	f	class:CImgMergeFrame
CImgMergeFrame	ImgMergeFrm.h	/^class CImgMergeFrame : public CMergeFrameCommon,public IMergeDoc$/;"	c
CLanguageSelect	Common/LanguageSelect.cpp	/^CLanguageSelect::CLanguageSelect()$/;"	f	class:CLanguageSelect
CLanguageSelect	Common/LanguageSelect.h	/^class CLanguageSelect$/;"	c
CLoadSaveCodepageDlg	LoadSaveCodepageDlg.cpp	/^CLoadSaveCodepageDlg::CLoadSaveCodepageDlg(int nFiles, CWnd* pParent \/*= nullptr*\/)$/;"	f	class:CLoadSaveCodepageDlg
CLoadSaveCodepageDlg	LoadSaveCodepageDlg.h	/^class CLoadSaveCodepageDlg : public CTrDialog$/;"	c
CLocationBar	LocationBar.cpp	/^CLocationBar::CLocationBar()$/;"	f	class:CLocationBar
CLocationBar	LocationBar.h	/^class CLocationBar : public TViewBarBase$/;"	c
CLocationView	LocationView.h	/^class CLocationView : public CView$/;"	c
CMDIClient	MainFrm.h	/^	class CMDIClient : public CWnd$/;"	c	class:CMainFrame
CMDITabBar	Common/MDITabBar.h	/^	CMDITabBar() : m_bInSelchange(false), m_pMainFrame(nullptr), m_bMouseTracking(false), m_bCloseB/;"	f	class:CMDITabBar
CMDITabBar	Common/MDITabBar.h	/^class CMDITabBar : public CControlBar$/;"	c
CMPABORT	DiffItem.h	/^		COMPAREFLAGS=0x7000U, NOCMP=0x0000U, SAME=0x1000U, DIFF=0x2000U, CMPERR=0x3000U, CMPABORT=0x40/;"	e	enum:DIFFCODE::__anon902ab4a30103
CMPERR	DiffItem.h	/^		COMPAREFLAGS=0x7000U, NOCMP=0x0000U, SAME=0x1000U, DIFF=0x2000U, CMPERR=0x3000U, CMPABORT=0x40/;"	e	enum:DIFFCODE::__anon902ab4a30103
CMP_BINARY_CONTENT	DiffWrapper.h	/^	CMP_BINARY_CONTENT,$/;"	e	enum:COMPARE_TYPE
CMP_CONTENT	DiffWrapper.h	/^	CMP_CONTENT = 0,$/;"	e	enum:COMPARE_TYPE
CMP_DATE	DiffWrapper.h	/^	CMP_DATE,$/;"	e	enum:COMPARE_TYPE
CMP_DATE_SIZE	DiffWrapper.h	/^	CMP_DATE_SIZE,$/;"	e	enum:COMPARE_TYPE
CMP_QUICK_CONTENT	DiffWrapper.h	/^	CMP_QUICK_CONTENT,$/;"	e	enum:COMPARE_TYPE
CMP_SIZE	DiffWrapper.h	/^	CMP_SIZE,$/;"	e	enum:COMPARE_TYPE
CMP_STATE	CompareStats.h	/^	enum CMP_STATE$/;"	g	class:CompareStats
CMainFrame	MainFrm.cpp	/^CMainFrame::CMainFrame()$/;"	f	class:CMainFrame
CMainFrame	MainFrm.h	/^class CMainFrame : public CMDIFrameWnd$/;"	c
CMarkdown	markdown.cpp	/^CMarkdown::CMarkdown(const char *upper, const char *ahead, unsigned flags):$/;"	f	class:CMarkdown
CMarkdown	markdown.h	/^class CMarkdown$/;"	c
CMenuItemInfo	Common/BCMenu.h	/^	CMenuItemInfo() : MENUITEMINFO{ sizeof(MENUITEMINFO) }$/;"	f	struct:CMenuItemInfo
CMenuItemInfo	Common/BCMenu.h	/^struct CMenuItemInfo : public MENUITEMINFO $/;"	s
CMergeApp	Merge.h	/^class CMergeApp : public CWinApp$/;"	c
CMergeDoc	MergeDoc.h	/^class CMergeDoc : public CDocument, public IMergeDoc$/;"	c
CMergeEditFrame	MergeEditFrm.h	/^class CMergeEditFrame : public CMergeFrameCommon$/;"	c
CMergeEditSplitterView	MergeEditSplitterView.h	/^class CMergeEditSplitterView : public CView$/;"	c
CMergeEditView	MergeEditView.h	/^class CMergeEditView : public CGhostTextView$/;"	c
CMergeFrameCommon	MergeFrameCommon.h	/^class CMergeFrameCommon: public CMDIChildWnd$/;"	c
CMergeStatusBar	MergeStatusBar.h	/^class CMergeStatusBar : public CStatusBar$/;"	c
CMessageBoxDialog	Common/MessageBoxDialog.cpp	/^CMessageBoxDialog::CMessageBoxDialog ( CWnd* pParent, UINT nMessageID,$/;"	f	class:CMessageBoxDialog
CMessageBoxDialog	Common/MessageBoxDialog.h	/^class CMessageBoxDialog : public CDialog$/;"	c
CMoveConstraint	Common/CMoveConstraint.cpp	/^CMoveConstraint::CMoveConstraint()$/;"	f	class:prdlg::CMoveConstraint
CMoveConstraint	Common/CMoveConstraint.h	/^class CMoveConstraint$/;"	c	namespace:prdlg
CMyClipFormat	Common/MyCom.h	/^	explicit CMyClipFormat(CLIPFORMAT cf) : cf(cf) { }$/;"	f	class:CMyClipFormat
CMyClipFormat	Common/MyCom.h	/^	explicit CMyClipFormat(LPCTSTR cfstr) : cf(static_cast<CLIPFORMAT>(RegisterClipboardFormat(cfst/;"	f	class:CMyClipFormat
CMyClipFormat	Common/MyCom.h	/^class CMyClipFormat$/;"	c
CMyComBSTR	Common/MyCom.h	/^  CMyComBSTR(): m_str(NULL) {}$/;"	f	class:CMyComBSTR
CMyComBSTR	Common/MyCom.h	/^  CMyComBSTR(UINT nSize, LPCOLESTR sz) { m_str = ::SysAllocStringLen(sz, nSize); }$/;"	f	class:CMyComBSTR
CMyComBSTR	Common/MyCom.h	/^  CMyComBSTR(const CMyComBSTR& src) { m_str = src.MyCopy(); }$/;"	f	class:CMyComBSTR
CMyComBSTR	Common/MyCom.h	/^  explicit CMyComBSTR(BSTR *bstr): m_str(*bstr) { *bstr = NULL; }$/;"	f	class:CMyComBSTR
CMyComBSTR	Common/MyCom.h	/^  explicit CMyComBSTR(LPCOLESTR src) { m_str = ::SysAllocString(src); }$/;"	f	class:CMyComBSTR
CMyComBSTR	Common/MyCom.h	/^class CMyComBSTR$/;"	c
CMyComPtr	Common/MyCom.h	/^  CMyComPtr() { _p = NULL;}$/;"	f	class:CMyComPtr
CMyComPtr	Common/MyCom.h	/^  explicit CMyComPtr(T* p) {if ((_p = p) != NULL) p->AddRef(); }$/;"	f	class:CMyComPtr
CMyComPtr	Common/MyCom.h	/^  explicit CMyComPtr(const CMyComPtr<T>& lp)$/;"	f	class:CMyComPtr
CMyComPtr	Common/MyCom.h	/^class CMyComPtr$/;"	c
CMyDispId	Common/MyCom.h	/^	CMyDispId() : dispid(0) { }$/;"	f	class:CMyDispId
CMyDispId	Common/MyCom.h	/^class CMyDispId$/;"	c
CMyDispParams	Common/MyCom.h	/^	CMyDispParams() { Unnamed.Make(rgvarg + cArgs + 1); }$/;"	f	union:CMyDispParams
CMyDispParams	Common/MyCom.h	/^union CMyDispParams$/;"	u
CMyDispParamsUnnamed	Common/MyCom.h	/^class CMyDispParamsUnnamed : public DISPPARAMS$/;"	c
CMyFormatEtc	Common/MyCom.h	/^	CMyFormatEtc(CMyClipFormat cf, LONG lindex = -1, DWORD tymed = TYMED_HGLOBAL)$/;"	f	class:CMyFormatEtc
CMyFormatEtc	Common/MyCom.h	/^class CMyFormatEtc : public FORMATETC$/;"	c
CMyMemDC	Common/memdc.h	/^	CMyMemDC(CDC* pDC, const CRect* pRect = nullptr) : CDC()$/;"	f	class:CMyMemDC
CMyMemDC	Common/memdc.h	/^class CMyMemDC : public CDC {$/;"	c
CMyStgMedium	Common/MyCom.h	/^	CMyStgMedium()$/;"	f	class:CMyStgMedium
CMyStgMedium	Common/MyCom.h	/^class CMyStgMedium : public STGMEDIUM$/;"	c
CMyVariant	Common/MyCom.h	/^	CMyVariant() { VariantInit(this); }$/;"	f	class:CMyVariant
CMyVariant	Common/MyCom.h	/^	explicit CMyVariant(IDispatch *value)$/;"	f	class:CMyVariant
CMyVariant	Common/MyCom.h	/^	explicit CMyVariant(LPCOLESTR value)$/;"	f	class:CMyVariant
CMyVariant	Common/MyCom.h	/^	explicit CMyVariant(LPCOLESTR value, UINT len)$/;"	f	class:CMyVariant
CMyVariant	Common/MyCom.h	/^	explicit CMyVariant(bool value)$/;"	f	class:CMyVariant
CMyVariant	Common/MyCom.h	/^	explicit CMyVariant(const CMyVariant &src)$/;"	f	class:CMyVariant
CMyVariant	Common/MyCom.h	/^	explicit CMyVariant(long value)$/;"	f	class:CMyVariant
CMyVariant	Common/MyCom.h	/^	explicit CMyVariant(short value)$/;"	f	class:CMyVariant
CMyVariant	Common/MyCom.h	/^class CMyVariant : public VARIANT$/;"	c
COLDESC_BINARY	DirViewColItems.cpp	/^const char *COLDESC_BINARY      = N_("Shows an asterisk (*) if the file is binary.");$/;"	v	namespace:__anon933cb4300111	typeref:typename:const char *
COLDESC_DIR	DirViewColItems.cpp	/^const char *COLDESC_DIR         = N_("Subfolder name when subfolders are included.");$/;"	v	namespace:__anon933cb4300111	typeref:typename:const char *
COLDESC_EXTENSION	DirViewColItems.cpp	/^const char *COLDESC_EXTENSION   = N_("File's extension.");$/;"	v	namespace:__anon933cb4300111	typeref:typename:const char *
COLDESC_FILENAME	DirViewColItems.cpp	/^const char *COLDESC_FILENAME    = N_("Filename or folder name.");$/;"	v	namespace:__anon933cb4300111	typeref:typename:const char *
COLDESC_LATTRIBUTES	DirViewColItems.cpp	/^const char *COLDESC_LATTRIBUTES = N_("Left side attributes.");$/;"	v	namespace:__anon933cb4300111	typeref:typename:const char *
COLDESC_LENCODING	DirViewColItems.cpp	/^const char *COLDESC_LENCODING   = N_("Left side encoding.");$/;"	v	namespace:__anon933cb4300111	typeref:typename:const char *
COLDESC_LEOL_TYPE	DirViewColItems.cpp	/^const char *COLDESC_LEOL_TYPE   = N_("Left side file EOL type");$/;"	v	namespace:__anon933cb4300111	typeref:typename:const char *
COLDESC_LSIZE	DirViewColItems.cpp	/^const char *COLDESC_LSIZE       = N_("Left file size in bytes.");$/;"	v	namespace:__anon933cb4300111	typeref:typename:const char *
COLDESC_LSIZE_SHORT	DirViewColItems.cpp	/^const char *COLDESC_LSIZE_SHORT = N_("Left file size abbreviated.");$/;"	v	namespace:__anon933cb4300111	typeref:typename:const char *
COLDESC_LTIMEC	DirViewColItems.cpp	/^const char *COLDESC_LTIMEC      = N_("Left side creation time.");$/;"	v	namespace:__anon933cb4300111	typeref:typename:const char *
COLDESC_LTIMEM	DirViewColItems.cpp	/^const char *COLDESC_LTIMEM      = N_("Left side modification date.");$/;"	v	namespace:__anon933cb4300111	typeref:typename:const char *
COLDESC_LVERSION	DirViewColItems.cpp	/^const char *COLDESC_LVERSION    = N_("Left side file version, only for some filetypes.");$/;"	v	namespace:__anon933cb4300111	typeref:typename:const char *
COLDESC_MATTRIBUTES	DirViewColItems.cpp	/^const char *COLDESC_MATTRIBUTES = N_("Middle side attributes.");$/;"	v	namespace:__anon933cb4300111	typeref:typename:const char *
COLDESC_MENCODING	DirViewColItems.cpp	/^const char *COLDESC_MENCODING   = N_("Middle side encoding.");$/;"	v	namespace:__anon933cb4300111	typeref:typename:const char *
COLDESC_MEOL_TYPE	DirViewColItems.cpp	/^const char *COLDESC_MEOL_TYPE   = N_("Middle side file EOL type");$/;"	v	namespace:__anon933cb4300111	typeref:typename:const char *
COLDESC_MSIZE	DirViewColItems.cpp	/^const char *COLDESC_MSIZE       = N_("Middle file size in bytes.");$/;"	v	namespace:__anon933cb4300111	typeref:typename:const char *
COLDESC_MSIZE_SHORT	DirViewColItems.cpp	/^const char *COLDESC_MSIZE_SHORT = N_("Middle file size abbreviated.");$/;"	v	namespace:__anon933cb4300111	typeref:typename:const char *
COLDESC_MTIMEC	DirViewColItems.cpp	/^const char *COLDESC_MTIMEC      = N_("Middle side creation time.");$/;"	v	namespace:__anon933cb4300111	typeref:typename:const char *
COLDESC_MTIMEM	DirViewColItems.cpp	/^const char *COLDESC_MTIMEM      = N_("Middle side modification date.");$/;"	v	namespace:__anon933cb4300111	typeref:typename:const char *
COLDESC_MVERSION	DirViewColItems.cpp	/^const char *COLDESC_MVERSION    = N_("Middle side file version, only for some filetypes.");$/;"	v	namespace:__anon933cb4300111	typeref:typename:const char *
COLDESC_NEWER	DirViewColItems.cpp	/^const char *COLDESC_NEWER       = N_("Tells which side has newer modification date.");$/;"	v	namespace:__anon933cb4300111	typeref:typename:const char *
COLDESC_NIDIFFS	DirViewColItems.cpp	/^const char *COLDESC_NIDIFFS     = N_("Number of ignored differences in file. These differences a/;"	v	namespace:__anon933cb4300111	typeref:typename:const char *
COLDESC_NSDIFFS	DirViewColItems.cpp	/^const char *COLDESC_NSDIFFS     = N_("Number of differences in file. This number does not includ/;"	v	namespace:__anon933cb4300111	typeref:typename:const char *
COLDESC_RATTRIBUTES	DirViewColItems.cpp	/^const char *COLDESC_RATTRIBUTES = N_("Right side attributes.");$/;"	v	namespace:__anon933cb4300111	typeref:typename:const char *
COLDESC_RENCODING	DirViewColItems.cpp	/^const char *COLDESC_RENCODING   = N_("Right side encoding.");$/;"	v	namespace:__anon933cb4300111	typeref:typename:const char *
COLDESC_REOL_TYPE	DirViewColItems.cpp	/^const char *COLDESC_REOL_TYPE   = N_("Right side file EOL type");$/;"	v	namespace:__anon933cb4300111	typeref:typename:const char *
COLDESC_RESULT	DirViewColItems.cpp	/^const char *COLDESC_RESULT      = N_("Comparison result, long form.");$/;"	v	namespace:__anon933cb4300111	typeref:typename:const char *
COLDESC_RESULT_ABBR	DirViewColItems.cpp	/^const char *COLDESC_RESULT_ABBR = N_("Short comparison result.");$/;"	v	namespace:__anon933cb4300111	typeref:typename:const char *
COLDESC_RSIZE	DirViewColItems.cpp	/^const char *COLDESC_RSIZE       = N_("Right file size in bytes.");$/;"	v	namespace:__anon933cb4300111	typeref:typename:const char *
COLDESC_RSIZE_SHORT	DirViewColItems.cpp	/^const char *COLDESC_RSIZE_SHORT = N_("Right file size abbreviated.");$/;"	v	namespace:__anon933cb4300111	typeref:typename:const char *
COLDESC_RTIMEC	DirViewColItems.cpp	/^const char *COLDESC_RTIMEC      = N_("Right side creation time.");$/;"	v	namespace:__anon933cb4300111	typeref:typename:const char *
COLDESC_RTIMEM	DirViewColItems.cpp	/^const char *COLDESC_RTIMEM      = N_("Right side modification date.");$/;"	v	namespace:__anon933cb4300111	typeref:typename:const char *
COLDESC_RVERSION	DirViewColItems.cpp	/^const char *COLDESC_RVERSION    = N_("Right side file version, only for some filetypes.");$/;"	v	namespace:__anon933cb4300111	typeref:typename:const char *
COLHDR_BINARY	DirViewColItems.cpp	/^const char *COLHDR_BINARY       = NC_("DirView|ColumnHeader", "Binary");$/;"	v	namespace:__anon933cb4300111	typeref:typename:const char *
COLHDR_DIR	DirViewColItems.cpp	/^const char *COLHDR_DIR          = NC_("DirView|ColumnHeader", "Folder");$/;"	v	namespace:__anon933cb4300111	typeref:typename:const char *
COLHDR_EXTENSION	DirViewColItems.cpp	/^const char *COLHDR_EXTENSION    = N_("Extension");$/;"	v	namespace:__anon933cb4300111	typeref:typename:const char *
COLHDR_FILENAME	DirViewColItems.cpp	/^const char *COLHDR_FILENAME     = N_("Filename");$/;"	v	namespace:__anon933cb4300111	typeref:typename:const char *
COLHDR_LATTRIBUTES	DirViewColItems.cpp	/^const char *COLHDR_LATTRIBUTES  = N_("Left Attributes");$/;"	v	namespace:__anon933cb4300111	typeref:typename:const char *
COLHDR_LENCODING	DirViewColItems.cpp	/^const char *COLHDR_LENCODING    = N_("Left Encoding");$/;"	v	namespace:__anon933cb4300111	typeref:typename:const char *
COLHDR_LEOL_TYPE	DirViewColItems.cpp	/^const char *COLHDR_LEOL_TYPE    = N_("Left EOL");$/;"	v	namespace:__anon933cb4300111	typeref:typename:const char *
COLHDR_LSIZE	DirViewColItems.cpp	/^const char *COLHDR_LSIZE        = N_("Left Size");$/;"	v	namespace:__anon933cb4300111	typeref:typename:const char *
COLHDR_LSIZE_SHORT	DirViewColItems.cpp	/^const char *COLHDR_LSIZE_SHORT  = N_("Left Size (Short)");$/;"	v	namespace:__anon933cb4300111	typeref:typename:const char *
COLHDR_LTIMEC	DirViewColItems.cpp	/^const char *COLHDR_LTIMEC       = N_("Left Creation Time");$/;"	v	namespace:__anon933cb4300111	typeref:typename:const char *
COLHDR_LTIMEM	DirViewColItems.cpp	/^const char *COLHDR_LTIMEM       = N_("Left Date");$/;"	v	namespace:__anon933cb4300111	typeref:typename:const char *
COLHDR_LVERSION	DirViewColItems.cpp	/^const char *COLHDR_LVERSION     = N_("Left File Version");$/;"	v	namespace:__anon933cb4300111	typeref:typename:const char *
COLHDR_MATTRIBUTES	DirViewColItems.cpp	/^const char *COLHDR_MATTRIBUTES  = N_("Middle Attributes");$/;"	v	namespace:__anon933cb4300111	typeref:typename:const char *
COLHDR_MENCODING	DirViewColItems.cpp	/^const char *COLHDR_MENCODING    = N_("Middle Encoding");$/;"	v	namespace:__anon933cb4300111	typeref:typename:const char *
COLHDR_MEOL_TYPE	DirViewColItems.cpp	/^const char *COLHDR_MEOL_TYPE    = N_("Middle EOL");$/;"	v	namespace:__anon933cb4300111	typeref:typename:const char *
COLHDR_MSIZE	DirViewColItems.cpp	/^const char *COLHDR_MSIZE        = N_("Middle Size");$/;"	v	namespace:__anon933cb4300111	typeref:typename:const char *
COLHDR_MSIZE_SHORT	DirViewColItems.cpp	/^const char *COLHDR_MSIZE_SHORT  = N_("Middle Size (Short)");$/;"	v	namespace:__anon933cb4300111	typeref:typename:const char *
COLHDR_MTIMEC	DirViewColItems.cpp	/^const char *COLHDR_MTIMEC       = N_("Middle Creation Time");$/;"	v	namespace:__anon933cb4300111	typeref:typename:const char *
COLHDR_MTIMEM	DirViewColItems.cpp	/^const char *COLHDR_MTIMEM       = N_("Middle Date");$/;"	v	namespace:__anon933cb4300111	typeref:typename:const char *
COLHDR_MVERSION	DirViewColItems.cpp	/^const char *COLHDR_MVERSION     = N_("Middle File Version");$/;"	v	namespace:__anon933cb4300111	typeref:typename:const char *
COLHDR_NEWER	DirViewColItems.cpp	/^const char *COLHDR_NEWER        = N_("Newer File");$/;"	v	namespace:__anon933cb4300111	typeref:typename:const char *
COLHDR_NIDIFFS	DirViewColItems.cpp	/^const char *COLHDR_NIDIFFS      = N_("Ignored Diff.");$/;"	v	namespace:__anon933cb4300111	typeref:typename:const char *
COLHDR_NSDIFFS	DirViewColItems.cpp	/^const char *COLHDR_NSDIFFS      = N_("Differences");$/;"	v	namespace:__anon933cb4300111	typeref:typename:const char *
COLHDR_RATTRIBUTES	DirViewColItems.cpp	/^const char *COLHDR_RATTRIBUTES  = N_("Right Attributes");$/;"	v	namespace:__anon933cb4300111	typeref:typename:const char *
COLHDR_RENCODING	DirViewColItems.cpp	/^const char *COLHDR_RENCODING    = N_("Right Encoding");$/;"	v	namespace:__anon933cb4300111	typeref:typename:const char *
COLHDR_REOL_TYPE	DirViewColItems.cpp	/^const char *COLHDR_REOL_TYPE    = N_("Right EOL");$/;"	v	namespace:__anon933cb4300111	typeref:typename:const char *
COLHDR_RESULT	DirViewColItems.cpp	/^const char *COLHDR_RESULT       = N_("Comparison result");$/;"	v	namespace:__anon933cb4300111	typeref:typename:const char *
COLHDR_RESULT_ABBR	DirViewColItems.cpp	/^const char *COLHDR_RESULT_ABBR  = N_("Short Result");$/;"	v	namespace:__anon933cb4300111	typeref:typename:const char *
COLHDR_RSIZE	DirViewColItems.cpp	/^const char *COLHDR_RSIZE        = N_("Right Size");$/;"	v	namespace:__anon933cb4300111	typeref:typename:const char *
COLHDR_RSIZE_SHORT	DirViewColItems.cpp	/^const char *COLHDR_RSIZE_SHORT  = N_("Right Size (Short)");$/;"	v	namespace:__anon933cb4300111	typeref:typename:const char *
COLHDR_RTIMEC	DirViewColItems.cpp	/^const char *COLHDR_RTIMEC       = N_("Right Creation Time");$/;"	v	namespace:__anon933cb4300111	typeref:typename:const char *
COLHDR_RTIMEM	DirViewColItems.cpp	/^const char *COLHDR_RTIMEM       = N_("Right Date");$/;"	v	namespace:__anon933cb4300111	typeref:typename:const char *
COLHDR_RVERSION	DirViewColItems.cpp	/^const char *COLHDR_RVERSION     = N_("Right File Version");$/;"	v	namespace:__anon933cb4300111	typeref:typename:const char *
COLORSCHEME	PropColors.h	/^	typedef enum { COLORSCHEME_GITHUBBITBUCKET} COLORSCHEME;$/;"	t	class:PropMergeColors	typeref:enum:PropMergeColors::__anonf8c04cae0303
COLORSCHEME_GITHUBBITBUCKET	PropColors.h	/^	typedef enum { COLORSCHEME_GITHUBBITBUCKET} COLORSCHEME;$/;"	e	enum:PropMergeColors::__anonf8c04cae0303
COLORSETTINGS	OptionsDiffColors.h	/^struct COLORSETTINGS$/;"	s
COLOR_NONE	PropColors.h	/^	static const COLORREF COLOR_NONE = 0xffffffff;$/;"	m	class:PropMergeColors	typeref:typename:const COLORREF
COLOR_NONE	PropDirColors.h	/^	static const COLORREF COLOR_NONE = 0xffffffff;$/;"	m	class:PropDirColors	typeref:typename:const COLORREF
COLUMN_REORDER	DirView.cpp	/^	COLUMN_REORDER = 99,$/;"	e	enum:__anonc4a78dd00103	file:
COMPAREFLAGS	DiffItem.h	/^		COMPAREFLAGS=0x7000U, NOCMP=0x0000U, SAME=0x1000U, DIFF=0x2000U, CMPERR=0x3000U, CMPABORT=0x40/;"	e	enum:DIFFCODE::__anon902ab4a30103
COMPAREFLAGS3WAY	DiffItem.h	/^		COMPAREFLAGS3WAY=0x18000U, DIFFALL=0x0000U, DIFF1STONLY=0x8000U, DIFF2NDONLY=0x10000U, DIFF3RD/;"	e	enum:DIFFCODE::__anon902ab4a30103
COMPARE_TYPE	DiffWrapper.h	/^enum COMPARE_TYPE$/;"	g
COMPMETHOD_PANEL_WIDTH	DirFrame.cpp	/^const int COMPMETHOD_PANEL_WIDTH = 100;$/;"	v	typeref:typename:const int
COMP_RESULT	CompareEngines/ByteComparator.h	/^	} COMP_RESULT;$/;"	t	class:CompareEngines::ByteComparator	typeref:enum:CompareEngines::ByteComparator::__anon9fdbae860103
CONTEXTMENU	WinIMergeLib.h	/^		MOUSEMOVE, MOUSEWHEEL, CONTEXTMENU,$/;"	e	enum:IImgMergeWindow::EVENT_TYPE
CONTEXT_F_ADVANCED	PropShell.cpp	/^#define CONTEXT_F_ADVANCED /;"	d	file:
CONTEXT_F_ENABLED	PropShell.cpp	/^#define CONTEXT_F_ENABLED /;"	d	file:
CONTEXT_LINES_ABOVE	MergeEditView.h	/^const UINT CONTEXT_LINES_ABOVE = 5;$/;"	v	typeref:typename:const UINT
CONTEXT_LINES_BELOW	MergeEditView.h	/^const UINT CONTEXT_LINES_BELOW = 3;$/;"	v	typeref:typename:const UINT
COpenDoc	OpenDoc.h	/^class COpenDoc : public CDocument$/;"	c
COpenFrame	OpenFrm.h	/^class COpenFrame : public CMergeFrameCommon$/;"	c
COpenView	OpenView.h	/^class COpenView : public CFormView, public DlgUtils<COpenView>$/;"	c
COption	Common/OptionsMgr.cpp	/^COption::COption()$/;"	f	class:COption
COption	Common/OptionsMgr.cpp	/^COption::COption(const COption& option)$/;"	f	class:COption
COption	Common/OptionsMgr.h	/^class COption$/;"	c
COptionsMgr	Common/OptionsMgr.h	/^class COptionsMgr$/;"	c
CP_UCS2BE	Common/unicoder.h	/^	CP_UCS2BE = 1201$/;"	e	enum:ucr::__anon7c25ebec0103
CP_UCS2LE	Common/unicoder.h	/^	CP_UCS2LE = 1200,$/;"	e	enum:ucr::__anon7c25ebec0103
CP_UTF_8	Common/unicoder.h	/^	CP_UTF_8  = 65001,$/;"	e	enum:ucr::__anon7c25ebec0103
CPatchDlg	PatchDlg.cpp	/^CPatchDlg::CPatchDlg(CWnd* pParent \/*= nullptr*\/)$/;"	f	class:CPatchDlg
CPatchDlg	PatchDlg.h	/^class CPatchDlg : public CTrDialog$/;"	c
CPatchTool	PatchTool.cpp	/^CPatchTool::CPatchTool() : m_bOpenToEditor(false)$/;"	f	class:CPatchTool
CPatchTool	PatchTool.h	/^class CPatchTool$/;"	c
CPidlContainer	Common/PidlContainer.h	/^class CPidlContainer$/;"	c
CPreferencesDlg	Common/PreferencesDlg.cpp	/^CPreferencesDlg::CPreferencesDlg(COptionsMgr *regOptions, SyntaxColors *colors,$/;"	f	class:CPreferencesDlg
CPreferencesDlg	Common/PreferencesDlg.h	/^class CPreferencesDlg : public CTrDialog$/;"	c
CPropertyPageHost	Common/PropertyPageHost.cpp	/^CPropertyPageHost::CPropertyPageHost() : m_nSelIndex(-1)$/;"	f	class:CPropertyPageHost
CPropertyPageHost	Common/PropertyPageHost.h	/^class CPropertyPageHost : public CWnd$/;"	c
CRegKeyEx	Common/RegKey.cpp	/^CRegKeyEx::CRegKeyEx()$/;"	f	class:CRegKeyEx
CRegKeyEx	Common/RegKey.h	/^class CRegKeyEx$/;"	c
CRegOptionsMgr	Common/RegOptionsMgr.h	/^	CRegOptionsMgr() : m_serializing(true), m_bCloseHandle(false) { }$/;"	f	class:CRegOptionsMgr
CRegOptionsMgr	Common/RegOptionsMgr.h	/^class CRegOptionsMgr: public COptionsMgr$/;"	c
CSCBArray	Common/sizecbar.h	/^typedef CTypedPtrArray <CPtrArray, CSizingControlBar*> CSCBArray;$/;"	t	typeref:typename:CTypedPtrArray<CPtrArray,CSizingControlBar * >
CSCBButton	Common/scbarg.cpp	/^CSCBButton::CSCBButton()$/;"	f	class:CSCBButton
CSCBButton	Common/scbarg.h	/^class CSCBButton$/;"	c
CSCBDockBar	Common/sizecbar.h	/^class CSCBDockBar : public CDockBar$/;"	c
CSCBDockContext	Common/sizecbar.h	/^    explicit CSCBDockContext(CControlBar* pBar) : CDockContext(pBar) {}$/;"	f	class:CSCBDockContext
CSCBDockContext	Common/sizecbar.h	/^class CSCBDockContext : public CDockContext$/;"	c
CSCBMiniDockFrameWnd	Common/sizecbar.h	/^class CSCBMiniDockFrameWnd : public baseCSCBMiniDockFrameWnd$/;"	c
CScriptsOfThread	Plugins.cpp	/^CScriptsOfThread::CScriptsOfThread()$/;"	f	class:CScriptsOfThread
CScriptsOfThread	Plugins.h	/^class CScriptsOfThread$/;"	c
CSelectUnpackerDlg	SelectUnpackerDlg.cpp	/^CSelectUnpackerDlg::CSelectUnpackerDlg(const String& filename, CWnd* pParent \/*= nullptr*\/)$/;"	f	class:CSelectUnpackerDlg
CSelectUnpackerDlg	SelectUnpackerDlg.cpp	/^CSelectUnpackerDlg::CSelectUnpackerDlg(const String& filename1, const String& filename2, CWnd* p/;"	f	class:CSelectUnpackerDlg
CSelectUnpackerDlg	SelectUnpackerDlg.h	/^class CSelectUnpackerDlg : public CTrDialog$/;"	c
CSharedFilterDlg	SharedFilterDlg.cpp	/^CSharedFilterDlg::CSharedFilterDlg(FilterType type, CWnd* pParent \/*= nullptr*\/)$/;"	f	class:CSharedFilterDlg
CSharedFilterDlg	SharedFilterDlg.h	/^class CSharedFilterDlg : public CTrDialog$/;"	c
CShellContextMenu	Common/ShellContextMenu.cpp	/^CShellContextMenu::CShellContextMenu(UINT cmdFirst, UINT cmdLast)$/;"	f	class:CShellContextMenu
CShellContextMenu	Common/ShellContextMenu.h	/^class CShellContextMenu$/;"	c
CSizingControlBar	Common/sizecbar.cpp	/^CSizingControlBar::CSizingControlBar()$/;"	f	class:CSizingControlBar
CSizingControlBar	Common/sizecbar.h	/^class CSizingControlBar : public baseCSizingControlBar$/;"	c
CSizingControlBarCF	Common/scbarcf.cpp	/^CSizingControlBarCF::CSizingControlBarCF()$/;"	f	class:CSizingControlBarCF
CSizingControlBarCF	Common/scbarcf.h	/^class CSizingControlBarCF : public baseCSizingControlBarCF$/;"	c
CSizingControlBarG	Common/scbarg.cpp	/^CSizingControlBarG::CSizingControlBarG()$/;"	f	class:CSizingControlBarG
CSizingControlBarG	Common/scbarg.h	/^class CSizingControlBarG : public baseCSizingControlBarG$/;"	c
CSortHeaderCtrl	Common/SortHeaderCtrl.h	/^class CSortHeaderCtrl : public CHeaderCtrl$/;"	c
CSplitterWndEx	Common/SplitterWndEx.h	/^class CSplitterWndEx : public CSplitterWnd  $/;"	c
CSuperComboBox	Common/SuperComboBox.cpp	/^CSuperComboBox::CSuperComboBox()$/;"	f	class:CSuperComboBox
CSuperComboBox	Common/SuperComboBox.h	/^class CSuperComboBox : public CComboBoxEx$/;"	c
CTempPathContext	7zCommon.h	/^class CTempPathContext$/;"	c
CTestFilterDlg	TestFilterDlg.cpp	/^CTestFilterDlg::CTestFilterDlg(CWnd* pParent, FileFilter * pFileFilter, FileFilterMgr *pFilterMg/;"	f	class:CTestFilterDlg
CTestFilterDlg	TestFilterDlg.h	/^class CTestFilterDlg : public CTrDialog$/;"	c
CTrDialog	TrDialogs.h	/^	CTrDialog() : CDialog() {}$/;"	f	class:CTrDialog
CTrDialog	TrDialogs.h	/^	explicit CTrDialog(LPCTSTR lpszTemplateName, CWnd *pParentWnd = nullptr) : CDialog(lpszTemplate/;"	f	class:CTrDialog
CTrDialog	TrDialogs.h	/^	explicit CTrDialog(UINT nIDTemplate, CWnd *pParent = nullptr) : CDialog(nIDTemplate, pParent) {/;"	f	class:CTrDialog
CTrDialog	TrDialogs.h	/^class CTrDialog : public CDialog, public DlgUtils<CTrDialog>$/;"	c
CTrDialogBar	TrDialogs.h	/^class CTrDialogBar : public CDialogBar, public DlgUtils<CTrDialogBar>$/;"	c
CTrPropertyPage	TrDialogs.h	/^	CTrPropertyPage() : CPropertyPage() {}$/;"	f	class:CTrPropertyPage
CTrPropertyPage	TrDialogs.h	/^	explicit CTrPropertyPage(LPCTSTR lpszTemplateName, UINT nIDCaption = 0, DWORD dwSize = sizeof(P/;"	f	class:CTrPropertyPage
CTrPropertyPage	TrDialogs.h	/^	explicit CTrPropertyPage(UINT nIDTemplate, UINT nIDCaption = 0, DWORD dwSize = sizeof(PROPSHEET/;"	f	class:CTrPropertyPage
CTrPropertyPage	TrDialogs.h	/^class CTrPropertyPage : public CPropertyPage, public DlgUtils<CTrPropertyPage>$/;"	c
CVersionInfo	Common/VersionInfo.cpp	/^CVersionInfo::CVersionInfo(HINSTANCE hModule)$/;"	f	class:CVersionInfo
CVersionInfo	Common/VersionInfo.cpp	/^CVersionInfo::CVersionInfo(LPCTSTR szFileToVersion \/* = nullptr*\/, $/;"	f	class:CVersionInfo
CVersionInfo	Common/VersionInfo.cpp	/^CVersionInfo::CVersionInfo(LPCTSTR szFileToVersion, $/;"	f	class:CVersionInfo
CVersionInfo	Common/VersionInfo.cpp	/^CVersionInfo::CVersionInfo(WORD wLanguage)$/;"	f	class:CVersionInfo
CVersionInfo	Common/VersionInfo.cpp	/^CVersionInfo::CVersionInfo(bool bVersionOnly)$/;"	f	class:CVersionInfo
CVersionInfo	Common/VersionInfo.h	/^class CVersionInfo$/;"	c
CWinMergeProfile	StdAfx.h	/^	explicit CWinMergeProfile(LPCTSTR pFuncName) {$/;"	f	class:CWinMergeProfile
CWinMergeProfile	StdAfx.h	/^class CWinMergeProfile$/;"	c
CX_BORDER	Common/MessageBoxDialog.cpp	/^#define CX_BORDER	/;"	d	file:
CX_BUTTON	Common/MessageBoxDialog.cpp	/^#define CX_BUTTON	/;"	d	file:
CX_BUTTON_BORDER	Common/MessageBoxDialog.cpp	/^#define CX_BUTTON_BORDER	/;"	d	file:
CX_BUTTON_SPACE	Common/MessageBoxDialog.cpp	/^#define CX_BUTTON_SPACE	/;"	d	file:
CX_CHECKBOX_ADDON	Common/MessageBoxDialog.cpp	/^#define CX_CHECKBOX_ADDON	/;"	d	file:
CX_DLGUNIT_BASE	Common/MessageBoxDialog.cpp	/^#define CX_DLGUNIT_BASE	/;"	d	file:
CY_BORDER	Common/MessageBoxDialog.cpp	/^#define CY_BORDER	/;"	d	file:
CY_BUTTON	Common/MessageBoxDialog.cpp	/^#define CY_BUTTON	/;"	d	file:
CY_BUTTON_BORDER	Common/MessageBoxDialog.cpp	/^#define CY_BUTTON_BORDER	/;"	d	file:
CY_DLGUNIT_BASE	Common/MessageBoxDialog.cpp	/^#define CY_DLGUNIT_BASE	/;"	d	file:
CalcDynamicLayout	Common/sizecbar.cpp	/^CSize CSizingControlBar::CalcDynamicLayout(int nLength, DWORD dwMode)$/;"	f	class:CSizingControlBar	typeref:typename:CSize
CalcFixedLayout	Common/MDITabBar.cpp	/^CSize CMDITabBar::CalcFixedLayout(BOOL bStretch, BOOL bHorz)$/;"	f	class:CMDITabBar	typeref:typename:CSize
CalcFixedLayout	Common/sizecbar.cpp	/^CSize CSizingControlBar::CalcFixedLayout(BOOL bStretch, BOOL bHorz)$/;"	f	class:CSizingControlBar	typeref:typename:CSize
CalcFixedLayout	EditorFilepathBar.cpp	/^CSize CEditorFilePathBar::CalcFixedLayout(BOOL bStretch, BOOL bHorz)$/;"	f	class:CEditorFilePathBar	typeref:typename:CSize
CalculateBars	LocationView.cpp	/^void CLocationView::CalculateBars()$/;"	f	class:CLocationView	typeref:typename:void
CalculateBlocks	LocationView.cpp	/^void CLocationView::CalculateBlocks()$/;"	f	class:CLocationView	typeref:typename:void
CalculateBlocksPixel	LocationView.cpp	/^void CLocationView::CalculateBlocksPixel(int nBlockStart, int nBlockEnd,$/;"	f	class:CLocationView	typeref:typename:void
Call	Common/MyCom.h	/^	HRESULT Call(IDispatch *pdisp, DISPPARAMS &dp, WORD wFlags = DISPATCH_METHOD, VARIANT *pret = 0/;"	f	class:CMyDispId	typeref:typename:HRESULT
CanUndo	MergeDoc.h	/^	bool CanUndo() const$/;"	f	class:CMergeDoc	typeref:typename:bool
ChangeFile	ImgMergeFrm.cpp	/^void CImgMergeFrame::ChangeFile(int nBuffer, const String& path)$/;"	f	class:CImgMergeFrame	typeref:typename:void
ChangeFile	MergeDoc.cpp	/^void CMergeDoc::ChangeFile(int nBuffer, const String& path)$/;"	f	class:CMergeDoc	typeref:typename:void
ChangeType	Common/MyCom.h	/^	HRESULT ChangeType(VARTYPE _vt)$/;"	f	class:CMyVariant	typeref:typename:HRESULT
Check	DiffItem.h	/^	static bool Check(unsigned code, unsigned mask, unsigned result) { return ((code & mask) == res/;"	f	struct:DIFFCODE	typeref:typename:bool
CheckAllowUpwardDirectory	DirActions.cpp	/^CheckAllowUpwardDirectory(const CDiffContext& ctxt, const CTempPathContext *pTempPathContext, Pa/;"	f	typeref:typename:AllowUpwardDirectory::ReturnCode
CheckCompare	DiffItem.h	/^	static bool CheckCompare(unsigned code, unsigned result) { return Check(code, DIFFCODE::COMPARE/;"	f	struct:DIFFCODE	typeref:typename:bool
CheckContextMenu	DirView.cpp	/^static void NTAPI CheckContextMenu(BCMenu *pPopup, UINT uIDItem, BOOL bCheck)$/;"	f	typeref:typename:void NTAPI	file:
CheckDeferredChildren	Common/CMoveConstraint.cpp	/^CMoveConstraint::CheckDeferredChildren()$/;"	f	class:prdlg::CMoveConstraint	typeref:typename:void
CheckFileChanged	HexMergeDoc.cpp	/^void CHexMergeDoc::CheckFileChanged(void)$/;"	f	class:CHexMergeDoc	typeref:typename:void
CheckFileChanged	ImgMergeFrm.cpp	/^void CImgMergeFrame::CheckFileChanged(void)$/;"	f	class:CImgMergeFrame	typeref:typename:void
CheckFileChanged	MergeDoc.cpp	/^void CMergeDoc::CheckFileChanged(void)$/;"	f	class:CMergeDoc	typeref:typename:void
CheckFileForVersion	DiffContext.cpp	/^static bool CheckFileForVersion(const String& ext)$/;"	f	typeref:typename:bool	file:
CheckFilter	DiffItem.h	/^	static bool CheckFilter(unsigned code, unsigned result) { return Check(code, DIFFCODE::FILTERFL/;"	f	struct:DIFFCODE	typeref:typename:bool
CheckForInvalidUtf8	Common/unicoder.cpp	/^bool CheckForInvalidUtf8(const char *pBuffer, size_t size)$/;"	f	namespace:ucr	typeref:typename:bool
CheckSide	DiffItem.h	/^	static bool CheckSide(unsigned code, unsigned result) { return Check(code, DIFFCODE::SIDEFLAGS,/;"	f	struct:DIFFCODE	typeref:typename:bool
CheckText	TestFilterDlg.cpp	/^bool CTestFilterDlg::CheckText(String text) const$/;"	f	class:CTestFilterDlg	typeref:typename:bool
CleanupAfterPlugins	FolderCmp.cpp	/^void FolderCmp::CleanupAfterPlugins(PluginsContext *plugCtxt)$/;"	f	class:FolderCmp	typeref:typename:void
CleanupWMtemp	TempFile.cpp	/^void CleanupWMtemp()$/;"	f	typeref:typename:void
CleanupWMtempfolder	TempFile.cpp	/^static bool CleanupWMtempfolder(const vector <int>& processIDs)$/;"	f	typeref:typename:bool	file:
Clear	Common/MyCom.h	/^	void Clear()$/;"	f	class:CMyVariant	typeref:typename:void
Clear	Common/UniFile.cpp	/^void UniLocalFile::Clear()$/;"	f	class:UniLocalFile	typeref:typename:void
Clear	Common/varprop.cpp	/^void VariantValue::Clear()$/;"	f	class:varprop::VariantValue	typeref:typename:void
Clear	DiffList.cpp	/^void DiffList::Clear()$/;"	f	class:DiffList	typeref:typename:void
Clear	FileTextEncoding.cpp	/^void FileTextEncoding::Clear()$/;"	f	class:FileTextEncoding	typeref:typename:void
Clear	FileVersion.h	/^inline void FileVersion::Clear()$/;"	f	class:FileVersion	typeref:typename:void
Clear	MergeDoc.cpp	/^	void Clear() $/;"	f	class:RescanSuppress	typeref:typename:void	file:
Clear	MovedLines.cpp	/^void MovedLines::Clear()$/;"	f	class:MovedLines	typeref:typename:void
ClearColumnOrders	DirViewColItems.cpp	/^void DirViewColItems::ClearColumnOrders()$/;"	f	class:DirViewColItems	typeref:typename:void
ClearError	Common/UniFile.h	/^inline void UniFile::UniError::ClearError()$/;"	f	class:UniFile::UniError	typeref:typename:void
ClearFilterList	CompareEngines/Wrap_DiffUtils.cpp	/^void DiffUtils::ClearFilterList()$/;"	f	class:CompareEngines::DiffUtils	typeref:typename:void
ClearItems	PatchDlg.h	/^inline void CPatchDlg::ClearItems()$/;"	f	class:CPatchDlg	typeref:typename:void
ClearMostData	Common/CMoveConstraint.cpp	/^CMoveConstraint::ClearMostData()$/;"	f	class:prdlg::CMoveConstraint	typeref:typename:void
ClearPartial	DiffFileInfo.cpp	/^void DiffFileInfo::ClearPartial()$/;"	f	class:DiffFileInfo	typeref:typename:void
ClearPartial	DirItem.cpp	/^void DirItem::ClearPartial()$/;"	f	class:DirItem	typeref:typename:void
ClearStat	DirCompProgressBar.cpp	/^void DirCompProgressBar::ClearStat()$/;"	f	class:DirCompProgressBar	typeref:typename:void
ClearStatusbarItemCount	MainFrm.cpp	/^void CMainFrame::ClearStatusbarItemCount()$/;"	f	class:CMainFrame	typeref:typename:void
ClearSyncPoints	MergeDoc.cpp	/^void CMergeDoc::ClearSyncPoints()$/;"	f	class:CMergeDoc	typeref:typename:void
ClearTempfolder	TempFile.cpp	/^bool ClearTempfolder(const String &pathName)$/;"	f	typeref:typename:bool
ClearUndoRecords	HexMergeView.cpp	/^void CHexMergeView::ClearUndoRecords()$/;"	f	class:CHexMergeView	typeref:typename:void
ClearWordDiffCache	MergeDocLineDiffs.cpp	/^void CMergeDoc::ClearWordDiffCache(int nDiff\/* = -1 *\/)$/;"	f	class:CMergeDoc	typeref:typename:void
CloneFrom	LineFiltersList.cpp	/^void LineFiltersList::CloneFrom(const LineFiltersList *list)$/;"	f	class:LineFiltersList	typeref:typename:void
Close	Common/RegKey.cpp	/^void CRegKeyEx::Close()$/;"	f	class:CRegKeyEx	typeref:typename:void
Close	Common/UniFile.cpp	/^void UniMemFile::Close()$/;"	f	class:UniMemFile	typeref:typename:void
Close	Common/UniFile.cpp	/^void UniStdioFile::Close()$/;"	f	class:UniStdioFile	typeref:typename:void
Close	DiffFileData.h	/^	void Close() { Reset(); }$/;"	f	struct:DiffFileData	typeref:typename:void
Close	UniMarkdownFile.cpp	/^void UniMarkdownFile::Close()$/;"	f	class:UniMarkdownFile	typeref:typename:void
Close	stringdiffs.cpp	/^void Close()$/;"	f	namespace:strdiff	typeref:typename:void
CloseFile	ConfigLog.cpp	/^CConfigLog::CloseFile()$/;"	f	class:CConfigLog	typeref:typename:void
CloseHandles	Common/RegOptionsMgr.cpp	/^void CRegOptionsMgr::CloseHandles()$/;"	f	class:CRegOptionsMgr	typeref:typename:void
CloseMergeDocs	DirDoc.cpp	/^bool CDirDoc::CloseMergeDocs()$/;"	f	class:CDirDoc	typeref:typename:bool
CloseNow	HexMergeDoc.cpp	/^bool CHexMergeDoc::CloseNow()$/;"	f	class:CHexMergeDoc	typeref:typename:bool
CloseNow	HexMergeFrm.cpp	/^void CHexMergeFrame::CloseNow()$/;"	f	class:CHexMergeFrame	typeref:typename:void
CloseNow	ImgMergeFrm.cpp	/^bool CImgMergeFrame::CloseNow()$/;"	f	class:CImgMergeFrame	typeref:typename:bool
CloseNow	MergeDoc.cpp	/^bool CMergeDoc::CloseNow()$/;"	f	class:CMergeDoc	typeref:typename:bool
CloseNow	MergeEditFrm.cpp	/^void CMergeEditFrame::CloseNow()$/;"	f	class:CMergeEditFrame	typeref:typename:void
CoCreateInstance	Common/MyCom.h	/^  HRESULT CoCreateInstance(REFCLSID rclsid, REFIID iid, LPUNKNOWN pUnkOuter = NULL, DWORD dwClsC/;"	f	class:CMyComPtr	typeref:typename:HRESULT
CodePageInfo	Common/ExConverter.h	/^struct CodePageInfo$/;"	s
CodeToGroupMap	MovedBlocks.cpp	/^class CodeToGroupMap$/;"	c	file:
ColAlign	DirViewColItems.h	/^	enum ColAlign$/;"	g	struct:DirColInfo
ColAttrGet	DirViewColItems.cpp	/^static String ColAttrGet(const CDiffContext *, const void *p)$/;"	f	typeref:typename:String	file:
ColAttrSort	DirViewColItems.cpp	/^static int ColAttrSort(const CDiffContext *, const void *p, const void *q)$/;"	f	typeref:typename:int	file:
ColBinGet	DirViewColItems.cpp	/^static String ColBinGet(const CDiffContext *, const void *p)$/;"	f	typeref:typename:String	file:
ColBinSort	DirViewColItems.cpp	/^static int ColBinSort(const CDiffContext *, const void *p, const void *q)$/;"	f	typeref:typename:int	file:
ColDiffsGet	DirViewColItems.cpp	/^static String ColDiffsGet(const CDiffContext *, const void *p)$/;"	f	typeref:typename:String	file:
ColDiffsSort	DirViewColItems.cpp	/^static int ColDiffsSort(const CDiffContext *, const void *p, const void *q)$/;"	f	typeref:typename:int	file:
ColEncodingGet	DirViewColItems.cpp	/^static String ColEncodingGet(const CDiffContext *, const void *p)$/;"	f	typeref:typename:String	file:
ColEncodingSort	DirViewColItems.cpp	/^static int ColEncodingSort(const CDiffContext *, const void *p, const void *q)$/;"	f	typeref:typename:int	file:
ColExtGet	DirViewColItems.cpp	/^static String ColExtGet(const CDiffContext *, const void *p) \/\/sfilename$/;"	f	typeref:typename:String	file:
ColExtSort	DirViewColItems.cpp	/^static int ColExtSort(const CDiffContext *pCtxt, const void *p, const void *q)$/;"	f	typeref:typename:int	file:
ColFileNameGet	DirViewColItems.cpp	/^static Type ColFileNameGet(const CDiffContext *, const void *p) \/\/sfilename$/;"	f	typeref:typename:Type	file:
ColFileNameSort	DirViewColItems.cpp	/^static int ColFileNameSort(const CDiffContext *pCtxt, const void *p, const void *q)$/;"	f	typeref:typename:int	file:
ColGetFncPtrType	DirViewColItems.h	/^typedef String (*ColGetFncPtrType)(const CDiffContext *, const void *);$/;"	t	typeref:typename:String (*)(const CDiffContext *,const void *)
ColGetTextToDisplay	DirViewColItems.cpp	/^DirViewColItems::ColGetTextToDisplay(const CDiffContext *pCtxt, int col,$/;"	f	class:DirViewColItems	typeref:typename:String
ColLEOLTypeGet	DirViewColItems.cpp	/^static String ColLEOLTypeGet(const CDiffContext * pCtxt, const void *p)$/;"	f	typeref:typename:String	file:
ColLogToPhys	DirViewColItems.h	/^	int ColLogToPhys(int i) const { return m_colorder[i]; } \/**< -1 if not displayed *\/$/;"	f	class:DirViewColItems	typeref:typename:int
ColLversionGet	DirViewColItems.cpp	/^static String ColLversionGet(const CDiffContext * pCtxt, const void *p)$/;"	f	typeref:typename:String	file:
ColLversionSort	DirViewColItems.cpp	/^static int ColLversionSort(const CDiffContext *pCtxt, const void *p, const void *q)$/;"	f	typeref:typename:int	file:
ColMEOLTypeGet	DirViewColItems.cpp	/^static String ColMEOLTypeGet(const CDiffContext * pCtxt, const void *p)$/;"	f	typeref:typename:String	file:
ColMversionGet	DirViewColItems.cpp	/^static String ColMversionGet(const CDiffContext * pCtxt, const void *p)$/;"	f	typeref:typename:String	file:
ColMversionSort	DirViewColItems.cpp	/^static int ColMversionSort(const CDiffContext *pCtxt, const void *p, const void *q)$/;"	f	typeref:typename:int	file:
ColNewerGet	DirViewColItems.cpp	/^static String ColNewerGet(const CDiffContext *pCtxt, const void *p)$/;"	f	typeref:typename:String	file:
ColNewerSort	DirViewColItems.cpp	/^static int ColNewerSort(const CDiffContext *pCtxt, const void *p, const void *q)$/;"	f	typeref:typename:int	file:
ColPathGet	DirViewColItems.cpp	/^static String ColPathGet(const CDiffContext *, const void *p)$/;"	f	typeref:typename:String	file:
ColPathSort	DirViewColItems.cpp	/^static int ColPathSort(const CDiffContext *pCtxt, const void *p, const void *q)$/;"	f	typeref:typename:int	file:
ColPhysToLog	DirViewColItems.h	/^	int ColPhysToLog(int i) const { return m_invcolorder[i]; }$/;"	f	class:DirViewColItems	typeref:typename:int
ColREOLTypeGet	DirViewColItems.cpp	/^static String ColREOLTypeGet(const CDiffContext * pCtxt, const void *p)$/;"	f	typeref:typename:String	file:
ColRversionGet	DirViewColItems.cpp	/^static String ColRversionGet(const CDiffContext * pCtxt, const void *p)$/;"	f	typeref:typename:String	file:
ColRversionSort	DirViewColItems.cpp	/^static int ColRversionSort(const CDiffContext *pCtxt, const void *p, const void *q)$/;"	f	typeref:typename:int	file:
ColSizeGet	DirViewColItems.cpp	/^static String ColSizeGet(const CDiffContext *, const void *p)$/;"	f	typeref:typename:String	file:
ColSizeShortGet	DirViewColItems.cpp	/^static String ColSizeShortGet(const CDiffContext *, const void *p)$/;"	f	typeref:typename:String	file:
ColSizeSort	DirViewColItems.cpp	/^static int ColSizeSort(const CDiffContext *, const void *p, const void *q)$/;"	f	typeref:typename:int	file:
ColSort	DirViewColItems.cpp	/^DirViewColItems::ColSort(const CDiffContext *pCtxt, int col, const DIFFITEM &ldi,$/;"	f	class:DirViewColItems	typeref:typename:int
ColSortFncPtrType	DirViewColItems.h	/^typedef int (*ColSortFncPtrType)(const CDiffContext *, const void *, const void *);$/;"	t	typeref:typename:int (*)(const CDiffContext *,const void *,const void *)
ColStatusAbbrGet	DirViewColItems.cpp	/^static String ColStatusAbbrGet(const CDiffContext *pCtxt, const void *p)$/;"	f	typeref:typename:String	file:
ColStatusGet	DirViewColItems.cpp	/^static String ColStatusGet(const CDiffContext *pCtxt, const void *p)$/;"	f	typeref:typename:String	file:
ColStatusSort	DirViewColItems.cpp	/^static int ColStatusSort(const CDiffContext *, const void *p, const void *q)$/;"	f	typeref:typename:int	file:
ColTimeGet	DirViewColItems.cpp	/^static String ColTimeGet(const CDiffContext *, const void *p)$/;"	f	typeref:typename:String	file:
ColTimeSort	DirViewColItems.cpp	/^static int ColTimeSort(const CDiffContext *, const void *p, const void *q)$/;"	f	typeref:typename:int	file:
CollapseAllSubdirs	DirActions.cpp	/^void CollapseAllSubdirs(CDiffContext& ctxt)$/;"	f	typeref:typename:void
CollapseSubdir	DirView.cpp	/^void CDirView::CollapseSubdir(int sel)$/;"	f	class:CDirView	typeref:typename:void
CollapseWhitespace	UniMarkdownFile.cpp	/^static void CollapseWhitespace(String &line)$/;"	f	typeref:typename:void	file:
Collate	FileTextEncoding.cpp	/^int FileTextEncoding::Collate(const FileTextEncoding & fte1, const FileTextEncoding & fte2)$/;"	f	class:FileTextEncoding	typeref:typename:int
ColorIndices	PropSyntaxColors.cpp	/^static const unsigned ColorIndices[] = {$/;"	v	typeref:typename:const unsigned[]	file:
ColorScheme	PropColors.cpp	/^	struct ColorScheme {$/;"	s	function:PropMergeColors::SetColorScheme	file:
Colors	heksedit.h	/^	struct Colors$/;"	s	class:IHexEditorWindow
ColumnArray	DirColsDlg.h	/^	typedef std::vector<column> ColumnArray;$/;"	t	class:CDirColsDlg	typeref:typename:std::vector<column>
CommandLineHelpLocation	Merge.cpp	/^static const TCHAR CommandLineHelpLocation[] = _T("::\/htmlhelp\/Command_line.html");$/;"	v	typeref:typename:const TCHAR[]	file:
Comp02Functor	DiffWrapper.cpp	/^	Comp02Functor(const file_data * inf10, const file_data * inf12) :$/;"	f	struct:Comp02Functor	file:
Comp02Functor	DiffWrapper.cpp	/^struct Comp02Functor$/;"	s	file:
Comp02Functor	stringdiffs.cpp	/^	Comp02Functor(const String *strs, bool case_sensitive) : $/;"	f	struct:strdiff::Comp02Functor	file:
Comp02Functor	stringdiffs.cpp	/^struct Comp02Functor$/;"	s	namespace:strdiff	file:
Compare	LineFiltersList.cpp	/^bool LineFiltersList::Compare(const LineFiltersList *list) const$/;"	f	class:LineFiltersList	typeref:typename:bool
CompareBuffers	CompareEngines/ByteComparator.cpp	/^ByteComparator::COMP_RESULT ByteComparator::CompareBuffers($/;"	f	class:CompareEngines::ByteComparator	typeref:typename:ByteComparator::COMP_RESULT
CompareByCodePage	charsets.c	/^static int CompareByCodePage(const void *elem1, const void *elem2)$/;"	f	typeref:typename:int	file:
CompareByName	charsets.c	/^static int CompareByName(const void *elem1, const void *elem2)$/;"	f	typeref:typename:int	file:
CompareColumnsByLogicalOrder	DirColsDlg.cpp	/^bool CDirColsDlg::CompareColumnsByLogicalOrder( const column & el1, const column & el2 )$/;"	f	class:CDirColsDlg	typeref:typename:bool
CompareDiffItem	DirScan.cpp	/^static void CompareDiffItem(FolderCmp &fc, DIFFITEM &di)$/;"	f	typeref:typename:void	file:
CompareDirectories	DiffThread.cpp	/^unsigned CDiffThread::CompareDirectories()$/;"	f	class:CDiffThread	typeref:typename:unsigned
CompareEngines	CompareEngines/BinaryCompare.cpp	/^namespace CompareEngines$/;"	n	file:
CompareEngines	CompareEngines/BinaryCompare.h	/^namespace CompareEngines$/;"	n
CompareEngines	CompareEngines/ByteComparator.cpp	/^namespace CompareEngines$/;"	n	file:
CompareEngines	CompareEngines/ByteComparator.h	/^namespace CompareEngines$/;"	n
CompareEngines	CompareEngines/ByteCompare.cpp	/^namespace CompareEngines$/;"	n	file:
CompareEngines	CompareEngines/ByteCompare.h	/^namespace CompareEngines$/;"	n
CompareEngines	CompareEngines/TimeSizeCompare.cpp	/^namespace CompareEngines$/;"	n	file:
CompareEngines	CompareEngines/TimeSizeCompare.h	/^namespace CompareEngines$/;"	n
CompareEngines	CompareEngines/Wrap_DiffUtils.cpp	/^namespace CompareEngines$/;"	n	file:
CompareEngines	CompareEngines/Wrap_DiffUtils.h	/^namespace CompareEngines$/;"	n
CompareFiles	CompareEngines/BinaryCompare.cpp	/^int BinaryCompare::CompareFiles(const PathContext& files, const DIFFITEM &di) const$/;"	f	class:CompareEngines::BinaryCompare	typeref:typename:int
CompareFiles	CompareEngines/ByteCompare.cpp	/^int ByteCompare::CompareFiles(FileLocation *location)$/;"	f	class:CompareEngines::ByteCompare	typeref:typename:int
CompareFiles	CompareEngines/TimeSizeCompare.cpp	/^int TimeSizeCompare::CompareFiles(int compMethod, int nfiles, const DIFFITEM &di) const$/;"	f	class:CompareEngines::TimeSizeCompare	typeref:typename:int
CompareFunc	DirView.cpp	/^int CALLBACK CDirView::CompareState::CompareFunc(LPARAM lParam1, LPARAM lParam2, LPARAM lParamSo/;"	f	class:CDirView::CompareState	typeref:typename:int CALLBACK
CompareItems	DirScan.cpp	/^static int CompareItems(NotificationQueue& queue, DiffFuncStruct *myStruct, DIFFITEM *parentdiff/;"	f	typeref:typename:int	file:
CompareOptions	CompareOptions.cpp	/^CompareOptions::CompareOptions()$/;"	f	class:CompareOptions
CompareOptions	CompareOptions.cpp	/^CompareOptions::CompareOptions(const CompareOptions & options)$/;"	f	class:CompareOptions
CompareOptions	CompareOptions.h	/^class CompareOptions$/;"	c
CompareReady	DirDoc.cpp	/^void CDirDoc::CompareReady()$/;"	f	class:CDirDoc	typeref:typename:void
CompareRequestedItems	DirScan.cpp	/^static int CompareRequestedItems(DiffFuncStruct *myStruct, DIFFITEM *parentdiffpos)$/;"	f	typeref:typename:int	file:
CompareState	DirView.cpp	/^CDirView::CompareState::CompareState(const CDiffContext *pCtxt, const DirViewColItems *pColItems/;"	f	class:CDirView::CompareState
CompareState	DirView.h	/^	class CompareState$/;"	c	class:CDirView
CompareStatisticsDlg	CompareStatisticsDlg.h	/^class CompareStatisticsDlg : public CTrDialog$/;"	c
CompareStats	CompareStats.cpp	/^CompareStats::CompareStats(int nDirs)$/;"	f	class:CompareStats
CompareStats	CompareStats.h	/^class CompareStats$/;"	c
CompressArchive	7zCommon.cpp	/^void DirItemEnumerator::CompressArchive(LPCTSTR path)$/;"	f	class:DirItemEnumerator	typeref:typename:void
CompressArchive	Merge7zFormatMergePluginImpl.cpp	/^HRESULT Merge7zFormatMergePluginImpl::CompressArchive(HWND, LPCTSTR path, Merge7z::DirItemEnumer/;"	f	class:Merge7zFormatMergePluginImpl	typeref:typename:HRESULT
CompressArchive	Merge7zFormatShellImpl.cpp	/^HRESULT Merge7zFormatShellImpl::CompressArchive(HWND, LPCTSTR path, Merge7z::DirItemEnumerator */;"	f	class:Merge7zFormatShellImpl	typeref:typename:HRESULT
ComputeApparentLine	GhostTextBuffer.cpp	/^int CGhostTextBuffer::ComputeApparentLine(int nRealLine) const$/;"	f	class:CGhostTextBuffer	typeref:typename:int
ComputeApparentLine	GhostTextBuffer.cpp	/^int CGhostTextBuffer::ComputeApparentLine(int nRealLine, int decToReal) const$/;"	f	class:CGhostTextBuffer	typeref:typename:int
ComputeApparentLine	GhostTextView.cpp	/^int CGhostTextView::ComputeApparentLine (int nRealLine) const$/;"	f	class:CGhostTextView	typeref:typename:int
ComputeByteDiff	stringdiffs.cpp	/^stringdiffs::ComputeByteDiff(const String & str1, const String & str2, $/;"	f	class:strdiff::stringdiffs	typeref:typename:void
ComputeRealLine	GhostTextBuffer.cpp	/^int CGhostTextBuffer::ComputeRealLine(int nApparentLine) const$/;"	f	class:CGhostTextBuffer	typeref:typename:int
ComputeRealLine	GhostTextView.cpp	/^int CGhostTextView::ComputeRealLine (int nApparentLine) const$/;"	f	class:CGhostTextView	typeref:typename:int
ComputeRealLineAndGhostAdjustment	GhostTextBuffer.cpp	/^int CGhostTextBuffer::ComputeRealLineAndGhostAdjustment(int nApparentLine,$/;"	f	class:CGhostTextBuffer	typeref:typename:int
ComputeWordDiffs	stringdiffs.cpp	/^ComputeWordDiffs(const String& str1, const String& str2,$/;"	f	namespace:strdiff	typeref:typename:std::vector<wdiff>
ComputeWordDiffs	stringdiffs.cpp	/^ComputeWordDiffs(int nFiles, const String str[3],$/;"	f	namespace:strdiff	typeref:typename:std::vector<wdiff>
Computelinediff	MergeDocLineDiffs.cpp	/^void CMergeDoc::Computelinediff(CMergeEditView *pView, CRect rc[], bool bReversed)$/;"	f	class:CMergeDoc	typeref:typename:void
ConcatPath	paths.cpp	/^String ConcatPath(const String & path, const String & subpath)$/;"	f	namespace:paths	typeref:typename:String
ConfirmActionList	DirActions.cpp	/^void ConfirmActionList(const CDiffContext& ctxt, const FileActionScript & actionList)$/;"	f	typeref:typename:void
ConfirmAndPerformActions	DirView.cpp	/^void CDirView::ConfirmAndPerformActions(FileActionScript & actionList)$/;"	f	class:CDirView	typeref:typename:void
ConfirmFolderCopyDlg	ConfirmFolderCopyDlg.h	/^class ConfirmFolderCopyDlg : public CTrDialog$/;"	c
ConfirmationNeededException	DirActions.h	/^struct ConfirmationNeededException$/;"	s
Conflict	MergeDoc.cpp	/^enum MergeResult { NoMergeNeeded, Merged, Conflict };$/;"	e	enum:MergeResult	file:
Constrain	Common/CMoveConstraint.cpp	/^Constrain(CWnd * pWnd, double fLeftX, double fExpandX, double fAboveY, double fExpandY)$/;"	f	class:prdlg::CMoveConstraint	typeref:typename:void
Constrain	Common/CMoveConstraint.cpp	/^Constrain(HWND hwndChild, double fLeftX, double fExpandX, double fAboveY, double fExpandY)$/;"	f	class:prdlg::CMoveConstraint	typeref:typename:bool
ConstrainItem	Common/CMoveConstraint.cpp	/^ConstrainItem(int nId, double fLeftX, double fExpandX, double fAboveY, double fExpandY)$/;"	f	class:prdlg::CMoveConstraint	typeref:typename:bool
ConstrainNonChildren	Common/CMoveConstraint.h	/^	void ConstrainNonChildren() { m_bConstrainNonChildren = true; }$/;"	f	class:prdlg::CMoveConstraint	typeref:typename:void
Constraint	Common/CMoveConstraint.cpp	/^CMoveConstraint::Constraint::Constraint()$/;"	f	class:prdlg::CMoveConstraint::Constraint
Constraint	Common/CMoveConstraint.cpp	/^CMoveConstraint::Constraint::Constraint(double fLeftX, double fExpandX, double fAboveY, double f/;"	f	class:prdlg::CMoveConstraint::Constraint
Constraint	Common/CMoveConstraint.h	/^	struct Constraint$/;"	s	class:prdlg::CMoveConstraint
ConstraintList	Common/CMoveConstraint.h	/^	typedef CList<Constraint, Constraint &> ConstraintList;$/;"	t	class:prdlg::CMoveConstraint	typeref:typename:CList<Constraint,Constraint &>
ConstraintWndProc	Common/CMoveConstraint.cpp	/^CMoveConstraint::ConstraintWndProc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam)$/;"	f	class:prdlg::CMoveConstraint	typeref:typename:LRESULT CALLBACK
ConstructSignificantChain	DiffList.cpp	/^void DiffList::ConstructSignificantChain()$/;"	f	class:DiffList	typeref:typename:void
ContentsChangedException	DirActions.cpp	/^ContentsChangedException::ContentsChangedException(const String& failpath)$/;"	f	class:ContentsChangedException
ContentsChangedException	DirActions.h	/^struct ContentsChangedException$/;"	s
Continue	DiffThread.h	/^	void Continue() { m_bPaused = false; }$/;"	f	class:CDiffThread	typeref:typename:void
ContinueCurrentScan	DirDoc.cpp	/^void CDirDoc::ContinueCurrentScan()$/;"	f	class:CDirDoc	typeref:typename:void
ContributorsPath	Constants.h	/^const TCHAR ContributorsPath[] = _T("contributors.txt");$/;"	v	typeref:typename:const TCHAR[]
ConvertFilter	FileOrFolderSelect.cpp	/^static void ConvertFilter(LPTSTR filterStr)$/;"	f	typeref:typename:void	file:
ConvertInteger	Common/OptionsMgr.cpp	/^bool COption::ConvertInteger(varprop::VariantValue & value, varprop::VT_TYPE nType)$/;"	f	class:COption	typeref:typename:bool
ConvertString	Common/OptionsMgr.cpp	/^bool COption::ConvertString(varprop::VariantValue & value, varprop::VT_TYPE nType)$/;"	f	class:COption	typeref:typename:bool
ConvertToUTF16ForClipboard	DirCmpReport.cpp	/^static HGLOBAL ConvertToUTF16ForClipboard(HGLOBAL hMem, int codepage)$/;"	f	typeref:typename:HGLOBAL	file:
ConvertType	Common/OptionsMgr.cpp	/^bool COption::ConvertType(varprop::VariantValue & value, varprop::VT_TYPE nType)$/;"	f	class:COption	typeref:typename:bool
Copy	DirActions.h	/^	FileActionScript *Copy(FileActionScript *pscript, const std::pair<int, const DIFFITEM *>& it) c/;"	f	struct:DirActions	typeref:typename:FileActionScript *
CopyAll	HexMergeView.cpp	/^void CHexMergeView::CopyAll(const CHexMergeView *src, CHexMergeView *dst)$/;"	f	class:CHexMergeView	typeref:typename:void
CopyAllList	MergeDoc.cpp	/^void CMergeDoc::CopyAllList(int srcPane, int dstPane)$/;"	f	class:CMergeDoc	typeref:typename:void
CopyBothPathnames	DirActions.h	/^OutputIterator CopyBothPathnames(const InputIterator& begin, const InputIterator& end, OutputIte/;"	f	typeref:typename:OutputIterator
CopyDiffutilTextStats	DiffWrapper.cpp	/^void CopyDiffutilTextStats(file_data *inf, DiffFileData * diffData)$/;"	f	typeref:typename:void
CopyFileOrFolder	DropHandler.cpp	/^	bool CopyFileOrFolder(const String& src, const String& dst)$/;"	f	namespace:__anonfdfe2aa90111	typeref:typename:bool
CopyFilenames	DirActions.h	/^OutputIterator CopyFilenames(const InputIterator& begin, const InputIterator& end, OutputIterato/;"	f	typeref:typename:OutputIterator
CopyFromLMtoCU	OptionsInit.cpp	/^static void CopyFromLMtoCU(HKEY lmKey, HKEY cuKey, LPCTSTR valname)$/;"	f	typeref:typename:void	file:
CopyHKLMValues	OptionsInit.cpp	/^static void CopyHKLMValues()$/;"	f	typeref:typename:void	file:
CopyItem	DirActions.h	/^	FileActionScript *CopyItem(FileActionScript *pscript, const std::pair<int, const DIFFITEM *>& i/;"	f	struct:DirActions	typeref:typename:FileActionScript *
CopyMultipleList	MergeDoc.cpp	/^void CMergeDoc::CopyMultipleList(int srcPane, int dstPane, int firstDiff, int lastDiff, int firs/;"	f	class:CMergeDoc	typeref:typename:void
CopyOrMoveItemTo	DirActions.h	/^	FileActionScript *CopyOrMoveItemTo(FileActionScript *pscript, const std::pair<int, const DIFFIT/;"	f	struct:DirActions	typeref:typename:FileActionScript *
CopyPathnames	DirActions.h	/^OutputIterator CopyPathnames(const InputIterator& begin, const InputIterator& end, OutputIterato/;"	f	typeref:typename:OutputIterator
CopyPathnamesForDragAndDrop	DirActions.h	/^OutputIterator CopyPathnamesForDragAndDrop(const InputIterator& begin, const InputIterator& end,/;"	f	typeref:typename:OutputIterator
CopyRectToBitmap	Common/Bitmap.cpp	/^CBitmap *CopyRectToBitmap(CDC *pDC, const CRect & rect)$/;"	f	typeref:typename:CBitmap *
CopyRevisionNumbers	GhostTextBuffer.cpp	/^CopyRevisionNumbers(int nStartLine, int nEndLine) const$/;"	f	class:CGhostTextBuffer	typeref:typename:CDWordArray *
CopySel	HexMergeView.cpp	/^void CHexMergeView::CopySel(const CHexMergeView *src, CHexMergeView *dst)$/;"	f	class:CHexMergeView	typeref:typename:void
CopyTextStats	CompareEngines/ByteCompare.cpp	/^static void CopyTextStats(const FileTextStats * stats, FileTextStats * myTextStats)$/;"	f	namespace:CompareEngines	typeref:typename:void	file:
CopyTextStats	CompareEngines/Wrap_DiffUtils.cpp	/^static void CopyTextStats(const file_data * inf, FileTextStats * myTextStats)$/;"	f	namespace:CompareEngines	typeref:typename:void	file:
CopyTextStats	DiffWrapper.cpp	/^void CopyTextStats(const file_data * inf, FileTextStats * myTextStats)$/;"	f	typeref:typename:void
CopyTo	DirActions.h	/^	FileActionScript *CopyTo(FileActionScript *pscript, const std::pair<int, const DIFFITEM *>& it)/;"	f	struct:DirActions	typeref:typename:FileActionScript *
Count	DirActions.h	/^Counts Count(const InputIterator& begin, const InputIterator& end, const Predicate& pred) $/;"	f	typeref:typename:Counts
Count	DirView.cpp	/^Counts CDirView::Count(DirActions::method_type2 func) const$/;"	f	class:CDirView	typeref:typename:Counts
CountCodepages	DirActions.h	/^IntToIntMap CountCodepages(const InputIterator& begin, const InputIterator& end, const CDiffCont/;"	f	typeref:typename:IntToIntMap
CountEol	GhostTextBuffer.cpp	/^static int CountEol(LPCTSTR pszText, size_t cchText)$/;"	f	typeref:typename:int	file:
CountMethodsInScript	Plugins.cpp	/^int CountMethodsInScript(LPDISPATCH piDispatch)$/;"	f	namespace:plugin	typeref:typename:int
CountPredifferYesNo	DirActions.h	/^std::pair<int, int> CountPredifferYesNo(const InputIterator& begin, const InputIterator& end, co/;"	f	typeref:typename:std::pair<int,int>
CountStringSize	Common/ShellFileOperations.cpp	/^size_t ShellFileOperations::CountStringSize(bool source) const$/;"	f	class:ShellFileOperations	typeref:typename:size_t
Counts	DirActions.h	/^	Counts() : count(0), total(0) {}$/;"	f	struct:Counts
Counts	DirActions.h	/^	Counts(int c, int t): count(c), total(t) {}$/;"	f	struct:Counts
Counts	DirActions.h	/^struct Counts {$/;"	s
CreatDispatchBy32BitProxy	Common/lwdisp.c	/^LPDISPATCH CreatDispatchBy32BitProxy(LPCTSTR source, LPCWSTR progid)$/;"	f	typeref:typename:LPDISPATCH
Create	Common/MDITabBar.cpp	/^BOOL CMDITabBar::Create(CMDIFrameWnd* pMainFrame)$/;"	f	class:CMDITabBar	typeref:typename:BOOL
Create	Common/PropertyPageHost.cpp	/^BOOL CPropertyPageHost::Create(LPRECT lpRect, CWnd* pParent, UINT uCtrlID)$/;"	f	class:CPropertyPageHost	typeref:typename:BOOL
Create	EditorFilepathBar.cpp	/^BOOL CEditorFilePathBar::Create(CWnd* pParentWnd)$/;"	f	class:CEditorFilePathBar	typeref:typename:BOOL
Create	MergeStatusBar.cpp	/^BOOL CMergeStatusBar::Create(CWnd* pParentWnd)$/;"	f	class:CMergeStatusBar	typeref:typename:BOOL
Create	TempFile.cpp	/^String TempFile::Create(const String& prefix, const String& ext)$/;"	f	class:TempFile	typeref:typename:String
Create	TrDialogs.cpp	/^BOOL CTrDialogBar::Create(CWnd* pParentWnd, LPCTSTR lpszTemplateName,$/;"	f	class:CTrDialogBar	typeref:typename:BOOL
Create	TrDialogs.cpp	/^BOOL CTrDialogBar::Create(CWnd* pParentWnd, UINT nIDTemplate,$/;"	f	class:CTrDialogBar	typeref:typename:BOOL
CreateBackup	Merge.cpp	/^bool CMergeApp::CreateBackup(bool bFolder, const String& pszPath)$/;"	f	class:CMergeApp	typeref:typename:bool
CreateButtonControls	Common/MessageBoxDialog.cpp	/^void CMessageBoxDialog::CreateButtonControls ( )$/;"	f	class:CMessageBoxDialog	typeref:typename:void
CreateCheckboxControl	Common/MessageBoxDialog.cpp	/^void CMessageBoxDialog::CreateCheckboxControl ( )$/;"	f	class:CMessageBoxDialog	typeref:typename:void
CreateCompareOptions	DiffContext.cpp	/^bool CDiffContext::CreateCompareOptions(int compareMethod, const DIFFOPTIONS & options)$/;"	f	class:CDiffContext	typeref:typename:bool
CreateDefaultMarkers	FilterCommentsManager.cpp	/^void FilterCommentsManager::CreateDefaultMarkers()$/;"	f	class:FilterCommentsManager	typeref:typename:void
CreateDispatchBySource	Common/lwdisp.c	/^LPDISPATCH NTAPI CreateDispatchBySource(LPCTSTR source, LPCWSTR progid)$/;"	f	typeref:typename:LPDISPATCH NTAPI
CreateDispatchBySourceAndCLSID	Common/lwdisp.c	/^LPDISPATCH CreateDispatchBySourceAndCLSID(LPCTSTR source, CLSID *pObjectCLSID)$/;"	f	typeref:typename:LPDISPATCH
CreateFoldersPair	DirView.cpp	/^static bool CreateFoldersPair(const PathContext& paths)$/;"	f	typeref:typename:bool	file:
CreateHexWndStatusBar	HexMergeFrm.cpp	/^void CHexMergeFrame::CreateHexWndStatusBar(CStatusBar &wndStatusBar, CWnd *pwndPane)$/;"	f	class:CHexMergeFrame	typeref:typename:void
CreateIconControl	Common/MessageBoxDialog.cpp	/^void CMessageBoxDialog::CreateIconControl ( )$/;"	f	class:CMessageBoxDialog	typeref:typename:void
CreateIfNeeded	paths.cpp	/^bool CreateIfNeeded(const String& szPath)$/;"	f	namespace:paths	typeref:typename:bool
CreateImgWndStatusBar	ImgMergeFrm.cpp	/^void CImgMergeFrame::CreateImgWndStatusBar(CStatusBar &wndStatusBar, CWnd *pwndPane)$/;"	f	class:CImgMergeFrame	typeref:typename:void
CreateMessageControl	Common/MessageBoxDialog.cpp	/^void CMessageBoxDialog::CreateMessageControl ( )$/;"	f	class:CMessageBoxDialog	typeref:typename:void
CreateOperationsScripts	FileActionScript.cpp	/^int FileActionScript::CreateOperationsScripts()$/;"	f	class:FileActionScript	typeref:typename:int
CreatePatch	PatchTool.cpp	/^int CPatchTool::CreatePatch()$/;"	f	class:CPatchTool	typeref:typename:int
CreateScriptReturn	FileActionScript.h	/^enum CreateScriptReturn$/;"	g
CreateShellLink	JumpList.cpp	/^IShellLinkW *CreateShellLink(const std::wstring& app_path, const std::wstring& params, const std/;"	f	namespace:__anonec093aee0111	typeref:typename:IShellLinkW *
CreateToolbar	MainFrm.cpp	/^BOOL CMainFrame::CreateToolbar()$/;"	f	class:CMainFrame	typeref:typename:BOOL
CrossConvert	Common/unicoder.cpp	/^int CrossConvert(const char* src, unsigned srclen, char* dest, unsigned destsize, int cpin, int /;"	f	namespace:ucr	typeref:typename:int
CrossConvertToStringA	Common/unicoder.cpp	/^String CrossConvertToStringA(const char* src, unsigned srclen, int cpin, int cpout, bool * lossy/;"	f	namespace:ucr	typeref:typename:String
CtlColor	FilepathEdit.cpp	/^HBRUSH CFilepathEdit::CtlColor(CDC* pDC, UINT nCtlColor) $/;"	f	class:CFilepathEdit	typeref:typename:HBRUSH
CustomChars	stringdiffs.cpp	/^static bool CustomChars;$/;"	v	namespace:strdiff	typeref:typename:bool	file:
CustomColors	OptionsCustomColors.cpp	/^namespace Options { namespace CustomColors$/;"	n	namespace:Options	file:
CustomColors	OptionsCustomColors.h	/^namespace Options { namespace CustomColors {$/;"	n	namespace:Options
CustomColorsAmount	PropColors.h	/^const int CustomColorsAmount = 16;$/;"	v	typeref:typename:const int
CustomCopy	FilepathEdit.cpp	/^void CFilepathEdit::CustomCopy(size_t iBegin, size_t iEnd \/*=-1*\/)$/;"	f	class:CFilepathEdit	typeref:typename:void
CustomDirColorsAmount	PropDirColors.h	/^const int CustomDirColorsAmount = 16;$/;"	v	typeref:typename:const int
Customize	HexMergeDoc.cpp	/^static void Customize(IHexEditorWindow *pif)$/;"	f	typeref:typename:void	file:
Customize	HexMergeDoc.cpp	/^static void Customize(IHexEditorWindow::Colors *colors)$/;"	f	typeref:typename:void	file:
Customize	HexMergeDoc.cpp	/^static void Customize(IHexEditorWindow::Settings *settings)$/;"	f	typeref:typename:void	file:
DDX_CBString	DDXHelper.h	/^inline void DDX_CBString(CDataExchange* pDX, int nIDC, std::basic_string<TCHAR>& value)$/;"	f	typeref:typename:void
DDX_CBStringExact	DDXHelper.h	/^inline void DDX_CBStringExact(CDataExchange* pDX, int nIDC, std::basic_string<TCHAR>& value)$/;"	f	typeref:typename:void
DDX_Check	DDXHelper.h	/^inline void DDX_Check(CDataExchange* pDX, int nIDC, bool& value)$/;"	f	typeref:typename:void
DDX_Radio	DDXHelper.h	/^inline void DDX_Radio(CDataExchange* pDX, int nIDC, bool& value)$/;"	f	typeref:typename:void
DDX_Text	DDXHelper.h	/^inline void DDX_Text(CDataExchange* pDX, int nIDC, std::basic_string<TCHAR>& value)$/;"	f	typeref:typename:void
DEBUG_NEW	Common/DebugNew.h	/^#define DEBUG_NEW /;"	d
DECL_TLS	diffutils/src/diff.h	/^#define DECL_TLS /;"	d
DECORATE_A	dllpstub.h	/^#define DECORATE_A /;"	d
DECORATE_A	dllpstub.h	/^#define DECORATE_A$/;"	d
DECORATE_AW	dllpstub.h	/^#define DECORATE_AW /;"	d
DECORATE_U	dllpstub.h	/^#define DECORATE_U /;"	d
DECORATE_U	dllpstub.h	/^#define DECORATE_U$/;"	d
DECORATE_W	dllpstub.h	/^#define DECORATE_W /;"	d
DECORATE_W	dllpstub.h	/^#define DECORATE_W$/;"	d
DEF_MAXSIZE	Common/SuperComboBox.cpp	/^#define DEF_MAXSIZE	/;"	d	file:
DIFF	DiffItem.h	/^		COMPAREFLAGS=0x7000U, NOCMP=0x0000U, SAME=0x1000U, DIFF=0x2000U, CMPERR=0x3000U, CMPABORT=0x40/;"	e	enum:DIFFCODE::__anon902ab4a30103
DIFF1STONLY	DiffItem.h	/^		COMPAREFLAGS3WAY=0x18000U, DIFFALL=0x0000U, DIFF1STONLY=0x8000U, DIFF2NDONLY=0x10000U, DIFF3RD/;"	e	enum:DIFFCODE::__anon902ab4a30103
DIFF2NDONLY	DiffItem.h	/^		COMPAREFLAGS3WAY=0x18000U, DIFFALL=0x0000U, DIFF1STONLY=0x8000U, DIFF2NDONLY=0x10000U, DIFF3RD/;"	e	enum:DIFFCODE::__anon902ab4a30103
DIFF3RDONLY	DiffItem.h	/^		COMPAREFLAGS3WAY=0x18000U, DIFFALL=0x0000U, DIFF1STONLY=0x8000U, DIFF2NDONLY=0x10000U, DIFF3RD/;"	e	enum:DIFFCODE::__anon902ab4a30103
DIFFALL	DiffItem.h	/^		COMPAREFLAGS3WAY=0x18000U, DIFFALL=0x0000U, DIFF1STONLY=0x8000U, DIFF2NDONLY=0x10000U, DIFF3RD/;"	e	enum:DIFFCODE::__anon902ab4a30103
DIFFCODE	DiffItem.h	/^	explicit DIFFCODE(unsigned diffcode = 0) : diffcode(diffcode) { }$/;"	f	struct:DIFFCODE
DIFFCODE	DiffItem.h	/^struct DIFFCODE$/;"	s
DIFFIMG_ABORT	DirActions.h	/^	DIFFIMG_ABORT,$/;"	e	enum:__anona878a18b0103
DIFFIMG_BINDIFF	DirActions.h	/^	DIFFIMG_BINDIFF,$/;"	e	enum:__anona878a18b0103
DIFFIMG_BINSAME	DirActions.h	/^	DIFFIMG_BINSAME,$/;"	e	enum:__anona878a18b0103
DIFFIMG_DIFF	DirActions.h	/^	DIFFIMG_DIFF,$/;"	e	enum:__anona878a18b0103
DIFFIMG_DIR	DirActions.h	/^	DIFFIMG_DIR,$/;"	e	enum:__anona878a18b0103
DIFFIMG_DIRDIFF	DirActions.h	/^	DIFFIMG_DIRDIFF,$/;"	e	enum:__anona878a18b0103
DIFFIMG_DIRSAME	DirActions.h	/^	DIFFIMG_DIRSAME,$/;"	e	enum:__anona878a18b0103
DIFFIMG_DIRSKIP	DirActions.h	/^	DIFFIMG_DIRSKIP,$/;"	e	enum:__anona878a18b0103
DIFFIMG_DIRUP	DirActions.h	/^	DIFFIMG_DIRUP,$/;"	e	enum:__anona878a18b0103
DIFFIMG_DIRUP_DISABLE	DirActions.h	/^	DIFFIMG_DIRUP_DISABLE,$/;"	e	enum:__anona878a18b0103
DIFFIMG_ERROR	DirActions.h	/^	DIFFIMG_ERROR,$/;"	e	enum:__anona878a18b0103
DIFFIMG_FILE	DirActions.h	/^	DIFFIMG_FILE,$/;"	e	enum:__anona878a18b0103
DIFFIMG_LDIRMISSING	DirActions.h	/^	DIFFIMG_LDIRMISSING,$/;"	e	enum:__anona878a18b0103
DIFFIMG_LDIRUNIQUE	DirActions.h	/^	DIFFIMG_LDIRUNIQUE,$/;"	e	enum:__anona878a18b0103
DIFFIMG_LMISSING	DirActions.h	/^	DIFFIMG_LMISSING,$/;"	e	enum:__anona878a18b0103
DIFFIMG_LUNIQUE	DirActions.h	/^	DIFFIMG_LUNIQUE,$/;"	e	enum:__anona878a18b0103
DIFFIMG_MDIRMISSING	DirActions.h	/^	DIFFIMG_MDIRMISSING,$/;"	e	enum:__anona878a18b0103
DIFFIMG_MDIRUNIQUE	DirActions.h	/^	DIFFIMG_MDIRUNIQUE,$/;"	e	enum:__anona878a18b0103
DIFFIMG_MMISSING	DirActions.h	/^	DIFFIMG_MMISSING,$/;"	e	enum:__anona878a18b0103
DIFFIMG_MUNIQUE	DirActions.h	/^	DIFFIMG_MUNIQUE,$/;"	e	enum:__anona878a18b0103
DIFFIMG_RDIRMISSING	DirActions.h	/^	DIFFIMG_RDIRMISSING,$/;"	e	enum:__anona878a18b0103
DIFFIMG_RDIRUNIQUE	DirActions.h	/^	DIFFIMG_RDIRUNIQUE,$/;"	e	enum:__anona878a18b0103
DIFFIMG_RMISSING	DirActions.h	/^	DIFFIMG_RMISSING,$/;"	e	enum:__anona878a18b0103
DIFFIMG_RUNIQUE	DirActions.h	/^	DIFFIMG_RUNIQUE,$/;"	e	enum:__anona878a18b0103
DIFFIMG_SAME	DirActions.h	/^	DIFFIMG_SAME,$/;"	e	enum:__anona878a18b0103
DIFFIMG_SKIP	DirActions.h	/^	DIFFIMG_SKIP,$/;"	e	enum:__anona878a18b0103
DIFFIMG_TEXTDIFF	DirActions.h	/^	DIFFIMG_TEXTDIFF,$/;"	e	enum:__anona878a18b0103
DIFFIMG_TEXTSAME	DirActions.h	/^	DIFFIMG_TEXTSAME,$/;"	e	enum:__anona878a18b0103
DIFFITEM	DiffItem.h	/^	DIFFITEM() : parent(nullptr), children(nullptr), Flink(nullptr), Blink(nullptr), $/;"	f	class:DIFFITEM
DIFFITEM	DiffItem.h	/^class DIFFITEM $/;"	c
DIFFLEVEL	MergeDoc.h	/^	typedef enum { BYTEDIFF, WORDDIFF } DIFFLEVEL;$/;"	t	class:CMergeDoc	typeref:enum:CMergeDoc::__anon80996cc10403
DIFFMARKER_BOTTOM	LocationView.cpp	/^static const int DIFFMARKER_BOTTOM = 3;$/;"	v	typeref:typename:const int	file:
DIFFMARKER_TOP	LocationView.cpp	/^static const int DIFFMARKER_TOP = 3;$/;"	v	typeref:typename:const int	file:
DIFFMARKER_WIDTH	LocationView.cpp	/^static const int DIFFMARKER_WIDTH = 6;$/;"	v	typeref:typename:const int	file:
DIFFOPTIONS	CompareOptions.h	/^struct DIFFOPTIONS$/;"	s
DIFFRANGE	DiffList.h	/^	DIFFRANGE()$/;"	f	struct:DIFFRANGE
DIFFRANGE	DiffList.h	/^struct DIFFRANGE$/;"	s
DIFFSTATUS	DiffWrapper.h	/^	DIFFSTATUS() {}$/;"	f	struct:DIFFSTATUS
DIFFSTATUS	DiffWrapper.h	/^struct DIFFSTATUS$/;"	s
DIFFS_UNKNOWN	DiffContext.h	/^		DIFFS_UNKNOWN = -1, \/**< Difference count unknown (generally). *\/$/;"	e	enum:CDiffContext::__anon6bd204190103
DIFFS_UNKNOWN_QUICKCOMPARE	DiffContext.h	/^		DIFFS_UNKNOWN_QUICKCOMPARE = -9, \/**< Unknown because of quick-compare method. *\/$/;"	e	enum:CDiffContext::__anon6bd204190103
DIFF_ALGORITHM_DEFAULT	CompareOptions.h	/^	DIFF_ALGORITHM_DEFAULT = 0,$/;"	e	enum:DiffAlgorithm
DIFF_ALGORITHM_HISTOGRAM	CompareOptions.h	/^	DIFF_ALGORITHM_HISTOGRAM = 3,$/;"	e	enum:DiffAlgorithm
DIFF_ALGORITHM_MINIMAL	CompareOptions.h	/^	DIFF_ALGORITHM_MINIMAL = 1,$/;"	e	enum:DiffAlgorithm
DIFF_ALGORITHM_PATIENCE	CompareOptions.h	/^	DIFF_ALGORITHM_PATIENCE = 2,$/;"	e	enum:DiffAlgorithm
DIFF_OUTPUT_CONTEXT	CompareOptions.h	/^	DIFF_OUTPUT_CONTEXT = OUTPUT_CONTEXT,$/;"	e	enum:DiffOutputType
DIFF_OUTPUT_HTML	CompareOptions.h	/^	DIFF_OUTPUT_HTML = OUTPUT_HTML,$/;"	e	enum:DiffOutputType
DIFF_OUTPUT_NORMAL	CompareOptions.h	/^	DIFF_OUTPUT_NORMAL = OUTPUT_NORMAL,$/;"	e	enum:DiffOutputType
DIFF_OUTPUT_UNIFIED	CompareOptions.h	/^	DIFF_OUTPUT_UNIFIED = OUTPUT_UNIFIED,$/;"	e	enum:DiffOutputType
DIMOF	Common/lwdisp.h	/^#define DIMOF(/;"	d
DIR	DiffItem.h	/^		TYPEFLAGS=0x60U, FILE=0x20U, DIR=0x40U,$/;"	e	enum:DIFFCODE::__anon902ab4a30103
DIRCOLORSETTINGS	OptionsDirColors.h	/^struct DIRCOLORSETTINGS$/;"	s
DISPLAY_MOVED_ALL	LocationView.h	/^	DISPLAY_MOVED_ALL,$/;"	e	enum:DISPLAY_MOVED_BLOCKS
DISPLAY_MOVED_BLOCKS	LocationView.h	/^enum DISPLAY_MOVED_BLOCKS$/;"	g
DISPLAY_MOVED_FOLLOW_DIFF	LocationView.h	/^	DISPLAY_MOVED_FOLLOW_DIFF,$/;"	e	enum:DISPLAY_MOVED_BLOCKS
DISPLAY_MOVED_NONE	LocationView.h	/^	DISPLAY_MOVED_NONE = 0,$/;"	e	enum:DISPLAY_MOVED_BLOCKS
DISPMAP	Common/lwdisp.h	/^#define DISPMAP(/;"	d
DISPMAP_FXN	Common/lwdisp.h	/^#define	DISPMAP_FXN(/;"	d
DISPMAP_REF	Common/lwdisp.h	/^#define	DISPMAP_REF(/;"	d
DLGITEMTEMPLATEEX	Common/LanguageSelect.cpp	/^	} DLGITEMTEMPLATEEX;$/;"	t	function:CLanguageSelect::RetranslateDialog	typeref:struct:CLanguageSelect::RetranslateDialog::__anone6888ab20208	file:
DLGTEMPLATEEX	Common/LanguageSelect.cpp	/^	} DLGTEMPLATEEX;$/;"	t	function:CLanguageSelect::RetranslateDialog	typeref:struct:CLanguageSelect::RetranslateDialog::__anone6888ab20108	file:
DLLPSTUB	dllpstub.h	/^struct DLLPSTUB$/;"	s
DOES_NOT_EXIST	paths.h	/^	DOES_NOT_EXIST, \/**< File or folder does not exist. *\/$/;"	e	enum:paths::__anon9beca83b0103
DONT_DISPLAY_AGAIN	MergeApp.h	/^		DONT_DISPLAY_AGAIN = 32,$/;"	e	enum:AppMsgBox::__anon8063e6ec0103
DRAGGING_MODE	WinIMergeLib.h	/^	enum DRAGGING_MODE {$/;"	g	struct:IImgMergeWindow
DeCompressArchive	Merge7zFormatMergePluginImpl.cpp	/^HRESULT Merge7zFormatMergePluginImpl::DeCompressArchive(HWND, LPCTSTR path, LPCTSTR folder)$/;"	f	class:Merge7zFormatMergePluginImpl	typeref:typename:HRESULT
DeCompressArchive	Merge7zFormatShellImpl.cpp	/^HRESULT Merge7zFormatShellImpl::DeCompressArchive(HWND, LPCTSTR path, LPCTSTR folder)$/;"	f	class:Merge7zFormatShellImpl	typeref:typename:HRESULT
DecompressArchive	7zCommon.cpp	/^DecompressResult DecompressArchive(HWND hWnd, const PathContext& files)$/;"	f	typeref:typename:DecompressResult
DecompressResult	7zCommon.h	/^	DecompressResult(const PathContext& files, CTempPathContext *pTempPathContext, paths::PATH_EXIS/;"	f	struct:DecompressResult
DecompressResult	7zCommon.h	/^struct DecompressResult$/;"	s
DefColorsPath	OptionsSyntaxColors.cpp	/^static const TCHAR DefColorsPath[] =_T("DefaultSyntaxColors");$/;"	v	typeref:typename:const TCHAR[]	file:
DefColumnWidth	DirView.h	/^const UINT DefColumnWidth = 150;$/;"	v	typeref:typename:const UINT
DefaultRelativeFilterPath	Constants.h	/^const TCHAR DefaultRelativeFilterPath[] = _T("WinMerge\/Filters");$/;"	v	typeref:typename:const TCHAR[]
DefineLayout	Common/MessageBoxDialog.cpp	/^void CMessageBoxDialog::DefineLayout ( )$/;"	f	class:CMessageBoxDialog	typeref:typename:void
Delete	TempFile.cpp	/^bool TempFile::Delete()$/;"	f	class:TempFile	typeref:typename:bool
DeleteAllDisplayItems	DirView.cpp	/^void CDirView::DeleteAllDisplayItems()$/;"	f	class:CDirView	typeref:typename:void
DeleteAllFilters	FileFilterMgr.cpp	/^void FileFilterMgr::DeleteAllFilters()$/;"	f	class:FileFilterMgr	typeref:typename:void
DeleteContents	MergeDoc.cpp	/^void CMergeDoc::DeleteContents ()$/;"	f	class:CMergeDoc	typeref:typename:void
DeleteHead	7zCommon.cpp	/^CTempPathContext *CTempPathContext::DeleteHead()$/;"	f	class:CTempPathContext	typeref:typename:CTempPathContext *
DeleteItem	Common/MDITabBar.h	/^	BOOL DeleteItem(int nItem)$/;"	f	class:CMDITabBar	typeref:typename:BOOL
DeleteItem	DirActions.h	/^	FileActionScript *DeleteItem(FileActionScript *pscript, const std::pair<int, const DIFFITEM *>&/;"	f	struct:DirActions	typeref:typename:FileActionScript *
DeleteItem	DirView.cpp	/^void CDirView::DeleteItem(int sel, bool removeDIFFITEM)$/;"	f	class:CDirView	typeref:typename:void
DeleteMenu	Common/BCMenu.cpp	/^bool BCMenu::DeleteMenu(UINT uiId,UINT nFlags)$/;"	f	class:BCMenu	typeref:typename:bool
DeleteMenu	Common/BCMenu.cpp	/^int BCMenu::DeleteMenu(wchar_t* pText, BC_Seperator sPos)$/;"	f	class:BCMenu	typeref:typename:int
DeleteMenu	Common/BCMenu.h	/^	int DeleteMenu(char* pText, BC_Seperator sPos)$/;"	f	class:BCMenu	typeref:typename:int
DeleteMenuList	Common/BCMenu.cpp	/^void BCMenu::DeleteMenuList(void)$/;"	f	class:BCMenu	typeref:typename:void
DeleteOn	DirActions.h	/^	FileActionScript *DeleteOn(FileActionScript *pscript, const std::pair<int, const DIFFITEM *>& i/;"	f	struct:DirActions	typeref:typename:FileActionScript *
DeleteOnBoth	DirActions.h	/^	FileActionScript *DeleteOnBoth(FileActionScript *pscript, const std::pair<int, const DIFFITEM */;"	f	struct:DirActions	typeref:typename:FileActionScript *
DeleteOnEitherOrBoth	DirActions.h	/^	FileActionScript *DeleteOnEitherOrBoth(FileActionScript *pscript, const std::pair<int, const DI/;"	f	struct:DirActions	typeref:typename:FileActionScript *
DeleteString	Common/SuperComboBox.cpp	/^int CSuperComboBox::DeleteString(int nIndex)$/;"	f	class:CSuperComboBox	typeref:typename:int
DeleteSyncPoint	MergeDoc.cpp	/^bool CMergeDoc::DeleteSyncPoint(int pane, int nLine, bool bRescan)$/;"	f	class:CMergeDoc	typeref:typename:bool
DeleteText2	DiffTextBuffer.cpp	/^DeleteText2(CCrystalTextView * pSource, int nStartLine, int nStartChar,$/;"	f	class:CDiffTextBuffer	typeref:typename:bool
DeleteText2	GhostTextBuffer.cpp	/^DeleteText2 (CCrystalTextView * pSource, int nStartLine, int nStartChar,$/;"	f	class:CGhostTextBuffer	typeref:typename:bool
DelinkFromSiblings	DiffItem.cpp	/^void DIFFITEM::DelinkFromSiblings()$/;"	f	class:DIFFITEM	typeref:typename:void
DeselectDiffIfCursorNotInCurrentDiff	MergeEditView.cpp	/^void CMergeEditView::DeselectDiffIfCursorNotInCurrentDiff()$/;"	f	class:CMergeEditView	typeref:typename:void
DestroyMenu	Common/BCMenu.cpp	/^BOOL BCMenu::DestroyMenu()$/;"	f	class:BCMenu	typeref:typename:BOOL
DestroyWindow	DirFrame.cpp	/^BOOL CDirFrame::DestroyWindow() $/;"	f	class:CDirFrame	typeref:typename:BOOL
DestroyWindow	HexMergeFrm.cpp	/^BOOL CHexMergeFrame::DestroyWindow() $/;"	f	class:CHexMergeFrame	typeref:typename:BOOL
DestroyWindow	ImgMergeFrm.cpp	/^BOOL CImgMergeFrame::DestroyWindow() $/;"	f	class:CImgMergeFrame	typeref:typename:BOOL
DestroyWindow	MergeEditFrm.cpp	/^BOOL CMergeEditFrame::DestroyWindow() $/;"	f	class:CMergeEditFrame	typeref:typename:BOOL
DestroyWindow	OpenFrm.cpp	/^BOOL COpenFrame::DestroyWindow() $/;"	f	class:COpenFrame	typeref:typename:BOOL
Detach	Common/MyCom.h	/^  T* Detach()$/;"	f	class:CMyComPtr	typeref:typename:T *
DetachFromBuffer	GhostTextView.cpp	/^DetachFromBuffer ()$/;"	f	class:CGhostTextView	typeref:typename:void
DetermineEncoding	Common/unicoder.cpp	/^UNICODESET DetermineEncoding(const unsigned char *pBuffer, uint64_t size, bool * pBom)$/;"	f	namespace:ucr	typeref:typename:UNICODESET
Diff2Files	CompareEngines/Wrap_DiffUtils.cpp	/^bool DiffUtils::Diff2Files(struct change ** diffs, int depth,$/;"	f	class:CompareEngines::DiffUtils	typeref:typename:bool
Diff2Files	DiffWrapper.cpp	/^bool CDiffWrapper::Diff2Files(struct change ** diffs, DiffFileData *diffData,$/;"	f	class:CDiffWrapper	typeref:typename:bool
DiffAlgorithm	CompareOptions.h	/^enum DiffAlgorithm$/;"	g
DiffBlock	LocationView.h	/^struct DiffBlock$/;"	s
DiffColors	OptionsDiffColors.cpp	/^namespace Options { namespace DiffColors {$/;"	n	namespace:Options	file:
DiffColors	OptionsDiffColors.h	/^namespace Options { namespace DiffColors {$/;"	n	namespace:Options
DiffFileData	DiffFileData.cpp	/^DiffFileData::DiffFileData()$/;"	f	class:DiffFileData
DiffFileData	DiffFileData.h	/^struct DiffFileData$/;"	s
DiffFileInfo	DiffFileInfo.h	/^	DiffFileInfo() { }$/;"	f	struct:DiffFileInfo
DiffFileInfo	DiffFileInfo.h	/^struct DiffFileInfo : public DirItem$/;"	s
DiffFuncStruct	DiffThread.h	/^	DiffFuncStruct()$/;"	f	struct:DiffFuncStruct
DiffFuncStruct	DiffThread.h	/^struct DiffFuncStruct$/;"	s
DiffItemList	DiffItemList.cpp	/^DiffItemList::DiffItemList() : m_pRoot(nullptr)$/;"	f	class:DiffItemList
DiffItemList	DiffItemList.h	/^class DiffItemList$/;"	c
DiffList	DiffList.cpp	/^DiffList::DiffList()$/;"	f	class:DiffList
DiffList	DiffList.h	/^class DiffList$/;"	c
DiffMap	DiffList.h	/^	DiffMap() { }$/;"	f	class:DiffMap
DiffMap	DiffList.h	/^	DiffMap(const DiffMap & src) : m_map(src.m_map) {}$/;"	f	class:DiffMap
DiffMap	DiffList.h	/^class DiffMap$/;"	c
DiffOptions	OptionsDiffOptions.cpp	/^namespace Options { namespace DiffOptions {$/;"	n	namespace:Options	file:
DiffOptions	OptionsDiffOptions.h	/^namespace Options { namespace DiffOptions {$/;"	n	namespace:Options
DiffOutputType	CompareOptions.h	/^enum DiffOutputType$/;"	g
DiffRangeAt	DiffList.cpp	/^const DIFFRANGE * DiffList::DiffRangeAt(int nDiff) const$/;"	f	class:DiffList	typeref:typename:const DIFFRANGE *
DiffRangeInfo	DiffList.h	/^	DiffRangeInfo() { InitLinks(); }$/;"	f	struct:DiffRangeInfo
DiffRangeInfo	DiffList.h	/^	explicit DiffRangeInfo(const DIFFRANGE & di) : DIFFRANGE(di) { InitLinks(); }$/;"	f	struct:DiffRangeInfo
DiffRangeInfo	DiffList.h	/^struct DiffRangeInfo: public DIFFRANGE$/;"	s
DiffThreadAbortable	DiffThread.cpp	/^	explicit DiffThreadAbortable(CDiffThread * diffthread) : m_diffthread(diffthread) { }$/;"	f	class:DiffThreadAbortable	file:
DiffThreadAbortable	DiffThread.cpp	/^class DiffThreadAbortable : public IAbortable$/;"	c	file:
DiffThreadCallback	DirDoc.cpp	/^void CDirDoc::DiffThreadCallback(int& state)$/;"	f	class:CDirDoc	typeref:typename:void
DiffThreadCollect	DiffThread.cpp	/^static void DiffThreadCollect(void *pParam)$/;"	f	typeref:typename:void	file:
DiffThreadCompare	DiffThread.cpp	/^static void DiffThreadCompare(void *pParam)$/;"	f	typeref:typename:void	file:
DiffUtils	CompareEngines/Wrap_DiffUtils.cpp	/^DiffUtils::DiffUtils()$/;"	f	class:CompareEngines::DiffUtils
DiffUtils	CompareEngines/Wrap_DiffUtils.h	/^class DiffUtils$/;"	c	namespace:CompareEngines
DiffWorker	DirScan.cpp	/^	DiffWorker(NotificationQueue& queue, CDiffContext *pCtxt, int id):$/;"	f	class:DiffWorker	file:
DiffWorker	DirScan.cpp	/^class DiffWorker: public Runnable$/;"	c	file:
DiffWorkerPtr	DirScan.cpp	/^typedef std::shared_ptr<DiffWorker> DiffWorkerPtr;$/;"	t	typeref:typename:std::shared_ptr<DiffWorker>	file:
DiffsOnly	7zCommon.h	/^		DiffsOnly = 0x100,$/;"	e	enum:DirItemEnumerator::__anond3316a350103
DiffutilsOptions	CompareOptions.cpp	/^DiffutilsOptions::DiffutilsOptions()$/;"	f	class:DiffutilsOptions
DiffutilsOptions	CompareOptions.cpp	/^DiffutilsOptions::DiffutilsOptions(const CompareOptions& options)$/;"	f	class:DiffutilsOptions
DiffutilsOptions	CompareOptions.cpp	/^DiffutilsOptions::DiffutilsOptions(const DiffutilsOptions& options)$/;"	f	class:DiffutilsOptions
DiffutilsOptions	CompareOptions.h	/^class DiffutilsOptions : public CompareOptions$/;"	c
DirActions	DirActions.h	/^	DirActions(const CDiffContext& ctxt, const bool RO[], method_type func = nullptr, method_type2 /;"	f	struct:DirActions
DirActions	DirActions.h	/^struct DirActions$/;"	s
DirCmpReport	DirCmpReport.cpp	/^DirCmpReport::DirCmpReport(const std::vector<String> & colRegKeys)$/;"	f	class:DirCmpReport
DirCmpReport	DirCmpReport.h	/^class DirCmpReport$/;"	c
DirCmpReportDlg	DirCmpReportDlg.h	/^class DirCmpReportDlg : public CTrDialog$/;"	c
DirColInfo	DirViewColItems.h	/^struct DirColInfo$/;"	s
DirColors	OptionsDirColors.cpp	/^namespace Options { namespace DirColors {$/;"	n	namespace:Options	file:
DirColors	OptionsDirColors.h	/^namespace Options { namespace DirColors {$/;"	n	namespace:Options
DirCompProgressBar	DirCompProgressBar.cpp	/^DirCompProgressBar::DirCompProgressBar()$/;"	f	class:DirCompProgressBar
DirCompProgressBar	DirCompProgressBar.h	/^class DirCompProgressBar : public CTrDialogBar$/;"	c
DirDocClosing	HexMergeDoc.cpp	/^void CHexMergeDoc::DirDocClosing(CDirDoc * pDirDoc)$/;"	f	class:CHexMergeDoc	typeref:typename:void
DirDocClosing	ImgMergeFrm.h	/^	void DirDocClosing(CDirDoc * pDirDoc) override { m_pDirDoc = nullptr; }$/;"	f	class:CImgMergeFrame	typeref:typename:void
DirDocClosing	MergeDoc.cpp	/^void CMergeDoc::DirDocClosing(CDirDoc * pDirDoc)$/;"	f	class:CMergeDoc	typeref:typename:void
DirDocList	MainFrm.h	/^typedef CTypedPtrList<CPtrList, CDirDoc *> DirDocList;$/;"	t	typeref:typename:CTypedPtrList<CPtrList,CDirDoc * >
DirFilterDlg	DirFilterDlg.h	/^class DirFilterDlg : public CDialog$/;"	c
DirItem	DirItem.h	/^	DirItem() : ctime(0), mtime(0), size(DirItem::FILE_SIZE_NONE) { }$/;"	f	struct:DirItem
DirItem	DirItem.h	/^struct DirItem$/;"	s
DirItemArray	DirTravel.h	/^typedef std::vector<DirItem> DirItemArray;$/;"	t	typeref:typename:std::vector<DirItem>
DirItemEnumerator	7zCommon.cpp	/^DirItemEnumerator::DirItemEnumerator(CDirView *pView, int nFlags)$/;"	f	class:DirItemEnumerator
DirItemEnumerator	7zCommon.h	/^class DirItemEnumerator : public Merge7z::DirItemEnumerator$/;"	c
DirItemIterator	DirItemIterator.h	/^	DirItemIterator() : m_pList(nullptr), m_sel(-1), m_selected(false), m_reverse(false), m_pdi(nul/;"	f	class:DirItemIterator
DirItemIterator	DirItemIterator.h	/^	explicit DirItemIterator(IListCtrl *pList, int sel = -1, bool selected = false, bool reverse = /;"	f	class:DirItemIterator
DirItemIterator	DirItemIterator.h	/^class DirItemIterator : public std::iterator<std::forward_iterator_tag, DIFFITEM*>$/;"	c
DirItemWithIndexIterator	DirItemIterator.h	/^	DirItemWithIndexIterator() : m_pList(NULL), m_sel(-1), m_selected(false), m_reverse(false)$/;"	f	class:DirItemWithIndexIterator
DirItemWithIndexIterator	DirItemIterator.h	/^	explicit DirItemWithIndexIterator(IListCtrl *pList, int sel = -1, bool selected = false, bool r/;"	f	class:DirItemWithIndexIterator
DirItemWithIndexIterator	DirItemIterator.h	/^class DirItemWithIndexIterator : public std::iterator<std::forward_iterator_tag, std::pair<int, /;"	c
DirScan_CompareItems	DirScan.cpp	/^int DirScan_CompareItems(DiffFuncStruct *myStruct, DIFFITEM *parentdiffpos)$/;"	f	typeref:typename:int
DirScan_CompareRequestedItems	DirScan.cpp	/^int DirScan_CompareRequestedItems(DiffFuncStruct *myStruct, DIFFITEM *parentdiffpos)$/;"	f	typeref:typename:int
DirScan_GetItems	DirScan.cpp	/^int DirScan_GetItems(const PathContext &paths, const String subdir[],$/;"	f	typeref:typename:int
DirScan_UpdateMarkedItems	DirScan.cpp	/^int DirScan_UpdateMarkedItems(DiffFuncStruct *myStruct, DIFFITEM *parentdiffpos)$/;"	f	typeref:typename:int
DirSelectFilesDlg	DirSelectFilesDlg.cpp	/^DirSelectFilesDlg::DirSelectFilesDlg() : m_pimpl(new DirSelectFilesDlg::Impl(this)) {}$/;"	f	class:DirSelectFilesDlg
DirSelectFilesDlg	DirSelectFilesDlg.h	/^class DirSelectFilesDlg$/;"	c
DirViewColItems	DirViewColItems.h	/^	explicit DirViewColItems(int nDirs):$/;"	f	class:DirViewColItems
DirViewColItems	DirViewColItems.h	/^class DirViewColItems$/;"	c
DirViewFilterSettings	DirActions.h	/^	explicit DirViewFilterSettings(GetOptionBool getoptbool)$/;"	f	struct:DirViewFilterSettings
DirViewFilterSettings	DirActions.h	/^struct DirViewFilterSettings$/;"	s
DirViewHelpLocation	DirView.cpp	/^static TCHAR DirViewHelpLocation[] = _T("::\/htmlhelp\/Compare_dirs.html");$/;"	v	typeref:typename:TCHAR[]	file:
DirViewTreeState	DirActions.h	/^typedef std::map<String, bool> DirViewTreeState;$/;"	t	typeref:typename:std::map<String,bool>
Disabled	MergeCmdLineInfo.h	/^		Disabled, \/**< Don't exit. *\/$/;"	e	enum:MergeCmdLineInfo::ExitNoDiff
DisallowHeightGrowth	Common/CMoveConstraint.cpp	/^CMoveConstraint::DisallowHeightGrowth()$/;"	f	class:prdlg::CMoveConstraint	typeref:typename:void
DisallowWidthGrowth	Common/CMoveConstraint.cpp	/^CMoveConstraint::DisallowWidthGrowth()$/;"	f	class:prdlg::CMoveConstraint	typeref:typename:void
DitherBlt2	Common/BCMenu.cpp	/^void BCMenu::DitherBlt2(CDC *drawdc, int nXDest, int nYDest, int nWidth, $/;"	f	class:BCMenu	typeref:typename:void
DitherBlt3	Common/BCMenu.cpp	/^void BCMenu::DitherBlt3(CDC *drawdc, int nXDest, int nYDest, int nWidth, $/;"	f	class:BCMenu	typeref:typename:void
DlgUtils	TrDialogs.h	/^class DlgUtils$/;"	c
DllBuild_Merge7z	7zCommon.h	/^#define DllBuild_Merge7z /;"	d
DllBuild_Merge7z	Merge7zFormatMergePluginImpl.h	/^#define DllBuild_Merge7z /;"	d
DllBuild_Merge7z	Merge7zFormatShellImpl.h	/^#define DllBuild_Merge7z /;"	d
DllGetClassObjectFunc	Common/ExConverter.cpp	/^extern "C" typedef HRESULT (__stdcall *DllGetClassObjectFunc)(const CLSID &, const IID &, void */;"	t	typeref:typename:HRESULT (__stdcall *)(const CLSID &,const IID &,void **)	file:
DoAskFor	SaveClosingDlg.cpp	/^void SaveClosingDlg::DoAskFor(bool bLeft \/*= false*\/, bool bMiddle \/*= false*\/, bool bRight /;"	f	class:SaveClosingDlg	typeref:typename:void
DoAutoMerge	ImgMergeFrm.cpp	/^void CImgMergeFrame::DoAutoMerge(int dstPane)$/;"	f	class:CImgMergeFrame	typeref:typename:void
DoAutoMerge	MergeDoc.cpp	/^void CMergeDoc::DoAutoMerge(int dstPane)$/;"	f	class:CMergeDoc	typeref:typename:void
DoConstrain	Common/CMoveConstraint.cpp	/^DoConstrain(CWnd * pWnd, HWND hwndChild, double fLeftX, double fExpandX, double fAboveY, double /;"	f	class:prdlg::CMoveConstraint	typeref:typename:bool
DoDataExchange	AboutDlg.cpp	/^void CAboutDlg::Impl::DoDataExchange(CDataExchange* pDX)$/;"	f	class:CAboutDlg::Impl	typeref:typename:void
DoDataExchange	Common/PreferencesDlg.cpp	/^void CPreferencesDlg::DoDataExchange(CDataExchange* pDX)$/;"	f	class:CPreferencesDlg	typeref:typename:void
DoDataExchange	ConfirmFolderCopyDlg.cpp	/^void ConfirmFolderCopyDlg::DoDataExchange(CDataExchange* pDX)$/;"	f	class:ConfirmFolderCopyDlg	typeref:typename:void
DoDataExchange	DirCmpReportDlg.cpp	/^void DirCmpReportDlg::DoDataExchange(CDataExchange* pDX)$/;"	f	class:DirCmpReportDlg	typeref:typename:void
DoDataExchange	DirColsDlg.cpp	/^void CDirColsDlg::DoDataExchange(CDataExchange* pDX)$/;"	f	class:CDirColsDlg	typeref:typename:void
DoDataExchange	DirFilterDlg.cpp	/^void DirFilterDlg::DoDataExchange(CDataExchange* pDX)$/;"	f	class:DirFilterDlg	typeref:typename:void
DoDataExchange	DirSelectFilesDlg.cpp	/^void DirSelectFilesDlg::Impl::DoDataExchange(CDataExchange* pDX)$/;"	f	class:DirSelectFilesDlg::Impl	typeref:typename:void
DoDataExchange	EncodingErrorBar.cpp	/^void CEncodingErrorBar::DoDataExchange(CDataExchange* pDX)$/;"	f	class:CEncodingErrorBar	typeref:typename:void
DoDataExchange	FileFiltersDlg.cpp	/^void FileFiltersDlg::DoDataExchange(CDataExchange* pDX)$/;"	f	class:FileFiltersDlg	typeref:typename:void
DoDataExchange	LineFiltersDlg.cpp	/^void LineFiltersDlg::DoDataExchange(CDataExchange* pDX)$/;"	f	class:LineFiltersDlg	typeref:typename:void
DoDataExchange	LoadSaveCodepageDlg.cpp	/^void CLoadSaveCodepageDlg::DoDataExchange(CDataExchange* pDX)$/;"	f	class:CLoadSaveCodepageDlg	typeref:typename:void
DoDataExchange	OpenView.cpp	/^void COpenView::DoDataExchange(CDataExchange* pDX)$/;"	f	class:COpenView	typeref:typename:void
DoDataExchange	PatchDlg.cpp	/^void CPatchDlg::DoDataExchange(CDataExchange* pDX)$/;"	f	class:CPatchDlg	typeref:typename:void
DoDataExchange	PluginsListDlg.cpp	/^void PluginsListDlg::DoDataExchange(CDataExchange* pDX)$/;"	f	class:PluginsListDlg	typeref:typename:void
DoDataExchange	PropArchive.cpp	/^void PropArchive::DoDataExchange(CDataExchange* pDX)$/;"	f	class:PropArchive	typeref:typename:void
DoDataExchange	PropBackups.cpp	/^void PropBackups::DoDataExchange(CDataExchange* pDX)$/;"	f	class:PropBackups	typeref:typename:void
DoDataExchange	PropCodepage.cpp	/^void PropCodepage::DoDataExchange(CDataExchange* pDX)$/;"	f	class:PropCodepage	typeref:typename:void
DoDataExchange	PropColors.cpp	/^void PropMergeColors::DoDataExchange(CDataExchange* pDX)$/;"	f	class:PropMergeColors	typeref:typename:void
DoDataExchange	PropCompare.cpp	/^void PropCompare::DoDataExchange(CDataExchange* pDX)$/;"	f	class:PropCompare	typeref:typename:void
DoDataExchange	PropCompareBinary.cpp	/^void PropCompareBinary::DoDataExchange(CDataExchange* pDX)$/;"	f	class:PropCompareBinary	typeref:typename:void
DoDataExchange	PropCompareFolder.cpp	/^void PropCompareFolder::DoDataExchange(CDataExchange* pDX)$/;"	f	class:PropCompareFolder	typeref:typename:void
DoDataExchange	PropCompareImage.cpp	/^void PropCompareImage::DoDataExchange(CDataExchange* pDX)$/;"	f	class:PropCompareImage	typeref:typename:void
DoDataExchange	PropDirColors.cpp	/^void PropDirColors::DoDataExchange(CDataExchange* pDX)$/;"	f	class:PropDirColors	typeref:typename:void
DoDataExchange	PropEditor.cpp	/^void PropEditor::DoDataExchange(CDataExchange* pDX)$/;"	f	class:PropEditor	typeref:typename:void
DoDataExchange	PropGeneral.cpp	/^void PropGeneral::DoDataExchange(CDataExchange* pDX)$/;"	f	class:PropGeneral	typeref:typename:void
DoDataExchange	PropMarkerColors.cpp	/^void PropMarkerColors::DoDataExchange(CDataExchange* pDX)$/;"	f	class:PropMarkerColors	typeref:typename:void
DoDataExchange	PropRegistry.cpp	/^void PropRegistry::DoDataExchange(CDataExchange* pDX)$/;"	f	class:PropRegistry	typeref:typename:void
DoDataExchange	PropShell.cpp	/^void PropShell::DoDataExchange(CDataExchange* pDX)$/;"	f	class:PropShell	typeref:typename:void
DoDataExchange	PropSyntaxColors.cpp	/^void PropSyntaxColors::DoDataExchange(CDataExchange* pDX)$/;"	f	class:PropSyntaxColors	typeref:typename:void
DoDataExchange	PropTextColors.cpp	/^void PropTextColors::DoDataExchange(CDataExchange* pDX)$/;"	f	class:PropTextColors	typeref:typename:void
DoDataExchange	SaveClosingDlg.cpp	/^void SaveClosingDlg::DoDataExchange(CDataExchange* pDX)$/;"	f	class:SaveClosingDlg	typeref:typename:void
DoDataExchange	SelectUnpackerDlg.cpp	/^void CSelectUnpackerDlg::DoDataExchange(CDataExchange* pDX)$/;"	f	class:CSelectUnpackerDlg	typeref:typename:void
DoDataExchange	SharedFilterDlg.cpp	/^void CSharedFilterDlg::DoDataExchange(CDataExchange* pDX)$/;"	f	class:CSharedFilterDlg	typeref:typename:void
DoDataExchange	TestFilterDlg.cpp	/^void CTestFilterDlg::DoDataExchange(CDataExchange* pDX)$/;"	f	class:CTestFilterDlg	typeref:typename:void
DoDataExchange	WMGotoDlg.cpp	/^void WMGotoDlg::Impl::DoDataExchange(CDataExchange* pDX)$/;"	f	class:WMGotoDlg::Impl	typeref:typename:void
DoDirAction	DirView.cpp	/^void CDirView::DoDirAction(DirActions::method_type func, const String& status_message)$/;"	f	class:CDirView	typeref:typename:void
DoDirActionTo	DirView.cpp	/^void CDirView::DoDirActionTo(SIDE_TYPE stype, DirActions::method_type func, const String& status/;"	f	class:CDirView	typeref:typename:void
DoFile	ConfigLog.cpp	/^bool CConfigLog::DoFile(String &sError)$/;"	f	class:CConfigLog	typeref:typename:bool
DoFileEncodingDialog	DirView.cpp	/^void CDirView::DoFileEncodingDialog()$/;"	f	class:CDirView	typeref:typename:void
DoFileEncodingDialog	MergeDocEncoding.cpp	/^bool CMergeDoc::DoFileEncodingDialog()$/;"	f	class:CMergeDoc	typeref:typename:bool
DoFileOpen	MainFrm.cpp	/^bool CMainFrame::DoFileOpen(const PathContext * pFiles \/*= nullptr*\/,$/;"	f	class:CMainFrame	typeref:typename:bool
DoFileSave	HexMergeDoc.cpp	/^void CHexMergeDoc::DoFileSave(int nBuffer)$/;"	f	class:CHexMergeDoc	typeref:typename:void
DoFileSave	ImgMergeFrm.cpp	/^bool CImgMergeFrame::DoFileSave(int pane)$/;"	f	class:CImgMergeFrame	typeref:typename:bool
DoFileSave	MergeDoc.cpp	/^void CMergeDoc::DoFileSave(int nBuffer)$/;"	f	class:CMergeDoc	typeref:typename:void
DoFileSaveAs	HexMergeDoc.cpp	/^void CHexMergeDoc::DoFileSaveAs(int nBuffer)$/;"	f	class:CHexMergeDoc	typeref:typename:void
DoFileSaveAs	ImgMergeFrm.cpp	/^bool CImgMergeFrame::DoFileSaveAs(int pane)$/;"	f	class:CImgMergeFrame	typeref:typename:bool
DoGetFileStatus	Common/UniFile.cpp	/^bool UniLocalFile::DoGetFileStatus()$/;"	f	class:UniLocalFile	typeref:typename:bool
DoItemRename	DirActions.h	/^bool DoItemRename(InputIterator& it, const CDiffContext& ctxt, const String& szNewItemName)$/;"	f	typeref:typename:bool
DoMergeValue	MergeDoc.cpp	/^static std::pair<MergeResult, Type> DoMergeValue(Type left, Type middle, Type right, int dstPane/;"	f	typeref:typename:std::pair<MergeResult,Type>	file:
DoMessageBox	Merge.cpp	/^int CMergeApp::DoMessageBox(LPCTSTR lpszPrompt, UINT nType, UINT nIDPrompt)$/;"	f	class:CMergeApp	typeref:typename:int
DoModal	AboutDlg.cpp	/^int CAboutDlg::DoModal() { return static_cast<int>(m_pimpl->DoModal()); }$/;"	f	class:CAboutDlg	typeref:typename:int
DoModal	Common/MessageBoxDialog.cpp	/^INT_PTR CMessageBoxDialog::DoModal ( )$/;"	f	class:CMessageBoxDialog	typeref:typename:INT_PTR
DoModal	DirSelectFilesDlg.cpp	/^int DirSelectFilesDlg::DoModal() { return static_cast<int>(m_pimpl->DoModal()); }$/;"	f	class:DirSelectFilesDlg	typeref:typename:int
DoModal	WMGotoDlg.cpp	/^int WMGotoDlg::DoModal() { return static_cast<int>(m_pimpl->DoModal()); }$/;"	f	class:WMGotoDlg	typeref:typename:int
DoOpen	Common/UniFile.cpp	/^bool UniMemFile::DoOpen(const String& filename, AccessMode mode)$/;"	f	class:UniMemFile	typeref:typename:bool
DoOpen	Common/UniFile.cpp	/^bool UniStdioFile::DoOpen(const String& filename, const String& mode)$/;"	f	class:UniStdioFile	typeref:typename:bool
DoOpen	DirView.cpp	/^void CDirView::DoOpen(SIDE_TYPE stype)$/;"	f	class:CDirView	typeref:typename:void
DoOpen	UniMarkdownFile.cpp	/^bool UniMarkdownFile::DoOpen(const String& filename, AccessMode mode)$/;"	f	class:UniMarkdownFile	typeref:typename:bool
DoOpenConflict	MainFrm.cpp	/^bool CMainFrame::DoOpenConflict(const String& conflictFile, const String strDesc[] \/*= nullptr*/;"	f	class:CMainFrame	typeref:typename:bool
DoOpenFiles	DiffFileData.cpp	/^bool DiffFileData::DoOpenFiles()$/;"	f	class:DiffFileData	typeref:typename:bool
DoOpenParentFolder	DirView.cpp	/^void CDirView::DoOpenParentFolder(SIDE_TYPE stype)$/;"	f	class:CDirView	typeref:typename:void
DoOpenWith	DirView.cpp	/^void CDirView::DoOpenWith(SIDE_TYPE stype)$/;"	f	class:CDirView	typeref:typename:void
DoOpenWithEditor	DirView.cpp	/^void CDirView::DoOpenWithEditor(SIDE_TYPE stype)$/;"	f	class:CDirView	typeref:typename:void
DoSave	MergeDoc.cpp	/^bool CMergeDoc::DoSave(LPCTSTR szPath, bool &bSaveSuccess, int nBuffer)$/;"	f	class:CMergeDoc	typeref:typename:bool
DoSaveAs	MergeDoc.cpp	/^bool CMergeDoc::DoSaveAs(LPCTSTR szPath, bool &bSaveSuccess, int nBuffer)$/;"	f	class:CMergeDoc	typeref:typename:bool
DoUpdateDirCopy	DirView.cpp	/^void CDirView::DoUpdateDirCopy(CCmdUI* pCmdUI, eMenuType menuType)$/;"	f	class:CDirView	typeref:typename:void
DoUpdateOpen	DirView.cpp	/^void CDirView::DoUpdateOpen(SELECTIONTYPE selectionType, CCmdUI* pCmdUI)$/;"	f	class:CDirView	typeref:typename:void
DocsPath	Constants.h	/^const TCHAR DocsPath[] = _T("Docs\/WinMerge%s.chm");$/;"	v	typeref:typename:const TCHAR[]
DocsURL	Constants.h	/^const TCHAR DocsURL[] = _T("https:\/\/manual.winmerge.org\/index.html");$/;"	v	typeref:typename:const TCHAR[]
DocumentsLoaded	MergeEditView.cpp	/^void CMergeEditView::DocumentsLoaded()$/;"	f	class:CMergeEditView	typeref:typename:void
DoesAffectLeft	LoadSaveCodepageDlg.h	/^	bool DoesAffectLeft() const { return m_bAffectsLeft; }$/;"	f	class:CLoadSaveCodepageDlg	typeref:typename:bool
DoesAffectMiddle	LoadSaveCodepageDlg.h	/^	bool DoesAffectMiddle() const { return m_bAffectsMiddle; }$/;"	f	class:CLoadSaveCodepageDlg	typeref:typename:bool
DoesAffectRight	LoadSaveCodepageDlg.h	/^	bool DoesAffectRight() const { return m_bAffectsRight; }$/;"	f	class:CLoadSaveCodepageDlg	typeref:typename:bool
DoesPathExist	paths.cpp	/^PATH_EXISTENCE DoesPathExist(const String& szPath, bool (*IsArchiveFile)(const String&) \/*= nul/;"	f	namespace:paths	typeref:typename:PATH_EXISTENCE
DragEnter	DropHandler.cpp	/^HRESULT STDMETHODCALLTYPE DropHandler::DragEnter(IDataObject* pDataObj, DWORD grfKeyState, POINT/;"	f	class:DropHandler	typeref:typename:HRESULT STDMETHODCALLTYPE
DragLeave	DropHandler.cpp	/^HRESULT STDMETHODCALLTYPE DropHandler::DragLeave(void)$/;"	f	class:DropHandler	typeref:typename:HRESULT STDMETHODCALLTYPE
DragOver	DropHandler.cpp	/^HRESULT STDMETHODCALLTYPE DropHandler::DragOver(DWORD, POINTL, DWORD *)$/;"	f	class:DropHandler	typeref:typename:HRESULT STDMETHODCALLTYPE
Draw3DCheckmark	Common/BCMenu.cpp	/^bool BCMenu::Draw3DCheckmark(CDC *dc, const CRect& rc,$/;"	f	class:BCMenu	typeref:typename:bool
DrawBackground	LocationView.cpp	/^void CLocationView::DrawBackground(CDC* pDC)$/;"	f	class:CLocationView	typeref:typename:void
DrawBitmap	Common/Bitmap.cpp	/^void DrawBitmap(CDC *pDC, int x, int y, CBitmap *pBitmap)$/;"	f	typeref:typename:void
DrawCheckMark	Common/BCMenu.cpp	/^void BCMenu::DrawCheckMark(CDC* pDC,int x,int y,COLORREF color,bool narrowflag \/*= false*\/)$/;"	f	class:BCMenu	typeref:typename:void
DrawConnectLines	LocationView.cpp	/^void CLocationView::DrawConnectLines(CDC *pClientDC)$/;"	f	class:CLocationView	typeref:typename:void
DrawDiffMarker	LocationView.cpp	/^void CLocationView::DrawDiffMarker(CDC* pDC, int yCoord)$/;"	f	class:CLocationView	typeref:typename:void
DrawItem	Common/BCMenu.cpp	/^void BCMenu::DrawItem (LPDRAWITEMSTRUCT lpDIS)$/;"	f	class:BCMenu	typeref:typename:void
DrawItem	Common/ColorButton.cpp	/^void CColorButton::DrawItem(LPDRAWITEMSTRUCT lpDrawItemStruct) $/;"	f	class:CColorButton	typeref:typename:void
DrawItem	Common/MDITabBar.cpp	/^void CMDITabBar::DrawItem(LPDRAWITEMSTRUCT lpDrawItemStruct)$/;"	f	class:CMDITabBar	typeref:typename:void
DrawItem	MergeStatusBar.cpp	/^void CMergeStatusBar::DrawItem(LPDRAWITEMSTRUCT lpDrawItemStruct)$/;"	f	class:CMergeStatusBar	typeref:typename:void
DrawItem_Theme	Common/BCMenu.cpp	/^void BCMenu::DrawItem_Theme(LPDRAWITEMSTRUCT lpDIS)$/;"	f	class:BCMenu	typeref:typename:void
DrawItem_Win9xNT2000	Common/BCMenu.cpp	/^void BCMenu::DrawItem_Win9xNT2000 (LPDRAWITEMSTRUCT lpDIS)$/;"	f	class:BCMenu	typeref:typename:void
DrawMargin	GhostTextView.cpp	/^void CGhostTextView::DrawMargin (const CRect & rect, int nLineIndex, int nLineNumber)$/;"	f	class:CGhostTextView	typeref:typename:void
DrawRadioDot	Common/BCMenu.cpp	/^void BCMenu::DrawRadioDot(CDC *pDC,int x,int y,COLORREF color)$/;"	f	class:BCMenu	typeref:typename:void
DrawRect	LocationView.cpp	/^void CLocationView::DrawRect(CDC* pDC, const CRect& r, COLORREF cr, bool bSelected \/*= false*\//;"	f	class:CLocationView	typeref:typename:void
DrawVisibleAreaRect	LocationView.cpp	/^void CLocationView::DrawVisibleAreaRect(CDC *pClientDC, int nTopLine, int nBottomLine)$/;"	f	class:CLocationView	typeref:typename:void
Drop	Common/MyCom.h	/^	void Drop()$/;"	f	class:CMyDispParamsUnnamed	typeref:typename:void
Drop	DropHandler.cpp	/^HRESULT DropHandler::Drop(IDataObject* pDataObj, DWORD grfKeyState, POINTL pt, DWORD* pdwEffect)$/;"	f	class:DropHandler	typeref:typename:HRESULT
DropHandler	DropHandler.cpp	/^DropHandler::DropHandler(std::function<void(const std::vector<String>&)> callback) $/;"	f	class:DropHandler
DropHandler	DropHandler.h	/^class DropHandler : public IDropTarget$/;"	c
EGRIP	Common/CMoveConstraint.h	/^	enum EGRIP { SG_NONE, SG_NORMAL, SG_PARENTSTATE };$/;"	g	class:prdlg::CMoveConstraint
EMPTY_EXTENSION	OpenView.cpp	/^static const TCHAR EMPTY_EXTENSION[] = _T(".*");$/;"	v	typeref:typename:const TCHAR[]	file:
ENCODING_PANEL_WIDTH	MergeStatusBar.cpp	/^static const UINT ENCODING_PANEL_WIDTH = 90;$/;"	v	typeref:typename:const UINT	file:
ENDIAN_BIG	heksedit.h	/^		ENDIAN_BIG \/**< Big endian used e.g. in Motorola processors. *\/$/;"	e	enum:IHexEditorWindow::BYTE_ENDIAN
ENDIAN_LITTLE	heksedit.h	/^		ENDIAN_LITTLE, \/**< Little endian used e.g. in Intel processors. *\/$/;"	e	enum:IHexEditorWindow::BYTE_ENDIAN
EOL_PANEL_WIDTH	MergeStatusBar.cpp	/^static const UINT EOL_PANEL_WIDTH = 30;$/;"	v	typeref:typename:const UINT	file:
EVENT_COLLECT_COMPLETED	DiffThread.h	/^		EVENT_COLLECT_COMPLETED = 2,$/;"	e	enum:CDiffThread::ThreadEvent
EVENT_COMPARE_COMPLETED	DiffThread.h	/^		EVENT_COMPARE_COMPLETED = 0,$/;"	e	enum:CDiffThread::ThreadEvent
EVENT_COMPARE_PROGRESSED	DiffThread.h	/^		EVENT_COMPARE_PROGRESSED = 1,$/;"	e	enum:CDiffThread::ThreadEvent
EVENT_TYPE	WinIMergeLib.h	/^	enum EVENT_TYPE {$/;"	g	struct:IImgMergeWindow
EXCEPTION	Exceptions.h	/^		#define EXCEPTION(/;"	d
EXPANDED	DiffItem.h	/^	VISIBILITY = 0x3U, VISIBLE = 0x1U, HIDDEN = 0x2U, EXPANDED = 0x4U$/;"	e	enum:ViewCustomFlags
EXTERN	diffutils/src/diff.h	/^#define EXTERN /;"	d
EatParam	MergeCmdLineInfo.cpp	/^const TCHAR *MergeCmdLineInfo::EatParam(const TCHAR *p, String &param, bool *flag \/*= nullptr*\//;"	f	class:MergeCmdLineInfo	typeref:typename:const TCHAR *
EatPrefix	Common/LanguageSelect.cpp	/^static wchar_t *EatPrefix(wchar_t *text, const wchar_t *prefix)$/;"	f	typeref:typename:wchar_t *	file:
EatPrefix	codepage_detect.cpp	/^static const char *EatPrefix(const char *text, const char *prefix)$/;"	f	typeref:typename:const char *	file:
EditFileFilter	FileFiltersDlg.cpp	/^void FileFiltersDlg::EditFileFilter(const String& path)$/;"	f	class:FileFiltersDlg	typeref:typename:void
EditSelectedFilter	LineFiltersDlg.cpp	/^void LineFiltersDlg::EditSelectedFilter()$/;"	f	class:LineFiltersDlg	typeref:typename:void
Empty	Common/MyCom.h	/^  void Empty()$/;"	f	class:CMyComBSTR	typeref:typename:void
Empty	LineFiltersList.h	/^inline void LineFiltersList::Empty()$/;"	f	class:LineFiltersList	typeref:typename:void
EmptyFilterList	FileFilter.cpp	/^void FileFilter::EmptyFilterList(vector<FileFilterElementPtr> *filterList)$/;"	f	class:FileFilter	typeref:typename:void
EnableColorButtons	PropTextColors.cpp	/^void PropTextColors::EnableColorButtons(bool bEnable)$/;"	f	class:PropTextColors	typeref:typename:void
EnableDlgItem	TrDialogs.h	/^	void EnableDlgItem(unsigned id, bool enabled)$/;"	f	class:DlgUtils	typeref:typename:void
EnableDocking	Common/sizecbar.cpp	/^void CSizingControlBar::EnableDocking(DWORD dwDockStyle)$/;"	f	class:CSizingControlBar	typeref:typename:void
EnablePlugins	DiffWrapper.h	/^inline void CDiffWrapper::EnablePlugins(bool enable)$/;"	f	class:CDiffWrapper	typeref:typename:void
EnableRescan	MergeEditView.h	/^inline bool CMergeEditView::EnableRescan(bool bEnable)$/;"	f	class:CMergeEditView	typeref:typename:bool
EnableSaveCodepage	LoadSaveCodepageDlg.h	/^	void EnableSaveCodepage(bool enable) { m_bEnableSaveCodepage = enable; }$/;"	f	class:CLoadSaveCodepageDlg	typeref:typename:void
End	DirView.h	/^	DirItemIterator End() const { return DirItemIterator(); }$/;"	f	class:CDirView	typeref:typename:DirItemIterator
EndDialog	Common/MessageBoxDialog.cpp	/^void CMessageBoxDialog::EndDialog ( int nResult )$/;"	f	class:CMessageBoxDialog	typeref:typename:void
EndEl	DirCmpReport.cpp	/^static String EndEl(const String& elName)$/;"	f	typeref:typename:String	file:
EndMarker	FilterCommentsManager.h	/^	std::string EndMarker;$/;"	m	struct:FilterCommentsSet	typeref:typename:std::string
EndUpdating	DirCompProgressBar.cpp	/^void DirCompProgressBar::EndUpdating()$/;"	f	class:DirCompProgressBar	typeref:typename:void
EndsWithSlash	paths.cpp	/^bool EndsWithSlash(const String& s)$/;"	f	namespace:paths	typeref:typename:bool
EnsurePathExist	paths.cpp	/^String EnsurePathExist(const String & sPath)$/;"	f	namespace:paths	typeref:typename:String
EnsureValidDockState	ImgMergeFrm.cpp	/^bool CImgMergeFrame::EnsureValidDockState(CDockState& state)$/;"	f	class:CImgMergeFrame	typeref:typename:bool
EnsureValidDockState	MergeEditFrm.cpp	/^bool CMergeEditFrame::EnsureValidDockState(CDockState& state) $/;"	f	class:CMergeEditFrame	typeref:typename:bool
Entities	markdown.cpp	/^std::string CMarkdown::Entities(const std::string& v)$/;"	f	class:CMarkdown	typeref:typename:std::string
EntityMap	markdown.h	/^	typedef std::map<std::string, std::string> EntityMap;$/;"	t	class:CMarkdown	typeref:typename:std::map<std::string,std::string>
Enum	7zCommon.cpp	/^Merge7z::Envelope *DirItemEnumerator::Enum(Item &item)$/;"	f	class:DirItemEnumerator	typeref:typename:Merge7z::Envelope *
Enum	7zCommon.cpp	/^Merge7z::Envelope *SingleItemEnumerator::Enum(Item &item)$/;"	f	class:SingleItemEnumerator	typeref:typename:Merge7z::Envelope *
EnumFontFamProc	Common/scbarcf.cpp	/^int CALLBACK EnumFontFamProc(ENUMLOGFONT FAR *lpelf,$/;"	f	typeref:typename:int CALLBACK
Envelope	7zCommon.h	/^	struct Envelope : public Merge7z::Envelope$/;"	s	class:DirItemEnumerator
EolString	MergeStatusBar.cpp	/^static String EolString(const String & sEol)$/;"	f	typeref:typename:String	file:
EqGroup	MovedBlocks.cpp	/^struct EqGroup$/;"	s	file:
EqualCodepages	Common/unicoder.cpp	/^bool EqualCodepages(int cp1, int cp2)$/;"	f	namespace:ucr	typeref:typename:bool
EqualizeCols	Common/SplitterWndEx.cpp	/^void CSplitterWndEx::EqualizeCols() $/;"	f	class:CSplitterWndEx	typeref:typename:void
EqualizeRows	Common/SplitterWndEx.cpp	/^void CSplitterWndEx::EqualizeRows() $/;"	f	class:CSplitterWndEx	typeref:typename:void
Event	WinIMergeLib.h	/^	struct Event$/;"	s	struct:IImgMergeWindow
EventListenerFunc	WinIMergeLib.h	/^	typedef void (*EventListenerFunc)(const Event& evt);$/;"	t	struct:IImgMergeWindow	typeref:typename:void (*)(const Event & evt)
Exconverter	Common/ExConverter.h	/^struct Exconverter$/;"	s
ExecutableFilename	Constants.h	/^const TCHAR ExecutableFilename[] = _T("WinMerge.exe");$/;"	v	typeref:typename:const TCHAR[]
ExecutableFilenameU	Constants.h	/^const TCHAR ExecutableFilenameU[] = _T("WinMergeU.exe");$/;"	v	typeref:typename:const TCHAR[]
Exit	MergeCmdLineInfo.h	/^		Exit, \/**< Exit and show message. *\/$/;"	e	enum:MergeCmdLineInfo::ExitNoDiff
ExitInstance	Merge.cpp	/^int CMergeApp::ExitInstance() $/;"	f	class:CMergeApp	typeref:typename:int
ExitNoDiff	MergeCmdLineInfo.h	/^	enum ExitNoDiff$/;"	g	class:MergeCmdLineInfo
ExitQuiet	MergeCmdLineInfo.h	/^		ExitQuiet, \/**< Exit and don't show message. *\/$/;"	e	enum:MergeCmdLineInfo::ExitNoDiff
ExpandAllSubdirs	DirActions.cpp	/^void ExpandAllSubdirs(CDiffContext& ctxt)$/;"	f	typeref:typename:void
ExpandShortName	Common/OptionsMgr.cpp	/^String COptionsMgr::ExpandShortName(const String& shortname) const$/;"	f	class:COptionsMgr	typeref:typename:String
ExpandShortcut	paths.cpp	/^String ExpandShortcut(const String &inFile)$/;"	f	namespace:paths	typeref:typename:String
ExpandSubdir	DirView.cpp	/^void CDirView::ExpandSubdir(int sel, bool bRecursive)$/;"	f	class:CDirView	typeref:typename:void
ExpandSubdirs	DirActions.cpp	/^void ExpandSubdirs(CDiffContext& ctxt, DIFFITEM& dip)$/;"	f	typeref:typename:void
ExportOptions	Common/RegOptionsMgr.cpp	/^int CRegOptionsMgr::ExportOptions(const String& filename, const bool bHexColor \/*= false*\/) co/;"	f	class:CRegOptionsMgr	typeref:typename:int
ExtractFileItemFromIDataObject_FileContents	DropHandler.cpp	/^	HRESULT ExtractFileItemFromIDataObject_FileContents(IDataObject *pDataObj, int lindex, const St/;"	f	namespace:__anonfdfe2aa90111	typeref:typename:HRESULT
FFILEOPEN_AUTOMERGE	Constants.h	/^	FFILEOPEN_AUTOMERGE = 0x0080, \/**< auto-merge at this pane *\/$/;"	e	enum:__anon8dfd54180103
FFILEOPEN_CMDLINE	Constants.h	/^	FFILEOPEN_CMDLINE	= 0x0010, \/**< Path is read from commandline *\/$/;"	e	enum:__anon8dfd54180103
FFILEOPEN_MODIFIED	Constants.h	/^	FFILEOPEN_MODIFIED  = 0x0004, \/**< Mark file modified after opening. *\/$/;"	e	enum:__anon8dfd54180103
FFILEOPEN_NOMRU	Constants.h	/^	FFILEOPEN_NOMRU		= 0x0001, \/**< Do not add this path to MRU list *\/$/;"	e	enum:__anon8dfd54180103
FFILEOPEN_NONE	Constants.h	/^	FFILEOPEN_NONE		= 0x0000,$/;"	e	enum:__anon8dfd54180103
FFILEOPEN_PROJECT	Constants.h	/^	FFILEOPEN_PROJECT	= 0x0020, \/**< Path is read from project-file *\/$/;"	e	enum:__anon8dfd54180103
FFILEOPEN_READONLY	Constants.h	/^	FFILEOPEN_READONLY	= 0x0002, \/**< Open this path as read-only *\/$/;"	e	enum:__anon8dfd54180103
FFILEOPEN_SETFOCUS	Constants.h	/^	FFILEOPEN_SETFOCUS  = 0x0040, \/**< Set focus to this pane *\/$/;"	e	enum:__anon8dfd54180103
FIELD_OFFSET	DirViewColItems.cpp	/^#define FIELD_OFFSET(/;"	d	file:
FILE	DiffItem.h	/^		TYPEFLAGS=0x60U, FILE=0x20U, DIR=0x40U,$/;"	e	enum:DIFFCODE::__anon902ab4a30103
FILES_RESULT	files.h	/^	enum FILES_RESULT$/;"	g	class:FileLoadResult
FILE_FILTER_TEMPLATE	FileFiltersDlg.cpp	/^static const TCHAR FILE_FILTER_TEMPLATE[] = _T("FileFilter.tmpl");$/;"	v	typeref:typename:const TCHAR[]	file:
FILE_SIZE_NONE	DirItem.h	/^	enum : uint64_t { FILE_SIZE_NONE = UINT64_MAX };$/;"	e	enum:DirItem::__anonc44ed5c90103
FILTERFLAGS	DiffItem.h	/^		FILTERFLAGS=0x20000U, INCLUDED=0x00000U, SKIPPED=0x20000U,$/;"	e	enum:DIFFCODE::__anon902ab4a30103
FILTER_ERROR_FILEACCESS	FileFilterMgr.h	/^	FILTER_ERROR_FILEACCESS,  \/**< File could not be opened etc. *\/$/;"	e	enum:FILTER_RETVALUE
FILTER_NOTFOUND	FileFilterMgr.h	/^	FILTER_NOTFOUND, \/**< Filter not found *\/$/;"	e	enum:FILTER_RETVALUE
FILTER_OK	FileFilterMgr.h	/^	FILTER_OK = 0,  \/**< Success *\/$/;"	e	enum:FILTER_RETVALUE
FILTER_PANEL_WIDTH	DirFrame.cpp	/^const int FILTER_PANEL_WIDTH = 100;$/;"	v	typeref:typename:const int
FILTER_RETVALUE	FileFilterMgr.h	/^enum FILTER_RETVALUE$/;"	g
FIRST	DiffItem.h	/^		SIDEFLAGS=0x700U, FIRST=0x100U, SECOND=0x200U, THIRD=0x400U, BOTH=0x300U, ALL=0x700U,$/;"	e	enum:DIFFCODE::__anon902ab4a30103
FLAG_RESCAN_WAITS_FOR_IDLE	MergeEditView.h	/^#define FLAG_RESCAN_WAITS_FOR_IDLE /;"	d
FOLDER_GLOBAL	PropBackups.h	/^		FOLDER_GLOBAL,$/;"	e	enum:PropBackups::BACKUP_FOLDER
FOLDER_ORIGINAL	PropBackups.h	/^		FOLDER_ORIGINAL = 0,$/;"	e	enum:PropBackups::BACKUP_FOLDER
FRAMETYPE	MainFrm.h	/^	enum FRAMETYPE$/;"	g	class:CMainFrame
FRAME_FILE	MainFrm.h	/^		FRAME_FILE, \/**< File compare frame. *\/$/;"	e	enum:CMainFrame::FRAMETYPE
FRAME_FOLDER	MainFrm.h	/^		FRAME_FOLDER, \/**< Folder compare frame. *\/$/;"	e	enum:CMainFrame::FRAMETYPE
FRAME_HEXFILE	MainFrm.h	/^		FRAME_HEXFILE, \/**< Hex file compare frame. *\/$/;"	e	enum:CMainFrame::FRAMETYPE
FRAME_IMGFILE	MainFrm.h	/^		FRAME_IMGFILE, \/**< Image file compare frame. *\/$/;"	e	enum:CMainFrame::FRAMETYPE
FRAME_OTHER	MainFrm.h	/^		FRAME_OTHER, \/**< No frame? *\/$/;"	e	enum:CMainFrame::FRAMETYPE
FRESULT_BINARY	files.h	/^		FRESULT_BINARY = 0x3,$/;"	e	enum:FileLoadResult::FILES_RESULT
FRESULT_ERROR	files.h	/^		FRESULT_ERROR = 0x0,$/;"	e	enum:FileLoadResult::FILES_RESULT
FRESULT_ERROR_UNPACK	files.h	/^		FRESULT_ERROR_UNPACK = 0x4,$/;"	e	enum:FileLoadResult::FILES_RESULT
FRESULT_LOSSY	files.h	/^		FRESULT_LOSSY = 0x10000,$/;"	e	enum:FileLoadResult::FILES_RESULT
FRESULT_MAIN_MASK	files.h	/^		FRESULT_MAIN_MASK = 0xF,$/;"	e	enum:FileLoadResult::FILES_RESULT
FRESULT_OK	files.h	/^		FRESULT_OK = 0x1,$/;"	e	enum:FileLoadResult::FILES_RESULT
FRESULT_OK_IMPURE	files.h	/^		FRESULT_OK_IMPURE = 0x2,$/;"	e	enum:FileLoadResult::FILES_RESULT
FSIZE	diffutils/src/system.h	/^#define FSIZE /;"	d
FetchPluginInfos	DiffContext.cpp	/^void CDiffContext::FetchPluginInfos(const String& filteredFilenames,$/;"	f	class:CDiffContext	typeref:typename:void
FetchPluginInfos	PluginManager.cpp	/^void PluginManager::FetchPluginInfos(const String& filteredFilenames, $/;"	f	class:PluginManager	typeref:typename:void
File	markdown.h	/^	explicit File(const TCHAR * path, size_t trunc = 0, unsigned flags = Octets):$/;"	f	class:CMarkdown::File
File	markdown.h	/^class CMarkdown::File : public CMarkdown::FileImage, public CMarkdown$/;"	c	class:CMarkdown
FileAction	FileActionScript.h	/^struct FileAction$/;"	s
FileActionItem	FileActionScript.h	/^struct FileActionItem : public FileAction$/;"	s
FileActionScript	FileActionScript.cpp	/^FileActionScript::FileActionScript()$/;"	f	class:FileActionScript
FileActionScript	FileActionScript.h	/^class FileActionScript$/;"	c
FileChange	IMergeDoc.h	/^	enum FileChange$/;"	g	struct:IMergeDoc
FileChanged	IMergeDoc.h	/^		FileChanged,$/;"	e	enum:IMergeDoc::FileChange
FileCmpReport	DirView.cpp	/^	explicit FileCmpReport(CDirView *pDirView) : m_pDirView(pDirView) {}$/;"	f	struct:FileCmpReport	file:
FileCmpReport	DirView.cpp	/^struct FileCmpReport: public IFileCmpReport$/;"	s	file:
FileEntry	Common/ShellContextMenu.h	/^		FileEntry(const String& aPath, const String& aFilename)$/;"	f	struct:CShellContextMenu::FileEntry
FileEntry	Common/ShellContextMenu.h	/^	struct FileEntry$/;"	s	class:CShellContextMenu
FileFilter	FileFilter.h	/^	FileFilter() : default_include(true) { }$/;"	f	struct:FileFilter
FileFilter	FileFilter.h	/^struct FileFilter$/;"	s
FileFilterElement	FileFilter.h	/^	FileFilterElement(const std::string &regex, int reOpts) : regexp(regex, reOpts)$/;"	f	struct:FileFilterElement
FileFilterElement	FileFilter.h	/^struct FileFilterElement$/;"	s
FileFilterElementPtr	FileFilter.h	/^typedef std::shared_ptr<FileFilterElement> FileFilterElementPtr;$/;"	t	typeref:typename:std::shared_ptr<FileFilterElement>
FileFilterElementPtr	Plugins.h	/^typedef std::shared_ptr<FileFilterElement> FileFilterElementPtr;$/;"	t	typeref:typename:std::shared_ptr<FileFilterElement>
FileFilterExt	FileFilterHelper.h	/^const TCHAR FileFilterExt[] = _T(".flt");$/;"	v	typeref:typename:const TCHAR[]
FileFilterHelper	FileFilterHelper.cpp	/^FileFilterHelper::FileFilterHelper()$/;"	f	class:FileFilterHelper
FileFilterHelper	FileFilterHelper.h	/^class FileFilterHelper : public IDiffFilter$/;"	c
FileFilterInfo	FileFilterHelper.h	/^struct FileFilterInfo$/;"	s
FileFilterMgr	FileFilterMgr.h	/^class FileFilterMgr$/;"	c
FileFilterPtr	FileFilter.h	/^typedef std::shared_ptr<FileFilter> FileFilterPtr;$/;"	t	typeref:typename:std::shared_ptr<FileFilter>
FileFiltersDlg	FileFiltersDlg.h	/^class FileFiltersDlg : public CTrPropertyPage$/;"	c
FileFlags	DirItem.h	/^	FileFlags() : attributes(0) { }$/;"	f	struct:FileFlags
FileFlags	DirItem.h	/^struct FileFlags$/;"	s
FileImage	markdown.cpp	/^CMarkdown::FileImage::FileImage(const TCHAR *path, size_t trunc, unsigned flags)$/;"	f	class:CMarkdown::FileImage
FileImage	markdown.h	/^class CMarkdown::FileImage$/;"	c	class:CMarkdown
FileLoadResult	files.h	/^class FileLoadResult$/;"	c
FileLocation	FileLocation.h	/^	FileLocation()$/;"	f	struct:FileLocation
FileLocation	FileLocation.h	/^	explicit FileLocation(const String& path) : filepath(path)$/;"	f	struct:FileLocation
FileLocation	FileLocation.h	/^struct FileLocation$/;"	s
FileLocationGuessEncodings	MainFrm.cpp	/^FileLocationGuessEncodings(FileLocation & fileloc, int iGuessEncoding)$/;"	f	typeref:typename:void	file:
FileNew	MainFrm.cpp	/^void CMainFrame::FileNew(int nPanes) $/;"	f	class:CMainFrame	typeref:typename:void
FileNoChange	IMergeDoc.h	/^		FileNoChange,$/;"	e	enum:IMergeDoc::FileChange
FileRemoved	IMergeDoc.h	/^		FileRemoved,$/;"	e	enum:IMergeDoc::FileChange
FileTextEncoding	FileTextEncoding.cpp	/^FileTextEncoding::FileTextEncoding()$/;"	f	class:FileTextEncoding
FileTextEncoding	FileTextEncoding.h	/^struct FileTextEncoding$/;"	s
FileTextStats	FileTextStats.h	/^	FileTextStats() { clear(); }$/;"	f	struct:FileTextStats
FileTextStats	FileTextStats.h	/^struct FileTextStats$/;"	s
FileTransform	FileTransform.cpp	/^namespace FileTransform$/;"	n	file:
FileTransform	FileTransform.h	/^namespace FileTransform$/;"	n
FileVersion	FileVersion.cpp	/^FileVersion::FileVersion()$/;"	f	class:FileVersion
FileVersion	FileVersion.h	/^class FileVersion$/;"	c
FileWriteString	ConfigLog.cpp	/^CConfigLog::FileWriteString(const String& lpsz)$/;"	f	class:CConfigLog	typeref:typename:void
FilenamesContainer	Common/ShellContextMenu.h	/^	typedef std::list<FileEntry> FilenamesContainer;$/;"	t	class:CShellContextMenu	typeref:typename:std::list<FileEntry>
Filepath_Transform	DiffFileData.cpp	/^bool DiffFileData::Filepath_Transform(bool bForceUTF8,$/;"	f	class:DiffFileData	typeref:typename:bool
FilterCommentsManager	FilterCommentsManager.cpp	/^FilterCommentsManager::FilterCommentsManager(const String& IniFileName \/*= _T("")*\/)$/;"	f	class:FilterCommentsManager
FilterCommentsManager	FilterCommentsManager.h	/^class FilterCommentsManager$/;"	c
FilterCommentsSet	FilterCommentsManager.h	/^struct FilterCommentsSet$/;"	s
FilterFiles	DropHandler.cpp	/^	std::vector<String> FilterFiles(const std::vector<String>& files_src)$/;"	f	namespace:__anonfdfe2aa90111	typeref:typename:std::vector<String>
FilterHelpLocation	FileFiltersDlg.cpp	/^static const TCHAR FilterHelpLocation[] = _T("::\/htmlhelp\/Filters.html");$/;"	v	typeref:typename:const TCHAR[]	file:
FilterHelpLocation	LineFiltersDlg.cpp	/^static TCHAR FilterHelpLocation[] = _T("::\/htmlhelp\/Filters.html");$/;"	v	typeref:typename:TCHAR[]	file:
FilterList	FilterList.cpp	/^ FilterList::FilterList()$/;"	f	class:FilterList
FilterList	FilterList.h	/^class FilterList$/;"	c
FilterType	SharedFilterDlg.h	/^	enum FilterType : int { SHARED = 0, PRIVATE = 1 };$/;"	g	class:CSharedFilterDlg	typeref:typename:int
Filter_element_name	ProjectFile.cpp	/^const char Filter_element_name[] = "filter";$/;"	v	typeref:typename:const char[]
FiltersRegPath	LineFiltersList.cpp	/^static const TCHAR FiltersRegPath[] =_T("LineFilters");$/;"	v	typeref:typename:const TCHAR[]	file:
FindAnotherMenuOption	Common/BCMenu.cpp	/^BCMenu *BCMenu::FindAnotherMenuOption(int nId,UINT& nLoc,CArray<BCMenu*,BCMenu*>&bcsubs,$/;"	f	class:BCMenu	typeref:typename:BCMenu *
FindByCodePage	charsets.c	/^static struct _charsetInfo const *FindByCodePage(unsigned codepage)$/;"	f	typeref:struct:_charsetInfo const *	file:
FindById	charsets.c	/^static struct _charsetInfo const *FindById(unsigned id)$/;"	f	typeref:struct:_charsetInfo const *	file:
FindByName	charsets.c	/^static struct _charsetInfo const *FindByName(const char *name)$/;"	f	typeref:struct:_charsetInfo const *	file:
FindCommentMarker	DiffWrapper.cpp	/^static const char *FindCommentMarker(const char *target, const char *marker)$/;"	f	typeref:typename:const char *	file:
FindEncodingIdFromNameOrAlias	codepage_detect.cpp	/^FindEncodingIdFromNameOrAlias(const char *encodingName)$/;"	f	typeref:typename:int	file:
FindExtension	paths.cpp	/^String FindExtension(const String& path)$/;"	f	namespace:paths	typeref:typename:String
FindFile	Common/LanguageSelect.cpp	/^static HANDLE NTAPI FindFile(HANDLE h, LPCTSTR path, WIN32_FIND_DATA *fd)$/;"	f	typeref:typename:HANDLE NTAPI	file:
FindFileName	paths.cpp	/^String FindFileName(const String& path)$/;"	f	namespace:paths	typeref:typename:String
FindItemFromPaths	DirActions.cpp	/^DIFFITEM *FindItemFromPaths(const CDiffContext& ctxt, const PathContext& paths)$/;"	f	typeref:typename:DIFFITEM *
FindKeyboardShortcut	Common/BCMenu.cpp	/^LRESULT BCMenu::FindKeyboardShortcut(UINT nChar, UINT nFlags,$/;"	f	class:BCMenu	typeref:typename:LRESULT
FindMaxKey	IntToIntMap.h	/^	int FindMaxKey() const$/;"	f	class:IntToIntMap	typeref:typename:int
FindMenuItem	Common/BCMenu.cpp	/^BCMenuData *BCMenu::FindMenuItem(UINT_PTR nID)$/;"	f	class:BCMenu	typeref:typename:BCMenuData *
FindMenuList	Common/BCMenu.cpp	/^BCMenuData *BCMenu::FindMenuList(UINT_PTR nID)$/;"	f	class:BCMenu	typeref:typename:BCMenuData *
FindMenuOption	Common/BCMenu.cpp	/^BCMenu *BCMenu::FindMenuOption(int nId,UINT& nLoc)$/;"	f	class:BCMenu	typeref:typename:BCMenu *
FindMenuOption	Common/BCMenu.cpp	/^BCMenuData *BCMenu::FindMenuOption(wchar_t *lpstrText)$/;"	f	class:BCMenu	typeref:typename:BCMenuData *
FindPage	Common/PropertyPageHost.cpp	/^CPropertyPage* CPropertyPageHost::FindPage(DWORD dwItemData)$/;"	f	class:CPropertyPageHost	typeref:typename:CPropertyPage *
FindPage	Common/PropertyPageHost.cpp	/^int CPropertyPageHost::FindPage(CPropertyPage* pPage)$/;"	f	class:CPropertyPageHost	typeref:typename:int
FindPrediffer	MergeEditView.cpp	/^int CMergeEditView::FindPrediffer(LPCTSTR prediffer) const$/;"	f	class:CMergeEditView	typeref:typename:int
FindString	Common/SuperComboBox.cpp	/^int CSuperComboBox::FindString(int nStartAfter, LPCTSTR lpszString) const$/;"	f	class:CSuperComboBox	typeref:typename:int
FindTag	markdown.cpp	/^size_t CMarkdown::FindTag(const char *tags, const char *markup) const$/;"	f	class:CMarkdown	typeref:typename:size_t
FinishLoading	GhostTextBuffer.cpp	/^void CGhostTextBuffer::FinishLoading()$/;"	f	class:CGhostTextBuffer	typeref:typename:void
FirstSideInMovedBlock	MovedLines.cpp	/^int MovedLines::FirstSideInMovedBlock(unsigned secondSideLine) const$/;"	f	class:MovedLines	typeref:typename:int
FirstSignificant3wayDiff	DiffList.cpp	/^int DiffList::FirstSignificant3wayDiff(int nDiffType) const$/;"	f	class:DiffList	typeref:typename:int
FirstSignificant3wayDiffRange	DiffList.cpp	/^const DIFFRANGE * DiffList::FirstSignificant3wayDiffRange(int nDiffType) const$/;"	f	class:DiffList	typeref:typename:const DIFFRANGE *
FirstSignificantDiff	DiffList.h	/^inline int DiffList::FirstSignificantDiff() const$/;"	f	class:DiffList	typeref:typename:int
FirstSignificantDiffRange	DiffList.cpp	/^const DIFFRANGE * DiffList::FirstSignificantDiffRange() const$/;"	f	class:DiffList	typeref:typename:const DIFFRANGE *
FixLastDiffRange	DiffWrapper.cpp	/^void CDiffWrapper::FixLastDiffRange(int nFiles, int bufferLines[], bool bMissingNL[], bool bIgno/;"	f	class:CDiffWrapper	typeref:typename:void
FixReordering	DirView.cpp	/^void CDirView::FixReordering()$/;"	f	class:CDirView	typeref:typename:void
FlagIsSet	DiffTextBuffer.cpp	/^bool CDiffTextBuffer::FlagIsSet(UINT line, DWORD flag) const$/;"	f	class:CDiffTextBuffer	typeref:typename:bool
FlagMovedLines	MergeDoc.cpp	/^void CMergeDoc::FlagMovedLines(void)$/;"	f	class:CMergeDoc	typeref:typename:void
FlagTrivialLines	MergeDoc.cpp	/^void CMergeDoc::FlagTrivialLines(void)$/;"	f	class:CMergeDoc	typeref:typename:void
Flink	DiffItem.h	/^	DIFFITEM *Flink;				\/**< Forward "sibling" link.  The forward linkage ends with$/;"	m	class:DIFFITEM	typeref:typename:DIFFITEM *
FlipSplit	Common/SplitterWndEx.cpp	/^void CSplitterWndEx::FlipSplit()$/;"	f	class:CSplitterWndEx	typeref:typename:void
FlushAndRescan	MergeDoc.cpp	/^void CMergeDoc::FlushAndRescan(bool bForced \/* =false *\/)$/;"	f	class:CMergeDoc	typeref:typename:void
FolderCmp	FolderCmp.cpp	/^FolderCmp::FolderCmp(CDiffContext *pCtxt)$/;"	f	class:FolderCmp
FolderCmp	FolderCmp.h	/^class FolderCmp$/;"	c
Font	OptionsFont.cpp	/^namespace Options { namespace Font {$/;"	n	namespace:Options	file:
Font	OptionsFont.h	/^namespace Options { namespace Font {$/;"	n	namespace:Options
ForEachActiveGroupView	MergeDoc.h	/^	void ForEachActiveGroupView(Function func) {$/;"	f	class:CMergeDoc	typeref:typename:void
ForEachView	MergeDoc.h	/^	void ForEachView(Function func) {$/;"	f	class:CMergeDoc	typeref:typename:void
ForEachView	MergeDoc.h	/^	void ForEachView(int nBuffer, Function func) {$/;"	f	class:CMergeDoc	typeref:typename:void
ForceRecalculate	LocationView.cpp	/^void CLocationView::ForceRecalculate()$/;"	f	class:CLocationView	typeref:typename:void
FormatContextMenu	DirView.cpp	/^static void NTAPI FormatContextMenu(BCMenu *pPopup, UINT uIDItem, int n1, int n2 = 0, int n3 = 0/;"	f	typeref:typename:void NTAPI	file:
FormatEncodingDialogDisplays	DirView.cpp	/^void CDirView::FormatEncodingDialogDisplays(CLoadSaveCodepageDlg * dlg)$/;"	f	class:CDirView	typeref:typename:void
FormatFilesAffectedString	DirActions.cpp	/^String FormatFilesAffectedString(int nFilesAffected, int nFilesTotal)$/;"	f	typeref:typename:String
FormatMenuItemString	DirActions.cpp	/^String FormatMenuItemString(SIDE_TYPE src, SIDE_TYPE dst, int count, int total)$/;"	f	typeref:typename:String
FormatMenuItemString	DirActions.cpp	/^String FormatMenuItemString(SIDE_TYPE src, int count, int total)$/;"	f	typeref:typename:String
FormatMenuItemString	DirActions.cpp	/^String FormatMenuItemString(const String& fmt1, const String& fmt2, int count, int total)$/;"	f	typeref:typename:String
FormatMenuItemStringAll	DirActions.cpp	/^String FormatMenuItemStringAll(int nDirs, int count, int total)$/;"	f	typeref:typename:String
FormatMenuItemStringAllTo	DirActions.cpp	/^String FormatMenuItemStringAllTo(int nDirs, int count, int total)$/;"	f	typeref:typename:String
FormatMenuItemStringDifferencesTo	DirActions.cpp	/^String FormatMenuItemStringDifferencesTo(int count, int total)$/;"	f	typeref:typename:String
FormatMenuItemStringTo	DirActions.cpp	/^String FormatMenuItemStringTo(SIDE_TYPE src, int count, int total)$/;"	f	typeref:typename:String
FormatMessageFromString	Common/lwdisp.c	/^static LPTSTR FormatMessageFromString(LPCTSTR format, ...)$/;"	f	typeref:typename:LPTSTR	file:
FormatSwitchString	DiffWrapper.cpp	/^String CDiffWrapper::FormatSwitchString() const$/;"	f	class:CDiffWrapper	typeref:typename:String
Free	7zCommon.h	/^		virtual void Free()$/;"	f	struct:DirItemEnumerator::Envelope	typeref:typename:void
FreeAllScripts	Plugins.cpp	/^static void FreeAllScripts(PluginArrayPtr& pArray) $/;"	f	typeref:typename:void	file:
FreeAllScripts	Plugins.cpp	/^void CScriptsOfThread::FreeAllScripts()$/;"	f	class:CScriptsOfThread	typeref:typename:void
FreeDiffUtilsScript	DiffWrapper.cpp	/^CDiffWrapper::FreeDiffUtilsScript(struct change * & script)$/;"	f	class:CDiffWrapper	typeref:typename:void
FreeScriptsForEvent	Plugins.cpp	/^void CScriptsOfThread::FreeScriptsForEvent(const wchar_t *transformationEvent)$/;"	f	class:CScriptsOfThread	typeref:typename:void
FullPath	7zCommon.h	/^		String FullPath;$/;"	m	struct:DirItemEnumerator::Envelope	typeref:typename:String
FullPath	7zCommon.h	/^	LPCTSTR FullPath;$/;"	m	class:SingleItemEnumerator	typeref:typename:LPCTSTR
GDIFF_MAIN	diffutils/src/Diff.cpp	/^#define GDIFF_MAIN$/;"	d	file:
GHOST_LINEFLAGS	GhostTextBuffer.h	/^enum GHOST_LINEFLAGS$/;"	g
GHOST_MAP_ENTRY	DiffList.h	/^		GHOST_MAP_ENTRY = 888888888$/;"	e	enum:DiffMap::__anon966aec100203
GUESS_LINES	diffutils/src/io.c	/^#define GUESS_LINES(/;"	d	file:
GenerateContent	DirCmpReport.cpp	/^void DirCmpReport::GenerateContent()$/;"	f	class:DirCmpReport	typeref:typename:void
GenerateHTMLFooter	DirCmpReport.cpp	/^void DirCmpReport::GenerateHTMLFooter()$/;"	f	class:DirCmpReport	typeref:typename:void
GenerateHTMLHeader	DirCmpReport.cpp	/^void DirCmpReport::GenerateHTMLHeader()$/;"	f	class:DirCmpReport	typeref:typename:void
GenerateHTMLHeaderBodyPortion	DirCmpReport.cpp	/^void DirCmpReport::GenerateHTMLHeaderBodyPortion()$/;"	f	class:DirCmpReport	typeref:typename:void
GenerateHeader	DirCmpReport.cpp	/^void DirCmpReport::GenerateHeader()$/;"	f	class:DirCmpReport	typeref:typename:void
GenerateReport	DirCmpReport.cpp	/^bool DirCmpReport::GenerateReport(String &errStr)$/;"	f	class:DirCmpReport	typeref:typename:bool
GenerateReport	DirCmpReport.cpp	/^void DirCmpReport::GenerateReport(REPORT_TYPE nReportType)$/;"	f	class:DirCmpReport	typeref:typename:void
GenerateReport	HexMergeDoc.h	/^	bool GenerateReport(const String& sFileName) const override { return true; }$/;"	f	class:CHexMergeDoc	typeref:typename:bool
GenerateReport	ImgMergeFrm.cpp	/^bool CImgMergeFrame::GenerateReport(const String& sFileName) const$/;"	f	class:CImgMergeFrame	typeref:typename:bool
GenerateReport	MergeDoc.cpp	/^bool CMergeDoc::GenerateReport(const String& sFileName) const$/;"	f	class:CMergeDoc	typeref:typename:bool
GenerateXmlFooter	DirCmpReport.cpp	/^void DirCmpReport::GenerateXmlFooter()$/;"	f	class:DirCmpReport	typeref:typename:void
GenerateXmlHeader	DirCmpReport.cpp	/^void DirCmpReport::GenerateXmlHeader()$/;"	f	class:DirCmpReport	typeref:typename:void
GenerateXmlHtmlContent	DirCmpReport.cpp	/^void DirCmpReport::GenerateXmlHtmlContent(bool xml)$/;"	f	class:DirCmpReport	typeref:typename:void
Get	Common/OptionsMgr.cpp	/^const varprop::VariantValue& COptionsMgr::Get(const String& name) const$/;"	f	class:COptionsMgr	typeref:typename:const varprop::VariantValue &
Get	Common/OptionsMgr.h	/^inline const varprop::VariantValue& COption::Get() const$/;"	f	class:COption	typeref:typename:const varprop::VariantValue &
GetAbortable	DiffContext.h	/^	const IAbortable * GetAbortable() const { return m_piAbortable; }$/;"	f	class:CDiffContext	typeref:typename:const IAbortable *
GetActionItemCount	FileActionScript.h	/^inline size_t FileActionScript::GetActionItemCount() const$/;"	f	class:FileActionScript	typeref:typename:size_t
GetActiveIndex	Common/PropertyPageHost.cpp	/^int CPropertyPageHost::GetActiveIndex()$/;"	f	class:CPropertyPageHost	typeref:typename:int
GetActiveMergeEditView	MainFrm.cpp	/^CMergeEditView * CMainFrame::GetActiveMergeEditView()$/;"	f	class:CMainFrame	typeref:typename:CMergeEditView *
GetActiveMergeGroupView	MergeDoc.cpp	/^CMergeEditView * CMergeDoc::GetActiveMergeGroupView(int nBuffer)$/;"	f	class:CMergeDoc	typeref:typename:CMergeEditView *
GetActiveMergeView	HexMergeDoc.cpp	/^CHexMergeView * CHexMergeDoc::GetActiveMergeView() const$/;"	f	class:CHexMergeDoc	typeref:typename:CHexMergeView *
GetActiveMergeView	MergeDoc.cpp	/^CMergeEditView * CMergeDoc::GetActiveMergeView()$/;"	f	class:CMergeDoc	typeref:typename:CMergeEditView *
GetActiveOperations	Merge.h	/^	LONG GetActiveOperations() const { return m_nActiveOperations; }$/;"	f	class:CMergeApp	typeref:typename:LONG
GetActivePage	Common/PropertyPageHost.cpp	/^CPropertyPage* CPropertyPageHost::GetActivePage()$/;"	f	class:CPropertyPageHost	typeref:typename:CPropertyPage *
GetActivePane	HexMergeFrm.cpp	/^int CHexMergeFrame::GetActivePane()$/;"	f	class:CHexMergeFrame	typeref:typename:int
GetActivePaneFromFlags	MainFrm.cpp	/^int GetActivePaneFromFlags(int nFiles, const DWORD dwFlags[])$/;"	f	typeref:typename:int
GetActiveSet	Plugins.cpp	/^CScriptsOfThread * CAllThreadsScripts::GetActiveSet()$/;"	f	class:CAllThreadsScripts	typeref:typename:CScriptsOfThread *
GetActiveSetNoAssert	Plugins.cpp	/^CScriptsOfThread * CAllThreadsScripts::GetActiveSetNoAssert()$/;"	f	class:CAllThreadsScripts	typeref:typename:CScriptsOfThread *
GetAdditionalTextBlocks	MergeEditView.cpp	/^std::vector<TEXTBLOCK> CMergeEditView::GetAdditionalTextBlocks (int nLineIndex)$/;"	f	class:CMergeEditView	typeref:typename:std::vector<TEXTBLOCK>
GetAllDirDocs	MainFrm.cpp	/^DirDocList &CMainFrame::GetAllDirDocs()$/;"	f	class:CMainFrame	typeref:typename:DirDocList &
GetAllHexMergeDocs	MainFrm.cpp	/^HexMergeDocList &CMainFrame::GetAllHexMergeDocs()$/;"	f	class:CMainFrame	typeref:typename:HexMergeDocList &
GetAllMergeDocs	MainFrm.cpp	/^MergeDocList &CMainFrame::GetAllMergeDocs()$/;"	f	class:CMainFrame	typeref:typename:MergeDocList &
GetAllOpenDocs	MainFrm.cpp	/^OpenDocList &CMainFrame::GetAllOpenDocs()$/;"	f	class:CMainFrame	typeref:typename:OpenDocList &
GetAsDiffOptions	CompareOptions.cpp	/^void DiffutilsOptions::GetAsDiffOptions(DIFFOPTIONS &options) const$/;"	f	class:DiffutilsOptions	typeref:typename:void
GetAsInt	Common/OptionsMgr.cpp	/^static bool GetAsInt(const String& str, int & val)$/;"	f	typeref:typename:bool	file:
GetAsString	LineFiltersList.cpp	/^String LineFiltersList::GetAsString() const$/;"	f	class:LineFiltersList	typeref:typename:String
GetAt	LineFiltersList.cpp	/^const LineFilterItem & LineFiltersList::GetAt(size_t ind) const$/;"	f	class:LineFiltersList	typeref:typename:const LineFilterItem &
GetAt	PathContext.cpp	/^String PathContext::GetAt(int nIndex) const$/;"	f	class:PathContext	typeref:typename:String
GetAttribute	markdown.cpp	/^std::string CMarkdown::GetAttribute(const char *key, std::string *pv)$/;"	f	class:CMarkdown	typeref:typename:std::string
GetAutoMaxWidth	Common/MDITabBar.h	/^	bool GetAutoMaxWidth() const { return m_bAutoMaxWidth; }$/;"	f	class:CMDITabBar	typeref:typename:bool
GetAutoMerged	MergeDoc.h	/^	bool GetAutoMerged() const { return m_bAutoMerged; };$/;"	f	class:CMergeDoc	typeref:typename:bool
GetAutomaticPluginByFilter	Plugins.cpp	/^PluginInfo *CScriptsOfThread::GetAutomaticPluginByFilter(const wchar_t *transformationEvent, con/;"	f	class:CScriptsOfThread	typeref:typename:PluginInfo *
GetAvailableLanguages	Common/LanguageSelect.cpp	/^std::vector<std::pair<LANGID, String> > CLanguageSelect::GetAvailableLanguages() const$/;"	f	class:CLanguageSelect	typeref:typename:std::vector<std::pair<LANGID,String>>
GetAvailableScripts	Plugins.cpp	/^PluginArray * CScriptsOfThread::GetAvailableScripts(const wchar_t *transformationEvent)$/;"	f	class:CScriptsOfThread	typeref:typename:PluginArray *
GetAvailableScripts	Plugins.cpp	/^static PluginArray * GetAvailableScripts( const wchar_t *transformationEvent) $/;"	f	typeref:typename:PluginArray *	file:
GetBackColor	IListCtrlImpl.h	/^	int GetBackColor(int row) const override$/;"	f	class:IListCtrlImpl	typeref:typename:int
GetBitmapFromImageList	Common/BCMenu.cpp	/^bool BCMenu::GetBitmapFromImageList(CDC* pDC,CImageList *imglist,int nIndex,CBitmap &bmp)$/;"	f	class:BCMenu	typeref:typename:bool
GetBool	Common/OptionsMgr.cpp	/^bool COptionsMgr::GetBool(const String& name) const$/;"	f	class:COptionsMgr	typeref:typename:bool
GetBool	Common/varprop.cpp	/^bool VariantValue::GetBool() const$/;"	f	class:varprop::VariantValue	typeref:typename:bool
GetBreakType	MergeDoc.cpp	/^bool CMergeDoc::GetBreakType() const$/;"	f	class:CMergeDoc	typeref:typename:bool
GetBuffer	HexMergeView.cpp	/^BYTE *CHexMergeView::GetBuffer(int length)$/;"	f	class:CHexMergeView	typeref:typename:BYTE *
GetBuildFlags	ConfigLog.cpp	/^String CConfigLog::GetBuildFlags() const$/;"	f	class:CConfigLog	typeref:typename:String
GetByteColoringOption	MergeDoc.cpp	/^bool CMergeDoc::GetByteColoringOption() const$/;"	f	class:CMergeDoc	typeref:typename:bool
GetCallback	DropHandler.h	/^	std::function<void(const std::vector<String>&)> GetCallback() const { return m_callback; };$/;"	f	class:DropHandler	typeref:typename:std::function<void (const std::vector<String> &)>
GetCheckVal	PropSyntaxColors.cpp	/^int PropSyntaxColors::GetCheckVal(UINT nColorIndex)$/;"	f	class:PropSyntaxColors	typeref:typename:int
GetClipTcharTextFormat	Common/ClipBoard.h	/^inline CLIPFORMAT GetClipTcharTextFormat() { return (sizeof(TCHAR) == 1 ? CF_TEXT : CF_UNICODETE/;"	f	typeref:typename:CLIPFORMAT
GetCloseButtonRect	Common/MDITabBar.cpp	/^CRect CMDITabBar::GetCloseButtonRect(int nItem) const$/;"	f	class:CMDITabBar	typeref:typename:CRect
GetCodepage	Common/UniFile.h	/^	virtual int GetCodepage() const override { return m_codepage; }$/;"	f	class:UniLocalFile	typeref:typename:int
GetCodepageForLanguage	Common/VersionInfo.cpp	/^bool CVersionInfo::GetCodepageForLanguage(WORD wLanguage, WORD & wCodePage)$/;"	f	class:CVersionInfo	typeref:typename:bool
GetColCount	DirViewColItems.cpp	/^DirViewColItems::GetColCount() const$/;"	f	class:DirViewColItems	typeref:typename:int
GetColDefaultOrder	DirViewColItems.cpp	/^DirViewColItems::GetColDefaultOrder(int col) const$/;"	f	class:DirViewColItems	typeref:typename:int
GetColDescription	DirViewColItems.cpp	/^DirViewColItems::GetColDescription(int col) const$/;"	f	class:DirViewColItems	typeref:typename:String
GetColDisplayName	DirViewColItems.cpp	/^DirViewColItems::GetColDisplayName(int col) const$/;"	f	class:DirViewColItems	typeref:typename:String
GetColImage	DirActions.cpp	/^int GetColImage(const DIFFITEM &di)$/;"	f	typeref:typename:int
GetColRegValueNameBase	DirViewColItems.cpp	/^DirViewColItems::GetColRegValueNameBase(int col) const$/;"	f	class:DirViewColItems	typeref:typename:String
GetColor	Common/ColorButton.h	/^	COLORREF GetColor() const { return m_clrFill; };$/;"	f	class:CColorButton	typeref:typename:COLORREF
GetColor	MergeEditView.cpp	/^COLORREF CMergeEditView::GetColor(int nColorIndex)$/;"	f	class:CMergeEditView	typeref:typename:COLORREF
GetColors	DirView.cpp	/^void CDirView::GetColors (int nRow, int nCol, COLORREF& clrBk, COLORREF& clrText) const$/;"	f	class:CDirView	typeref:typename:void
GetColumnCount	IListCtrlImpl.h	/^	int GetColumnCount() const override$/;"	f	class:IListCtrlImpl	typeref:typename:int
GetColumnName	IListCtrlImpl.h	/^	String GetColumnName(int col) const override$/;"	f	class:IListCtrlImpl	typeref:typename:String
GetColumnSelectedWordDiffIndice	MergeEditView.cpp	/^std::map<int, std::vector<int>> CMergeEditView::GetColumnSelectedWordDiffIndice()$/;"	f	class:CMergeEditView	typeref:typename:std::map<int,std::vector<int>>
GetColumns	DirColsDlg.h	/^	const ColumnArray & GetColumns() const { return m_cols; }$/;"	f	class:CDirColsDlg	typeref:typename:const ColumnArray &
GetComments	Common/VersionInfo.h	/^inline String CVersionInfo::GetComments() const$/;"	f	class:CVersionInfo	typeref:typename:String
GetCompanyName	Common/VersionInfo.h	/^inline String CVersionInfo::GetCompanyName() const$/;"	f	class:CVersionInfo	typeref:typename:String
GetCompareDirs	CompareStats.h	/^	int GetCompareDirs() const { return m_nDirs; }$/;"	f	class:CompareStats	typeref:typename:int
GetCompareDirs	DiffContext.h	/^	int GetCompareDirs() const { return m_paths.GetSize(); }$/;"	f	class:CDiffContext	typeref:typename:int
GetCompareMethod	DiffContext.h	/^	int GetCompareMethod(void) const { return m_nCompMethod; }$/;"	f	class:CDiffContext	typeref:typename:int
GetCompareOptions	DiffContext.cpp	/^CompareOptions * CDiffContext::GetCompareOptions(int compareMethod)$/;"	f	class:CDiffContext	typeref:typename:CompareOptions *
GetComparePaths	FolderCmp.cpp	/^void GetComparePaths(CDiffContext * pCtxt, const DIFFITEM &di, PathContext & tFiles)$/;"	f	typeref:typename:void
GetCompareState	CompareStats.h	/^inline CompareStats::CMP_STATE CompareStats::GetCompareState() const$/;"	f	class:CompareStats	typeref:typename:CompareStats::CMP_STATE
GetCompareStats	DirDoc.h	/^	const CompareStats * GetCompareStats() const { return m_pCompareStats.get(); };$/;"	f	class:CDirDoc	typeref:typename:const CompareStats *
GetComparedItems	CompareStats.h	/^	int GetComparedItems() const { return m_nComparedItems; }$/;"	f	class:CompareStats	typeref:typename:int
GetCompilerVersion	ConfigLog.cpp	/^static String GetCompilerVersion()$/;"	f	typeref:typename:String	file:
GetContextRegValues	PropShell.cpp	/^void PropShell::GetContextRegValues()$/;"	f	class:PropShell	typeref:typename:void
GetCopyToClipboard	DirCmpReport.h	/^	bool GetCopyToClipboard() const { return m_bCopyToClipboard;  }$/;"	f	class:DirCmpReport	typeref:typename:bool
GetCorrespondingShellContextMenu	DirView.cpp	/^CShellContextMenu* CDirView::GetCorrespondingShellContextMenu(HMENU hMenu) const$/;"	f	class:CDirView	typeref:typename:CShellContextMenu *
GetCount	CompareStats.h	/^inline int CompareStats::GetCount(CompareStats::RESULT result) const$/;"	f	class:CompareStats	typeref:typename:int
GetCount	LineFiltersList.h	/^inline size_t LineFiltersList::GetCount() const$/;"	f	class:LineFiltersList	typeref:typename:size_t
GetCurDiffItem	CompareStats.cpp	/^const DIFFITEM *CompareStats::GetCurDiffItem()$/;"	f	class:CompareStats	typeref:typename:const DIFFITEM *
GetCurSel	Common/MDITabBar.h	/^	int GetCurSel() const$/;"	f	class:CMDITabBar	typeref:typename:int
GetCurrentColRegKeys	DirView.cpp	/^std::vector<String> CDirView::GetCurrentColRegKeys()$/;"	f	class:CDirView	typeref:typename:std::vector<String>
GetCurrentDiff	MergeDoc.h	/^	int GetCurrentDiff() const { return m_nCurDiff; }$/;"	f	class:CMergeDoc	typeref:typename:int
GetCurrentTimeString	DirCmpReport.cpp	/^static String GetCurrentTimeString()$/;"	f	typeref:typename:String	file:
GetCustomFilters	Plugins.cpp	/^static String GetCustomFilters(const String& name, const String& filtersTextDefault)$/;"	f	typeref:typename:String	file:
GetCustomFiltersMap	Plugins.cpp	/^static std::unordered_map<String, String> GetCustomFiltersMap()$/;"	f	typeref:typename:std::unordered_map<String,String>	file:
GetCustomFlags1	DiffItemList.cpp	/^unsigned DiffItemList::GetCustomFlags1(DIFFITEM *diffpos) const$/;"	f	class:DiffItemList	typeref:typename:unsigned
GetDarkenColor	FilepathEdit.cpp	/^static COLORREF GetDarkenColor(COLORREF a, double r)$/;"	f	typeref:typename:COLORREF	file:
GetDarkenColor	LocationView.cpp	/^static COLORREF GetDarkenColor(COLORREF a, double l)$/;"	f	typeref:typename:COLORREF	file:
GetDarkenedBitmap	Common/Bitmap.cpp	/^CBitmap *GetDarkenedBitmap(CDC *pDC, CBitmap *pBitmap)$/;"	f	typeref:typename:CBitmap *
GetData	Common/MyCom.h	/^	HRESULT GetData(IDataObject *pDataObj, STGMEDIUM *pStgMedium)$/;"	f	class:CMyFormatEtc	typeref:typename:HRESULT
GetDataBufferAnsi	Common/multiformatText.cpp	/^VARIANT * storageForPlugins::GetDataBufferAnsi()$/;"	f	class:storageForPlugins	typeref:typename:VARIANT *
GetDataBufferUnicode	Common/multiformatText.cpp	/^BSTR * storageForPlugins::GetDataBufferUnicode()$/;"	f	class:storageForPlugins	typeref:typename:BSTR *
GetDataFileAnsi	Common/multiformatText.cpp	/^const TCHAR *storageForPlugins::GetDataFileAnsi()$/;"	f	class:storageForPlugins	typeref:typename:const TCHAR *
GetDataFileUnicode	Common/multiformatText.cpp	/^const TCHAR *storageForPlugins::GetDataFileUnicode()$/;"	f	class:storageForPlugins	typeref:typename:const TCHAR *
GetDefault	Common/OptionsMgr.cpp	/^int COptionsMgr::GetDefault(const String& name, String & value) const$/;"	f	class:COptionsMgr	typeref:typename:int
GetDefault	Common/OptionsMgr.cpp	/^int COptionsMgr::GetDefault(const String& name, bool & value) const$/;"	f	class:COptionsMgr	typeref:typename:int
GetDefault	Common/OptionsMgr.cpp	/^int COptionsMgr::GetDefault(const String& name, unsigned & value) const$/;"	f	class:COptionsMgr	typeref:typename:int
GetDefault	Common/OptionsMgr.h	/^	template <typename T> T GetDefault(const String& name) const { T v; GetDefault(name, v); return/;"	f	class:COptionsMgr	typeref:typename:T
GetDefault	Common/OptionsMgr.h	/^inline const varprop::VariantValue& COption::GetDefault() const$/;"	f	class:COption	typeref:typename:const varprop::VariantValue &
GetDefaultName	Merge7zFormatMergePluginImpl.cpp	/^BSTR Merge7zFormatMergePluginImpl::GetDefaultName(HWND, LPCTSTR path)$/;"	f	class:Merge7zFormatMergePluginImpl	typeref:typename:BSTR
GetDefaultName	Merge7zFormatShellImpl.cpp	/^BSTR Merge7zFormatShellImpl::GetDefaultName(HWND, LPCTSTR path)$/;"	f	class:Merge7zFormatShellImpl	typeref:typename:BSTR
GetDeferredCount	Common/CMoveConstraint.h	/^	int GetDeferredCount() { return m_nDelayed; }$/;"	f	class:prdlg::CMoveConstraint	typeref:typename:int
GetDepth	DiffItem.cpp	/^int DIFFITEM::GetDepth() const$/;"	f	class:DIFFITEM	typeref:typename:int
GetDescription	HexMergeDoc.h	/^	String GetDescription(int pane) const { return m_strDesc[pane]; };$/;"	f	class:CHexMergeDoc	typeref:typename:String
GetDescription	ImgMergeFrm.h	/^	String GetDescription(int pane) const { return m_strDesc[pane]; }$/;"	f	class:CImgMergeFrame	typeref:typename:String
GetDescription	MergeDoc.h	/^	String GetDescription(int pane) const { return m_strDesc[pane]; }$/;"	f	class:CMergeDoc	typeref:typename:String
GetDestFileName	Common/multiformatText.cpp	/^const TCHAR *storageForPlugins::GetDestFileName()$/;"	f	class:storageForPlugins	typeref:typename:const TCHAR *
GetDetectMovedBlocks	DiffWrapper.h	/^	bool GetDetectMovedBlocks() const { return (m_pMovedLines[0] != nullptr); }$/;"	f	class:CDiffWrapper	typeref:typename:bool
GetDiff	DiffList.cpp	/^bool DiffList::GetDiff(int nDiff, DIFFRANGE & di) const$/;"	f	class:DiffList	typeref:typename:bool
GetDiffAt	DiffItemList.h	/^inline const DIFFITEM &DiffItemList::GetDiffAt(DIFFITEM *diffpos) const$/;"	f	class:DiffItemList	typeref:typename:const DIFFITEM &
GetDiffContext	DirDoc.h	/^	CDiffContext& GetDiffContext() { return *m_pCtxt.get(); }$/;"	f	class:CDirDoc	typeref:typename:CDiffContext &
GetDiffContext	DirDoc.h	/^	const CDiffContext & GetDiffContext() const { return *m_pCtxt; }$/;"	f	class:CDirDoc	typeref:typename:const CDiffContext &
GetDiffContext	DirView.cpp	/^CDiffContext& CDirView::GetDiffContext()$/;"	f	class:CDirView	typeref:typename:CDiffContext &
GetDiffContext	DirView.cpp	/^const CDiffContext& CDirView::GetDiffContext() const$/;"	f	class:CDirView	typeref:typename:const CDiffContext &
GetDiffCounts	CompareEngines/Wrap_DiffUtils.cpp	/^void DiffUtils::GetDiffCounts(int & diffs, int & trivialDiffs) const$/;"	f	class:CompareEngines::DiffUtils	typeref:typename:void
GetDiffItem	DirView.cpp	/^DIFFITEM &CDirView::GetDiffItem(int sel)$/;"	f	class:CDirView	typeref:typename:DIFFITEM &
GetDiffItem	DirView.cpp	/^const DIFFITEM &CDirView::GetDiffItem(int sel) const$/;"	f	class:CDirView	typeref:typename:const DIFFITEM &
GetDiffRangeInfoVector	DiffList.h	/^	std::vector<DiffRangeInfo>& GetDiffRangeInfoVector() { return m_diffs; }$/;"	f	class:DiffList	typeref:typename:std::vector<DiffRangeInfo> &
GetDiffRefAt	DiffItemList.h	/^inline DIFFITEM &DiffItemList::GetDiffRefAt(DIFFITEM *diffpos)$/;"	f	class:DiffItemList	typeref:typename:DIFFITEM &
GetDiffStatus	DiffWrapper.cpp	/^void CDiffWrapper::GetDiffStatus(DIFFSTATUS *status) const$/;"	f	class:CDiffWrapper	typeref:typename:void
GetDirColInfo	DirViewColItems.cpp	/^DirViewColItems::GetDirColInfo(int col) const$/;"	f	class:DirViewColItems	typeref:typename:const DirColInfo *
GetDirDoc	MergeDoc.h	/^	CDirDoc * GetDirDoc() const { return m_pDirDoc; }$/;"	f	class:CMergeDoc	typeref:typename:CDirDoc *
GetDirName	paths.cpp	/^static bool GetDirName(const String& sDir, String& sName)$/;"	f	namespace:paths	typeref:typename:bool	file:
GetDisabledBitmap	Common/BCMenu.cpp	/^void BCMenu::GetDisabledBitmap(CBitmap &bmp,COLORREF background)$/;"	f	class:BCMenu	typeref:typename:void
GetDisabledPluginList	Plugins.cpp	/^static std::unordered_set<String> GetDisabledPluginList()$/;"	f	typeref:typename:std::unordered_set<String>	file:
GetDispColCount	DirViewColItems.h	/^	int GetDispColCount() const { return m_dispcols; }$/;"	f	class:DirViewColItems	typeref:typename:int
GetDlgItemText	TrDialogs.h	/^	unsigned GetDlgItemText(unsigned id, String& text)$/;"	f	class:DlgUtils	typeref:typename:unsigned
GetDocList	MainFrm.cpp	/^static CPtrList &GetDocList(CMultiDocTemplate *pTemplate)$/;"	f	typeref:typename:CPtrList &	file:
GetDocument	DirView.h	/^	const CDirDoc * GetDocument() const { return const_cast<CDirView *>(this)->GetDocument(); }$/;"	f	class:CDirView	typeref:typename:const CDirDoc *
GetDocument	DirView.h	/^inline CDirDoc* CDirView::GetDocument()$/;"	f	class:CDirView	typeref:typename:CDirDoc *
GetDocument	LocationView.cpp	/^CMergeDoc* CLocationView::GetDocument() \/\/ non-debug version is inline$/;"	f	class:CLocationView	typeref:typename:CMergeDoc *
GetDocument	LocationView.h	/^inline CMergeDoc* CLocationView::GetDocument()$/;"	f	class:CLocationView	typeref:typename:CMergeDoc *
GetDocument	MergeEditView.h	/^	const CMergeDoc *GetDocument() const { return const_cast<CMergeEditView *>(this)->GetDocument()/;"	f	class:CMergeEditView	typeref:typename:const CMergeDoc *
GetDocument	MergeEditView.h	/^inline CMergeDoc* CMergeEditView::GetDocument()$/;"	f	class:CMergeEditView	typeref:typename:CMergeDoc *
GetDocument	OpenView.cpp	/^COpenDoc* COpenView::GetDocument() const \/\/ non-debug version is inline$/;"	f	class:COpenView	typeref:typename:COpenDoc *
GetDocument	OpenView.h	/^inline COpenDoc* COpenView::GetDocument() const$/;"	f	class:COpenView	typeref:typename:COpenDoc *
GetDropHandler	MainFrm.h	/^	DropHandler *GetDropHandler() const { return m_pDropHandler; }$/;"	f	class:CMainFrame	typeref:typename:DropHandler *
GetDroppedFiles	DropHandler.cpp	/^	std::vector<String> GetDroppedFiles(HDROP dropInfo)$/;"	f	namespace:__anonfdfe2aa90111	typeref:typename:std::vector<String>
GetEOLType	DirViewColItems.cpp	/^static String GetEOLType(const CDiffContext *, const void *p, int index)$/;"	f	typeref:typename:String	file:
GetEdgeHTCode	Common/sizecbar.cpp	/^UINT CSizingControlBar::GetEdgeHTCode(int nEdge)$/;"	f	class:CSizingControlBar	typeref:typename:UINT
GetEdgeRect	Common/sizecbar.cpp	/^bool CSizingControlBar::GetEdgeRect(CRect rcWnd, UINT nHitTest,$/;"	f	class:CSizingControlBar	typeref:typename:bool
GetElement	PathContext.cpp	/^String& PathContext::GetElement(int nIndex)$/;"	f	class:PathContext	typeref:typename:String &
GetEmptyItem	DiffItem.cpp	/^DIFFITEM *DIFFITEM::GetEmptyItem()  $/;"	f	class:DIFFITEM	typeref:typename:DIFFITEM *
GetEmptySubLines	MergeEditView.cpp	/^int CMergeEditView::GetEmptySubLines( int nLineIndex )$/;"	f	class:CMergeEditView	typeref:typename:int
GetEncodingCodePageFromId	charsets.c	/^unsigned GetEncodingCodePageFromId(unsigned id)$/;"	f	typeref:typename:unsigned
GetEncodingCodePageFromName	charsets.c	/^unsigned GetEncodingCodePageFromName(const char *name)$/;"	f	typeref:typename:unsigned
GetEncodingCodePageFromNameString	PropCodepage.cpp	/^void PropCodepage::GetEncodingCodePageFromNameString()$/;"	f	class:PropCodepage	typeref:typename:void
GetEncodingIdFromCodePage	charsets.c	/^unsigned GetEncodingIdFromCodePage(unsigned cp)$/;"	f	typeref:typename:unsigned
GetEncodingIdFromName	charsets.c	/^unsigned GetEncodingIdFromName(const char *name)$/;"	f	typeref:typename:unsigned
GetEncodingNameFromCodePage	charsets.c	/^const char *GetEncodingNameFromCodePage(unsigned cp)$/;"	f	typeref:typename:const char *
GetEncodingNameFromId	charsets.c	/^const char *GetEncodingNameFromId(unsigned id)$/;"	f	typeref:typename:const char *
GetError	Common/UniFile.h	/^inline String UniFile::UniError::GetError() const$/;"	f	class:UniFile::UniError	typeref:typename:String
GetErrorMessage	Exceptions.h	/^	virtual bool GetErrorMessage( TCHAR *lpszError, unsigned nMaxError, unsigned *pnHelpContext = n/;"	f	class:SE_Exception	typeref:typename:bool
GetExtraLinesCounts	DiffList.cpp	/^void DiffList::GetExtraLinesCounts(int nFiles, int extras[3])$/;"	f	class:DiffList	typeref:typename:void
GetFile	DirItem.cpp	/^String DirItem::GetFile() const$/;"	f	class:DirItem	typeref:typename:String
GetFileDescription	Common/VersionInfo.h	/^inline String CVersionInfo::GetFileDescription() const$/;"	f	class:CVersionInfo	typeref:typename:String
GetFileExt	MergeDoc.cpp	/^String CMergeDoc::GetFileExt(LPCTSTR sFileName, LPCTSTR sDescription) const$/;"	f	class:CMergeDoc	typeref:typename:String
GetFileFilterName	FileFilterHelper.cpp	/^String FileFilterHelper::GetFileFilterName(const String& filterPath) const$/;"	f	class:FileFilterHelper	typeref:typename:String
GetFileFilterPath	FileFilterHelper.cpp	/^String FileFilterHelper::GetFileFilterPath(const String& filterName) const$/;"	f	class:FileFilterHelper	typeref:typename:String
GetFileFilters	FileFilterHelper.cpp	/^std::vector<FileFilterInfo> FileFilterHelper::GetFileFilters(String & selected) const$/;"	f	class:FileFilterHelper	typeref:typename:std::vector<FileFilterInfo>
GetFileItemsFromIDataObject_CF_HDROP	DropHandler.cpp	/^	HRESULT GetFileItemsFromIDataObject_CF_HDROP(IDataObject *pDataObj, std::vector<String>& files)$/;"	f	namespace:__anonfdfe2aa90111	typeref:typename:HRESULT
GetFileItemsFromIDataObject_FileDescriptor	DropHandler.cpp	/^	HRESULT GetFileItemsFromIDataObject_FileDescriptor(IDataObject *pDataObj, std::vector<String>& /;"	f	namespace:__anonfdfe2aa90111	typeref:typename:HRESULT
GetFileItemsFromIDataObject_ShellIDList	DropHandler.cpp	/^	HRESULT GetFileItemsFromIDataObject_ShellIDList(IDataObject *pDataObj, std::vector<String>& roo/;"	f	namespace:__anonfdfe2aa90111	typeref:typename:HRESULT
GetFileName	Common/LanguageSelect.cpp	/^String CLanguageSelect::GetFileName(LANGID wLangId) const$/;"	f	class:CLanguageSelect	typeref:typename:String
GetFileName	ConfigLog.h	/^inline String CConfigLog::GetFileName() const$/;"	f	class:CConfigLog	typeref:typename:String
GetFileStatus	Common/UniFile.cpp	/^bool UniMemFile::GetFileStatus()$/;"	f	class:UniMemFile	typeref:typename:bool
GetFileStatus	Common/UniFile.cpp	/^bool UniStdioFile::GetFileStatus()$/;"	f	class:UniStdioFile	typeref:typename:bool
GetFileTypeIconIndex	Common/SuperComboBox.cpp	/^static int GetFileTypeIconIndex(LPVOID pParam)$/;"	f	typeref:typename:int	file:
GetFileVersion	Common/VersionInfo.h	/^inline String CVersionInfo::GetFileVersion() const$/;"	f	class:CVersionInfo	typeref:typename:String
GetFileVersionQWORD	FileVersion.h	/^	uint64_t GetFileVersionQWORD() const { return (static_cast<uint64_t>(m_fileVersionMS) << 32) + /;"	f	class:FileVersion	typeref:typename:uint64_t
GetFileVersionString	FileVersion.cpp	/^String FileVersion::GetFileVersionString() const$/;"	f	class:FileVersion	typeref:typename:String
GetFilter	ProjectFile.h	/^inline String ProjectFileItem::GetFilter() const$/;"	f	class:ProjectFileItem	typeref:typename:String
GetFilterByPath	FileFilterMgr.cpp	/^FileFilter * FileFilterMgr::GetFilterByPath(const String& szFilterPath)$/;"	f	class:FileFilterMgr	typeref:typename:FileFilter *
GetFilterCount	FileFilterMgr.h	/^	int GetFilterCount() const { return (int) m_filters.size(); }$/;"	f	class:FileFilterMgr	typeref:typename:int
GetFilterDesc	FileFilterMgr.h	/^inline String FileFilterMgr::GetFilterDesc(const FileFilter *pFilter) const$/;"	f	class:FileFilterMgr	typeref:typename:String
GetFilterDesc	FileFilterMgr.h	/^inline String FileFilterMgr::GetFilterDesc(int i) const$/;"	f	class:FileFilterMgr	typeref:typename:String
GetFilterName	FileFilterMgr.h	/^inline String FileFilterMgr::GetFilterName(const FileFilter *pFilter) const$/;"	f	class:FileFilterMgr	typeref:typename:String
GetFilterName	FileFilterMgr.h	/^inline String FileFilterMgr::GetFilterName(int i) const$/;"	f	class:FileFilterMgr	typeref:typename:String
GetFilterNameOrMask	FileFilterHelper.cpp	/^String FileFilterHelper::GetFilterNameOrMask() const$/;"	f	class:FileFilterHelper	typeref:typename:String
GetFilterPath	FileFilterMgr.h	/^inline String FileFilterMgr::GetFilterPath(int i) const$/;"	f	class:FileFilterMgr	typeref:typename:String
GetFirstChild	DiffItem.h	/^	inline DIFFITEM *GetFirstChild() const { return children; }$/;"	f	class:DIFFITEM	typeref:typename:DIFFITEM *
GetFirstChildDiffPosition	DiffItemList.cpp	/^DIFFITEM *DiffItemList::GetFirstChildDiffPosition(const DIFFITEM *par) const$/;"	f	class:DiffItemList	typeref:typename:DIFFITEM *
GetFirstDiffPosition	DiffItemList.cpp	/^DIFFITEM *DiffItemList::GetFirstDiffPosition() const$/;"	f	class:DiffItemList	typeref:typename:DIFFITEM *
GetFirstDifferentItem	DirView.cpp	/^int CDirView::GetFirstDifferentItem()$/;"	f	class:CDirView	typeref:typename:int
GetFirstSelectedInd	DirView.cpp	/^int CDirView::GetFirstSelectedInd()$/;"	f	class:CDirView	typeref:typename:int
GetFixedFileVersion	Common/VersionInfo.cpp	/^String CVersionInfo::GetFixedFileVersion()$/;"	f	class:CVersionInfo	typeref:typename:String
GetFixedFileVersion	Common/VersionInfo.cpp	/^bool CVersionInfo::GetFixedFileVersion(unsigned& versionMS, unsigned& versionLS)$/;"	f	class:CVersionInfo	typeref:typename:bool
GetFixedProductVersion	Common/VersionInfo.cpp	/^String CVersionInfo::GetFixedProductVersion()$/;"	f	class:CVersionInfo	typeref:typename:String
GetFixedVersionInfo	Common/VersionInfo.cpp	/^void CVersionInfo::GetFixedVersionInfo()$/;"	f	class:CVersionInfo	typeref:typename:void
GetFloat	Common/varprop.cpp	/^double VariantValue::GetFloat() const$/;"	f	class:varprop::VariantValue	typeref:typename:double
GetFocusedItem	DirView.cpp	/^int CDirView::GetFocusedItem()$/;"	f	class:CDirView	typeref:typename:int
GetFormerResult	Common/MessageBoxDialog.cpp	/^int CMessageBoxDialog::GetFormerResult()$/;"	f	class:CMessageBoxDialog	typeref:typename:int
GetFrameType	MainFrm.cpp	/^CMainFrame::FRAMETYPE CMainFrame::GetFrameType(const CFrameWnd * pFrame) const$/;"	f	class:CMainFrame	typeref:typename:CMainFrame::FRAMETYPE
GetFreeFunctionsInScripts	FileTransform.cpp	/^std::vector<String> GetFreeFunctionsInScripts(const wchar_t *TransformationEvent)$/;"	f	namespace:FileTransform	typeref:typename:std::vector<String>
GetFromClipboard	Common/ClipBoard.cpp	/^bool GetFromClipboard(String & text, HWND currentWindowHandle)$/;"	f	typeref:typename:bool
GetFullFileName	Common/VersionInfo.h	/^inline String CVersionInfo::GetFullFileName() const$/;"	f	class:CVersionInfo	typeref:typename:String
GetFullLine	DiffTextBuffer.cpp	/^bool CDiffTextBuffer::GetFullLine(int nLineIndex, CString &strLine) const$/;"	f	class:CDiffTextBuffer	typeref:typename:bool
GetFullpath	FileFilterMgr.h	/^inline String FileFilterMgr::GetFullpath(FileFilter * pfilter) const$/;"	f	class:FileFilterMgr	typeref:typename:String
GetFullyQualifiedPath	Common/UniFile.h	/^	virtual String GetFullyQualifiedPath() const override { return m_filepath; }$/;"	f	class:UniLocalFile	typeref:typename:String
GetFullySelectedDiffs	MergeEditView.cpp	/^void CMergeEditView::GetFullySelectedDiffs(int & firstDiff, int & lastDiff)$/;"	f	class:CMergeEditView	typeref:typename:void
GetFullySelectedDiffs	MergeEditView.cpp	/^void CMergeEditView::GetFullySelectedDiffs(int & firstDiff, int & lastDiff, int & firstWordDiff,/;"	f	class:CMergeEditView	typeref:typename:void
GetFunctionsFromScript	Plugins.cpp	/^int GetFunctionsFromScript(IDispatch *piDispatch, vector<String>& namesArray, vector<int>& IdArr/;"	f	namespace:plugin	typeref:typename:int
GetFwdSiblingLink	DiffItem.h	/^	inline DIFFITEM *GetFwdSiblingLink() const { return Flink; }$/;"	f	class:DIFFITEM	typeref:typename:DIFFITEM *
GetGeneratingReport	DirDoc.h	/^	bool GetGeneratingReport() const { return m_bGeneratingReport; }$/;"	f	class:CDirDoc	typeref:typename:bool
GetGlobalFileFilter	Merge.h	/^	FileFilterHelper * GetGlobalFileFilter() { return m_pGlobalFileFilter.get(); }$/;"	f	class:CMergeApp	typeref:typename:FileFilterHelper *
GetGlobalFilterPathWithCreate	FileFilterHelper.cpp	/^String FileFilterHelper::GetGlobalFilterPathWithCreate() const$/;"	f	class:FileFilterHelper	typeref:typename:String
GetGroupView	MergeEditView.cpp	/^CMergeEditView *CMergeEditView::GetGroupView(int nBuffer) const$/;"	f	class:CMergeEditView	typeref:typename:CMergeEditView *
GetHMENU	Common/ShellContextMenu.cpp	/^HMENU CShellContextMenu::GetHMENU() const$/;"	f	class:CShellContextMenu	typeref:typename:HMENU
GetHandlerAddExtension	Merge7zFormatMergePluginImpl.cpp	/^BSTR Merge7zFormatMergePluginImpl::GetHandlerAddExtension(HWND) { return nullptr; }$/;"	f	class:Merge7zFormatMergePluginImpl	typeref:typename:BSTR
GetHandlerAddExtension	Merge7zFormatShellImpl.cpp	/^BSTR Merge7zFormatShellImpl::GetHandlerAddExtension(HWND) { return nullptr; }$/;"	f	class:Merge7zFormatShellImpl	typeref:typename:BSTR
GetHandlerClassID	Merge7zFormatMergePluginImpl.cpp	/^BSTR Merge7zFormatMergePluginImpl::GetHandlerClassID(HWND) { return nullptr; }$/;"	f	class:Merge7zFormatMergePluginImpl	typeref:typename:BSTR
GetHandlerClassID	Merge7zFormatShellImpl.cpp	/^BSTR Merge7zFormatShellImpl::GetHandlerClassID(HWND) { return nullptr; }$/;"	f	class:Merge7zFormatShellImpl	typeref:typename:BSTR
GetHandlerExtension	Merge7zFormatMergePluginImpl.cpp	/^BSTR Merge7zFormatMergePluginImpl::GetHandlerExtension(HWND) { return nullptr; }$/;"	f	class:Merge7zFormatMergePluginImpl	typeref:typename:BSTR
GetHandlerExtension	Merge7zFormatShellImpl.cpp	/^BSTR Merge7zFormatShellImpl::GetHandlerExtension(HWND) { return nullptr; }$/;"	f	class:Merge7zFormatShellImpl	typeref:typename:BSTR
GetHandlerKeepName	Merge7zFormatMergePluginImpl.cpp	/^VARIANT_BOOL Merge7zFormatMergePluginImpl::GetHandlerKeepName(HWND) { return VARIANT_FALSE; }$/;"	f	class:Merge7zFormatMergePluginImpl	typeref:typename:VARIANT_BOOL
GetHandlerKeepName	Merge7zFormatShellImpl.cpp	/^VARIANT_BOOL Merge7zFormatShellImpl::GetHandlerKeepName(HWND) { return VARIANT_FALSE; }$/;"	f	class:Merge7zFormatShellImpl	typeref:typename:VARIANT_BOOL
GetHandlerName	Merge7zFormatMergePluginImpl.cpp	/^BSTR Merge7zFormatMergePluginImpl::GetHandlerName(HWND) { return nullptr; }$/;"	f	class:Merge7zFormatMergePluginImpl	typeref:typename:BSTR
GetHandlerName	Merge7zFormatShellImpl.cpp	/^BSTR Merge7zFormatShellImpl::GetHandlerName(HWND) { return nullptr; }$/;"	f	class:Merge7zFormatShellImpl	typeref:typename:BSTR
GetHandlerProperty	Merge7zFormatMergePluginImpl.cpp	/^HRESULT Merge7zFormatMergePluginImpl::GetHandlerProperty(HWND, PROPID, PROPVARIANT *, VARTYPE) {/;"	f	class:Merge7zFormatMergePluginImpl	typeref:typename:HRESULT
GetHandlerProperty	Merge7zFormatShellImpl.cpp	/^HRESULT Merge7zFormatShellImpl::GetHandlerProperty(HWND, PROPID, PROPVARIANT *, VARTYPE) { retur/;"	f	class:Merge7zFormatShellImpl	typeref:typename:HRESULT
GetHandlerUpdate	Merge7zFormatMergePluginImpl.cpp	/^VARIANT_BOOL Merge7zFormatMergePluginImpl::GetHandlerUpdate(HWND) { return VARIANT_FALSE; }$/;"	f	class:Merge7zFormatMergePluginImpl	typeref:typename:VARIANT_BOOL
GetHandlerUpdate	Merge7zFormatShellImpl.cpp	/^VARIANT_BOOL Merge7zFormatShellImpl::GetHandlerUpdate(HWND) { return VARIANT_FALSE; }$/;"	f	class:Merge7zFormatShellImpl	typeref:typename:VARIANT_BOOL
GetHeadActionItem	FileActionScript.h	/^	FileActionItem GetHeadActionItem() const { return m_actions[0]; }$/;"	f	class:FileActionScript	typeref:typename:FileActionItem
GetHeaderInterface	DirFrame.h	/^inline IHeaderBar * CDirFrame::GetHeaderInterface() {$/;"	f	class:CDirFrame	typeref:typename:IHeaderBar *
GetHeaderInterface	HexMergeFrm.h	/^inline IHeaderBar *CHexMergeFrame::GetHeaderInterface()$/;"	f	class:CHexMergeFrame	typeref:typename:IHeaderBar *
GetHeaderInterface	MergeEditFrm.cpp	/^IHeaderBar * CMergeEditFrame::GetHeaderInterface()$/;"	f	class:CMergeEditFrame	typeref:typename:IHeaderBar *
GetIDsOfNames	Common/lwdisp.c	/^static STDMETHODIMP GetIDsOfNames(struct LWDispatch *This,$/;"	f	typeref:typename:STDMETHODIMP	file:
GetIMergeEditStatus	MergeStatusBar.h	/^	IMergeEditStatus* GetIMergeEditStatus(int nPane) { return &m_status[nPane]; }$/;"	f	class:CMergeStatusBar	typeref:typename:IMergeEditStatus *
GetIconCount	IListCtrlImpl.h	/^	int GetIconCount() const override$/;"	f	class:IListCtrlImpl	typeref:typename:int
GetIconIndex	IListCtrlImpl.h	/^	int GetIconIndex(int row) const override$/;"	f	class:IListCtrlImpl	typeref:typename:int
GetIconPNGData	IListCtrlImpl.h	/^	std::string GetIconPNGData(int iconIndex) const override$/;"	f	class:IListCtrlImpl	typeref:typename:std::string
GetIncludeFileCmpReport	DirCmpReport.h	/^	bool GetIncludeFileCmpReport() const { return m_bIncludeFileCmpReport; }$/;"	f	class:DirCmpReport	typeref:typename:bool
GetIndent	IListCtrlImpl.h	/^	int GetIndent(int row) const override$/;"	f	class:IListCtrlImpl	typeref:typename:int
GetInfoHandler	SelectUnpackerDlg.cpp	/^const PackingInfo CSelectUnpackerDlg::GetInfoHandler()$/;"	f	class:CSelectUnpackerDlg	typeref:typename:const PackingInfo
GetInnerText	markdown.cpp	/^std::string CMarkdown::GetInnerText()$/;"	f	class:CMarkdown	typeref:typename:std::string
GetInstance	Merge7zFormatMergePluginImpl.cpp	/^static Merge7zFormatMergePluginImpl *GetInstance()$/;"	f	typeref:typename:Merge7zFormatMergePluginImpl *	file:
GetInt	Common/OptionsMgr.cpp	/^int COptionsMgr::GetInt(const String& name) const$/;"	f	class:COptionsMgr	typeref:typename:int
GetInt	Common/varprop.cpp	/^int VariantValue::GetInt() const$/;"	f	class:varprop::VariantValue	typeref:typename:int
GetInterface	HexMergeView.h	/^	IHexEditorWindow *GetInterface() const { return m_pif; }$/;"	f	class:CHexMergeView	typeref:typename:IHexEditorWindow *
GetIntermediateColor	Common/SplitterWndEx.cpp	/^static COLORREF GetIntermediateColor(COLORREF a, COLORREF b)$/;"	f	typeref:typename:COLORREF	file:
GetIntermediateColor	LocationView.cpp	/^static COLORREF GetIntermediateColor(COLORREF a, COLORREF b)$/;"	f	typeref:typename:COLORREF	file:
GetInternalName	Common/VersionInfo.h	/^inline String CVersionInfo::GetInternalName() const$/;"	f	class:CVersionInfo	typeref:typename:String
GetItem	Common/MDITabBar.h	/^	BOOL GetItem(int nItem, TCITEM* pTabCtrlItem) const$/;"	f	class:CMDITabBar	typeref:typename:BOOL
GetItemAt	PatchDlg.h	/^inline const PATCHFILES& CPatchDlg::GetItemAt(size_t position)$/;"	f	class:CPatchDlg	typeref:typename:const PATCHFILES &
GetItemCount	Common/MDITabBar.h	/^	int GetItemCount() const$/;"	f	class:CMDITabBar	typeref:typename:int
GetItemCount	PatchDlg.h	/^inline size_t CPatchDlg::GetItemCount()$/;"	f	class:CPatchDlg	typeref:typename:size_t
GetItemData	IListCtrlImpl.h	/^	void *GetItemData(int row) const override$/;"	f	class:IListCtrlImpl	typeref:typename:void *
GetItemFileName	DirActions.cpp	/^String GetItemFileName(const CDiffContext& ctxt, const DIFFITEM &di, int index)$/;"	f	typeref:typename:String
GetItemFileNames	DirActions.cpp	/^PathContext GetItemFileNames(const CDiffContext& ctxt, const DIFFITEM &di)$/;"	f	typeref:typename:PathContext
GetItemFileNames	DirActions.cpp	/^void GetItemFileNames(const CDiffContext& ctxt, const DIFFITEM &di, String& strLeft, String& str/;"	f	typeref:typename:void
GetItemFileNames	DirView.cpp	/^void CDirView::GetItemFileNames(int sel, PathContext * paths) const$/;"	f	class:CDirView	typeref:typename:void
GetItemFileNames	DirView.cpp	/^void CDirView::GetItemFileNames(int sel, String& strLeft, String& strRight) const$/;"	f	class:CDirView	typeref:typename:void
GetItemIndex	DirView.cpp	/^int CDirView::GetItemIndex(DIFFITEM *key)$/;"	f	class:CDirView	typeref:typename:int
GetItemIndexFromPoint	Common/MDITabBar.cpp	/^int CMDITabBar::GetItemIndexFromPoint(CPoint point) const$/;"	f	class:CMDITabBar	typeref:typename:int
GetItemKey	DirView.cpp	/^DIFFITEM *CDirView::GetItemKey(int idx) const$/;"	f	class:CDirView	typeref:typename:DIFFITEM *
GetItemPath	Common/PreferencesDlg.cpp	/^CString CPreferencesDlg::GetItemPath(HTREEITEM hti)$/;"	f	class:CPreferencesDlg	typeref:typename:CString
GetItemRect	Common/MDITabBar.h	/^	BOOL GetItemRect(int nItem, LPRECT lpRect) const$/;"	f	class:CMDITabBar	typeref:typename:BOOL
GetItemText	IListCtrlImpl.h	/^	String GetItemText(int row, int col) const override$/;"	f	class:IListCtrlImpl	typeref:typename:String
GetLBText	Common/SuperComboBox.cpp	/^void CSuperComboBox::GetLBText(int nIndex, CString &rString) const$/;"	f	class:CSuperComboBox	typeref:typename:void
GetLBTextLen	Common/SuperComboBox.cpp	/^int CSuperComboBox::GetLBTextLen(int nIndex) const$/;"	f	class:CSuperComboBox	typeref:typename:int
GetLangFromLocale	Common/LanguageSelect.cpp	/^static WORD GetLangFromLocale(LCID lcid)$/;"	f	typeref:typename:WORD	file:
GetLangId	Common/LanguageSelect.h	/^	WORD GetLangId() const { return m_wCurLanguage; }$/;"	f	class:CLanguageSelect	typeref:typename:WORD
GetLangId	Merge.cpp	/^WORD CMergeApp::GetLangId() const$/;"	f	class:CMergeApp	typeref:typename:WORD
GetLastDifferentItem	DirView.cpp	/^int CDirView::GetLastDifferentItem()$/;"	f	class:CDirView	typeref:typename:int
GetLastMatchExpression	FilterList.h	/^inline const char * FilterList::GetLastMatchExpression() const$/;"	f	class:FilterList	typeref:typename:const char *
GetLastModified	ConfigLog.cpp	/^static String GetLastModified(const String &path) $/;"	f	typeref:typename:String	file:
GetLastSubdir	paths.cpp	/^String GetLastSubdir(const String & path)$/;"	f	namespace:paths	typeref:typename:String
GetLastUniError	Common/UniFile.h	/^	virtual const UniError & GetLastUniError() const override { return m_lastError; }$/;"	f	class:UniLocalFile	typeref:typename:const UniError &
GetLastValidFile	Common/multiformatText.h	/^	void GetLastValidFile(String & filename)$/;"	f	class:storageForPlugins	typeref:typename:void
GetLastWriteTime	HexMergeView.cpp	/^static UINT64 NTAPI GetLastWriteTime(HANDLE h)$/;"	f	typeref:typename:UINT64 NTAPI	file:
GetLeft	PathContext.cpp	/^String PathContext::GetLeft(bool bNormalized) const$/;"	f	class:PathContext	typeref:typename:String
GetLeft	ProjectFile.cpp	/^String ProjectFileItem::GetLeft(bool * pReadOnly \/*= nullptr*\/) const$/;"	f	class:ProjectFileItem	typeref:typename:String
GetLeftPath	DiffContext.h	/^	String GetLeftPath() const { return m_paths.GetLeft(false); }$/;"	f	class:CDiffContext	typeref:typename:String
GetLeftReadOnly	ProjectFile.h	/^inline bool ProjectFileItem::GetLeftReadOnly() const$/;"	f	class:ProjectFileItem	typeref:typename:bool
GetLegalCopyright	Common/VersionInfo.h	/^inline String CVersionInfo::GetLegalCopyright() const$/;"	f	class:CVersionInfo	typeref:typename:String
GetLength	HexMergeView.cpp	/^int CHexMergeView::GetLength()$/;"	f	class:CHexMergeView	typeref:typename:int
GetLength32	DirCmpReport.cpp	/^static ULONG GetLength32(CFile const &f)$/;"	f	typeref:typename:ULONG	file:
GetLine	DiffTextBuffer.cpp	/^bool CDiffTextBuffer::GetLine(int nLineIndex, CString &strLine) const$/;"	f	class:CDiffTextBuffer	typeref:typename:bool
GetLineColors	MergeEditView.cpp	/^void CMergeEditView::GetLineColors(int nLineIndex, COLORREF & crBkgnd,$/;"	f	class:CMergeEditView	typeref:typename:void
GetLineColors2	MergeEditView.cpp	/^void CMergeEditView::GetLineColors2(int nLineIndex, DWORD ignoreFlags, COLORREF & crBkgnd,$/;"	f	class:CMergeEditView	typeref:typename:void
GetLineFromYPos	LocationView.cpp	/^int CLocationView::GetLineFromYPos(int nYCoord, int bar, bool bRealLine \/*= true*\/)$/;"	f	class:CLocationView	typeref:typename:int
GetLineNumber	Common/UniFile.h	/^	virtual int GetLineNumber() const override { return m_lineno; }$/;"	f	class:UniLocalFile	typeref:typename:int
GetLineText	MergeEditView.cpp	/^CString CMergeEditView::GetLineText(int idx)$/;"	f	class:CMergeEditView	typeref:typename:CString
GetList	Common/PidlContainer.cpp	/^LPCITEMIDLIST* CPidlContainer::GetList() const$/;"	f	class:CPidlContainer	typeref:typename:LPCITEMIDLIST *
GetLoadCodepage	LoadSaveCodepageDlg.h	/^	int GetLoadCodepage() const { return m_nLoadCodepage; }$/;"	f	class:CLoadSaveCodepageDlg	typeref:typename:int
GetLocaleGrouping	locality.cpp	/^static unsigned GetLocaleGrouping(int defval)$/;"	f	namespace:locality	typeref:typename:unsigned	file:
GetLocaleStr	locality.cpp	/^String GetLocaleStr(const TCHAR *str, int decimalDigits)$/;"	f	namespace:locality	typeref:typename:String
GetLocaleString	ConfigLog.cpp	/^static String GetLocaleString(LCID locid, LCTYPE lctype)$/;"	f	typeref:typename:String	file:
GetLocationView	MergeDoc.h	/^	CLocationView * GetLocationView() { return m_pLocationView; }$/;"	f	class:CMergeDoc	typeref:typename:CLocationView *
GetLongPath	paths.cpp	/^String GetLongPath(const String& szPath, bool bExpandEnvs)$/;"	f	namespace:paths	typeref:typename:String
GetMainFrame	MainFrm.cpp	/^CMainFrame * GetMainFrame()$/;"	f	typeref:typename:CMainFrame *
GetMainMarkers	Merge.h	/^	CCrystalTextMarkers * GetMainMarkers() const { return m_pMarkers.get(); }$/;"	f	class:CMergeApp	typeref:typename:CCrystalTextMarkers *
GetMainSyntaxColors	Merge.h	/^	SyntaxColors * GetMainSyntaxColors() { return m_pSyntaxColors.get(); }$/;"	f	class:CMergeApp	typeref:typename:SyntaxColors *
GetMainView	DirDoc.cpp	/^CDirView * CDirDoc::GetMainView() const$/;"	f	class:CDirDoc	typeref:typename:CDirView *
GetManager	FileFilterHelper.h	/^inline FileFilterMgr * FileFilterHelper::GetManager() const$/;"	f	class:FileFilterHelper	typeref:typename:FileFilterMgr *
GetMatchCost	MergeDocDiffSync.cpp	/^int CMergeDoc::GetMatchCost(const String &sLine0, const String &sLine1)$/;"	f	class:CMergeDoc	typeref:typename:int
GetMenuPosition	Common/BCMenu.cpp	/^int BCMenu::GetMenuPosition(wchar_t* pText)$/;"	f	class:BCMenu	typeref:typename:int
GetMenuPosition	Common/BCMenu.h	/^	int GetMenuPosition(char* pText)$/;"	f	class:BCMenu	typeref:typename:int
GetMenuStart	Common/BCMenu.cpp	/^int BCMenu::GetMenuStart(void)$/;"	f	class:BCMenu	typeref:typename:int
GetMenuText	Common/BCMenu.cpp	/^bool BCMenu::GetMenuText(UINT id, CString& string, UINT nFlags\/*= MF_BYPOSITION*\/)$/;"	f	class:BCMenu	typeref:typename:bool
GetMergeDoc	HexMergeFrm.h	/^	CHexMergeDoc * GetMergeDoc() { return m_pMergeDoc; }$/;"	f	class:CHexMergeFrame	typeref:typename:CHexMergeDoc *
GetMergeDoc	MergeEditFrm.h	/^	CMergeDoc * GetMergeDoc() { return m_pMergeDoc; }$/;"	f	class:CMergeEditFrame	typeref:typename:CMergeDoc *
GetMergeDocForDiff	MainFrm.cpp	/^DocClass * GetMergeDocForDiff(CMultiDocTemplate *pTemplate, CDirDoc *pDirDoc, int nFiles, bool b/;"	f	typeref:typename:DocClass *
GetMergeEditSplitterWnd	MergeEditFrm.h	/^	CSplitterWndEx& GetMergeEditSplitterWnd(int iRow)$/;"	f	class:CMergeEditFrame	typeref:typename:CSplitterWndEx &
GetMergeOptionsMgr	Merge.h	/^	COptionsMgr * GetMergeOptionsMgr() { return static_cast<COptionsMgr *> (m_pOptions.get()); }$/;"	f	class:CMergeApp	typeref:typename:COptionsMgr *
GetMergeableSrcIndex	DiffList.cpp	/^int DiffList::GetMergeableSrcIndex(int nDiff, int nDestIndex) const$/;"	f	class:DiffList	typeref:typename:int
GetMergingMode	Merge.cpp	/^bool CMergeApp::GetMergingMode() const$/;"	f	class:CMergeApp	typeref:typename:bool
GetMessage	Common/MessageBoxDialog.cpp	/^inline const String &CMessageBoxDialog::GetMessage ( )$/;"	f	class:CMessageBoxDialog	typeref:typename:const String &
GetMessageIcon	Common/MessageBoxDialog.cpp	/^inline HICON CMessageBoxDialog::GetMessageIcon ( )$/;"	f	class:CMessageBoxDialog	typeref:typename:HICON
GetMessageString	MainFrm.cpp	/^void CMainFrame::GetMessageString(UINT nID, CString& rMessage) const$/;"	f	class:CMainFrame	typeref:typename:void
GetMethodIDInScript	Plugins.cpp	/^int GetMethodIDInScript(LPDISPATCH piDispatch, int methodIndex)$/;"	f	namespace:plugin	typeref:typename:int
GetMethodsFromScript	Plugins.cpp	/^int GetMethodsFromScript(IDispatch *piDispatch, vector<String>& namesArray, vector<int> &IdArray/;"	f	namespace:plugin	typeref:typename:int
GetMiddle	PathContext.cpp	/^String PathContext::GetMiddle(bool bNormalized) const$/;"	f	class:PathContext	typeref:typename:String
GetMiddle	ProjectFile.cpp	/^String ProjectFileItem::GetMiddle(bool * pReadOnly \/*= nullptr*\/) const$/;"	f	class:ProjectFileItem	typeref:typename:String
GetMiddlePath	DiffContext.h	/^	String GetMiddlePath() const { return m_paths.GetMiddle(false); }$/;"	f	class:CDiffContext	typeref:typename:String
GetMiddleReadOnly	ProjectFile.h	/^inline bool ProjectFileItem::GetMiddleReadOnly() const$/;"	f	class:ProjectFileItem	typeref:typename:bool
GetModified	HexMergeView.cpp	/^bool CHexMergeView::GetModified()$/;"	f	class:CHexMergeView	typeref:typename:bool
GetMovedLines	DiffWrapper.h	/^	MovedLines * GetMovedLines(int index) { return m_pMovedLines[index].get(); }$/;"	f	class:CDiffWrapper	typeref:typename:MovedLines *
GetMyDocuments	Environment.cpp	/^String GetMyDocuments()$/;"	f	namespace:env	typeref:typename:String
GetNChanged	Common/multiformatText.h	/^	int & GetNChanged() { return m_nChanged; };$/;"	f	class:storageForPlugins	typeref:typename:int &
GetNChangedValid	Common/multiformatText.h	/^	int & GetNChangedValid() { return m_nChangedValid; }$/;"	f	class:storageForPlugins	typeref:typename:int &
GetName	FileTextEncoding.cpp	/^String FileTextEncoding::GetName() const$/;"	f	class:FileTextEncoding	typeref:typename:String
GetNameList	Common/OptionsMgr.h	/^	Container<String> GetNameList() const$/;"	c	class:COptionsMgr
GetNextDiff	DiffList.cpp	/^bool DiffList::GetNextDiff(int nLine, int & nDiff) const$/;"	f	class:DiffList	typeref:typename:bool
GetNextDiffPosition	DiffItemList.cpp	/^const DIFFITEM &DiffItemList::GetNextDiffPosition(DIFFITEM *&diffpos) const$/;"	f	class:DiffItemList	typeref:typename:const DIFFITEM &
GetNextDiffRefPosition	DiffItemList.cpp	/^DIFFITEM &DiffItemList::GetNextDiffRefPosition(DIFFITEM *&diffpos)$/;"	f	class:DiffItemList	typeref:typename:DIFFITEM &
GetNextItem	IListCtrlImpl.h	/^	int GetNextItem(int sel, bool selected = false, bool reverse = false) const override$/;"	f	class:IListCtrlImpl	typeref:typename:int
GetNextSelectedItem	IListCtrlImpl.h	/^	int GetNextSelectedItem(int sel, bool reverse = false) const override$/;"	f	class:IListCtrlImpl	typeref:typename:int
GetNextSiblingDiffPosition	DiffItemList.cpp	/^const DIFFITEM &DiffItemList::GetNextSiblingDiffPosition(DIFFITEM *&diffpos) const$/;"	f	class:DiffItemList	typeref:typename:const DIFFITEM &
GetNextSiblingDiffRefPosition	DiffItemList.cpp	/^DIFFITEM &DiffItemList::GetNextSiblingDiffRefPosition(DIFFITEM *&diffpos)$/;"	f	class:DiffItemList	typeref:typename:DIFFITEM &
GetNormalizedLeft	DiffContext.h	/^	String GetNormalizedLeft() const { return m_paths.GetLeft(); }$/;"	f	class:CDiffContext	typeref:typename:String
GetNormalizedMiddle	DiffContext.h	/^	String GetNormalizedMiddle() const { return m_paths.GetMiddle(); }$/;"	f	class:CDiffContext	typeref:typename:String
GetNormalizedPath	DiffContext.h	/^	String GetNormalizedPath(int nIndex) const { return m_paths.GetPath(nIndex, true); }$/;"	f	class:CDiffContext	typeref:typename:String
GetNormalizedPaths	DiffContext.h	/^	PathContext GetNormalizedPaths() const$/;"	f	class:CDiffContext	typeref:typename:PathContext
GetNormalizedRight	DiffContext.h	/^	String GetNormalizedRight() const { return m_paths.GetRight(); }$/;"	f	class:CDiffContext	typeref:typename:String
GetOpenOneItem	DirActions.cpp	/^bool GetOpenOneItem(const CDiffContext& ctxt, DIFFITEM *pos1, const DIFFITEM *pdi[3],$/;"	f	typeref:typename:bool
GetOpenThreeItems	DirActions.cpp	/^bool GetOpenThreeItems(const CDiffContext& ctxt, DIFFITEM *pos1, DIFFITEM *pos2, DIFFITEM *pos3,/;"	f	typeref:typename:bool
GetOpenTwoItems	DirActions.cpp	/^bool GetOpenTwoItems(const CDiffContext& ctxt, SELECTIONTYPE selectionType, DIFFITEM *pos1, DIFF/;"	f	typeref:typename:bool
GetOptions	DiffWrapper.cpp	/^void CDiffWrapper::GetOptions(DIFFOPTIONS *options) const$/;"	f	class:CDiffWrapper	typeref:typename:void
GetOptionsMgr	MergeApp.cpp	/^COptionsMgr * GetOptionsMgr()$/;"	f	typeref:typename:COptionsMgr *
GetOptionsMgr	OptionsPanel.h	/^	COptionsMgr * GetOptionsMgr() const { return m_pOptionsMgr; }$/;"	f	class:OptionsPanel	typeref:typename:COptionsMgr *
GetOriginalFilename	Common/VersionInfo.h	/^inline String CVersionInfo::GetOriginalFilename() const$/;"	f	class:CVersionInfo	typeref:typename:String
GetOriginalMode	Common/multiformatText.h	/^	bool GetOriginalMode() const { return m_bOriginalIsUnicode; }$/;"	f	class:storageForPlugins	typeref:typename:bool
GetOriginalText	FilepathEdit.h	/^inline void CFilepathEdit::GetOriginalText(String& rString) const$/;"	f	class:CFilepathEdit	typeref:typename:void
GetOuterText	markdown.cpp	/^std::string CMarkdown::GetOuterText()$/;"	f	class:CMarkdown	typeref:typename:std::string
GetPackingInfo	Merge7zFormatMergePluginImpl.cpp	/^PackingInfo *Merge7zFormatMergePluginImpl::GetPackingInfo()$/;"	f	class:Merge7zFormatMergePluginImpl	typeref:typename:PackingInfo *
GetPage	Common/PropertyPageHost.cpp	/^CPropertyPage* CPropertyPageHost::GetPage(int nIndex)$/;"	f	class:CPropertyPageHost	typeref:typename:CPropertyPage *
GetPageCount	Common/PropertyPageHost.h	/^	int GetPageCount() { return (int) m_aPages.GetSize(); }$/;"	f	class:CPropertyPageHost	typeref:typename:int
GetPageItemData	Common/PropertyPageHost.cpp	/^DWORD CPropertyPageHost::GetPageItemData(int nIndex)$/;"	f	class:CPropertyPageHost	typeref:typename:DWORD
GetPageTitle	Common/PropertyPageHost.cpp	/^CString CPropertyPageHost::GetPageTitle(int nIndex)$/;"	f	class:CPropertyPageHost	typeref:typename:CString
GetPairComparability	paths.cpp	/^PATH_EXISTENCE GetPairComparability(const PathContext & paths, bool (*IsArchiveFile)(const Strin/;"	f	namespace:paths	typeref:typename:PATH_EXISTENCE
GetParentFrame	DirView.cpp	/^CDirFrame * CDirView::GetParentFrame()$/;"	f	class:CDirView	typeref:typename:CDirFrame *
GetParentFrame	HexMergeDoc.cpp	/^CHexMergeFrame * CHexMergeDoc::GetParentFrame() const$/;"	f	class:CHexMergeDoc	typeref:typename:CHexMergeFrame *
GetParentFrame	MergeDoc.cpp	/^CMergeEditFrame * CMergeDoc::GetParentFrame() $/;"	f	class:CMergeDoc	typeref:typename:CMergeEditFrame *
GetParentLink	DiffItem.h	/^	inline DIFFITEM *GetParentLink() const { return parent; }$/;"	f	class:DIFFITEM	typeref:typename:DIFFITEM *
GetParentPath	paths.cpp	/^String GetParentPath(const String& path)$/;"	f	namespace:paths	typeref:typename:String
GetPath	DiffContext.h	/^	String GetPath(int nIndex) const { return m_paths.GetPath(nIndex, false); }$/;"	f	class:CDiffContext	typeref:typename:String
GetPath	PathContext.cpp	/^String PathContext::GetPath(int index, bool bNormalized) const$/;"	f	class:PathContext	typeref:typename:String
GetPath	PathContext.cpp	/^String PathInfo::GetPath(bool bNormalized \/*= true*\/) const$/;"	f	class:PathInfo	typeref:typename:String
GetPath	TempFile.h	/^	const String& GetPath() const { return m_path; }$/;"	f	class:TempFile	typeref:typename:const String &
GetPathList	Common/ShellFileOperations.cpp	/^vector<TCHAR> ShellFileOperations::GetPathList(bool source) const$/;"	f	class:ShellFileOperations	typeref:typename:vector<TCHAR>
GetPathOnly	paths.cpp	/^String GetPathOnly(const String& fullpath)$/;"	f	namespace:paths	typeref:typename:String
GetPaths	ProjectFile.cpp	/^void ProjectFileItem::GetPaths(PathContext& files, bool & bSubfolders) const$/;"	f	class:ProjectFileItem	typeref:typename:void
GetPerInstanceString	Environment.cpp	/^String GetPerInstanceString(const String& name)$/;"	f	namespace:env	typeref:typename:String
GetPluginByName	Plugins.cpp	/^PluginInfo * CScriptsOfThread::GetPluginByName(const wchar_t *transformationEvent, const String&/;"	f	class:CScriptsOfThread	typeref:typename:PluginInfo *
GetPluginInfo	Plugins.cpp	/^PluginInfo *  CScriptsOfThread::GetPluginInfo(LPDISPATCH piScript)$/;"	f	class:CScriptsOfThread	typeref:typename:PluginInfo *
GetPluginManager	DirDoc.h	/^	PluginManager& GetPluginManager() { return m_pluginman; };$/;"	f	class:CDirDoc	typeref:typename:PluginManager &
GetPosition	Common/UniFile.cpp	/^int64_t UniStdioFile::GetPosition() const$/;"	f	class:UniStdioFile	typeref:typename:int64_t
GetPosition	Common/UniFile.h	/^	virtual int64_t GetPosition() const override { return m_current - m_base; }$/;"	f	class:UniMemFile	typeref:typename:int64_t
GetPrediffer	DiffWrapper.h	/^inline void CDiffWrapper::GetPrediffer(PrediffingInfo * prediffer) const$/;"	f	class:CDiffWrapper	typeref:typename:void
GetPrediffer	MergeDoc.cpp	/^void CMergeDoc::GetPrediffer(PrediffingInfo * infoPrediffer)$/;"	f	class:CMergeDoc	typeref:typename:void
GetPrediffersSubmenu	MainFrm.cpp	/^HMENU CMainFrame::GetPrediffersSubmenu(HMENU mainMenu)$/;"	f	class:CMainFrame	typeref:typename:HMENU
GetPrevDiff	DiffList.cpp	/^bool DiffList::GetPrevDiff(int nLine, int & nDiff) const$/;"	f	class:DiffList	typeref:typename:bool
GetPrintHeaderText	MergeEditView.cpp	/^void CMergeEditView::GetPrintHeaderText(int nPageNum, CString & text)$/;"	f	class:CMergeEditView	typeref:typename:void
GetPrivateBuild	Common/VersionInfo.h	/^inline String CVersionInfo::GetPrivateBuild() const$/;"	f	class:CVersionInfo	typeref:typename:String
GetProcessorInfo	ConfigLog.cpp	/^String CConfigLog::GetProcessorInfo() const$/;"	f	class:CConfigLog	typeref:typename:String
GetProductVersion	Common/VersionInfo.h	/^inline String CVersionInfo::GetProductVersion() const$/;"	f	class:CVersionInfo	typeref:typename:String
GetProfileInt	Merge.cpp	/^UINT CMergeApp::GetProfileInt(LPCTSTR lpszSection, LPCTSTR lpszEntry, int nDefault)$/;"	f	class:CMergeApp	typeref:typename:UINT
GetProfileString	Merge.cpp	/^CString CMergeApp::GetProfileString(LPCTSTR lpszSection, LPCTSTR lpszEntry, LPCTSTR lpszDefault)$/;"	f	class:CMergeApp	typeref:typename:CString
GetProgPath	Environment.cpp	/^String GetProgPath()$/;"	f	namespace:env	typeref:typename:String
GetPropertyGetsFromScript	Plugins.cpp	/^int GetPropertyGetsFromScript(IDispatch *piDispatch, vector<String>& namesArray, vector<int> &Id/;"	f	namespace:plugin	typeref:typename:int
GetROFromFlags	MainFrm.cpp	/^std::array<bool, 3> GetROFromFlags(int nFiles, const DWORD dwFlags[])$/;"	f	typeref:typename:std::array<bool,3>
GetReadOnly	DirDoc.h	/^inline bool CDirDoc::GetReadOnly(int nIndex) const$/;"	f	class:CDirDoc	typeref:typename:bool
GetReadOnly	DirDoc.h	/^inline const bool *CDirDoc::GetReadOnly(void) const$/;"	f	class:CDirDoc	typeref:typename:const bool *
GetReadOnly	HexMergeView.cpp	/^bool CHexMergeView::GetReadOnly()$/;"	f	class:CHexMergeView	typeref:typename:bool
GetRecentDocs	JumpList.cpp	/^std::vector<Item> GetRecentDocs(size_t nMaxItems)$/;"	f	namespace:JumpList	typeref:typename:std::vector<Item>
GetRef	PathContext.h	/^	String& GetRef() { return m_sPath; }$/;"	f	class:PathInfo	typeref:typename:String &
GetReportFile	DirCmpReport.h	/^	String GetReportFile() const { return m_sReportFile; }$/;"	f	class:DirCmpReport	typeref:typename:String
GetReportFile	DirDoc.h	/^	String GetReportFile() const { return m_sReportFile; }$/;"	f	class:CDirDoc	typeref:typename:String
GetReportType	DirCmpReport.h	/^	REPORT_TYPE GetReportType() const { return m_nReportType;  }$/;"	f	class:DirCmpReport	typeref:typename:REPORT_TYPE
GetResultFromCode	CompareStats.cpp	/^CompareStats::RESULT CompareStats::GetResultFromCode(unsigned diffcode) const$/;"	f	class:CompareStats	typeref:typename:CompareStats::RESULT
GetRight	PathContext.cpp	/^String PathContext::GetRight(bool bNormalized) const$/;"	f	class:PathContext	typeref:typename:String
GetRight	ProjectFile.cpp	/^String ProjectFileItem::GetRight(bool * pReadOnly \/*= nullptr*\/) const$/;"	f	class:ProjectFileItem	typeref:typename:String
GetRightPath	DiffContext.h	/^	String GetRightPath() const { return m_paths.GetRight(false); }$/;"	f	class:CDiffContext	typeref:typename:String
GetRightReadOnly	ProjectFile.h	/^inline bool ProjectFileItem::GetRightReadOnly() const$/;"	f	class:ProjectFileItem	typeref:typename:bool
GetRowCount	IListCtrlImpl.h	/^	int GetRowCount() const override$/;"	f	class:IListCtrlImpl	typeref:typename:int
GetRowInfo	Common/sizecbar.cpp	/^void CSizingControlBar::GetRowInfo(int& nFirst, int& nLast, int& nThis)$/;"	f	class:CSizingControlBar	typeref:typename:void
GetRowSizingBars	Common/sizecbar.cpp	/^void CSizingControlBar::GetRowSizingBars(CSCBArray& arrSCBars)$/;"	f	class:CSizingControlBar	typeref:typename:void
GetRowSizingBars	Common/sizecbar.cpp	/^void CSizingControlBar::GetRowSizingBars(CSCBArray& arrSCBars, int& nThis)$/;"	f	class:CSizingControlBar	typeref:typename:void
GetSCBStyle	Common/sizecbar.h	/^    const bool GetSCBStyle() const {return (m_dwSCBStyle != 0);}$/;"	f	class:CSizingControlBar	typeref:typename:const bool
GetSaveCodepage	LoadSaveCodepageDlg.h	/^	int GetSaveCodepage() const { return m_nSaveCodepage; }$/;"	f	class:CLoadSaveCodepageDlg	typeref:typename:int
GetScriptletsAt	Plugins.cpp	/^static void GetScriptletsAt(const String& sSearchPath, const String& extension, vector<String>& /;"	f	typeref:typename:void	file:
GetScriptsSubmenu	MainFrm.cpp	/^HMENU CMainFrame::GetScriptsSubmenu(HMENU mainMenu)$/;"	f	class:CMainFrame	typeref:typename:HMENU
GetScrollBarCtrl	Common/SplitterWndEx.cpp	/^CScrollBar* CSplitterWndEx::GetScrollBarCtrl(CWnd* pWnd, int nBar) const$/;"	f	class:CSplitterWndEx	typeref:typename:CScrollBar *
GetSelected	FileFiltersDlg.cpp	/^String FileFiltersDlg::GetSelected()$/;"	f	class:FileFiltersDlg	typeref:typename:String
GetSelectedCount	DirView.cpp	/^UINT CDirView::GetSelectedCount() const$/;"	f	class:CDirView	typeref:typename:UINT
GetSelectedCount	IListCtrlImpl.h	/^	unsigned GetSelectedCount() const override$/;"	f	class:IListCtrlImpl	typeref:typename:unsigned
GetSelectedFileName	DirActions.h	/^String GetSelectedFileName(InputIterator& it, SIDE_TYPE stype, const CDiffContext& ctxt)$/;"	f	typeref:typename:String
GetSelectedFilterType	SharedFilterDlg.h	/^	FilterType GetSelectedFilterType() const { return m_selectedType; }$/;"	f	class:CSharedFilterDlg	typeref:typename:FilterType
GetSelectedItems	DirView.cpp	/^bool CDirView::GetSelectedItems(int * sel1, int * sel2, int * sel3)$/;"	f	class:CDirView	typeref:typename:bool
GetSelectedPluginInfo	PluginsListDlg.cpp	/^PluginInfo *PluginsListDlg::GetSelectedPluginInfo() const$/;"	f	class:PluginsListDlg	typeref:typename:PluginInfo *
GetSelectedText	MergeEditView.cpp	/^CString CMergeEditView::GetSelectedText()$/;"	f	class:CMergeEditView	typeref:typename:CString
GetSetForFileType	FilterCommentsManager.cpp	/^FilterCommentsSet FilterCommentsManager::GetSetForFileType(const String& FileTypeName) const$/;"	f	class:FilterCommentsManager	typeref:typename:FilterCommentsSet
GetSignificantDiffs	DiffList.cpp	/^int DiffList::GetSignificantDiffs() const$/;"	f	class:DiffList	typeref:typename:int
GetSignificantIndex	DiffList.cpp	/^int DiffList::GetSignificantIndex(int nDiff) const$/;"	f	class:DiffList	typeref:typename:int
GetSingleSelectedItem	DirView.cpp	/^int CDirView::GetSingleSelectedItem() const$/;"	f	class:CDirView	typeref:typename:int
GetSize	DiffList.h	/^inline int DiffList::GetSize() const$/;"	f	class:DiffList	typeref:typename:int
GetSize	PathContext.h	/^inline int PathContext::GetSize() const$/;"	f	class:PathContext	typeref:typename:int
GetSizingControlBar	Common/sizecbar.cpp	/^CSizingControlBar* CSCBMiniDockFrameWnd::GetSizingControlBar()$/;"	f	class:CSCBMiniDockFrameWnd	typeref:typename:CSizingControlBar *
GetSpecialBuild	Common/VersionInfo.h	/^inline String CVersionInfo::GetSpecialBuild() const$/;"	f	class:CVersionInfo	typeref:typename:String
GetSplitter	MergeEditFrm.h	/^	CSplitterWndEx& GetSplitter() { return m_wndSplitter; };$/;"	f	class:CMergeEditFrame	typeref:typename:CSplitterWndEx &
GetString	Common/BCMenu.cpp	/^CString BCMenuData::GetString(void)\/\/returns the menu text in ANSI or UNICODE$/;"	f	class:BCMenuData	typeref:typename:CString
GetString	Common/LanguageSelect.cpp	/^String LangFileInfo::GetString(LCTYPE type) const$/;"	f	class:LangFileInfo	typeref:typename:String
GetString	Common/OptionsMgr.cpp	/^const String& COptionsMgr::GetString(const String& name) const$/;"	f	class:COptionsMgr	typeref:typename:const String &
GetString	Common/varprop.cpp	/^const String& VariantValue::GetString() const$/;"	f	class:varprop::VariantValue	typeref:typename:const String &
GetStyle	Common/MessageBoxDialog.cpp	/^inline UINT CMessageBoxDialog::GetStyle ( )$/;"	f	class:CMessageBoxDialog	typeref:typename:UINT
GetSubBCMenu	Common/BCMenu.cpp	/^BCMenu* BCMenu::GetSubBCMenu(wchar_t* lpszSubMenuName)$/;"	f	class:BCMenu	typeref:typename:BCMenu *
GetSubBCMenu	Common/BCMenu.h	/^	BCMenu* GetSubBCMenu(char* pText)$/;"	f	class:BCMenu	typeref:typename:BCMenu *
GetSubMenu	Common/BCMenu.cpp	/^CMenu* BCMenu::GetSubMenu(LPCTSTR lpszSubMenuName)$/;"	f	class:BCMenu	typeref:typename:CMenu *
GetSubMenu	Common/BCMenu.cpp	/^CMenu* BCMenu::GetSubMenu(int nPos)$/;"	f	class:BCMenu	typeref:typename:CMenu *
GetSubfolders	ProjectFile.h	/^inline int ProjectFileItem::GetSubfolders() const$/;"	f	class:ProjectFileItem	typeref:typename:int
GetSubmenu	MainFrm.cpp	/^static HMENU GetSubmenu(HMENU mainMenu, UINT nIDFirstMenuItem, bool bFirstSubmenu)$/;"	f	typeref:typename:HMENU	file:
GetSyncPointList	MergeDoc.cpp	/^std::vector<std::vector<int> > CMergeDoc::GetSyncPointList()$/;"	f	class:CMergeDoc	typeref:typename:std::vector<std::vector<int>>
GetSysError	MergeApp.cpp	/^String GetSysError(int nerr \/* =-1 *\/)$/;"	f	typeref:typename:String
GetSystemTempPath	Environment.cpp	/^String GetSystemTempPath()$/;"	f	namespace:env	typeref:typename:String
GetTagName	markdown.cpp	/^std::string CMarkdown::GetTagName() const$/;"	f	class:CMarkdown	typeref:typename:std::string
GetTagText	markdown.cpp	/^std::string CMarkdown::GetTagText() const$/;"	f	class:CMarkdown	typeref:typename:std::string
GetTempChildPath	Environment.cpp	/^String GetTempChildPath()$/;"	f	namespace:env	typeref:typename:String
GetTemporaryFileName	Environment.cpp	/^String GetTemporaryFileName(const String& lpPathName, const String& lpPrefixString, int * pnerr /;"	f	namespace:env	typeref:typename:String
GetTemporaryPath	Environment.cpp	/^String GetTemporaryPath()$/;"	f	namespace:env	typeref:typename:String
GetText	EditorFilepathBar.cpp	/^String CEditorFilePathBar::GetText(int pane) const$/;"	f	class:CEditorFilePathBar	typeref:typename:String
GetTextFileStyle	DiffTextBuffer.cpp	/^static CRLFSTYLE GetTextFileStyle(const UniMemFile::txtstats & stats)$/;"	f	typeref:typename:CRLFSTYLE	file:
GetTextStats	CompareEngines/ByteCompare.cpp	/^void ByteCompare::GetTextStats(int side, FileTextStats *stats) const$/;"	f	class:CompareEngines::ByteCompare	typeref:typename:void
GetTextStats	CompareEngines/Wrap_DiffUtils.cpp	/^void DiffUtils::GetTextStats(int side, FileTextStats *stats) const$/;"	f	class:CompareEngines::DiffUtils	typeref:typename:void
GetTextWithoutEmptys	GhostTextBuffer.cpp	/^GetTextWithoutEmptys(int nStartLine, int nStartChar, $/;"	f	class:CGhostTextBuffer	typeref:typename:void
GetTextWithoutEmptys	GhostTextView.cpp	/^void CGhostTextView::GetTextWithoutEmptys (int nStartLine, int nStartChar,$/;"	f	class:CGhostTextView	typeref:typename:void
GetTextWithoutEmptysInColumnSelection	GhostTextView.cpp	/^void CGhostTextView::GetTextWithoutEmptysInColumnSelection (CString & text, bool bExcludeInvisib/;"	f	class:CGhostTextView	typeref:typename:void
GetThreadState	DiffThread.h	/^inline unsigned CDiffThread::GetThreadState() const$/;"	f	class:CDiffThread	typeref:typename:unsigned
GetTime	Common/varprop.cpp	/^time_t VariantValue::GetTime() const$/;"	f	class:varprop::VariantValue	typeref:typename:time_t
GetTimeoutDisabled	Common/MessageBoxDialog.cpp	/^inline bool CMessageBoxDialog::GetTimeoutDisabled ( )$/;"	f	class:CMessageBoxDialog	typeref:typename:bool
GetTimeoutSeconds	Common/MessageBoxDialog.cpp	/^inline UINT CMessageBoxDialog::GetTimeoutSeconds ( )$/;"	f	class:CMessageBoxDialog	typeref:typename:UINT
GetTitle	Common/MessageBoxDialog.cpp	/^inline const String &CMessageBoxDialog::GetTitle ( )$/;"	f	class:CMessageBoxDialog	typeref:typename:const String &
GetTopLine	MergeEditView.h	/^	int GetTopLine() const { return m_nTopLine; }$/;"	f	class:CMergeEditView	typeref:typename:int
GetTopSubLine	MergeEditView.h	/^	int GetTopSubLine() const { return m_nTopSubLine; }$/;"	f	class:CMergeEditView	typeref:typename:int
GetTotalItems	CompareStats.h	/^inline int CompareStats::GetTotalItems() const$/;"	f	class:CompareStats	typeref:typename:int
GetTransparentBitmap	Common/BCMenu.cpp	/^void BCMenu::GetTransparentBitmap(CBitmap &bmp)$/;"	f	class:BCMenu	typeref:typename:void
GetTxtStats	Common/UniFile.h	/^	virtual const txtstats & GetTxtStats() const override { return m_txtstats; }$/;"	f	class:UniLocalFile	typeref:typename:const txtstats &
GetType	Common/varprop.h	/^	VT_TYPE GetType() const { return m_vtype; }$/;"	f	class:varprop::VariantValue	typeref:typename:VT_TYPE
GetTypeInfo	Common/lwdisp.c	/^static STDMETHODIMP GetTypeInfo(struct LWDispatch *UNUSED_ARG(This),$/;"	f	typeref:typename:STDMETHODIMP	file:
GetTypeInfoCount	Common/lwdisp.c	/^static STDMETHODIMP GetTypeInfoCount(struct LWDispatch *UNUSED_ARG(This),$/;"	f	typeref:typename:STDMETHODIMP	file:
GetUndoRecord	GhostTextBuffer.cpp	/^GetUndoRecord(int nUndoPos) const$/;"	f	class:CGhostTextBuffer	typeref:typename:UndoRecord
GetUnicoding	Common/UniFile.h	/^	virtual ucr::UNICODESET GetUnicoding() const override { return m_unicoding; }$/;"	f	class:UniLocalFile	typeref:typename:ucr::UNICODESET
GetUpdatedTipText	FilepathEdit.cpp	/^const String& CFilepathEdit::GetUpdatedTipText(CDC * pDC, int maxWidth)$/;"	f	class:CFilepathEdit	typeref:typename:const String &
GetUserFilterPathWithCreate	FileFilterHelper.cpp	/^String FileFilterHelper::GetUserFilterPathWithCreate() const$/;"	f	class:FileFilterHelper	typeref:typename:String
GetUtf8Char	Common/unicoder.cpp	/^unsigned GetUtf8Char(unsigned char * str)$/;"	f	namespace:ucr	typeref:typename:unsigned
GetVariantArrayData	Common/multiformatText.cpp	/^static void *GetVariantArrayData(VARIANT& array, unsigned& size)$/;"	f	typeref:typename:void *	file:
GetVersion	DirViewColItems.cpp	/^static String GetVersion(const CDiffContext * pCtxt, const DIFFITEM *pdi, int nIndex)$/;"	f	typeref:typename:String	file:
GetVersionInfo	Common/VersionInfo.cpp	/^void CVersionInfo::GetVersionInfo()$/;"	f	class:CVersionInfo	typeref:typename:void
GetVersionQWORD	DirViewColItems.cpp	/^static uint64_t GetVersionQWORD(const CDiffContext * pCtxt, const DIFFITEM *pdi, int nIndex)$/;"	f	typeref:typename:uint64_t	file:
GetView	MergeDoc.h	/^	CMergeEditView * GetView(int group, int buffer) const { return m_pView[group][buffer]; }$/;"	f	class:CMergeDoc	typeref:typename:CMergeEditView *
GetViewList	MergeDoc.h	/^	std::vector<CMergeEditView *> GetViewList(int nGroup = -1, int nBuffer = -1) const {$/;"	f	class:CMergeDoc	typeref:typename:std::vector<CMergeEditView * >
GetWideString	Common/BCMenu.h	/^	const wchar_t *GetWideString(void) {return m_szMenuText;};$/;"	f	class:BCMenuData	typeref:typename:const wchar_t *
GetWindowStyle	Common/CMoveConstraint.cpp	/^#define GetWindowStyle(/;"	d	file:
GetWindowsDirectory	Environment.cpp	/^String GetWindowsDirectory()$/;"	f	namespace:env	typeref:typename:String
GetWindowsVer	ConfigLog.cpp	/^String CConfigLog::GetWindowsVer() const$/;"	f	class:CConfigLog	typeref:typename:String
GetWordDiffArray	MergeDocLineDiffs.cpp	/^std::vector<WordDiff> CMergeDoc::GetWordDiffArray(int nLineIndex)$/;"	f	class:CMergeDoc	typeref:typename:std::vector<WordDiff>
GetWordDiffArrayInDiffBlock	MergeDocLineDiffs.cpp	/^std::vector<WordDiff> CMergeDoc::GetWordDiffArrayInDiffBlock(int nDiff)$/;"	f	class:CMergeDoc	typeref:typename:std::vector<WordDiff>
GlobalImageListOffset	Common/BCMenu.cpp	/^int BCMenu::GlobalImageListOffset(int nID)$/;"	f	class:BCMenu	typeref:typename:int
GlobalLoadState	Common/sizecbar.cpp	/^void CSizingControlBar::GlobalLoadState(CFrameWnd* pFrame,$/;"	f	class:CSizingControlBar	typeref:typename:void
GlobalSaveState	Common/sizecbar.cpp	/^void CSizingControlBar::GlobalSaveState(CFrameWnd* pFrame,$/;"	f	class:CSizingControlBar	typeref:typename:void
GotoLine	MergeEditView.cpp	/^void CMergeEditView::GotoLine(UINT nLine, bool bRealLine, int pane)$/;"	f	class:CMergeEditView	typeref:typename:void
GotoLocation	LocationView.cpp	/^bool CLocationView::GotoLocation(const CPoint& point, bool bRealLine \/*= true*\/)$/;"	f	class:CLocationView	typeref:typename:bool
GrabCurrentDimensionsAsOriginal	Common/CMoveConstraint.cpp	/^CMoveConstraint::GrabCurrentDimensionsAsOriginal(HWND hwndDlg)$/;"	f	class:prdlg::CMoveConstraint	typeref:typename:void
GrayScale	Common/Bitmap.cpp	/^bool GrayScale(CBitmap *pBitmap)$/;"	f	typeref:typename:bool
GuessByteOrder	markdown.cpp	/^int CMarkdown::FileImage::GuessByteOrder(unsigned dwBOM)$/;"	f	class:CMarkdown::FileImage	typeref:typename:int
GuessCodepageEncoding	codepage_detect.cpp	/^FileTextEncoding GuessCodepageEncoding(const String& filepath, int guessEncodingType, ptrdiff_t /;"	f	typeref:typename:FileTextEncoding
GuessEncoding_from_bytes	codepage_detect.cpp	/^static unsigned GuessEncoding_from_bytes(const String& ext, const char *src, size_t len, int gue/;"	f	typeref:typename:unsigned	file:
GuessFormat	Merge7zFormatMergePluginImpl.cpp	/^Merge7z::Format *Merge7zFormatMergePluginImpl::GuessFormat(const String& path)$/;"	f	class:Merge7zFormatMergePluginImpl	typeref:typename:Merge7z::Format *
GuessFormat	Merge7zFormatRegister.h	/^	static Merge7z::Format *GuessFormat(const String& path)$/;"	f	struct:Merge7zFormatRegister	typeref:typename:Merge7z::Format *
GuessFormat	Merge7zFormatShellImpl.cpp	/^Merge7z::Format *Merge7zFormatShellImpl::GuessFormat(const String& path)$/;"	f	class:Merge7zFormatShellImpl	typeref:typename:Merge7z::Format *
HASH	diffutils/src/io.c	/^#define HASH(/;"	d	file:
HASH	stringdiffs.cpp	/^#define HASH(/;"	d	file:
HAVE_DUP2	diffutils/config.h	/^#define HAVE_DUP2 /;"	d
HAVE_FCNTL_H	diffutils/config.h	/^#define HAVE_FCNTL_H /;"	d
HAVE_LIMITS_H	diffutils/config.h	/^#define HAVE_LIMITS_H /;"	d
HAVE_MEMCHR	diffutils/config.h	/^#define HAVE_MEMCHR /;"	d
HAVE_SIGACTION	diffutils/config.h	/^#define HAVE_SIGACTION /;"	d
HAVE_STDLIB_H	diffutils/config.h	/^#define HAVE_STDLIB_H /;"	d
HAVE_STRERROR	diffutils/config.h	/^#define HAVE_STRERROR /;"	d
HAVE_STRING_H	diffutils/config.h	/^#define HAVE_STRING_H /;"	d
HAVE_TIME_H	diffutils/config.h	/^#define HAVE_TIME_H /;"	d
HAVE_VPRINTF	diffutils/config.h	/^#define HAVE_VPRINTF /;"	d
HAVE_WAITPID	diffutils/config.h	/^#define HAVE_WAITPID /;"	d
HEKSEDIT_INTERFACE_VERSION	HexMergeFrm.h	/^#define HEKSEDIT_INTERFACE_VERSION /;"	d
HEKSEDIT_INTERFACE_VERSION	heksedit.h	/^#define HEKSEDIT_INTERFACE_VERSION /;"	d
HGLOBAL_WriteToFile	DropHandler.cpp	/^	HRESULT HGLOBAL_WriteToFile(HGLOBAL hGlobal, const String& filename)$/;"	f	namespace:__anonfdfe2aa90111	typeref:typename:HRESULT
HIBYTE	markdown.cpp	/^#define HIBYTE(/;"	d	file:
HIDA_GetPIDLFolder	DropHandler.cpp	/^#define HIDA_GetPIDLFolder(/;"	d	file:
HIDA_GetPIDLItem	DropHandler.cpp	/^#define HIDA_GetPIDLItem(/;"	d	file:
HIDDEN	DiffItem.h	/^	VISIBILITY = 0x3U, VISIBLE = 0x1U, HIDDEN = 0x2U, EXPANDED = 0x4U$/;"	e	enum:ViewCustomFlags
HIWORD	FileVersion.cpp	/^#define HIWORD(/;"	d	file:
HIWORD	markdown.cpp	/^#define HIWORD(/;"	d	file:
HSCROLL	WinIMergeLib.h	/^		SIZE, HSCROLL, VSCROLL, SETFOCUS, KILLFOCUS,$/;"	e	enum:IImgMergeWindow::EVENT_TYPE
HUGE	diffutils/src/system.h	/^#define HUGE /;"	d
HUGE	diffutils/src/system.h	/^#define HUGE$/;"	d
HandleDeleter	DropHandler.cpp	/^	struct HandleDeleter {$/;"	s	namespace:__anonfdfe2aa90111	file:
HandleMenuMessage	Common/ShellContextMenu.cpp	/^bool CShellContextMenu::HandleMenuMessage(UINT message, WPARAM wParam, LPARAM lParam, LRESULT& r/;"	f	class:CShellContextMenu	typeref:typename:bool
HandleReadonlySave	Merge.cpp	/^int CMergeApp::HandleReadonlySave(String& strSavePath, bool bMultiFile,$/;"	f	class:CMergeApp	typeref:typename:int
HandleSide0Eol	CompareEngines/ByteComparator.cpp	/^inline void ByteComparator::HandleSide0Eol(char **ptr, const char *end, bool eof)$/;"	f	class:CompareEngines::ByteComparator	typeref:typename:void
HandleSide1Eol	CompareEngines/ByteComparator.cpp	/^inline void ByteComparator::HandleSide1Eol(char **ptr, const char *end, bool eof)$/;"	f	class:CompareEngines::ByteComparator	typeref:typename:void
HasBom	Common/UniFile.h	/^inline bool UniMemFile::HasBom() const$/;"	f	class:UniMemFile	typeref:typename:bool
HasBom	Common/UniFile.h	/^inline bool UniStdioFile::HasBom() const$/;"	f	class:UniStdioFile	typeref:typename:bool
HasChildren	DiffItem.h	/^	inline bool DIFFITEM::HasChildren() const { return (children != nullptr); }$/;"	f	class:DIFFITEM::DIFFITEM	typeref:typename:bool
HasDiffs	DirDoc.h	/^	bool HasDiffs() const { return m_pCtxt != nullptr; }$/;"	f	class:CDirDoc	typeref:typename:bool
HasDirView	DirDoc.h	/^	bool HasDirView() const { return m_pDirView != nullptr; }$/;"	f	class:CDirDoc	typeref:typename:bool
HasError	Common/UniFile.h	/^inline bool UniFile::UniError::HasError() const$/;"	f	class:UniFile::UniError	typeref:typename:bool
HasFilter	ProjectFile.h	/^inline bool ProjectFileItem::HasFilter() const$/;"	f	class:ProjectFileItem	typeref:typename:bool
HasGripper	Common/scbarg.cpp	/^bool CSizingControlBarG::HasGripper() const$/;"	f	class:CSizingControlBarG	typeref:typename:bool
HasLeft	ProjectFile.h	/^inline bool ProjectFileItem::HasLeft() const$/;"	f	class:ProjectFileItem	typeref:typename:bool
HasMiddle	ProjectFile.h	/^inline bool ProjectFileItem::HasMiddle() const$/;"	f	class:ProjectFileItem	typeref:typename:bool
HasNextDiff	DirView.cpp	/^bool CDirView::HasNextDiff()$/;"	f	class:CDirView	typeref:typename:bool
HasParent	DiffItem.h	/^	inline bool DIFFITEM::HasParent() const { return (parent != nullptr); }$/;"	f	class:DIFFITEM::DIFFITEM	typeref:typename:bool
HasPrevDiff	DirView.cpp	/^bool CDirView::HasPrevDiff()$/;"	f	class:CDirView	typeref:typename:bool
HasRegExps	FilterList.h	/^inline bool FilterList::HasRegExps() const$/;"	f	class:FilterList	typeref:typename:bool
HasRight	ProjectFile.h	/^inline bool ProjectFileItem::HasRight() const$/;"	f	class:ProjectFileItem	typeref:typename:bool
HasSignificantDiffs	DiffList.h	/^inline bool DiffList::HasSignificantDiffs() const$/;"	f	class:DiffList	typeref:typename:bool
HasSubfolders	ProjectFile.h	/^inline bool ProjectFileItem::HasSubfolders() const$/;"	f	class:ProjectFileItem	typeref:typename:bool
HasSyncPoints	MergeDoc.h	/^inline bool CMergeDoc::HasSyncPoints()$/;"	f	class:CMergeDoc	typeref:typename:bool
HasZipSupport	7zCommon.cpp	/^int NTAPI HasZipSupport()$/;"	f	typeref:typename:int NTAPI
Hash	stringdiffs.cpp	/^stringdiffs::Hash(const String & str, int begin, int end, unsigned h) const$/;"	f	class:strdiff::stringdiffs	typeref:typename:unsigned
HeaderContextMenu	DirView.cpp	/^void CDirView::HeaderContextMenu(CPoint point, int \/*i*\/)$/;"	f	class:CDirView	typeref:typename:void
Heksedit	PropCompareBinary.cpp	/^	explicit Heksedit(CWnd *pwndParent)$/;"	f	class:Heksedit	file:
Heksedit	PropCompareBinary.cpp	/^class Heksedit$/;"	c	file:
HexMergeDocList	MainFrm.h	/^typedef CTypedPtrList<CPtrList, CHexMergeDoc *> HexMergeDocList;$/;"	t	typeref:typename:CTypedPtrList<CPtrList,CHexMergeDoc * >
HideBorders	Common/SplitterWndEx.h	/^	void HideBorders(bool bHide)$/;"	f	class:CSplitterWndEx	typeref:typename:void
HideLines	MergeDoc.cpp	/^void CMergeDoc::HideLines()$/;"	f	class:CMergeDoc	typeref:typename:void
HighlightDiffRect	MergeDocLineDiffs.cpp	/^HighlightDiffRect(CMergeEditView * pView, const CRect & rc)$/;"	f	typeref:typename:void	file:
HitTest	Common/MDITabBar.h	/^	int HitTest(TCHITTESTINFO* pHitTestInfo) const$/;"	f	class:CMDITabBar	typeref:typename:int
HitTest	Common/SplitterWndEx.cpp	/^int CSplitterWndEx::HitTest(CPoint pt) const$/;"	f	class:CSplitterWndEx	typeref:typename:int
Html	markdown.h	/^		Html = IgnoreCase|HtmlUTags	\/\/ shortcut$/;"	e	enum:CMarkdown::__anon649c46be0103
HtmlUTags	markdown.h	/^		HtmlUTags = 0x20,			\/\/ check for unbalanced tags$/;"	e	enum:CMarkdown::__anon649c46be0103
IAbortable	IAbortable.h	/^class IAbortable$/;"	c
IDB_ALL	Merge2.rc	/^IDB_ALL                 BITMAP                  "res\\\\all.bmp"$/;"	b
IDB_ALL	resource.h	/^#define IDB_ALL /;"	d
IDB_BOTH	Merge2.rc	/^IDB_BOTH                BITMAP                  "res\\\\both.bmp"$/;"	b
IDB_BOTH	resource.h	/^#define IDB_BOTH /;"	d
IDB_COPY_FROM_LEFT	Merge2.rc	/^IDB_COPY_FROM_LEFT      BITMAP                  "res\\\\from_left.bmp"$/;"	b
IDB_COPY_FROM_LEFT	resource.h	/^#define IDB_COPY_FROM_LEFT /;"	d
IDB_COPY_FROM_RIGHT	Merge2.rc	/^IDB_COPY_FROM_RIGHT     BITMAP                  "res\\\\from_right.bmp"$/;"	b
IDB_COPY_FROM_RIGHT	resource.h	/^#define IDB_COPY_FROM_RIGHT /;"	d
IDB_EDIT_CLEAR_ALL_BOOKMARKS	Merge2.rc	/^IDB_EDIT_CLEAR_ALL_BOOKMARKS BITMAP             "res\\\\clear_bookmarks.bmp"$/;"	b
IDB_EDIT_CLEAR_ALL_BOOKMARKS	resource.h	/^#define IDB_EDIT_CLEAR_ALL_BOOKMARKS /;"	d
IDB_EDIT_COPY	Merge2.rc	/^IDB_EDIT_COPY           BITMAP                  "res\\\\copy.bmp"$/;"	b
IDB_EDIT_COPY	resource.h	/^#define IDB_EDIT_COPY /;"	d
IDB_EDIT_CUT	Merge2.rc	/^IDB_EDIT_CUT            BITMAP                  "res\\\\cut.bmp"$/;"	b
IDB_EDIT_CUT	resource.h	/^#define IDB_EDIT_CUT /;"	d
IDB_EDIT_GOTO	Merge2.rc	/^IDB_EDIT_GOTO           BITMAP                  "res\\\\go_to.bmp"$/;"	b
IDB_EDIT_GOTO	resource.h	/^#define IDB_EDIT_GOTO /;"	d
IDB_EDIT_GOTO_NEXT_BOOKMARK	Merge2.rc	/^IDB_EDIT_GOTO_NEXT_BOOKMARK BITMAP              "res\\\\next_bookmark.bmp"$/;"	b
IDB_EDIT_GOTO_NEXT_BOOKMARK	resource.h	/^#define IDB_EDIT_GOTO_NEXT_BOOKMARK /;"	d
IDB_EDIT_GOTO_PREV_BOOKMARK	Merge2.rc	/^IDB_EDIT_GOTO_PREV_BOOKMARK BITMAP              "res\\\\prev_bookmark.bmp"$/;"	b
IDB_EDIT_GOTO_PREV_BOOKMARK	resource.h	/^#define IDB_EDIT_GOTO_PREV_BOOKMARK /;"	d
IDB_EDIT_PASTE	Merge2.rc	/^IDB_EDIT_PASTE          BITMAP                  "res\\\\paste.bmp"$/;"	b
IDB_EDIT_PASTE	resource.h	/^#define IDB_EDIT_PASTE /;"	d
IDB_EDIT_REPLACE	Merge2.rc	/^IDB_EDIT_REPLACE        BITMAP                  "res\\\\replace.bmp"$/;"	b
IDB_EDIT_REPLACE	resource.h	/^#define IDB_EDIT_REPLACE /;"	d
IDB_EDIT_SEARCH	Merge2.rc	/^IDB_EDIT_SEARCH         BITMAP                  "res\\\\search.bmp"$/;"	b
IDB_EDIT_SEARCH	resource.h	/^#define IDB_EDIT_SEARCH /;"	d
IDB_EDIT_SELECTALL	Merge2.rc	/^IDB_EDIT_SELECTALL      BITMAP                  "res\\\\select_all.bmp"$/;"	b
IDB_EDIT_SELECTALL	resource.h	/^#define IDB_EDIT_SELECTALL /;"	d
IDB_EDIT_TOGGLE_BOOKMARK	Merge2.rc	/^IDB_EDIT_TOGGLE_BOOKMARK BITMAP                 "res\\\\toggle_bookmark.bmp"$/;"	b
IDB_EDIT_TOGGLE_BOOKMARK	resource.h	/^#define IDB_EDIT_TOGGLE_BOOKMARK /;"	d
IDB_FILE_EXIT	Merge2.rc	/^IDB_FILE_EXIT           BITMAP                  "res\\\\exit.bmp"$/;"	b
IDB_FILE_EXIT	resource.h	/^#define IDB_FILE_EXIT /;"	d
IDB_FILE_NEW3	Merge2.rc	/^IDB_FILE_NEW3           BITMAP                  "res\\\\New3_16.bmp"$/;"	b
IDB_FILE_NEW3	resource.h	/^#define IDB_FILE_NEW3 /;"	d
IDB_FILE_OPENCONFLICT	Merge2.rc	/^IDB_FILE_OPENCONFLICT   BITMAP                  "res\\\\open_conflict.bmp"$/;"	b
IDB_FILE_OPENCONFLICT	resource.h	/^#define IDB_FILE_OPENCONFLICT /;"	d
IDB_FILE_PRINT	Merge2.rc	/^IDB_FILE_PRINT          BITMAP                  "res\\\\print.bmp"$/;"	b
IDB_FILE_PRINT	resource.h	/^#define IDB_FILE_PRINT /;"	d
IDB_HELP_CONTENTS	Merge2.rc	/^IDB_HELP_CONTENTS       BITMAP                  "res\\\\help_contents.bmp"$/;"	b
IDB_HELP_CONTENTS	resource.h	/^#define IDB_HELP_CONTENTS /;"	d
IDB_LEFT	Merge2.rc	/^IDB_LEFT                BITMAP                  "res\\\\left.bmp"$/;"	b
IDB_LEFT	resource.h	/^#define IDB_LEFT /;"	d
IDB_LEFT_TO_BROWSE	Merge2.rc	/^IDB_LEFT_TO_BROWSE      BITMAP                  "res\\\\left_to_browse.bmp"$/;"	b
IDB_LEFT_TO_BROWSE	resource.h	/^#define IDB_LEFT_TO_BROWSE /;"	d
IDB_LEFT_TO_MIDDLE	Merge2.rc	/^IDB_LEFT_TO_MIDDLE      BITMAP                  "res\\\\left_to_middle.bmp"$/;"	b
IDB_LEFT_TO_MIDDLE	resource.h	/^#define IDB_LEFT_TO_MIDDLE /;"	d
IDB_LEFT_TO_RIGHT	Merge2.rc	/^IDB_LEFT_TO_RIGHT       BITMAP                  "res\\\\left_to_right.bmp"$/;"	b
IDB_LEFT_TO_RIGHT	resource.h	/^#define IDB_LEFT_TO_RIGHT /;"	d
IDB_MERGE_COMPARE	Merge2.rc	/^IDB_MERGE_COMPARE       BITMAP                  "res\\\\compare.bmp"$/;"	b
IDB_MERGE_COMPARE	resource.h	/^#define IDB_MERGE_COMPARE /;"	d
IDB_MERGE_COMPARE_LEFT1_LEFT2	Merge2.rc	/^IDB_MERGE_COMPARE_LEFT1_LEFT2 BITMAP            "res\\\\compare_left1_left2.bmp"$/;"	b
IDB_MERGE_COMPARE_LEFT1_LEFT2	resource.h	/^#define IDB_MERGE_COMPARE_LEFT1_LEFT2 /;"	d
IDB_MERGE_COMPARE_LEFT1_RIGHT2	Merge2.rc	/^IDB_MERGE_COMPARE_LEFT1_RIGHT2 BITMAP           "res\\\\compare_left1_right2.bmp"$/;"	b
IDB_MERGE_COMPARE_LEFT1_RIGHT2	resource.h	/^#define IDB_MERGE_COMPARE_LEFT1_RIGHT2 /;"	d
IDB_MERGE_COMPARE_LEFT2_RIGHT1	Merge2.rc	/^IDB_MERGE_COMPARE_LEFT2_RIGHT1 BITMAP           "res\\\\compare_left2_right1.bmp"$/;"	b
IDB_MERGE_COMPARE_LEFT2_RIGHT1	resource.h	/^#define IDB_MERGE_COMPARE_LEFT2_RIGHT1 /;"	d
IDB_MERGE_COMPARE_RIGHT1_RIGHT2	Merge2.rc	/^IDB_MERGE_COMPARE_RIGHT1_RIGHT2 BITMAP          "res\\\\compare_right1_right2.bmp"$/;"	b
IDB_MERGE_COMPARE_RIGHT1_RIGHT2	resource.h	/^#define IDB_MERGE_COMPARE_RIGHT1_RIGHT2 /;"	d
IDB_MERGE_DELETE	Merge2.rc	/^IDB_MERGE_DELETE        BITMAP                  "res\\\\delete.bmp"$/;"	b
IDB_MERGE_DELETE	resource.h	/^#define IDB_MERGE_DELETE /;"	d
IDB_MIDDLE	Merge2.rc	/^IDB_MIDDLE              BITMAP                  "res\\\\middle.bmp"$/;"	b
IDB_MIDDLE	resource.h	/^#define IDB_MIDDLE /;"	d
IDB_MIDDLE_TO_BROWSE	Merge2.rc	/^IDB_MIDDLE_TO_BROWSE    BITMAP                  "res\\\\middle_to_browse.bmp"$/;"	b
IDB_MIDDLE_TO_BROWSE	resource.h	/^#define IDB_MIDDLE_TO_BROWSE /;"	d
IDB_MIDDLE_TO_LEFT	Merge2.rc	/^IDB_MIDDLE_TO_LEFT      BITMAP                  "res\\\\middle_to_left.bmp"$/;"	b
IDB_MIDDLE_TO_LEFT	resource.h	/^#define IDB_MIDDLE_TO_LEFT /;"	d
IDB_MIDDLE_TO_RIGHT	Merge2.rc	/^IDB_MIDDLE_TO_RIGHT     BITMAP                  "res\\\\middle_to_right.bmp"$/;"	b
IDB_MIDDLE_TO_RIGHT	resource.h	/^#define IDB_MIDDLE_TO_RIGHT /;"	d
IDB_MOVE_LEFT_TO_BROWSE	Merge2.rc	/^IDB_MOVE_LEFT_TO_BROWSE BITMAP                  "res\\\\move_left_to_browse.bmp"$/;"	b
IDB_MOVE_LEFT_TO_BROWSE	resource.h	/^#define IDB_MOVE_LEFT_TO_BROWSE /;"	d
IDB_MOVE_MIDDLE_TO_BROWSE	Merge2.rc	/^IDB_MOVE_MIDDLE_TO_BROWSE BITMAP                "res\\\\move_middle_to_browse.bmp"$/;"	b
IDB_MOVE_MIDDLE_TO_BROWSE	resource.h	/^#define IDB_MOVE_MIDDLE_TO_BROWSE /;"	d
IDB_MOVE_RIGHT_TO_BROWSE	Merge2.rc	/^IDB_MOVE_RIGHT_TO_BROWSE BITMAP                 "res\\\\move_right_to_browse.bmp"$/;"	b
IDB_MOVE_RIGHT_TO_BROWSE	resource.h	/^#define IDB_MOVE_RIGHT_TO_BROWSE /;"	d
IDB_PLUGINS_LIST	Merge2.rc	/^IDB_PLUGINS_LIST        BITMAP                  "res\\\\plugins.bmp"$/;"	b
IDB_PLUGINS_LIST	resource.h	/^#define IDB_PLUGINS_LIST /;"	d
IDB_RIGHT	Merge2.rc	/^IDB_RIGHT               BITMAP                  "res\\\\right.bmp"$/;"	b
IDB_RIGHT	resource.h	/^#define IDB_RIGHT /;"	d
IDB_RIGHT_TO_BROWSE	Merge2.rc	/^IDB_RIGHT_TO_BROWSE     BITMAP                  "res\\\\right_to_browse.bmp"$/;"	b
IDB_RIGHT_TO_BROWSE	resource.h	/^#define IDB_RIGHT_TO_BROWSE /;"	d
IDB_RIGHT_TO_LEFT	Merge2.rc	/^IDB_RIGHT_TO_LEFT       BITMAP                  "res\\\\right_to_left.bmp"$/;"	b
IDB_RIGHT_TO_LEFT	resource.h	/^#define IDB_RIGHT_TO_LEFT /;"	d
IDB_RIGHT_TO_MIDDLE	Merge2.rc	/^IDB_RIGHT_TO_MIDDLE     BITMAP                  "res\\\\right_to_middle.bmp"$/;"	b
IDB_RIGHT_TO_MIDDLE	resource.h	/^#define IDB_RIGHT_TO_MIDDLE /;"	d
IDB_TOOLBAR_ENABLED	Merge2.rc	/^IDB_TOOLBAR_ENABLED     BITMAP                  "res\\\\ToolbarEnabled.bmp"$/;"	b
IDB_TOOLBAR_ENABLED	resource.h	/^#define IDB_TOOLBAR_ENABLED /;"	d
IDB_TOOLBAR_ENABLED32	Merge2.rc	/^IDB_TOOLBAR_ENABLED32   BITMAP                  "res\\\\ToolbarEnabled32.bmp"$/;"	b
IDB_TOOLBAR_ENABLED32	resource.h	/^#define IDB_TOOLBAR_ENABLED32 /;"	d
IDB_TOOLBAR_ENABLED8BIT	Merge2.rc	/^IDB_TOOLBAR_ENABLED8BIT BITMAP                  "res\\\\ToolbarEnabled8bit.bmp"$/;"	b
IDB_TOOLBAR_ENABLED8BIT	resource.h	/^#define IDB_TOOLBAR_ENABLED8BIT /;"	d
IDB_TOOLBAR_ENABLED_MASK	Merge2.rc	/^IDB_TOOLBAR_ENABLED_MASK BITMAP                 "res\\\\ToolbarEnabledMask.bmp"$/;"	b
IDB_TOOLBAR_ENABLED_MASK	resource.h	/^#define IDB_TOOLBAR_ENABLED_MASK /;"	d
IDB_TOOLBAR_ENABLED_MASK32	Merge2.rc	/^IDB_TOOLBAR_ENABLED_MASK32 BITMAP               "res\\\\ToolbarEnabledMask32.bmp"$/;"	b
IDB_TOOLBAR_ENABLED_MASK32	resource.h	/^#define IDB_TOOLBAR_ENABLED_MASK32 /;"	d
IDB_TOOLS_COLUMNS	Merge2.rc	/^IDB_TOOLS_COLUMNS       BITMAP                  "res\\\\customize_columns.bmp"$/;"	b
IDB_TOOLS_COLUMNS	resource.h	/^#define IDB_TOOLS_COLUMNS /;"	d
IDB_TOOLS_FILTERS	Merge2.rc	/^IDB_TOOLS_FILTERS       BITMAP                  "res\\\\filters.bmp"$/;"	b
IDB_TOOLS_FILTERS	resource.h	/^#define IDB_TOOLS_FILTERS /;"	d
IDB_TOOLS_GENERATEPATCH	Merge2.rc	/^IDB_TOOLS_GENERATEPATCH BITMAP                  "res\\\\patch.bmp"$/;"	b
IDB_TOOLS_GENERATEPATCH	resource.h	/^#define IDB_TOOLS_GENERATEPATCH /;"	d
IDB_TOOLS_GENERATEREPORT	Merge2.rc	/^IDB_TOOLS_GENERATEREPORT BITMAP                 "res\\\\report.bmp"$/;"	b
IDB_TOOLS_GENERATEREPORT	resource.h	/^#define IDB_TOOLS_GENERATEREPORT /;"	d
IDB_VIEW_SELECTFONT	Merge2.rc	/^IDB_VIEW_SELECTFONT     BITMAP                  "res\\\\select_font.bmp"$/;"	b
IDB_VIEW_SELECTFONT	resource.h	/^#define IDB_VIEW_SELECTFONT /;"	d
IDB_VIEW_ZOOMIN	Merge2.rc	/^IDB_VIEW_ZOOMIN         BITMAP                  "res\\\\zoom_in.bmp"$/;"	b
IDB_VIEW_ZOOMIN	resource.h	/^#define IDB_VIEW_ZOOMIN /;"	d
IDB_VIEW_ZOOMOUT	Merge2.rc	/^IDB_VIEW_ZOOMOUT        BITMAP                  "res\\\\zoom_out.bmp"$/;"	b
IDB_VIEW_ZOOMOUT	resource.h	/^#define IDB_VIEW_ZOOMOUT /;"	d
IDB_WINDOW_CASCADE	Merge2.rc	/^IDB_WINDOW_CASCADE      BITMAP                  "res\\\\cascade.bmp"$/;"	b
IDB_WINDOW_CASCADE	resource.h	/^#define IDB_WINDOW_CASCADE /;"	d
IDB_WINDOW_CHANGEPANE	Merge2.rc	/^IDB_WINDOW_CHANGEPANE   BITMAP                  "res\\\\change_pane.bmp"$/;"	b
IDB_WINDOW_CHANGEPANE	resource.h	/^#define IDB_WINDOW_CHANGEPANE /;"	d
IDB_WINDOW_CLOSE	Merge2.rc	/^IDB_WINDOW_CLOSE        BITMAP                  "res\\\\close.bmp"$/;"	b
IDB_WINDOW_CLOSE	resource.h	/^#define IDB_WINDOW_CLOSE /;"	d
IDB_WINDOW_HORIZONTAL	Merge2.rc	/^IDB_WINDOW_HORIZONTAL   BITMAP                  "res\\\\horizontally.bmp"$/;"	b
IDB_WINDOW_HORIZONTAL	resource.h	/^#define IDB_WINDOW_HORIZONTAL /;"	d
IDB_WINDOW_VERTICAL	Merge2.rc	/^IDB_WINDOW_VERTICAL     BITMAP                  "res\\\\vertically.bmp"$/;"	b
IDB_WINDOW_VERTICAL	resource.h	/^#define IDB_WINDOW_VERTICAL /;"	d
IDB_WINMERGE	resource.h	/^#define IDB_WINMERGE /;"	d
IDCHECKBOX	Common/MessageBoxDialog.h	/^#define IDCHECKBOX	/;"	d
IDCONTINUE	Common/MessageBoxDialog.h	/^#define IDCONTINUE	/;"	d
IDC_ABOUTBOX_ICON	resource.h	/^#define IDC_ABOUTBOX_ICON /;"	d
IDC_AFFECTS_GROUP	resource.h	/^#define IDC_AFFECTS_GROUP /;"	d
IDC_AFFECTS_LEFT_BTN	resource.h	/^#define IDC_AFFECTS_LEFT_BTN /;"	d
IDC_AFFECTS_MIDDLE_BTN	resource.h	/^#define IDC_AFFECTS_MIDDLE_BTN /;"	d
IDC_AFFECTS_RIGHT_BTN	resource.h	/^#define IDC_AFFECTS_RIGHT_BTN /;"	d
IDC_ALL_WHITE	resource.h	/^#define IDC_ALL_WHITE /;"	d
IDC_ARCHIVE_DETECTTYPE	resource.h	/^#define IDC_ARCHIVE_DETECTTYPE /;"	d
IDC_ARCHIVE_ENABLE	resource.h	/^#define IDC_ARCHIVE_ENABLE /;"	d
IDC_ASK_MULTIWINDOW_CLOSE	resource.h	/^#define IDC_ASK_MULTIWINDOW_CLOSE /;"	d
IDC_AUTOMRESCAN_CHECK	resource.h	/^#define IDC_AUTOMRESCAN_CHECK /;"	d
IDC_AUTO_COMPLETE_SOURCE	resource.h	/^#define IDC_AUTO_COMPLETE_SOURCE /;"	d
IDC_BACKGROUND_COLUMN_LABEL	resource.h	/^#define IDC_BACKGROUND_COLUMN_LABEL /;"	d
IDC_BACKUP_APPEND_BAK	resource.h	/^#define IDC_BACKUP_APPEND_BAK /;"	d
IDC_BACKUP_APPEND_TIME	resource.h	/^#define IDC_BACKUP_APPEND_TIME /;"	d
IDC_BACKUP_BROWSE	resource.h	/^#define IDC_BACKUP_BROWSE /;"	d
IDC_BACKUP_FILECMP	resource.h	/^#define IDC_BACKUP_FILECMP /;"	d
IDC_BACKUP_FOLDER	resource.h	/^#define IDC_BACKUP_FOLDER /;"	d
IDC_BACKUP_FOLDERCMP	resource.h	/^#define IDC_BACKUP_FOLDERCMP /;"	d
IDC_BACKUP_GLOBALFOLD	resource.h	/^#define IDC_BACKUP_GLOBALFOLD /;"	d
IDC_BACKUP_ORIGFOLD	resource.h	/^#define IDC_BACKUP_ORIGFOLD /;"	d
IDC_BREAK_CHARS	resource.h	/^#define IDC_BREAK_CHARS /;"	d
IDC_BREAK_TYPE	resource.h	/^#define IDC_BREAK_TYPE /;"	d
IDC_BROWSE_BUTTON	resource.h	/^#define IDC_BROWSE_BUTTON /;"	d
IDC_CLOSE_WITH_OK	resource.h	/^#define IDC_CLOSE_WITH_OK /;"	d
IDC_COLDLG_DEFAULTS	resource.h	/^#define IDC_COLDLG_DEFAULTS /;"	d
IDC_COLDLG_DESC	resource.h	/^#define IDC_COLDLG_DESC /;"	d
IDC_COLDLG_LIST	resource.h	/^#define IDC_COLDLG_LIST /;"	d
IDC_COLORDEFAULTS_BTN	resource.h	/^#define IDC_COLORDEFAULTS_BTN /;"	d
IDC_COLORSCHEME_GITHUBBITBUCKET	resource.h	/^#define IDC_COLORSCHEME_GITHUBBITBUCKET /;"	d
IDC_COMPANY	resource.h	/^#define IDC_COMPANY /;"	d
IDC_COMPAREBINARY_BINARYMODE	resource.h	/^#define IDC_COMPAREBINARY_BINARYMODE /;"	d
IDC_COMPAREBINARY_CHARACTERSET	resource.h	/^#define IDC_COMPAREBINARY_CHARACTERSET /;"	d
IDC_COMPAREBINARY_DEFAULTS	resource.h	/^#define IDC_COMPAREBINARY_DEFAULTS /;"	d
IDC_COMPAREBINARY_PATTERNS	resource.h	/^#define IDC_COMPAREBINARY_PATTERNS /;"	d
IDC_COMPAREBINARY_VIEWSETTINGS	resource.h	/^#define IDC_COMPAREBINARY_VIEWSETTINGS /;"	d
IDC_COMPAREFOLDER_DEFAULTS	resource.h	/^#define IDC_COMPAREFOLDER_DEFAULTS /;"	d
IDC_COMPAREIMAGE_DEFAULTS	resource.h	/^#define IDC_COMPAREIMAGE_DEFAULTS /;"	d
IDC_COMPAREIMAGE_PATTERNS	resource.h	/^#define IDC_COMPAREIMAGE_PATTERNS /;"	d
IDC_COMPAREMETHODCOMBO	resource.h	/^#define IDC_COMPAREMETHODCOMBO /;"	d
IDC_COMPARE_BINARYC_LIMIT	resource.h	/^#define IDC_COMPARE_BINARYC_LIMIT /;"	d
IDC_COMPARE_DEFAULTS	resource.h	/^#define IDC_COMPARE_DEFAULTS /;"	d
IDC_COMPARE_QUICKC_LIMIT	resource.h	/^#define IDC_COMPARE_QUICKC_LIMIT /;"	d
IDC_COMPARE_STOPFIRST	resource.h	/^#define IDC_COMPARE_STOPFIRST /;"	d
IDC_COMPARE_THREAD_COUNT	resource.h	/^#define IDC_COMPARE_THREAD_COUNT /;"	d
IDC_COMPARE_WALKSUBDIRS	resource.h	/^#define IDC_COMPARE_WALKSUBDIRS /;"	d
IDC_COMPARISON_CONTINUE	resource.h	/^#define IDC_COMPARISON_CONTINUE /;"	d
IDC_COMPARISON_PAUSE	resource.h	/^#define IDC_COMPARISON_PAUSE /;"	d
IDC_COMPARISON_STOP	resource.h	/^#define IDC_COMPARISON_STOP /;"	d
IDC_CP_CUSTOM	resource.h	/^#define IDC_CP_CUSTOM /;"	d
IDC_CP_SENSITIVE	resource.h	/^#define IDC_CP_SENSITIVE /;"	d
IDC_CP_SYSTEM	resource.h	/^#define IDC_CP_SYSTEM /;"	d
IDC_CP_UI	resource.h	/^#define IDC_CP_UI /;"	d
IDC_CUSTOM_COLORS_GROUP	resource.h	/^#define IDC_CUSTOM_COLORS_GROUP /;"	d
IDC_CUSTOM_CP_NUMBER	resource.h	/^#define IDC_CUSTOM_CP_NUMBER /;"	d
IDC_DEFAULT_STANDARD_COLORS	resource.h	/^#define IDC_DEFAULT_STANDARD_COLORS /;"	d
IDC_DETECT_AUTODETECTTYPE	resource.h	/^#define IDC_DETECT_AUTODETECTTYPE /;"	d
IDC_DETECT_CODEPAGE	resource.h	/^#define IDC_DETECT_CODEPAGE /;"	d
IDC_DETECT_CODEPAGE2	resource.h	/^#define IDC_DETECT_CODEPAGE2 /;"	d
IDC_DIFFERENCE_COLOR	resource.h	/^#define IDC_DIFFERENCE_COLOR /;"	d
IDC_DIFFERENCE_DELETED_COLOR	resource.h	/^#define IDC_DIFFERENCE_DELETED_COLOR /;"	d
IDC_DIFFERENCE_TEXT_COLOR	resource.h	/^#define IDC_DIFFERENCE_TEXT_COLOR /;"	d
IDC_DIFFERENCE_USE_TEXT_COLOR	resource.h	/^#define IDC_DIFFERENCE_USE_TEXT_COLOR /;"	d
IDC_DIFF_ALGORITHM	resource.h	/^#define IDC_DIFF_ALGORITHM /;"	d
IDC_DIFF_APPENDFILE	resource.h	/^#define IDC_DIFF_APPENDFILE /;"	d
IDC_DIFF_BROWSE_FILE1	resource.h	/^#define IDC_DIFF_BROWSE_FILE1 /;"	d
IDC_DIFF_BROWSE_FILE2	resource.h	/^#define IDC_DIFF_BROWSE_FILE2 /;"	d
IDC_DIFF_BROWSE_RESULT	resource.h	/^#define IDC_DIFF_BROWSE_RESULT /;"	d
IDC_DIFF_CASESENSITIVE	resource.h	/^#define IDC_DIFF_CASESENSITIVE /;"	d
IDC_DIFF_CONTEXT	resource.h	/^#define IDC_DIFF_CONTEXT /;"	d
IDC_DIFF_DEFAULTS	resource.h	/^#define IDC_DIFF_DEFAULTS /;"	d
IDC_DIFF_FILE1	resource.h	/^#define IDC_DIFF_FILE1 /;"	d
IDC_DIFF_FILE2	resource.h	/^#define IDC_DIFF_FILE2 /;"	d
IDC_DIFF_FILERESULT	resource.h	/^#define IDC_DIFF_FILERESULT /;"	d
IDC_DIFF_IGNORECP	resource.h	/^#define IDC_DIFF_IGNORECP /;"	d
IDC_DIFF_IGNOREEOL	resource.h	/^#define IDC_DIFF_IGNOREEOL /;"	d
IDC_DIFF_INCLCMDLINE	resource.h	/^#define IDC_DIFF_INCLCMDLINE /;"	d
IDC_DIFF_OPENTOEDITOR	resource.h	/^#define IDC_DIFF_OPENTOEDITOR /;"	d
IDC_DIFF_STYLE	resource.h	/^#define IDC_DIFF_STYLE /;"	d
IDC_DIFF_SWAPFILES	resource.h	/^#define IDC_DIFF_SWAPFILES /;"	d
IDC_DIFF_WHITESPACE_COMPARE	resource.h	/^#define IDC_DIFF_WHITESPACE_COMPARE /;"	d
IDC_DIFF_WHITESPACE_IGNORE	resource.h	/^#define IDC_DIFF_WHITESPACE_IGNORE /;"	d
IDC_DIFF_WHITESPACE_IGNOREALL	resource.h	/^#define IDC_DIFF_WHITESPACE_IGNOREALL /;"	d
IDC_DIFF_WHITESPACE_IGNOREBLANKS	resource.h	/^#define IDC_DIFF_WHITESPACE_IGNOREBLANKS /;"	d
IDC_DIR_ITEM_DIFF_COLOR	resource.h	/^#define IDC_DIR_ITEM_DIFF_COLOR /;"	d
IDC_DIR_ITEM_DIFF_TEXT_COLOR	resource.h	/^#define IDC_DIR_ITEM_DIFF_TEXT_COLOR /;"	d
IDC_DIR_ITEM_EQUAL_COLOR	resource.h	/^#define IDC_DIR_ITEM_EQUAL_COLOR /;"	d
IDC_DIR_ITEM_EQUAL_TEXT_COLOR	resource.h	/^#define IDC_DIR_ITEM_EQUAL_TEXT_COLOR /;"	d
IDC_DIR_ITEM_FILTERED_COLOR	resource.h	/^#define IDC_DIR_ITEM_FILTERED_COLOR /;"	d
IDC_DIR_ITEM_FILTERED_TEXT_COLOR	resource.h	/^#define IDC_DIR_ITEM_FILTERED_TEXT_COLOR /;"	d
IDC_DIR_ITEM_NOTEXISTALL_COLOR	resource.h	/^#define IDC_DIR_ITEM_NOTEXISTALL_COLOR /;"	d
IDC_DIR_ITEM_NOTEXISTALL_TEXT_COLOR	resource.h	/^#define IDC_DIR_ITEM_NOTEXISTALL_TEXT_COLOR /;"	d
IDC_DOWN	resource.h	/^#define IDC_DOWN /;"	d
IDC_EDITOR_CHARLEVEL	resource.h	/^#define IDC_EDITOR_CHARLEVEL /;"	d
IDC_EDITOR_WORDLEVEL	resource.h	/^#define IDC_EDITOR_WORDLEVEL /;"	d
IDC_EDIT_FINDPREV	resource.h	/^#define IDC_EDIT_FINDPREV /;"	d
IDC_EDIT_FINDTEXT	resource.h	/^#define IDC_EDIT_FINDTEXT /;"	d
IDC_EDIT_MARKERS_ENABLED	resource.h	/^#define IDC_EDIT_MARKERS_ENABLED /;"	d
IDC_EDIT_MARKER_BGCOLORIDX	resource.h	/^#define IDC_EDIT_MARKER_BGCOLORIDX /;"	d
IDC_EDIT_MARKER_DELETE	resource.h	/^#define IDC_EDIT_MARKER_DELETE /;"	d
IDC_EDIT_MARKER_LIST	resource.h	/^#define IDC_EDIT_MARKER_LIST /;"	d
IDC_EDIT_MARKER_NEW	resource.h	/^#define IDC_EDIT_MARKER_NEW /;"	d
IDC_EDIT_MATCH_CASE	resource.h	/^#define IDC_EDIT_MATCH_CASE /;"	d
IDC_EDIT_REGEXP	resource.h	/^#define IDC_EDIT_REGEXP /;"	d
IDC_EDIT_REPLACE	resource.h	/^#define IDC_EDIT_REPLACE /;"	d
IDC_EDIT_REPLACE_ALL	resource.h	/^#define IDC_EDIT_REPLACE_ALL /;"	d
IDC_EDIT_REPLACE_WITH	resource.h	/^#define IDC_EDIT_REPLACE_WITH /;"	d
IDC_EDIT_SCOPE_DONT_WRAP	resource.h	/^#define IDC_EDIT_SCOPE_DONT_WRAP /;"	d
IDC_EDIT_SCOPE_SELECTION	resource.h	/^#define IDC_EDIT_SCOPE_SELECTION /;"	d
IDC_EDIT_SCOPE_WHOLE_FILE	resource.h	/^#define IDC_EDIT_SCOPE_WHOLE_FILE /;"	d
IDC_EDIT_SKIP	resource.h	/^#define IDC_EDIT_SKIP /;"	d
IDC_EDIT_WHOLE_WORD	resource.h	/^#define IDC_EDIT_WHOLE_WORD /;"	d
IDC_EOL_SENSITIVE	resource.h	/^#define IDC_EOL_SENSITIVE /;"	d
IDC_ESC_CLOSES_WINDOW	resource.h	/^#define IDC_ESC_CLOSES_WINDOW /;"	d
IDC_EXPAND_SUBDIRS	resource.h	/^#define IDC_EXPAND_SUBDIRS /;"	d
IDC_EXPLORER_ADVANCED	resource.h	/^#define IDC_EXPLORER_ADVANCED /;"	d
IDC_EXPLORER_CONTEXT	resource.h	/^#define IDC_EXPLORER_CONTEXT /;"	d
IDC_EXT_COMBO	resource.h	/^#define IDC_EXT_COMBO /;"	d
IDC_EXT_EDITOR_BROWSE	resource.h	/^#define IDC_EXT_EDITOR_BROWSE /;"	d
IDC_EXT_EDITOR_PATH	resource.h	/^#define IDC_EXT_EDITOR_PATH /;"	d
IDC_FILEENCODING	resource.h	/^#define IDC_FILEENCODING /;"	d
IDC_FILES_DIRS_GROUP0	resource.h	/^#define IDC_FILES_DIRS_GROUP0 /;"	d
IDC_FILES_DIRS_GROUP1	resource.h	/^#define IDC_FILES_DIRS_GROUP1 /;"	d
IDC_FILES_DIRS_GROUP2	resource.h	/^#define IDC_FILES_DIRS_GROUP2 /;"	d
IDC_FILES_DIRS_GROUP3	resource.h	/^#define IDC_FILES_DIRS_GROUP3 /;"	d
IDC_FILES_DIRS_GROUP3X	resource.h	/^#define IDC_FILES_DIRS_GROUP3X /;"	d
IDC_FILES_DIRS_GROUP4	resource.h	/^#define IDC_FILES_DIRS_GROUP4 /;"	d
IDC_FILES_DIRS_GROUP4X	resource.h	/^#define IDC_FILES_DIRS_GROUP4X /;"	d
IDC_FILTERCOMMENTS_CHECK	resource.h	/^#define IDC_FILTERCOMMENTS_CHECK /;"	d
IDC_FILTERFILE_DELETEBTN	resource.h	/^#define IDC_FILTERFILE_DELETEBTN /;"	d
IDC_FILTERFILE_EDITBTN	resource.h	/^#define IDC_FILTERFILE_EDITBTN /;"	d
IDC_FILTERFILE_INSTALL	resource.h	/^#define IDC_FILTERFILE_INSTALL /;"	d
IDC_FILTERFILE_LIST	resource.h	/^#define IDC_FILTERFILE_LIST /;"	d
IDC_FILTERFILE_NEWBTN	resource.h	/^#define IDC_FILTERFILE_NEWBTN /;"	d
IDC_FILTERFILE_TEST_BTN	resource.h	/^#define IDC_FILTERFILE_TEST_BTN /;"	d
IDC_FILTER_USER_BROWSE	resource.h	/^#define IDC_FILTER_USER_BROWSE /;"	d
IDC_FILTER_USER_PATH	resource.h	/^#define IDC_FILTER_USER_PATH /;"	d
IDC_FINDDLG_DONTCLOSE	resource.h	/^#define IDC_FINDDLG_DONTCLOSE /;"	d
IDC_FINDDLG_DONTWRAP	resource.h	/^#define IDC_FINDDLG_DONTWRAP /;"	d
IDC_FIRST	resource.h	/^#define IDC_FIRST /;"	d
IDC_FLDCONFIRM_FROM_PATH	resource.h	/^#define IDC_FLDCONFIRM_FROM_PATH /;"	d
IDC_FLDCONFIRM_FROM_TEXT	resource.h	/^#define IDC_FLDCONFIRM_FROM_TEXT /;"	d
IDC_FLDCONFIRM_ICON	resource.h	/^#define IDC_FLDCONFIRM_ICON /;"	d
IDC_FLDCONFIRM_QUERY	resource.h	/^#define IDC_FLDCONFIRM_QUERY /;"	d
IDC_FLDCONFIRM_TO_PATH	resource.h	/^#define IDC_FLDCONFIRM_TO_PATH /;"	d
IDC_FLDCONFIRM_TO_TEXT	resource.h	/^#define IDC_FLDCONFIRM_TO_TEXT /;"	d
IDC_HEADER	resource.h	/^#define IDC_HEADER /;"	d
IDC_HEADER_FILTER_NAME	resource.h	/^#define IDC_HEADER_FILTER_NAME /;"	d
IDC_HEXVIEW	resource.h	/^#define IDC_HEXVIEW /;"	d
IDC_HILITE_CHECK	resource.h	/^#define IDC_HILITE_CHECK /;"	d
IDC_IGNBLANKS_CHECK	resource.h	/^#define IDC_IGNBLANKS_CHECK /;"	d
IDC_IGNCASE_CHECK	resource.h	/^#define IDC_IGNCASE_CHECK /;"	d
IDC_IGNOREREGEXP	resource.h	/^#define IDC_IGNOREREGEXP /;"	d
IDC_IGNORE_REPARSEPOINTS	resource.h	/^#define IDC_IGNORE_REPARSEPOINTS /;"	d
IDC_IGNORE_SMALLTIMEDIFF	resource.h	/^#define IDC_IGNORE_SMALLTIMEDIFF /;"	d
IDC_INDENT_HEURISTIC	resource.h	/^#define IDC_INDENT_HEURISTIC /;"	d
IDC_IS_DIRECTORY	resource.h	/^#define IDC_IS_DIRECTORY /;"	d
IDC_ITEMSCOMPARED	resource.h	/^#define IDC_ITEMSCOMPARED /;"	d
IDC_ITEMSTOTAL	resource.h	/^#define IDC_ITEMSTOTAL /;"	d
IDC_LANGUAGE_LIST	resource.h	/^#define IDC_LANGUAGE_LIST /;"	d
IDC_LEFT1	resource.h	/^#define IDC_LEFT1 /;"	d
IDC_LEFT2	resource.h	/^#define IDC_LEFT2 /;"	d
IDC_LEFT3	resource.h	/^#define IDC_LEFT3 /;"	d
IDC_LEFT_FILES_LABEL	resource.h	/^#define IDC_LEFT_FILES_LABEL /;"	d
IDC_LFILTER_ADDBTN	resource.h	/^#define IDC_LFILTER_ADDBTN /;"	d
IDC_LFILTER_EDITBTN	resource.h	/^#define IDC_LFILTER_EDITBTN /;"	d
IDC_LFILTER_LIST	resource.h	/^#define IDC_LFILTER_LIST /;"	d
IDC_LFILTER_REMOVEBTN	resource.h	/^#define IDC_LFILTER_REMOVEBTN /;"	d
IDC_LINE_COLORING_GROUP	resource.h	/^#define IDC_LINE_COLORING_GROUP /;"	d
IDC_LOADING_GROUP	resource.h	/^#define IDC_LOADING_GROUP /;"	d
IDC_LOAD_CODEPAGE_TEXTBOX	resource.h	/^#define IDC_LOAD_CODEPAGE_TEXTBOX /;"	d
IDC_LOAD_FILES_LABEL	resource.h	/^#define IDC_LOAD_FILES_LABEL /;"	d
IDC_LOAD_SAVE_SAME_CODEPAGE	resource.h	/^#define IDC_LOAD_SAVE_SAME_CODEPAGE /;"	d
IDC_MARGIN_BKGD_COLOR	resource.h	/^#define IDC_MARGIN_BKGD_COLOR /;"	d
IDC_MARGIN_COLOR_LABEL	resource.h	/^#define IDC_MARGIN_COLOR_LABEL /;"	d
IDC_MARKER0_BKGD_COLOR	resource.h	/^#define IDC_MARKER0_BKGD_COLOR /;"	d
IDC_MARKER0_COLOR_LABEL	resource.h	/^#define IDC_MARKER0_COLOR_LABEL /;"	d
IDC_MARKER1_BKGD_COLOR	resource.h	/^#define IDC_MARKER1_BKGD_COLOR /;"	d
IDC_MARKER1_COLOR_LABEL	resource.h	/^#define IDC_MARKER1_COLOR_LABEL /;"	d
IDC_MARKER2_BKGD_COLOR	resource.h	/^#define IDC_MARKER2_BKGD_COLOR /;"	d
IDC_MARKER2_COLOR_LABEL	resource.h	/^#define IDC_MARKER2_COLOR_LABEL /;"	d
IDC_MARKER3_BKGD_COLOR	resource.h	/^#define IDC_MARKER3_BKGD_COLOR /;"	d
IDC_MARKER3_COLOR_LABEL	resource.h	/^#define IDC_MARKER3_COLOR_LABEL /;"	d
IDC_MARKER_COLORS_GROUP	resource.h	/^#define IDC_MARKER_COLORS_GROUP /;"	d
IDC_MATCH_SIMILAR_LINES	resource.h	/^#define IDC_MATCH_SIMILAR_LINES /;"	d
IDC_MESSAGE	resource.h	/^#define IDC_MESSAGE /;"	d
IDC_MIDDLE1	resource.h	/^#define IDC_MIDDLE1 /;"	d
IDC_MIDDLE2	resource.h	/^#define IDC_MIDDLE2 /;"	d
IDC_MIDDLE3	resource.h	/^#define IDC_MIDDLE3 /;"	d
IDC_MIDDLE_FILES_LABEL	resource.h	/^#define IDC_MIDDLE_FILES_LABEL /;"	d
IDC_MIXED_EOL	resource.h	/^#define IDC_MIXED_EOL /;"	d
IDC_MOVEDBLOCK_COLOR	resource.h	/^#define IDC_MOVEDBLOCK_COLOR /;"	d
IDC_MOVEDBLOCK_DELETED_COLOR	resource.h	/^#define IDC_MOVEDBLOCK_DELETED_COLOR /;"	d
IDC_MOVEDBLOCK_TEXT_COLOR	resource.h	/^#define IDC_MOVEDBLOCK_TEXT_COLOR /;"	d
IDC_MOVEDBLOCK_USE_TEXT_COLOR	resource.h	/^#define IDC_MOVEDBLOCK_USE_TEXT_COLOR /;"	d
IDC_MOVED_BLOCKS	resource.h	/^#define IDC_MOVED_BLOCKS /;"	d
IDC_OPEN_CONTRIBUTORS	resource.h	/^#define IDC_OPEN_CONTRIBUTORS /;"	d
IDC_OPEN_STATUS	resource.h	/^#define IDC_OPEN_STATUS /;"	d
IDC_OPTIONS	resource.h	/^#define IDC_OPTIONS /;"	d
IDC_PATH0_BUTTON	resource.h	/^#define IDC_PATH0_BUTTON /;"	d
IDC_PATH0_COMBO	resource.h	/^#define IDC_PATH0_COMBO /;"	d
IDC_PATH0_READONLY	resource.h	/^#define IDC_PATH0_READONLY /;"	d
IDC_PATH1_BUTTON	resource.h	/^#define IDC_PATH1_BUTTON /;"	d
IDC_PATH1_COMBO	resource.h	/^#define IDC_PATH1_COMBO /;"	d
IDC_PATH1_READONLY	resource.h	/^#define IDC_PATH1_READONLY /;"	d
IDC_PATH2_BUTTON	resource.h	/^#define IDC_PATH2_BUTTON /;"	d
IDC_PATH2_COMBO	resource.h	/^#define IDC_PATH2_COMBO /;"	d
IDC_PATH2_READONLY	resource.h	/^#define IDC_PATH2_READONLY /;"	d
IDC_PATH_COMPARING	resource.h	/^#define IDC_PATH_COMPARING /;"	d
IDC_PATH_EDIT	resource.h	/^#define IDC_PATH_EDIT /;"	d
IDC_PLUGIN	resource.h	/^#define IDC_PLUGIN /;"	d
IDC_PLUGINSLIST_LIST	resource.h	/^#define IDC_PLUGINSLIST_LIST /;"	d
IDC_PLUGINS_ENABLE	resource.h	/^#define IDC_PLUGINS_ENABLE /;"	d
IDC_PLUGIN_FILEFILTERS	resource.h	/^#define IDC_PLUGIN_FILEFILTERS /;"	d
IDC_PLUGIN_FILEFILTERS_DEFAULTS	resource.h	/^#define IDC_PLUGIN_FILEFILTERS_DEFAULTS /;"	d
IDC_PLUGIN_SETTINGS	resource.h	/^#define IDC_PLUGIN_SETTINGS /;"	d
IDC_PREDIFFERS_FIRST	resource.h	/^#define IDC_PREDIFFERS_FIRST /;"	d
IDC_PREDIFFERS_LAST	resource.h	/^#define IDC_PREDIFFERS_LAST /;"	d
IDC_PRESERVE_FILETIME	resource.h	/^#define IDC_PRESERVE_FILETIME /;"	d
IDC_PRIVATE	resource.h	/^#define IDC_PRIVATE /;"	d
IDC_PROGRESSCOMPARE	resource.h	/^#define IDC_PROGRESSCOMPARE /;"	d
IDC_PROMPT_LABEL	resource.h	/^#define IDC_PROMPT_LABEL /;"	d
IDC_PROP_INSERT_SPACES	resource.h	/^#define IDC_PROP_INSERT_SPACES /;"	d
IDC_PROP_INSERT_TABS	resource.h	/^#define IDC_PROP_INSERT_TABS /;"	d
IDC_RECURS_CHECK	resource.h	/^#define IDC_RECURS_CHECK /;"	d
IDC_REGISTER_SHELLEXTENSION	resource.h	/^#define IDC_REGISTER_SHELLEXTENSION /;"	d
IDC_REGISTER_SHELLEXTENSION_PERUSER	resource.h	/^#define IDC_REGISTER_SHELLEXTENSION_PERUSER /;"	d
IDC_REGULAR_BKGD_COLOR	resource.h	/^#define IDC_REGULAR_BKGD_COLOR /;"	d
IDC_REGULAR_TEXT_COLOR	resource.h	/^#define IDC_REGULAR_TEXT_COLOR /;"	d
IDC_RENDERING_MODE	resource.h	/^#define IDC_RENDERING_MODE /;"	d
IDC_REPORT_BROWSEFILE	resource.h	/^#define IDC_REPORT_BROWSEFILE /;"	d
IDC_REPORT_COPYCLIPBOARD	resource.h	/^#define IDC_REPORT_COPYCLIPBOARD /;"	d
IDC_REPORT_FILE	resource.h	/^#define IDC_REPORT_FILE /;"	d
IDC_REPORT_INCLUDEFILECMPREPORT	resource.h	/^#define IDC_REPORT_INCLUDEFILECMPREPORT /;"	d
IDC_REPORT_STYLECOMBO	resource.h	/^#define IDC_REPORT_STYLECOMBO /;"	d
IDC_RESET	resource.h	/^#define IDC_RESET /;"	d
IDC_RESET_ALL_MESSAGE_BOXES	resource.h	/^#define IDC_RESET_ALL_MESSAGE_BOXES /;"	d
IDC_RESULTS	resource.h	/^#define IDC_RESULTS /;"	d
IDC_RIGHT1	resource.h	/^#define IDC_RIGHT1 /;"	d
IDC_RIGHT2	resource.h	/^#define IDC_RIGHT2 /;"	d
IDC_RIGHT3	resource.h	/^#define IDC_RIGHT3 /;"	d
IDC_RIGHT_FILES_LABEL	resource.h	/^#define IDC_RIGHT_FILES_LABEL /;"	d
IDC_SAVECLOSING_DISCARDALL	resource.h	/^#define IDC_SAVECLOSING_DISCARDALL /;"	d
IDC_SAVECLOSING_DISCARDLEFT	resource.h	/^#define IDC_SAVECLOSING_DISCARDLEFT /;"	d
IDC_SAVECLOSING_DISCARDMIDDLE	resource.h	/^#define IDC_SAVECLOSING_DISCARDMIDDLE /;"	d
IDC_SAVECLOSING_DISCARDRIGHT	resource.h	/^#define IDC_SAVECLOSING_DISCARDRIGHT /;"	d
IDC_SAVECLOSING_LEFTFILE	resource.h	/^#define IDC_SAVECLOSING_LEFTFILE /;"	d
IDC_SAVECLOSING_LEFTFRAME	resource.h	/^#define IDC_SAVECLOSING_LEFTFRAME /;"	d
IDC_SAVECLOSING_MIDDLEFILE	resource.h	/^#define IDC_SAVECLOSING_MIDDLEFILE /;"	d
IDC_SAVECLOSING_MIDDLEFRAME	resource.h	/^#define IDC_SAVECLOSING_MIDDLEFRAME /;"	d
IDC_SAVECLOSING_RIGHTFILE	resource.h	/^#define IDC_SAVECLOSING_RIGHTFILE /;"	d
IDC_SAVECLOSING_RIGHTFRAME	resource.h	/^#define IDC_SAVECLOSING_RIGHTFRAME /;"	d
IDC_SAVECLOSING_SAVELEFT	resource.h	/^#define IDC_SAVECLOSING_SAVELEFT /;"	d
IDC_SAVECLOSING_SAVEMIDDLE	resource.h	/^#define IDC_SAVECLOSING_SAVEMIDDLE /;"	d
IDC_SAVECLOSING_SAVERIGHT	resource.h	/^#define IDC_SAVECLOSING_SAVERIGHT /;"	d
IDC_SAVE_CODEPAGE_TEXTBOX	resource.h	/^#define IDC_SAVE_CODEPAGE_TEXTBOX /;"	d
IDC_SAVE_FILES_LABEL	resource.h	/^#define IDC_SAVE_FILES_LABEL /;"	d
IDC_SCOLORS_BDEFAULTS	resource.h	/^#define IDC_SCOLORS_BDEFAULTS /;"	d
IDC_SCOLOR_COMMENTS	resource.h	/^#define IDC_SCOLOR_COMMENTS /;"	d
IDC_SCOLOR_COMMENTS_BOLD	resource.h	/^#define IDC_SCOLOR_COMMENTS_BOLD /;"	d
IDC_SCOLOR_FUNCTIONS	resource.h	/^#define IDC_SCOLOR_FUNCTIONS /;"	d
IDC_SCOLOR_FUNCTIONS_BOLD	resource.h	/^#define IDC_SCOLOR_FUNCTIONS_BOLD /;"	d
IDC_SCOLOR_KEYWORDS	resource.h	/^#define IDC_SCOLOR_KEYWORDS /;"	d
IDC_SCOLOR_KEYWORDS_BOLD	resource.h	/^#define IDC_SCOLOR_KEYWORDS_BOLD /;"	d
IDC_SCOLOR_NUMBERS	resource.h	/^#define IDC_SCOLOR_NUMBERS /;"	d
IDC_SCOLOR_NUMBERS_BOLD	resource.h	/^#define IDC_SCOLOR_NUMBERS_BOLD /;"	d
IDC_SCOLOR_OPERATORS	resource.h	/^#define IDC_SCOLOR_OPERATORS /;"	d
IDC_SCOLOR_OPERATORS_BOLD	resource.h	/^#define IDC_SCOLOR_OPERATORS_BOLD /;"	d
IDC_SCOLOR_PREPROCESSOR	resource.h	/^#define IDC_SCOLOR_PREPROCESSOR /;"	d
IDC_SCOLOR_PREPROCESSOR_BOLD	resource.h	/^#define IDC_SCOLOR_PREPROCESSOR_BOLD /;"	d
IDC_SCOLOR_STRINGS	resource.h	/^#define IDC_SCOLOR_STRINGS /;"	d
IDC_SCOLOR_STRINGS_BOLD	resource.h	/^#define IDC_SCOLOR_STRINGS_BOLD /;"	d
IDC_SCOLOR_USER1	resource.h	/^#define IDC_SCOLOR_USER1 /;"	d
IDC_SCOLOR_USER1_BOLD	resource.h	/^#define IDC_SCOLOR_USER1_BOLD /;"	d
IDC_SCOLOR_USER2	resource.h	/^#define IDC_SCOLOR_USER2 /;"	d
IDC_SCOLOR_USER2_BOLD	resource.h	/^#define IDC_SCOLOR_USER2_BOLD /;"	d
IDC_SCRIPT_FIRST	resource.h	/^#define IDC_SCRIPT_FIRST /;"	d
IDC_SCRIPT_LAST	resource.h	/^#define IDC_SCRIPT_LAST /;"	d
IDC_SCROLL_CHECK	resource.h	/^#define IDC_SCROLL_CHECK /;"	d
IDC_SECOND	resource.h	/^#define IDC_SECOND /;"	d
IDC_SELECTION_BKGD_COLOR	resource.h	/^#define IDC_SELECTION_BKGD_COLOR /;"	d
IDC_SELECTION_COLOR_LABEL	resource.h	/^#define IDC_SELECTION_COLOR_LABEL /;"	d
IDC_SELECTION_TEXT_COLOR	resource.h	/^#define IDC_SELECTION_TEXT_COLOR /;"	d
IDC_SELECT_FILTER	resource.h	/^#define IDC_SELECT_FILTER /;"	d
IDC_SELECT_UNPACKER	resource.h	/^#define IDC_SELECT_UNPACKER /;"	d
IDC_SEL_DIFFERENCE_COLOR	resource.h	/^#define IDC_SEL_DIFFERENCE_COLOR /;"	d
IDC_SEL_DIFFERENCE_DELETED_COLOR	resource.h	/^#define IDC_SEL_DIFFERENCE_DELETED_COLOR /;"	d
IDC_SEL_DIFFERENCE_TEXT_COLOR	resource.h	/^#define IDC_SEL_DIFFERENCE_TEXT_COLOR /;"	d
IDC_SEL_DIFFERENCE_USE_TEXT_COLOR	resource.h	/^#define IDC_SEL_DIFFERENCE_USE_TEXT_COLOR /;"	d
IDC_SEL_MOVEDBLOCK_COLOR	resource.h	/^#define IDC_SEL_MOVEDBLOCK_COLOR /;"	d
IDC_SEL_MOVEDBLOCK_DELETED_COLOR	resource.h	/^#define IDC_SEL_MOVEDBLOCK_DELETED_COLOR /;"	d
IDC_SEL_MOVEDBLOCK_TEXT_COLOR	resource.h	/^#define IDC_SEL_MOVEDBLOCK_TEXT_COLOR /;"	d
IDC_SEL_MOVEDBLOCK_USE_TEXT_COLOR	resource.h	/^#define IDC_SEL_MOVEDBLOCK_USE_TEXT_COLOR /;"	d
IDC_SEL_SNP_COLOR	resource.h	/^#define IDC_SEL_SNP_COLOR /;"	d
IDC_SEL_SNP_DELETED_COLOR	resource.h	/^#define IDC_SEL_SNP_DELETED_COLOR /;"	d
IDC_SEL_SNP_TEXT_COLOR	resource.h	/^#define IDC_SEL_SNP_TEXT_COLOR /;"	d
IDC_SEL_SNP_USE_TEXT_COLOR	resource.h	/^#define IDC_SEL_SNP_USE_TEXT_COLOR /;"	d
IDC_SEL_WORDDIFF_COLOR	resource.h	/^#define IDC_SEL_WORDDIFF_COLOR /;"	d
IDC_SEL_WORDDIFF_DELETED_COLOR	resource.h	/^#define IDC_SEL_WORDDIFF_DELETED_COLOR /;"	d
IDC_SEL_WORDDIFF_TEXT_COLOR	resource.h	/^#define IDC_SEL_WORDDIFF_TEXT_COLOR /;"	d
IDC_SEL_WORDDIFF_USE_TEXT_COLOR	resource.h	/^#define IDC_SEL_WORDDIFF_USE_TEXT_COLOR /;"	d
IDC_SHARED	resource.h	/^#define IDC_SHARED /;"	d
IDC_SINGLE_INSTANCE	resource.h	/^#define IDC_SINGLE_INSTANCE /;"	d
IDC_SNP_COLOR	resource.h	/^#define IDC_SNP_COLOR /;"	d
IDC_SNP_DELETED_COLOR	resource.h	/^#define IDC_SNP_DELETED_COLOR /;"	d
IDC_SNP_TEXT_COLOR	resource.h	/^#define IDC_SNP_TEXT_COLOR /;"	d
IDC_SNP_USE_TEXT_COLOR	resource.h	/^#define IDC_SNP_USE_TEXT_COLOR /;"	d
IDC_STARTUP_FOLDER_SELECT	resource.h	/^#define IDC_STARTUP_FOLDER_SELECT /;"	d
IDC_STATIC_TITLE_PANE0	resource.h	/^#define IDC_STATIC_TITLE_PANE0 /;"	d
IDC_STATIC_TITLE_PANE1	resource.h	/^#define IDC_STATIC_TITLE_PANE1 /;"	d
IDC_STATIC_TITLE_PANE2	resource.h	/^#define IDC_STATIC_TITLE_PANE2 /;"	d
IDC_STAT_DIFFBINARY	resource.h	/^#define IDC_STAT_DIFFBINARY /;"	d
IDC_STAT_DIFFFILE	resource.h	/^#define IDC_STAT_DIFFFILE /;"	d
IDC_STAT_DIFFFOLDER	resource.h	/^#define IDC_STAT_DIFFFOLDER /;"	d
IDC_STAT_IDENTICBINARY	resource.h	/^#define IDC_STAT_IDENTICBINARY /;"	d
IDC_STAT_IDENTICFILE	resource.h	/^#define IDC_STAT_IDENTICFILE /;"	d
IDC_STAT_IDENTICFOLDER	resource.h	/^#define IDC_STAT_IDENTICFOLDER /;"	d
IDC_STAT_IDIFFBINFILE	resource.h	/^#define IDC_STAT_IDIFFBINFILE /;"	d
IDC_STAT_IEQUALBINFILE	resource.h	/^#define IDC_STAT_IEQUALBINFILE /;"	d
IDC_STAT_IEQUALFILE	resource.h	/^#define IDC_STAT_IEQUALFILE /;"	d
IDC_STAT_IIDENTICFOLDER	resource.h	/^#define IDC_STAT_IIDENTICFOLDER /;"	d
IDC_STAT_ILMISSINGFILE	resource.h	/^#define IDC_STAT_ILMISSINGFILE /;"	d
IDC_STAT_ILMISSINGFOLDER	resource.h	/^#define IDC_STAT_ILMISSINGFOLDER /;"	d
IDC_STAT_ILUNIQFILE	resource.h	/^#define IDC_STAT_ILUNIQFILE /;"	d
IDC_STAT_ILUNIQFOLDER	resource.h	/^#define IDC_STAT_ILUNIQFOLDER /;"	d
IDC_STAT_IMMISSINGFILE	resource.h	/^#define IDC_STAT_IMMISSINGFILE /;"	d
IDC_STAT_IMMISSINGFOLDER	resource.h	/^#define IDC_STAT_IMMISSINGFOLDER /;"	d
IDC_STAT_IMUNIQFILE	resource.h	/^#define IDC_STAT_IMUNIQFILE /;"	d
IDC_STAT_IMUNIQFOLDER	resource.h	/^#define IDC_STAT_IMUNIQFOLDER /;"	d
IDC_STAT_INOTEQUAL	resource.h	/^#define IDC_STAT_INOTEQUAL /;"	d
IDC_STAT_INOTEQUALFOLDER	resource.h	/^#define IDC_STAT_INOTEQUALFOLDER /;"	d
IDC_STAT_IRMISSINGFILE	resource.h	/^#define IDC_STAT_IRMISSINGFILE /;"	d
IDC_STAT_IRMISSINGFOLDER	resource.h	/^#define IDC_STAT_IRMISSINGFOLDER /;"	d
IDC_STAT_IRUNIQFILE	resource.h	/^#define IDC_STAT_IRUNIQFILE /;"	d
IDC_STAT_IRUNIQFOLDER	resource.h	/^#define IDC_STAT_IRUNIQFOLDER /;"	d
IDC_STAT_LMISSINGFILE	resource.h	/^#define IDC_STAT_LMISSINGFILE /;"	d
IDC_STAT_LMISSINGFOLDER	resource.h	/^#define IDC_STAT_LMISSINGFOLDER /;"	d
IDC_STAT_LUNIQFILE	resource.h	/^#define IDC_STAT_LUNIQFILE /;"	d
IDC_STAT_LUNIQFOLDER	resource.h	/^#define IDC_STAT_LUNIQFOLDER /;"	d
IDC_STAT_MMISSINGFILE	resource.h	/^#define IDC_STAT_MMISSINGFILE /;"	d
IDC_STAT_MMISSINGFOLDER	resource.h	/^#define IDC_STAT_MMISSINGFOLDER /;"	d
IDC_STAT_MUNIQFILE	resource.h	/^#define IDC_STAT_MUNIQFILE /;"	d
IDC_STAT_MUNIQFOLDER	resource.h	/^#define IDC_STAT_MUNIQFOLDER /;"	d
IDC_STAT_RMISSINGFILE	resource.h	/^#define IDC_STAT_RMISSINGFILE /;"	d
IDC_STAT_RMISSINGFOLDER	resource.h	/^#define IDC_STAT_RMISSINGFOLDER /;"	d
IDC_STAT_RUNIQFILE	resource.h	/^#define IDC_STAT_RUNIQFILE /;"	d
IDC_STAT_RUNIQFOLDER	resource.h	/^#define IDC_STAT_RUNIQFOLDER /;"	d
IDC_STAT_TOTALFILE	resource.h	/^#define IDC_STAT_TOTALFILE /;"	d
IDC_STAT_TOTALFOLDER	resource.h	/^#define IDC_STAT_TOTALFOLDER /;"	d
IDC_SWAP01_BUTTON	resource.h	/^#define IDC_SWAP01_BUTTON /;"	d
IDC_SWAP01_STATIC	resource.h	/^#define IDC_SWAP01_STATIC /;"	d
IDC_SWAP02_BUTTON	resource.h	/^#define IDC_SWAP02_BUTTON /;"	d
IDC_SWAP02_STATIC	resource.h	/^#define IDC_SWAP02_STATIC /;"	d
IDC_SWAP12_BUTTON	resource.h	/^#define IDC_SWAP12_BUTTON /;"	d
IDC_SWAP12_STATIC	resource.h	/^#define IDC_SWAP12_STATIC /;"	d
IDC_TAB_EDIT	resource.h	/^#define IDC_TAB_EDIT /;"	d
IDC_TEST_BTN	resource.h	/^#define IDC_TEST_BTN /;"	d
IDC_TEST_TEXT	resource.h	/^#define IDC_TEST_TEXT /;"	d
IDC_TEXT_COLOR_LABEL	resource.h	/^#define IDC_TEXT_COLOR_LABEL /;"	d
IDC_TEXT_COLUMN_LABEL	resource.h	/^#define IDC_TEXT_COLUMN_LABEL /;"	d
IDC_THIRD	resource.h	/^#define IDC_THIRD /;"	d
IDC_TMPFOLDER_BROWSE	resource.h	/^#define IDC_TMPFOLDER_BROWSE /;"	d
IDC_TMPFOLDER_NAME	resource.h	/^#define IDC_TMPFOLDER_NAME /;"	d
IDC_TMPFOLDER_SYSTEM	resource.h	/^#define IDC_TMPFOLDER_SYSTEM /;"	d
IDC_TREEOPT_EXPORT	resource.h	/^#define IDC_TREEOPT_EXPORT /;"	d
IDC_TREEOPT_HELP	resource.h	/^#define IDC_TREEOPT_HELP /;"	d
IDC_TREEOPT_HOSTFRAME	resource.h	/^#define IDC_TREEOPT_HOSTFRAME /;"	d
IDC_TREEOPT_IMPORT	resource.h	/^#define IDC_TREEOPT_IMPORT /;"	d
IDC_TREEOPT_PAGES	resource.h	/^#define IDC_TREEOPT_PAGES /;"	d
IDC_TRIVIAL_DIFF_COLOR	resource.h	/^#define IDC_TRIVIAL_DIFF_COLOR /;"	d
IDC_TRIVIAL_DIFF_DELETED_COLOR	resource.h	/^#define IDC_TRIVIAL_DIFF_DELETED_COLOR /;"	d
IDC_TRIVIAL_DIFF_TEXT_COLOR	resource.h	/^#define IDC_TRIVIAL_DIFF_TEXT_COLOR /;"	d
IDC_TRIVIAL_DIFF_USE_TEXT_COLOR	resource.h	/^#define IDC_TRIVIAL_DIFF_USE_TEXT_COLOR /;"	d
IDC_UNPACKER_ALLOW_ALL	resource.h	/^#define IDC_UNPACKER_ALLOW_ALL /;"	d
IDC_UNPACKER_DESCRIPTION	resource.h	/^#define IDC_UNPACKER_DESCRIPTION /;"	d
IDC_UNPACKER_EDIT	resource.h	/^#define IDC_UNPACKER_EDIT /;"	d
IDC_UNPACKER_NAME	resource.h	/^#define IDC_UNPACKER_NAME /;"	d
IDC_UNPACKER_SUPPORTED_EXTENSIONS	resource.h	/^#define IDC_UNPACKER_SUPPORTED_EXTENSIONS /;"	d
IDC_UNREGISTER_SHELLEXTENSION	resource.h	/^#define IDC_UNREGISTER_SHELLEXTENSION /;"	d
IDC_UNREGISTER_SHELLEXTENSION_PERUSER	resource.h	/^#define IDC_UNREGISTER_SHELLEXTENSION_PERUSER /;"	d
IDC_UP	resource.h	/^#define IDC_UP /;"	d
IDC_USE_DIR_COMPARE_COLORS	resource.h	/^#define IDC_USE_DIR_COMPARE_COLORS /;"	d
IDC_USE_RECYCLE_BIN	resource.h	/^#define IDC_USE_RECYCLE_BIN /;"	d
IDC_VERIFY_OPEN_PATHS	resource.h	/^#define IDC_VERIFY_OPEN_PATHS /;"	d
IDC_VERSION	resource.h	/^#define IDC_VERSION /;"	d
IDC_VER_SYS	resource.h	/^#define IDC_VER_SYS /;"	d
IDC_VIEW_LINE_DIFFERENCES	resource.h	/^#define IDC_VIEW_LINE_DIFFERENCES /;"	d
IDC_WHITESPACE	resource.h	/^#define IDC_WHITESPACE /;"	d
IDC_WHITESPACE_BKGD_COLOR	resource.h	/^#define IDC_WHITESPACE_BKGD_COLOR /;"	d
IDC_WHITESPACE_COLOR_LABEL	resource.h	/^#define IDC_WHITESPACE_COLOR_LABEL /;"	d
IDC_WHITE_CHANGE	resource.h	/^#define IDC_WHITE_CHANGE /;"	d
IDC_WMGOTO_FILELEFT	resource.h	/^#define IDC_WMGOTO_FILELEFT /;"	d
IDC_WMGOTO_FILEMIDDLE	resource.h	/^#define IDC_WMGOTO_FILEMIDDLE /;"	d
IDC_WMGOTO_FILERIGHT	resource.h	/^#define IDC_WMGOTO_FILERIGHT /;"	d
IDC_WMGOTO_PARAM	resource.h	/^#define IDC_WMGOTO_PARAM /;"	d
IDC_WMGOTO_TODIFF	resource.h	/^#define IDC_WMGOTO_TODIFF /;"	d
IDC_WMGOTO_TOLINE	resource.h	/^#define IDC_WMGOTO_TOLINE /;"	d
IDC_WORDDIFF_COLOR	resource.h	/^#define IDC_WORDDIFF_COLOR /;"	d
IDC_WORDDIFF_DELETED_COLOR	resource.h	/^#define IDC_WORDDIFF_DELETED_COLOR /;"	d
IDC_WORDDIFF_TEXT_COLOR	resource.h	/^#define IDC_WORDDIFF_TEXT_COLOR /;"	d
IDC_WORDDIFF_USE_TEXT_COLOR	resource.h	/^#define IDC_WORDDIFF_USE_TEXT_COLOR /;"	d
IDC_WWW	resource.h	/^#define IDC_WWW /;"	d
IDD	AboutDlg.cpp	/^	enum { IDD = IDD_ABOUTBOX };$/;"	e	enum:CAboutDlg::Impl::__anon54fbf6480103	file:
IDD	Common/MessageBoxDialog.h	/^	enum { IDD = IDD_MESSAGE_BOX };$/;"	e	enum:CMessageBoxDialog::__anonfcf7d7710103
IDD	CompareStatisticsDlg.h	/^	enum { IDD = IDD_COMPARE_STATISTICS };$/;"	e	enum:CompareStatisticsDlg::__anon432df6840103
IDD	ConfirmFolderCopyDlg.h	/^	enum { IDD = IDD_CONFIRM_COPY };$/;"	e	enum:ConfirmFolderCopyDlg::__anonfb1545770103
IDD	DirCmpReportDlg.h	/^	enum { IDD = IDD_DIRCMP_REPORT };$/;"	e	enum:DirCmpReportDlg::__anonfa60ca0d0103
IDD	DirColsDlg.h	/^	enum { IDD = IDD_DIRCOLS };$/;"	e	enum:CDirColsDlg::__anon50fdc4e20103
IDD	DirCompProgressBar.h	/^	enum { IDD = IDD_DIRCOMP_PROGRESS };$/;"	e	enum:DirCompProgressBar::__anon63ae43930103
IDD	DirFilterDlg.h	/^	enum { IDD = IDD_DIR_FILTER };$/;"	e	enum:DirFilterDlg::__anone38483d70103
IDD	DirSelectFilesDlg.cpp	/^	enum { IDD = IDD_SELECT_FILES_OR_FOLDERS };$/;"	e	enum:DirSelectFilesDlg::Impl::__anon4e613f1f0103	file:
IDD	EditorFilepathBar.h	/^	enum { IDD = IDD_EDITOR_HEADERBAR };$/;"	e	enum:CEditorFilePathBar::__anonc8700d640103
IDD	EncodingErrorBar.h	/^	enum { IDD = IDD_ENCODINGERROR };$/;"	e	enum:CEncodingErrorBar::__anon27966f210103
IDD	FileFiltersDlg.h	/^	enum { IDD = IDD_FILEFILTERS };$/;"	e	enum:FileFiltersDlg::__anon7d55ffcb0103
IDD	LineFiltersDlg.h	/^	enum { IDD = IDD_PROPPAGE_FILTER };$/;"	e	enum:LineFiltersDlg::__anon3d1556530103
IDD	LoadSaveCodepageDlg.h	/^	enum { IDD = IDD_LOAD_SAVE_CODEPAGE };$/;"	e	enum:CLoadSaveCodepageDlg::__anonec423fd90103
IDD	OpenView.h	/^	enum { IDD = IDD_OPEN };$/;"	e	enum:COpenView::__anon852246680103
IDD	PatchDlg.h	/^	enum { IDD = IDD_GENERATE_PATCH };$/;"	e	enum:CPatchDlg::__anon665ff8a20103
IDD	PluginsListDlg.h	/^	enum { IDD = IDD_PLUGINS_LIST };$/;"	e	enum:PluginsListDlg::__anonca8434b00103
IDD	PropArchive.h	/^	enum { IDD = IDD_PROP_ARCHIVE };$/;"	e	enum:PropArchive::__anon26d5eb5e0103
IDD	PropBackups.h	/^	enum { IDD = IDD_PROPPAGE_BACKUPS };$/;"	e	enum:PropBackups::__anonf2c8caa50103
IDD	PropCodepage.h	/^	enum { IDD = IDD_PROPPAGE_CODEPAGE };$/;"	e	enum:PropCodepage::__anonc0605a740103
IDD	PropColors.h	/^	enum { IDD = IDD_PROPPAGE_COLORS_WINMERGE };$/;"	e	enum:PropMergeColors::__anonf8c04cae0103
IDD	PropCompare.h	/^	enum { IDD = IDD_PROPPAGE_COMPARE };$/;"	e	enum:PropCompare::__anon5ee5fdc30103
IDD	PropCompareBinary.h	/^	enum { IDD = IDD_PROPPAGE_COMPARE_BINARY };$/;"	e	enum:PropCompareBinary::__anonf11e2ca80103
IDD	PropCompareFolder.h	/^	enum { IDD = IDD_PROPPAGE_COMPARE_FOLDER };$/;"	e	enum:PropCompareFolder::__anon6b87a63f0103
IDD	PropCompareImage.h	/^	enum { IDD = IDD_PROPPAGE_COMPARE_IMAGE };$/;"	e	enum:PropCompareImage::__anon972dbb060103
IDD	PropDirColors.h	/^	enum { IDD = IDD_PROPPAGE_COLORS_DIR };$/;"	e	enum:PropDirColors::__anon04e0652d0103
IDD	PropEditor.h	/^	enum { IDD = IDD_PROPPAGE_EDITOR };$/;"	e	enum:PropEditor::__anon7bdcb1630103
IDD	PropGeneral.h	/^	enum { IDD = IDD_PROPPAGE_GENERAL };$/;"	e	enum:PropGeneral::__anon2ac15aba0103
IDD	PropMarkerColors.h	/^	enum { IDD = IDD_PROPPAGE_COLORS_MARKER };$/;"	e	enum:PropMarkerColors::__anon05ae34500103
IDD	PropRegistry.h	/^	enum { IDD = IDD_PROPPAGE_SYSTEM };$/;"	e	enum:PropRegistry::__anon712e8bb50103
IDD	PropShell.h	/^	enum { IDD = IDD_PROPPAGE_SHELL };$/;"	e	enum:PropShell::__anon32f418540103
IDD	PropSyntaxColors.h	/^	enum { IDD = IDD_PROPPAGE_COLORS_SYNTAX };$/;"	e	enum:PropSyntaxColors::__anon714dbd750103
IDD	PropTextColors.h	/^	enum { IDD = IDD_PROPPAGE_COLORS_TEXT };$/;"	e	enum:PropTextColors::__anon432a02130103
IDD	SaveClosingDlg.h	/^	enum { IDD = IDD_SAVECLOSING };$/;"	e	enum:SaveClosingDlg::__anon484f81700103
IDD	SelectUnpackerDlg.h	/^	enum { IDD = IDD_SELECTUNPACKER };$/;"	e	enum:CSelectUnpackerDlg::__anonb8bf1a2b0103
IDD	SharedFilterDlg.h	/^	enum { IDD = IDD_SHARED_FILTER };$/;"	e	enum:CSharedFilterDlg::__anon7965432f0103
IDD	TestFilterDlg.h	/^	enum { IDD = IDD_TEST_FILTER };$/;"	e	enum:CTestFilterDlg::__anon229847580103
IDD	WMGotoDlg.cpp	/^	enum { IDD = IDD_WMGOTO };$/;"	e	enum:WMGotoDlg::Impl::__anon8b7c6b0a0103	file:
IDD_ABOUTBOX	Merge.rc	/^IDD_ABOUTBOX DIALOGEX 0, 0, 366, 235$/;"	d
IDD_ABOUTBOX	resource.h	/^#define IDD_ABOUTBOX /;"	d
IDD_COMPARE_STATISTICS	Merge.rc	/^IDD_COMPARE_STATISTICS DIALOGEX 0, 0, 257, 174$/;"	d
IDD_COMPARE_STATISTICS	resource.h	/^#define IDD_COMPARE_STATISTICS /;"	d
IDD_COMPARE_STATISTICS3	Merge.rc	/^IDD_COMPARE_STATISTICS3 DIALOGEX 0, 0, 257, 224$/;"	d
IDD_COMPARE_STATISTICS3	resource.h	/^#define IDD_COMPARE_STATISTICS3 /;"	d
IDD_CONFIRM_COPY	Merge.rc	/^IDD_CONFIRM_COPY DIALOGEX 0, 0, 285, 100$/;"	d
IDD_CONFIRM_COPY	resource.h	/^#define IDD_CONFIRM_COPY /;"	d
IDD_CONFIRM_COPY,	Merge.rc	/^    IDD_CONFIRM_COPY, DIALOG$/;"	d
IDD_DIRCMP_REPORT	Merge.rc	/^IDD_DIRCMP_REPORT DIALOGEX 0, 0, 268, 97$/;"	d
IDD_DIRCMP_REPORT	resource.h	/^#define IDD_DIRCMP_REPORT /;"	d
IDD_DIRCOLS	Merge.rc	/^IDD_DIRCOLS DIALOGEX 0, 0, 307, 163$/;"	d
IDD_DIRCOLS	resource.h	/^#define IDD_DIRCOLS /;"	d
IDD_DIRCOMP_PROGRESS	Merge.rc	/^IDD_DIRCOMP_PROGRESS DIALOGEX 0, 0, 256, 60$/;"	d
IDD_DIRCOMP_PROGRESS	resource.h	/^#define IDD_DIRCOMP_PROGRESS /;"	d
IDD_DIRCOMP_PROGRESS,	Merge.rc	/^    IDD_DIRCOMP_PROGRESS, DIALOG$/;"	d
IDD_DIR_FILTER	Merge.rc	/^IDD_DIR_FILTER DIALOGEX 30, 73, 293, 74$/;"	d
IDD_DIR_FILTER	resource.h	/^#define IDD_DIR_FILTER /;"	d
IDD_EDITOR_HEADERBAR	Merge.rc	/^IDD_EDITOR_HEADERBAR DIALOGEX 0, 0, 373, 12$/;"	d
IDD_EDITOR_HEADERBAR	resource.h	/^#define IDD_EDITOR_HEADERBAR /;"	d
IDD_EDIT_FIND	Merge.rc	/^IDD_EDIT_FIND DIALOGEX 30, 73, 293, 96$/;"	d
IDD_EDIT_FIND	resource.h	/^#define IDD_EDIT_FIND /;"	d
IDD_EDIT_MARKER	Merge.rc	/^IDD_EDIT_MARKER DIALOGEX 30, 73, 296, 174$/;"	d
IDD_EDIT_MARKER	resource.h	/^#define IDD_EDIT_MARKER /;"	d
IDD_EDIT_REPLACE	Merge.rc	/^IDD_EDIT_REPLACE DIALOGEX 36, 44, 324, 96$/;"	d
IDD_EDIT_REPLACE	resource.h	/^#define IDD_EDIT_REPLACE /;"	d
IDD_ENCODINGERROR	Merge.rc	/^IDD_ENCODINGERROR DIALOGEX 0, 0, 450, 55$/;"	d
IDD_ENCODINGERROR	resource.h	/^#define IDD_ENCODINGERROR /;"	d
IDD_FILEFILTERS	Merge.rc	/^IDD_FILEFILTERS DIALOGEX 0, 0, 356, 135$/;"	d
IDD_FILEFILTERS	resource.h	/^#define IDD_FILEFILTERS /;"	d
IDD_GENERATE_PATCH	Merge.rc	/^IDD_GENERATE_PATCH DIALOGEX 0, 0, 340, 190$/;"	d
IDD_GENERATE_PATCH	resource.h	/^#define IDD_GENERATE_PATCH /;"	d
IDD_LOAD_SAVE_CODEPAGE	Merge.rc	/^IDD_LOAD_SAVE_CODEPAGE DIALOGEX 0, 0, 278, 150$/;"	d
IDD_LOAD_SAVE_CODEPAGE	resource.h	/^#define IDD_LOAD_SAVE_CODEPAGE /;"	d
IDD_MESSAGE_BOX	Merge.rc	/^IDD_MESSAGE_BOX DIALOGEX 0, 0, 186, 95$/;"	d
IDD_MESSAGE_BOX	resource.h	/^#define IDD_MESSAGE_BOX /;"	d
IDD_OPEN	Merge.rc	/^IDD_OPEN DIALOGEX 0, 0, 465, 266$/;"	d
IDD_OPEN	resource.h	/^#define IDD_OPEN /;"	d
IDD_OPEN,	Merge.rc	/^    IDD_OPEN, DIALOG$/;"	d
IDD_PLUGINS_LIST	Merge.rc	/^IDD_PLUGINS_LIST DIALOGEX 0, 0, 470, 231$/;"	d
IDD_PLUGINS_LIST	resource.h	/^#define IDD_PLUGINS_LIST /;"	d
IDD_PREFERENCES	Merge.rc	/^IDD_PREFERENCES DIALOGEX 0, 0, 372, 280$/;"	d
IDD_PREFERENCES	resource.h	/^#define IDD_PREFERENCES /;"	d
IDD_PROPPAGE_BACKUPS	Merge.rc	/^IDD_PROPPAGE_BACKUPS DIALOGEX 0, 0, 255, 222$/;"	d
IDD_PROPPAGE_BACKUPS	resource.h	/^#define IDD_PROPPAGE_BACKUPS /;"	d
IDD_PROPPAGE_CODEPAGE	Merge.rc	/^IDD_PROPPAGE_CODEPAGE DIALOGEX 0, 0, 255, 210$/;"	d
IDD_PROPPAGE_CODEPAGE	resource.h	/^#define IDD_PROPPAGE_CODEPAGE /;"	d
IDD_PROPPAGE_COLORS_DIR	Merge.rc	/^IDD_PROPPAGE_COLORS_DIR DIALOGEX 0, 0, 255, 196$/;"	d
IDD_PROPPAGE_COLORS_DIR	resource.h	/^#define IDD_PROPPAGE_COLORS_DIR /;"	d
IDD_PROPPAGE_COLORS_MARKER	Merge.rc	/^IDD_PROPPAGE_COLORS_MARKER DIALOGEX 0, 0, 255, 157$/;"	d
IDD_PROPPAGE_COLORS_MARKER	resource.h	/^#define IDD_PROPPAGE_COLORS_MARKER /;"	d
IDD_PROPPAGE_COLORS_MARKER,	Merge.rc	/^    IDD_PROPPAGE_COLORS_MARKER, DIALOG$/;"	d
IDD_PROPPAGE_COLORS_SYNTAX	Merge.rc	/^IDD_PROPPAGE_COLORS_SYNTAX DIALOGEX 0, 0, 255, 214$/;"	d
IDD_PROPPAGE_COLORS_SYNTAX	resource.h	/^#define IDD_PROPPAGE_COLORS_SYNTAX /;"	d
IDD_PROPPAGE_COLORS_TEXT	Merge.rc	/^IDD_PROPPAGE_COLORS_TEXT DIALOGEX 0, 0, 255, 157$/;"	d
IDD_PROPPAGE_COLORS_TEXT	resource.h	/^#define IDD_PROPPAGE_COLORS_TEXT /;"	d
IDD_PROPPAGE_COLORS_WINMERGE	Merge.rc	/^IDD_PROPPAGE_COLORS_WINMERGE DIALOGEX 0, 0, 255, 196$/;"	d
IDD_PROPPAGE_COLORS_WINMERGE	resource.h	/^#define IDD_PROPPAGE_COLORS_WINMERGE /;"	d
IDD_PROPPAGE_COMPARE	Merge.rc	/^IDD_PROPPAGE_COMPARE DIALOGEX 0, 0, 255, 220$/;"	d
IDD_PROPPAGE_COMPARE	resource.h	/^#define IDD_PROPPAGE_COMPARE /;"	d
IDD_PROPPAGE_COMPARE_BINARY	Merge.rc	/^IDD_PROPPAGE_COMPARE_BINARY DIALOGEX 0, 0, 255, 205$/;"	d
IDD_PROPPAGE_COMPARE_BINARY	resource.h	/^#define IDD_PROPPAGE_COMPARE_BINARY /;"	d
IDD_PROPPAGE_COMPARE_FOLDER	Merge.rc	/^IDD_PROPPAGE_COMPARE_FOLDER DIALOGEX 0, 0, 255, 205$/;"	d
IDD_PROPPAGE_COMPARE_FOLDER	resource.h	/^#define IDD_PROPPAGE_COMPARE_FOLDER /;"	d
IDD_PROPPAGE_COMPARE_IMAGE	Merge.rc	/^IDD_PROPPAGE_COMPARE_IMAGE DIALOGEX 0, 0, 255, 205$/;"	d
IDD_PROPPAGE_COMPARE_IMAGE	resource.h	/^#define IDD_PROPPAGE_COMPARE_IMAGE /;"	d
IDD_PROPPAGE_EDITOR	Merge.rc	/^IDD_PROPPAGE_EDITOR DIALOGEX 0, 0, 255, 215$/;"	d
IDD_PROPPAGE_EDITOR	resource.h	/^#define IDD_PROPPAGE_EDITOR /;"	d
IDD_PROPPAGE_FILTER	Merge.rc	/^IDD_PROPPAGE_FILTER DIALOGEX 0, 0, 365, 188$/;"	d
IDD_PROPPAGE_FILTER	resource.h	/^#define IDD_PROPPAGE_FILTER /;"	d
IDD_PROPPAGE_GENERAL	Merge.rc	/^IDD_PROPPAGE_GENERAL DIALOGEX 0, 0, 255, 222$/;"	d
IDD_PROPPAGE_GENERAL	resource.h	/^#define IDD_PROPPAGE_GENERAL /;"	d
IDD_PROPPAGE_SHELL	Merge.rc	/^IDD_PROPPAGE_SHELL DIALOGEX 0, 0, 255, 222$/;"	d
IDD_PROPPAGE_SHELL	resource.h	/^#define IDD_PROPPAGE_SHELL /;"	d
IDD_PROPPAGE_SYSTEM	Merge.rc	/^IDD_PROPPAGE_SYSTEM DIALOGEX 0, 0, 255, 220$/;"	d
IDD_PROPPAGE_SYSTEM	resource.h	/^#define IDD_PROPPAGE_SYSTEM /;"	d
IDD_PROP_ARCHIVE	Merge.rc	/^IDD_PROP_ARCHIVE DIALOGEX 0, 0, 255, 126$/;"	d
IDD_PROP_ARCHIVE	resource.h	/^#define IDD_PROP_ARCHIVE /;"	d
IDD_SAVECLOSING	Merge.rc	/^IDD_SAVECLOSING DIALOGEX 0, 0, 262, 217$/;"	d
IDD_SAVECLOSING	resource.h	/^#define IDD_SAVECLOSING /;"	d
IDD_SAVECLOSING,	Merge.rc	/^    IDD_SAVECLOSING, DIALOG$/;"	d
IDD_SELECTUNPACKER	Merge.rc	/^IDD_SELECTUNPACKER DIALOGEX 0, 0, 318, 102$/;"	d
IDD_SELECTUNPACKER	resource.h	/^#define IDD_SELECTUNPACKER /;"	d
IDD_SELECT_FILES_OR_FOLDERS	Merge.rc	/^IDD_SELECT_FILES_OR_FOLDERS DIALOGEX 30, 73, 267, 69$/;"	d
IDD_SELECT_FILES_OR_FOLDERS	resource.h	/^#define IDD_SELECT_FILES_OR_FOLDERS /;"	d
IDD_SHARED_FILTER	Merge.rc	/^IDD_SHARED_FILTER DIALOGEX 0, 0, 250, 75$/;"	d
IDD_SHARED_FILTER	resource.h	/^#define IDD_SHARED_FILTER /;"	d
IDD_TEST_FILTER	Merge.rc	/^IDD_TEST_FILTER DIALOGEX 0, 0, 249, 142$/;"	d
IDD_TEST_FILTER	resource.h	/^#define IDD_TEST_FILTER /;"	d
IDD_WMGOTO	Merge.rc	/^IDD_WMGOTO DIALOGEX 0, 0, 210, 80$/;"	d
IDD_WMGOTO	resource.h	/^#define IDD_WMGOTO /;"	d
IDENTLEVEL	DiffWrapper.h	/^} IDENTLEVEL;$/;"	t	typeref:enum:__anon590338550103
IDENTLEVEL_ALL	DiffWrapper.h	/^	IDENTLEVEL_ALL,$/;"	e	enum:__anon590338550103
IDENTLEVEL_EXCEPTLEFT	DiffWrapper.h	/^	IDENTLEVEL_EXCEPTLEFT,$/;"	e	enum:__anon590338550103
IDENTLEVEL_EXCEPTMIDDLE	DiffWrapper.h	/^	IDENTLEVEL_EXCEPTMIDDLE,$/;"	e	enum:__anon590338550103
IDENTLEVEL_EXCEPTRIGHT	DiffWrapper.h	/^	IDENTLEVEL_EXCEPTRIGHT,$/;"	e	enum:__anon590338550103
IDENTLEVEL_NONE	DiffWrapper.h	/^	IDENTLEVEL_NONE,$/;"	e	enum:__anon590338550103
IDIGNOREALL	Common/MessageBoxDialog.h	/^#define IDIGNOREALL	/;"	d
IDI_BINARYDIFF	Merge2.rc	/^IDI_BINARYDIFF          ICON                    "res\\\\binarydiff.ico"$/;"	i
IDI_BINARYDIFF	resource.h	/^#define IDI_BINARYDIFF /;"	d
IDI_COMPARE_ABORTED	Merge2.rc	/^IDI_COMPARE_ABORTED     ICON                    "res\\\\aborted.ico"$/;"	i
IDI_COMPARE_ABORTED	resource.h	/^#define IDI_COMPARE_ABORTED /;"	d
IDI_COMPARE_ERROR	Merge2.rc	/^IDI_COMPARE_ERROR       ICON                    "res\\\\error.ico"$/;"	i
IDI_COMPARE_ERROR	resource.h	/^#define IDI_COMPARE_ERROR /;"	d
IDI_EQUALBINARY	Merge2.rc	/^IDI_EQUALBINARY         ICON                    "res\\\\equalbinary.ico"$/;"	i
IDI_EQUALBINARY	resource.h	/^#define IDI_EQUALBINARY /;"	d
IDI_EQUALFILE	Merge2.rc	/^IDI_EQUALFILE           ICON                    "res\\\\equalfile.ico"$/;"	i
IDI_EQUALFILE	resource.h	/^#define IDI_EQUALFILE /;"	d
IDI_EQUALFOLDER	Merge2.rc	/^IDI_EQUALFOLDER         ICON                    "res\\\\equalfolder.ico"$/;"	i
IDI_EQUALFOLDER	resource.h	/^#define IDI_EQUALFOLDER /;"	d
IDI_EQUALIMAGE	Merge2.rc	/^IDI_EQUALIMAGE          ICON                    "res\\\\equalimage.ico"$/;"	i
IDI_EQUALIMAGE	resource.h	/^#define IDI_EQUALIMAGE /;"	d
IDI_EQUALTEXTFILE	Merge2.rc	/^IDI_EQUALTEXTFILE       ICON                    "res\\\\equaltextfile.ico"$/;"	i
IDI_EQUALTEXTFILE	resource.h	/^#define IDI_EQUALTEXTFILE /;"	d
IDI_FILE	Merge2.rc	/^IDI_FILE                ICON                    "res\\\\fileunknown.ico"$/;"	i
IDI_FILE	resource.h	/^#define IDI_FILE /;"	d
IDI_FILEFILTER	Merge2.rc	/^IDI_FILEFILTER          ICON                    "res\\\\FileFilter.ico"$/;"	i
IDI_FILEFILTER	resource.h	/^#define IDI_FILEFILTER /;"	d
IDI_FILESKIP	Merge2.rc	/^IDI_FILESKIP            ICON                    "res\\\\fileskip.ico"$/;"	i
IDI_FILESKIP	resource.h	/^#define IDI_FILESKIP /;"	d
IDI_FOLDER	Merge2.rc	/^IDI_FOLDER              ICON                    "res\\\\folder.ico"$/;"	i
IDI_FOLDER	resource.h	/^#define IDI_FOLDER /;"	d
IDI_FOLDERSKIP	Merge2.rc	/^IDI_FOLDERSKIP          ICON                    "res\\\\folderskip.ico"$/;"	i
IDI_FOLDERSKIP	resource.h	/^#define IDI_FOLDERSKIP /;"	d
IDI_FOLDERUP	Merge2.rc	/^IDI_FOLDERUP            ICON                    "res\\\\folderup.ico"$/;"	i
IDI_FOLDERUP	resource.h	/^#define IDI_FOLDERUP /;"	d
IDI_FOLDERUP_DISABLE	Merge2.rc	/^IDI_FOLDERUP_DISABLE    ICON                    "res\\\\folderup_disable.ico"$/;"	i
IDI_FOLDERUP_DISABLE	resource.h	/^#define IDI_FOLDERUP_DISABLE /;"	d
IDI_LFILE	Merge2.rc	/^IDI_LFILE               ICON                    "res\\\\lfile.ico"$/;"	i
IDI_LFILE	resource.h	/^#define IDI_LFILE /;"	d
IDI_LFOLDER	Merge2.rc	/^IDI_LFOLDER             ICON                    "res\\\\lfolder.ico"$/;"	i
IDI_LFOLDER	resource.h	/^#define IDI_LFOLDER /;"	d
IDI_LINEFILTER	Merge2.rc	/^IDI_LINEFILTER          ICON                    "res\\\\LineFilter.ico"$/;"	i
IDI_LINEFILTER	resource.h	/^#define IDI_LINEFILTER /;"	d
IDI_LMFILE	Merge2.rc	/^IDI_LMFILE              ICON                    "res\\\\rmissing.ico"$/;"	i
IDI_LMFILE	resource.h	/^#define IDI_LMFILE /;"	d
IDI_LMFOLDER	Merge2.rc	/^IDI_LMFOLDER            ICON                    "res\\\\rmissingfolder.ico"$/;"	i
IDI_LMFOLDER	resource.h	/^#define IDI_LMFOLDER /;"	d
IDI_LRFILE	Merge2.rc	/^IDI_LRFILE              ICON                    "res\\\\mmissing.ico"$/;"	i
IDI_LRFILE	resource.h	/^#define IDI_LRFILE /;"	d
IDI_LRFOLDER	Merge2.rc	/^IDI_LRFOLDER            ICON                    "res\\\\mmissingfolder.ico"$/;"	i
IDI_LRFOLDER	resource.h	/^#define IDI_LRFOLDER /;"	d
IDI_MFILE	Merge2.rc	/^IDI_MFILE               ICON                    "res\\\\mfile.ico"$/;"	i
IDI_MFILE	resource.h	/^#define IDI_MFILE /;"	d
IDI_MFOLDER	Merge2.rc	/^IDI_MFOLDER             ICON                    "res\\\\mfolder.ico"$/;"	i
IDI_MFOLDER	resource.h	/^#define IDI_MFOLDER /;"	d
IDI_MRFILE	Merge2.rc	/^IDI_MRFILE              ICON                    "res\\\\lmissing.ico"$/;"	i
IDI_MRFILE	resource.h	/^#define IDI_MRFILE /;"	d
IDI_MRFOLDER	Merge2.rc	/^IDI_MRFOLDER            ICON                    "res\\\\lmissingfolder.ico"$/;"	i
IDI_MRFOLDER	resource.h	/^#define IDI_MRFOLDER /;"	d
IDI_NOTEQUALFILE	Merge2.rc	/^IDI_NOTEQUALFILE        ICON                    "res\\\\notequalfile.ico"$/;"	i
IDI_NOTEQUALFILE	resource.h	/^#define IDI_NOTEQUALFILE /;"	d
IDI_NOTEQUALFOLDER	Merge2.rc	/^IDI_NOTEQUALFOLDER      ICON                    "res\\\\notequalfolder.ico"$/;"	i
IDI_NOTEQUALFOLDER	resource.h	/^#define IDI_NOTEQUALFOLDER /;"	d
IDI_NOTEQUALIMAGE	Merge2.rc	/^IDI_NOTEQUALIMAGE       ICON                    "res\\\\notequalimage.ico"$/;"	i
IDI_NOTEQUALIMAGE	resource.h	/^#define IDI_NOTEQUALIMAGE /;"	d
IDI_NOTEQUALTEXTFILE	Merge2.rc	/^IDI_NOTEQUALTEXTFILE    ICON                    "res\\\\notequaltextfile.ico"$/;"	i
IDI_NOTEQUALTEXTFILE	resource.h	/^#define IDI_NOTEQUALTEXTFILE /;"	d
IDI_RFILE	Merge2.rc	/^IDI_RFILE               ICON                    "res\\\\rfile.ico"$/;"	i
IDI_RFILE	resource.h	/^#define IDI_RFILE /;"	d
IDI_RFOLDER	Merge2.rc	/^IDI_RFOLDER             ICON                    "res\\\\rfolder.ico"$/;"	i
IDI_RFOLDER	resource.h	/^#define IDI_RFOLDER /;"	d
IDI_ROTATE2	Merge2.rc	/^IDI_ROTATE2             ICON                    "res\\\\rotate2.ico"$/;"	i
IDI_ROTATE2	resource.h	/^#define IDI_ROTATE2 /;"	d
IDI_SIGMA	resource.h	/^#define IDI_SIGMA /;"	d
IDI_TREE_STATE_COLLAPSED	Merge2.rc	/^IDI_TREE_STATE_COLLAPSED ICON                   "res\\\\treestate_collapsed.ico"$/;"	i
IDI_TREE_STATE_COLLAPSED	resource.h	/^#define IDI_TREE_STATE_COLLAPSED /;"	d
IDI_TREE_STATE_EXPANDED	Merge2.rc	/^IDI_TREE_STATE_EXPANDED ICON                    "res\\\\treestate_expanded.ico"$/;"	i
IDI_TREE_STATE_EXPANDED	resource.h	/^#define IDI_TREE_STATE_EXPANDED /;"	d
IDLE_TIMER	Merge.h	/^enum { IDLE_TIMER = 9754 };$/;"	e	enum:__anon1ee6036b0103
IDNOTOALL	Common/MessageBoxDialog.h	/^#define IDNOTOALL	/;"	d
IDR_DIRDOCTYPE	Merge.rc	/^IDR_DIRDOCTYPE MENU$/;"	m
IDR_DIRDOCTYPE	Merge2.rc	/^IDR_DIRDOCTYPE          ICON                    "res\\\\MergeDir.ico"$/;"	i
IDR_DIRDOCTYPE	resource.h	/^#define IDR_DIRDOCTYPE /;"	d
IDR_LOGO	resource.h	/^#define IDR_LOGO /;"	d
IDR_MAINFRAME	Merge.rc	/^IDR_MAINFRAME ACCELERATORS$/;"	a
IDR_MAINFRAME	Merge.rc	/^IDR_MAINFRAME MENU$/;"	m
IDR_MAINFRAME	Merge2.rc	/^IDR_MAINFRAME           ICON                    "res\\\\Merge.ico"$/;"	i
IDR_MAINFRAME	resource.h	/^#define IDR_MAINFRAME /;"	d
IDR_MARGIN_CURSOR	Merge2.rc	/^IDR_MARGIN_CURSOR       CURSOR                  "res\\\\mg_cur.cur"$/;"	c
IDR_MARGIN_CURSOR	resource.h	/^#define IDR_MARGIN_CURSOR /;"	d
IDR_MARGIN_ICONS	Merge2.rc	/^IDR_MARGIN_ICONS        BITMAP                  "res\\\\mg_icons.bmp"$/;"	b
IDR_MARGIN_ICONS	resource.h	/^#define IDR_MARGIN_ICONS /;"	d
IDR_MARGIN_ICONS_PNG	resource.h	/^#define IDR_MARGIN_ICONS_PNG /;"	d
IDR_MERGEDOCTYPE	Merge.rc	/^IDR_MERGEDOCTYPE ACCELERATORS$/;"	a
IDR_MERGEDOCTYPE	Merge.rc	/^IDR_MERGEDOCTYPE MENU$/;"	m
IDR_MERGEDOCTYPE	Merge2.rc	/^IDR_MERGEDOCTYPE        ICON                    "res\\\\MergeDoc.ico"$/;"	i
IDR_MERGEDOCTYPE	resource.h	/^#define IDR_MERGEDOCTYPE /;"	d
IDR_MERGEPROJECT	Merge2.rc	/^IDR_MERGEPROJECT        ICON                    "res\\\\MergeProject.ico"$/;"	i
IDR_MERGEPROJECT	resource.h	/^#define IDR_MERGEPROJECT /;"	d
IDR_POPUP_DIFF_OPTIONS	Merge.rc	/^IDR_POPUP_DIFF_OPTIONS MENU$/;"	m
IDR_POPUP_DIFF_OPTIONS	resource.h	/^#define IDR_POPUP_DIFF_OPTIONS /;"	d
IDR_POPUP_DIRVIEW	Merge.rc	/^IDR_POPUP_DIRVIEW MENU$/;"	m
IDR_POPUP_DIRVIEW	resource.h	/^#define IDR_POPUP_DIRVIEW /;"	d
IDR_POPUP_EDITOR_HEADERBAR	Merge.rc	/^IDR_POPUP_EDITOR_HEADERBAR MENU$/;"	m
IDR_POPUP_EDITOR_HEADERBAR	resource.h	/^#define IDR_POPUP_EDITOR_HEADERBAR /;"	d
IDR_POPUP_IMGMERGEVIEW	Merge.rc	/^IDR_POPUP_IMGMERGEVIEW MENU$/;"	m
IDR_POPUP_IMGMERGEVIEW	resource.h	/^#define IDR_POPUP_IMGMERGEVIEW /;"	d
IDR_POPUP_LOCATIONBAR	Merge.rc	/^IDR_POPUP_LOCATIONBAR MENU$/;"	m
IDR_POPUP_LOCATIONBAR	resource.h	/^#define IDR_POPUP_LOCATIONBAR /;"	d
IDR_POPUP_MERGEVIEW	Merge.rc	/^IDR_POPUP_MERGEVIEW MENU$/;"	m
IDR_POPUP_MERGEVIEW	resource.h	/^#define IDR_POPUP_MERGEVIEW /;"	d
IDR_POPUP_PLUGINS_SETTINGS	Merge.rc	/^IDR_POPUP_PLUGINS_SETTINGS MENU$/;"	m
IDR_POPUP_PLUGINS_SETTINGS	resource.h	/^#define IDR_POPUP_PLUGINS_SETTINGS /;"	d
IDR_POPUP_PROJECT	Merge.rc	/^IDR_POPUP_PROJECT MENU$/;"	m
IDR_POPUP_PROJECT	resource.h	/^#define IDR_POPUP_PROJECT /;"	d
IDR_SPLASH	resource.h	/^#define IDR_SPLASH /;"	d
IDSKIP	Common/MessageBoxDialog.h	/^#define IDSKIP	/;"	d
IDSKIPALL	Common/MessageBoxDialog.h	/^#define IDSKIPALL	/;"	d
IDS_1_DIFF_FOUND	resource.h	/^#define IDS_1_DIFF_FOUND /;"	d
IDS_ABORTED_ITEM	resource.h	/^#define IDS_ABORTED_ITEM /;"	d
IDS_ALLFILES	resource.h	/^#define IDS_ALLFILES /;"	d
IDS_AUTOCOMPLETE_DISABLED	resource.h	/^#define IDS_AUTOCOMPLETE_DISABLED /;"	d
IDS_AUTOCOMPLETE_FILE_SYS	resource.h	/^#define IDS_AUTOCOMPLETE_FILE_SYS /;"	d
IDS_AUTOCOMPLETE_MRU	resource.h	/^#define IDS_AUTOCOMPLETE_MRU /;"	d
IDS_AUTO_MERGE	resource.h	/^#define IDS_AUTO_MERGE /;"	d
IDS_BACKUP_FAILED_PROMPT	resource.h	/^#define IDS_BACKUP_FAILED_PROMPT /;"	d
IDS_BIN_FILES_DIFF	resource.h	/^#define IDS_BIN_FILES_DIFF /;"	d
IDS_BIN_FILES_SAME	resource.h	/^#define IDS_BIN_FILES_SAME /;"	d
IDS_BREAK_ON_PUNCTUATION	resource.h	/^#define IDS_BREAK_ON_PUNCTUATION /;"	d
IDS_BREAK_ON_WHITESPACE	resource.h	/^#define IDS_BREAK_ON_WHITESPACE /;"	d
IDS_CANNOT_CREATE_BINARYPATCH	resource.h	/^#define IDS_CANNOT_CREATE_BINARYPATCH /;"	d
IDS_CANNOT_CREATE_DIRPATCH	resource.h	/^#define IDS_CANNOT_CREATE_DIRPATCH /;"	d
IDS_CANNOT_OPEN_BINARYFILE	resource.h	/^#define IDS_CANNOT_OPEN_BINARYFILE /;"	d
IDS_CANT_COMPARE_FILES	resource.h	/^#define IDS_CANT_COMPARE_FILES /;"	d
IDS_CHECKFORUPDATES_FAILED	resource.h	/^#define IDS_CHECKFORUPDATES_FAILED /;"	d
IDS_CHECKFORUPDATES_NEWVERSION	resource.h	/^#define IDS_CHECKFORUPDATES_NEWVERSION /;"	d
IDS_CHECKFORUPDATES_UPTODATE	resource.h	/^#define IDS_CHECKFORUPDATES_UPTODATE /;"	d
IDS_CLOSEALL_WINDOWS	resource.h	/^#define IDS_CLOSEALL_WINDOWS /;"	d
IDS_CLOSE_LEFT_TABS	resource.h	/^#define IDS_CLOSE_LEFT_TABS /;"	d
IDS_CLOSE_OTHER_TABS	resource.h	/^#define IDS_CLOSE_OTHER_TABS /;"	d
IDS_CLOSE_RIGHT_TABS	resource.h	/^#define IDS_CLOSE_RIGHT_TABS /;"	d
IDS_CMPRES_ERROR	resource.h	/^#define IDS_CMPRES_ERROR /;"	d
IDS_CODEPAGE_CONFLICT	resource.h	/^#define IDS_CODEPAGE_CONFLICT /;"	d
IDS_CODEPAGE_MERGED	resource.h	/^#define IDS_CODEPAGE_MERGED /;"	d
IDS_COLDESC_BINARY	resource.h	/^#define IDS_COLDESC_BINARY /;"	d
IDS_COLDESC_DIR	resource.h	/^#define IDS_COLDESC_DIR /;"	d
IDS_COLDESC_EXTENSION	resource.h	/^#define IDS_COLDESC_EXTENSION /;"	d
IDS_COLDESC_FILENAME	resource.h	/^#define IDS_COLDESC_FILENAME /;"	d
IDS_COLDESC_LATTRIBUTES	resource.h	/^#define IDS_COLDESC_LATTRIBUTES /;"	d
IDS_COLDESC_LENCODING	resource.h	/^#define IDS_COLDESC_LENCODING /;"	d
IDS_COLDESC_LEOL_TYPE	resource.h	/^#define IDS_COLDESC_LEOL_TYPE /;"	d
IDS_COLDESC_LSIZE	resource.h	/^#define IDS_COLDESC_LSIZE /;"	d
IDS_COLDESC_LSIZE_SHORT	resource.h	/^#define IDS_COLDESC_LSIZE_SHORT /;"	d
IDS_COLDESC_LTIMEC	resource.h	/^#define IDS_COLDESC_LTIMEC /;"	d
IDS_COLDESC_LTIMEM	resource.h	/^#define IDS_COLDESC_LTIMEM /;"	d
IDS_COLDESC_LVERSION	resource.h	/^#define IDS_COLDESC_LVERSION /;"	d
IDS_COLDESC_MATTRIBUTES	resource.h	/^#define IDS_COLDESC_MATTRIBUTES /;"	d
IDS_COLDESC_MENCODING	resource.h	/^#define IDS_COLDESC_MENCODING /;"	d
IDS_COLDESC_MEOL_TYPE	resource.h	/^#define IDS_COLDESC_MEOL_TYPE /;"	d
IDS_COLDESC_MSIZE	resource.h	/^#define IDS_COLDESC_MSIZE /;"	d
IDS_COLDESC_MSIZE_SHORT	resource.h	/^#define IDS_COLDESC_MSIZE_SHORT /;"	d
IDS_COLDESC_MTIMEC	resource.h	/^#define IDS_COLDESC_MTIMEC /;"	d
IDS_COLDESC_MTIMEM	resource.h	/^#define IDS_COLDESC_MTIMEM /;"	d
IDS_COLDESC_MVERSION	resource.h	/^#define IDS_COLDESC_MVERSION /;"	d
IDS_COLDESC_NEWER	resource.h	/^#define IDS_COLDESC_NEWER /;"	d
IDS_COLDESC_NIDIFFS	resource.h	/^#define IDS_COLDESC_NIDIFFS /;"	d
IDS_COLDESC_NSDIFFS	resource.h	/^#define IDS_COLDESC_NSDIFFS /;"	d
IDS_COLDESC_RATTRIBUTES	resource.h	/^#define IDS_COLDESC_RATTRIBUTES /;"	d
IDS_COLDESC_RENCODING	resource.h	/^#define IDS_COLDESC_RENCODING /;"	d
IDS_COLDESC_REOL_TYPE	resource.h	/^#define IDS_COLDESC_REOL_TYPE /;"	d
IDS_COLDESC_RESULT	resource.h	/^#define IDS_COLDESC_RESULT /;"	d
IDS_COLDESC_RESULT_ABBR	resource.h	/^#define IDS_COLDESC_RESULT_ABBR /;"	d
IDS_COLDESC_RSIZE	resource.h	/^#define IDS_COLDESC_RSIZE /;"	d
IDS_COLDESC_RSIZE_SHORT	resource.h	/^#define IDS_COLDESC_RSIZE_SHORT /;"	d
IDS_COLDESC_RTIMEC	resource.h	/^#define IDS_COLDESC_RTIMEC /;"	d
IDS_COLDESC_RTIMEM	resource.h	/^#define IDS_COLDESC_RTIMEM /;"	d
IDS_COLDESC_RVERSION	resource.h	/^#define IDS_COLDESC_RVERSION /;"	d
IDS_COLHDR_BINARY	resource.h	/^#define IDS_COLHDR_BINARY /;"	d
IDS_COLHDR_DIR	resource.h	/^#define IDS_COLHDR_DIR /;"	d
IDS_COLHDR_EXTENSION	resource.h	/^#define IDS_COLHDR_EXTENSION /;"	d
IDS_COLHDR_FILENAME	resource.h	/^#define IDS_COLHDR_FILENAME /;"	d
IDS_COLHDR_LATTRIBUTES	resource.h	/^#define IDS_COLHDR_LATTRIBUTES /;"	d
IDS_COLHDR_LENCODING	resource.h	/^#define IDS_COLHDR_LENCODING /;"	d
IDS_COLHDR_LEOL_TYPE	resource.h	/^#define IDS_COLHDR_LEOL_TYPE /;"	d
IDS_COLHDR_LSIZE	resource.h	/^#define IDS_COLHDR_LSIZE /;"	d
IDS_COLHDR_LSIZE_SHORT	resource.h	/^#define IDS_COLHDR_LSIZE_SHORT /;"	d
IDS_COLHDR_LTIMEC	resource.h	/^#define IDS_COLHDR_LTIMEC /;"	d
IDS_COLHDR_LTIMEM	resource.h	/^#define IDS_COLHDR_LTIMEM /;"	d
IDS_COLHDR_LVERSION	resource.h	/^#define IDS_COLHDR_LVERSION /;"	d
IDS_COLHDR_MATTRIBUTES	resource.h	/^#define IDS_COLHDR_MATTRIBUTES /;"	d
IDS_COLHDR_MENCODING	resource.h	/^#define IDS_COLHDR_MENCODING /;"	d
IDS_COLHDR_MEOL_TYPE	resource.h	/^#define IDS_COLHDR_MEOL_TYPE /;"	d
IDS_COLHDR_MSIZE	resource.h	/^#define IDS_COLHDR_MSIZE /;"	d
IDS_COLHDR_MSIZE_SHORT	resource.h	/^#define IDS_COLHDR_MSIZE_SHORT /;"	d
IDS_COLHDR_MTIMEC	resource.h	/^#define IDS_COLHDR_MTIMEC /;"	d
IDS_COLHDR_MTIMEM	resource.h	/^#define IDS_COLHDR_MTIMEM /;"	d
IDS_COLHDR_MVERSION	resource.h	/^#define IDS_COLHDR_MVERSION /;"	d
IDS_COLHDR_NEWER	resource.h	/^#define IDS_COLHDR_NEWER /;"	d
IDS_COLHDR_NIDIFFS	resource.h	/^#define IDS_COLHDR_NIDIFFS /;"	d
IDS_COLHDR_NSDIFFS	resource.h	/^#define IDS_COLHDR_NSDIFFS /;"	d
IDS_COLHDR_RATTRIBUTES	resource.h	/^#define IDS_COLHDR_RATTRIBUTES /;"	d
IDS_COLHDR_RENCODING	resource.h	/^#define IDS_COLHDR_RENCODING /;"	d
IDS_COLHDR_REOL_TYPE	resource.h	/^#define IDS_COLHDR_REOL_TYPE /;"	d
IDS_COLHDR_RESULT	resource.h	/^#define IDS_COLHDR_RESULT /;"	d
IDS_COLHDR_RESULT_ABBR	resource.h	/^#define IDS_COLHDR_RESULT_ABBR /;"	d
IDS_COLHDR_RSIZE	resource.h	/^#define IDS_COLHDR_RSIZE /;"	d
IDS_COLHDR_RSIZE_SHORT	resource.h	/^#define IDS_COLHDR_RSIZE_SHORT /;"	d
IDS_COLHDR_RTIMEC	resource.h	/^#define IDS_COLHDR_RTIMEC /;"	d
IDS_COLHDR_RTIMEM	resource.h	/^#define IDS_COLHDR_RTIMEM /;"	d
IDS_COLHDR_RVERSION	resource.h	/^#define IDS_COLHDR_RVERSION /;"	d
IDS_COLORSCHEME_ASP	resource.h	/^#define IDS_COLORSCHEME_ASP /;"	d
IDS_COLORSCHEME_BASIC	resource.h	/^#define IDS_COLORSCHEME_BASIC /;"	d
IDS_COLORSCHEME_BATCH	resource.h	/^#define IDS_COLORSCHEME_BATCH /;"	d
IDS_COLORSCHEME_C	resource.h	/^#define IDS_COLORSCHEME_C /;"	d
IDS_COLORSCHEME_CSHARP	resource.h	/^#define IDS_COLORSCHEME_CSHARP /;"	d
IDS_COLORSCHEME_CSS	resource.h	/^#define IDS_COLORSCHEME_CSS /;"	d
IDS_COLORSCHEME_DCL	resource.h	/^#define IDS_COLORSCHEME_DCL /;"	d
IDS_COLORSCHEME_FORTRAN	resource.h	/^#define IDS_COLORSCHEME_FORTRAN /;"	d
IDS_COLORSCHEME_GO	resource.h	/^#define IDS_COLORSCHEME_GO /;"	d
IDS_COLORSCHEME_HTML	resource.h	/^#define IDS_COLORSCHEME_HTML /;"	d
IDS_COLORSCHEME_INI	resource.h	/^#define IDS_COLORSCHEME_INI /;"	d
IDS_COLORSCHEME_INNOSETUP	resource.h	/^#define IDS_COLORSCHEME_INNOSETUP /;"	d
IDS_COLORSCHEME_INSTALLSHIELD	resource.h	/^#define IDS_COLORSCHEME_INSTALLSHIELD /;"	d
IDS_COLORSCHEME_JAVA	resource.h	/^#define IDS_COLORSCHEME_JAVA /;"	d
IDS_COLORSCHEME_LISP	resource.h	/^#define IDS_COLORSCHEME_LISP /;"	d
IDS_COLORSCHEME_LUA	resource.h	/^#define IDS_COLORSCHEME_LUA /;"	d
IDS_COLORSCHEME_NSIS	resource.h	/^#define IDS_COLORSCHEME_NSIS /;"	d
IDS_COLORSCHEME_PASCAL	resource.h	/^#define IDS_COLORSCHEME_PASCAL /;"	d
IDS_COLORSCHEME_PERL	resource.h	/^#define IDS_COLORSCHEME_PERL /;"	d
IDS_COLORSCHEME_PHP	resource.h	/^#define IDS_COLORSCHEME_PHP /;"	d
IDS_COLORSCHEME_PLAIN	resource.h	/^#define IDS_COLORSCHEME_PLAIN /;"	d
IDS_COLORSCHEME_PO	resource.h	/^#define IDS_COLORSCHEME_PO /;"	d
IDS_COLORSCHEME_POWERSHELL	resource.h	/^#define IDS_COLORSCHEME_POWERSHELL /;"	d
IDS_COLORSCHEME_PYTHON	resource.h	/^#define IDS_COLORSCHEME_PYTHON /;"	d
IDS_COLORSCHEME_REXX	resource.h	/^#define IDS_COLORSCHEME_REXX /;"	d
IDS_COLORSCHEME_RSRC	resource.h	/^#define IDS_COLORSCHEME_RSRC /;"	d
IDS_COLORSCHEME_RUBY	resource.h	/^#define IDS_COLORSCHEME_RUBY /;"	d
IDS_COLORSCHEME_RUST	resource.h	/^#define IDS_COLORSCHEME_RUST /;"	d
IDS_COLORSCHEME_SGML	resource.h	/^#define IDS_COLORSCHEME_SGML /;"	d
IDS_COLORSCHEME_SH	resource.h	/^#define IDS_COLORSCHEME_SH /;"	d
IDS_COLORSCHEME_SIOD	resource.h	/^#define IDS_COLORSCHEME_SIOD /;"	d
IDS_COLORSCHEME_SQL	resource.h	/^#define IDS_COLORSCHEME_SQL /;"	d
IDS_COLORSCHEME_TCL	resource.h	/^#define IDS_COLORSCHEME_TCL /;"	d
IDS_COLORSCHEME_TEX	resource.h	/^#define IDS_COLORSCHEME_TEX /;"	d
IDS_COLORSCHEME_VERILOG	resource.h	/^#define IDS_COLORSCHEME_VERILOG /;"	d
IDS_COLORSCHEME_VHDL	resource.h	/^#define IDS_COLORSCHEME_VHDL /;"	d
IDS_COLORSCHEME_XML	resource.h	/^#define IDS_COLORSCHEME_XML /;"	d
IDS_COMPMETHOD_BINARY_CONTENTS	resource.h	/^#define IDS_COMPMETHOD_BINARY_CONTENTS /;"	d
IDS_COMPMETHOD_DATESIZE	resource.h	/^#define IDS_COMPMETHOD_DATESIZE /;"	d
IDS_COMPMETHOD_FULL_CONTENTS	resource.h	/^#define IDS_COMPMETHOD_FULL_CONTENTS /;"	d
IDS_COMPMETHOD_MODDATE	resource.h	/^#define IDS_COMPMETHOD_MODDATE /;"	d
IDS_COMPMETHOD_QUICK_CONTENTS	resource.h	/^#define IDS_COMPMETHOD_QUICK_CONTENTS /;"	d
IDS_COMPMETHOD_SIZE	resource.h	/^#define IDS_COMPMETHOD_SIZE /;"	d
IDS_CONFIRM_CLOSE_WINDOW	resource.h	/^#define IDS_CONFIRM_CLOSE_WINDOW /;"	d
IDS_CONFIRM_COPY_CAPTION	resource.h	/^#define IDS_CONFIRM_COPY_CAPTION /;"	d
IDS_CONFIRM_DELETE_SINGLE	resource.h	/^#define IDS_CONFIRM_DELETE_SINGLE /;"	d
IDS_CONFIRM_MOVE_CAPTION	resource.h	/^#define IDS_CONFIRM_MOVE_CAPTION /;"	d
IDS_CONFIRM_MULTIPLE_COPY	resource.h	/^#define IDS_CONFIRM_MULTIPLE_COPY /;"	d
IDS_CONFIRM_MULTIPLE_MOVE	resource.h	/^#define IDS_CONFIRM_MULTIPLE_MOVE /;"	d
IDS_CONFIRM_SINGLE_COPY	resource.h	/^#define IDS_CONFIRM_SINGLE_COPY /;"	d
IDS_CONFIRM_SINGLE_MOVE	resource.h	/^#define IDS_CONFIRM_SINGLE_MOVE /;"	d
IDS_CONFLICT_MINE_FILE	resource.h	/^#define IDS_CONFLICT_MINE_FILE /;"	d
IDS_CONFLICT_THEIRS_FILE	resource.h	/^#define IDS_CONFLICT_THEIRS_FILE /;"	d
IDS_COPY_ALL_TO	resource.h	/^#define IDS_COPY_ALL_TO /;"	d
IDS_COPY_ALL_TO2	resource.h	/^#define IDS_COPY_ALL_TO2 /;"	d
IDS_COPY_BOTH_TO	resource.h	/^#define IDS_COPY_BOTH_TO /;"	d
IDS_COPY_BOTH_TO2	resource.h	/^#define IDS_COPY_BOTH_TO2 /;"	d
IDS_COPY_DIFFERENCES_TO	resource.h	/^#define IDS_COPY_DIFFERENCES_TO /;"	d
IDS_COPY_DIFFERENCES_TO2	resource.h	/^#define IDS_COPY_DIFFERENCES_TO2 /;"	d
IDS_COPY_LEFT_TO	resource.h	/^#define IDS_COPY_LEFT_TO /;"	d
IDS_COPY_LEFT_TO2	resource.h	/^#define IDS_COPY_LEFT_TO2 /;"	d
IDS_COPY_LEFT_TO_MIDDLE	resource.h	/^#define IDS_COPY_LEFT_TO_MIDDLE /;"	d
IDS_COPY_LEFT_TO_MIDDLE2	resource.h	/^#define IDS_COPY_LEFT_TO_MIDDLE2 /;"	d
IDS_COPY_LEFT_TO_RIGHT	resource.h	/^#define IDS_COPY_LEFT_TO_RIGHT /;"	d
IDS_COPY_LEFT_TO_RIGHT2	resource.h	/^#define IDS_COPY_LEFT_TO_RIGHT2 /;"	d
IDS_COPY_MIDDLE_TO	resource.h	/^#define IDS_COPY_MIDDLE_TO /;"	d
IDS_COPY_MIDDLE_TO2	resource.h	/^#define IDS_COPY_MIDDLE_TO2 /;"	d
IDS_COPY_MIDDLE_TO_LEFT	resource.h	/^#define IDS_COPY_MIDDLE_TO_LEFT /;"	d
IDS_COPY_MIDDLE_TO_LEFT2	resource.h	/^#define IDS_COPY_MIDDLE_TO_LEFT2 /;"	d
IDS_COPY_MIDDLE_TO_RIGHT	resource.h	/^#define IDS_COPY_MIDDLE_TO_RIGHT /;"	d
IDS_COPY_MIDDLE_TO_RIGHT2	resource.h	/^#define IDS_COPY_MIDDLE_TO_RIGHT2 /;"	d
IDS_COPY_RIGHT_TO	resource.h	/^#define IDS_COPY_RIGHT_TO /;"	d
IDS_COPY_RIGHT_TO2	resource.h	/^#define IDS_COPY_RIGHT_TO2 /;"	d
IDS_COPY_RIGHT_TO_LEFT	resource.h	/^#define IDS_COPY_RIGHT_TO_LEFT /;"	d
IDS_COPY_RIGHT_TO_LEFT2	resource.h	/^#define IDS_COPY_RIGHT_TO_LEFT2 /;"	d
IDS_COPY_RIGHT_TO_MIDDLE	resource.h	/^#define IDS_COPY_RIGHT_TO_MIDDLE /;"	d
IDS_COPY_RIGHT_TO_MIDDLE2	resource.h	/^#define IDS_COPY_RIGHT_TO_MIDDLE2 /;"	d
IDS_CREATE_FOLDER	resource.h	/^#define IDS_CREATE_FOLDER /;"	d
IDS_CREATE_FOLDER_ERROR	resource.h	/^#define IDS_CREATE_FOLDER_ERROR /;"	d
IDS_CREATE_PAIR_FOLDER	resource.h	/^#define IDS_CREATE_PAIR_FOLDER /;"	d
IDS_DEL_ALL_FMT	resource.h	/^#define IDS_DEL_ALL_FMT /;"	d
IDS_DEL_ALL_FMT2	resource.h	/^#define IDS_DEL_ALL_FMT2 /;"	d
IDS_DEL_BOTH_FMT	resource.h	/^#define IDS_DEL_BOTH_FMT /;"	d
IDS_DEL_BOTH_FMT2	resource.h	/^#define IDS_DEL_BOTH_FMT2 /;"	d
IDS_DEL_LEFT_FMT	resource.h	/^#define IDS_DEL_LEFT_FMT /;"	d
IDS_DEL_LEFT_FMT2	resource.h	/^#define IDS_DEL_LEFT_FMT2 /;"	d
IDS_DEL_MIDDLE_FMT	resource.h	/^#define IDS_DEL_MIDDLE_FMT /;"	d
IDS_DEL_MIDDLE_FMT2	resource.h	/^#define IDS_DEL_MIDDLE_FMT2 /;"	d
IDS_DEL_RIGHT_FMT	resource.h	/^#define IDS_DEL_RIGHT_FMT /;"	d
IDS_DEL_RIGHT_FMT2	resource.h	/^#define IDS_DEL_RIGHT_FMT2 /;"	d
IDS_DIFFBAR_CAPTION	resource.h	/^#define IDS_DIFFBAR_CAPTION /;"	d
IDS_DIFFERENT	resource.h	/^#define IDS_DIFFERENT /;"	d
IDS_DIFF_ALGORITHM_DEFAULT	resource.h	/^#define IDS_DIFF_ALGORITHM_DEFAULT /;"	d
IDS_DIFF_ALGORITHM_HISTOGRAM	resource.h	/^#define IDS_DIFF_ALGORITHM_HISTOGRAM /;"	d
IDS_DIFF_ALGORITHM_MINIMAL	resource.h	/^#define IDS_DIFF_ALGORITHM_MINIMAL /;"	d
IDS_DIFF_ALGORITHM_PATIENCE	resource.h	/^#define IDS_DIFF_ALGORITHM_PATIENCE /;"	d
IDS_DIFF_CONTEXT	resource.h	/^#define IDS_DIFF_CONTEXT /;"	d
IDS_DIFF_FILEOVERWRITE	resource.h	/^#define IDS_DIFF_FILEOVERWRITE /;"	d
IDS_DIFF_HTML	resource.h	/^#define IDS_DIFF_HTML /;"	d
IDS_DIFF_ITEM1NOTFOUND	resource.h	/^#define IDS_DIFF_ITEM1NOTFOUND /;"	d
IDS_DIFF_ITEM2NOTFOUND	resource.h	/^#define IDS_DIFF_ITEM2NOTFOUND /;"	d
IDS_DIFF_NORMAL	resource.h	/^#define IDS_DIFF_NORMAL /;"	d
IDS_DIFF_NUMBER_STATUS_FMT	resource.h	/^#define IDS_DIFF_NUMBER_STATUS_FMT /;"	d
IDS_DIFF_SELECTEDFILES	resource.h	/^#define IDS_DIFF_SELECTEDFILES /;"	d
IDS_DIFF_SUCCEEDED	resource.h	/^#define IDS_DIFF_SUCCEEDED /;"	d
IDS_DIFF_UNIFIED	resource.h	/^#define IDS_DIFF_UNIFIED /;"	d
IDS_DIRCMP_NOTSYNC	resource.h	/^#define IDS_DIRCMP_NOTSYNC /;"	d
IDS_DIRECTORY_REPORT_TITLE	resource.h	/^#define IDS_DIRECTORY_REPORT_TITLE /;"	d
IDS_DIRECTORY_WINDOW_TITLE	resource.h	/^#define IDS_DIRECTORY_WINDOW_TITLE /;"	d
IDS_DIRSEL_TAG	resource.h	/^#define IDS_DIRSEL_TAG /;"	d
IDS_DIRVIEW_STATUS_FMT_FOCUS	resource.h	/^#define IDS_DIRVIEW_STATUS_FMT_FOCUS /;"	d
IDS_DIRVIEW_STATUS_FMT_NOFOCUS	resource.h	/^#define IDS_DIRVIEW_STATUS_FMT_NOFOCUS /;"	d
IDS_DIR_SKIPPED	resource.h	/^#define IDS_DIR_SKIPPED /;"	d
IDS_DOES_NOT_EXIST_IN_FMT	resource.h	/^#define IDS_DOES_NOT_EXIST_IN_FMT /;"	d
IDS_EDIT_TEXT_NOT_FOUND	resource.h	/^#define IDS_EDIT_TEXT_NOT_FOUND /;"	d
IDS_ELAPSED_TIME	resource.h	/^#define IDS_ELAPSED_TIME /;"	d
IDS_EMPTY_LEFT_FILE	resource.h	/^#define IDS_EMPTY_LEFT_FILE /;"	d
IDS_EMPTY_LINE_STATUS_INFO	resource.h	/^#define IDS_EMPTY_LINE_STATUS_INFO /;"	d
IDS_EMPTY_MIDDLE_FILE	resource.h	/^#define IDS_EMPTY_MIDDLE_FILE /;"	d
IDS_EMPTY_RIGHT_FILE	resource.h	/^#define IDS_EMPTY_RIGHT_FILE /;"	d
IDS_EOL_BIN	resource.h	/^#define IDS_EOL_BIN /;"	d
IDS_EOL_CONFLICT	resource.h	/^#define IDS_EOL_CONFLICT /;"	d
IDS_EOL_CR	resource.h	/^#define IDS_EOL_CR /;"	d
IDS_EOL_CRLF	resource.h	/^#define IDS_EOL_CRLF /;"	d
IDS_EOL_DOS	resource.h	/^#define IDS_EOL_DOS /;"	d
IDS_EOL_LF	resource.h	/^#define IDS_EOL_LF /;"	d
IDS_EOL_MAC	resource.h	/^#define IDS_EOL_MAC /;"	d
IDS_EOL_MERGED	resource.h	/^#define IDS_EOL_MERGED /;"	d
IDS_EOL_MIXED	resource.h	/^#define IDS_EOL_MIXED /;"	d
IDS_EOL_NONE	resource.h	/^#define IDS_EOL_NONE /;"	d
IDS_EOL_UNIX	resource.h	/^#define IDS_EOL_UNIX /;"	d
IDS_ERROR_BACKUP	resource.h	/^#define IDS_ERROR_BACKUP /;"	d
IDS_ERROR_CONF_RESOLVE	resource.h	/^#define IDS_ERROR_CONF_RESOLVE /;"	d
IDS_ERROR_EXECUTE_FILE	resource.h	/^#define IDS_ERROR_EXECUTE_FILE /;"	d
IDS_ERROR_FILEOPEN	resource.h	/^#define IDS_ERROR_FILEOPEN /;"	d
IDS_ERROR_FILE_NOT_FOUND	resource.h	/^#define IDS_ERROR_FILE_NOT_FOUND /;"	d
IDS_ERROR_FILE_NOT_UNPACKED	resource.h	/^#define IDS_ERROR_FILE_NOT_UNPACKED /;"	d
IDS_ERROR_INCOMPARABLE	resource.h	/^#define IDS_ERROR_INCOMPARABLE /;"	d
IDS_FILECHANGED_ONDISK	resource.h	/^#define IDS_FILECHANGED_ONDISK /;"	d
IDS_FILECHANGED_RESCAN	resource.h	/^#define IDS_FILECHANGED_RESCAN /;"	d
IDS_FILEERROR	resource.h	/^#define IDS_FILEERROR /;"	d
IDS_FILEFILTER_DELETE_FAIL	resource.h	/^#define IDS_FILEFILTER_DELETE_FAIL /;"	d
IDS_FILEFILTER_FILEMASK	resource.h	/^#define IDS_FILEFILTER_FILEMASK /;"	d
IDS_FILEFILTER_INSTALL	resource.h	/^#define IDS_FILEFILTER_INSTALL /;"	d
IDS_FILEFILTER_INSTALLFAIL	resource.h	/^#define IDS_FILEFILTER_INSTALLFAIL /;"	d
IDS_FILEFILTER_NO_USERFOLDER	resource.h	/^#define IDS_FILEFILTER_NO_USERFOLDER /;"	d
IDS_FILEFILTER_OVERWRITE	resource.h	/^#define IDS_FILEFILTER_OVERWRITE /;"	d
IDS_FILEFILTER_SAVENEW	resource.h	/^#define IDS_FILEFILTER_SAVENEW /;"	d
IDS_FILEFILTER_TMPL_COPY	resource.h	/^#define IDS_FILEFILTER_TMPL_COPY /;"	d
IDS_FILEFILTER_TMPL_MISSING	resource.h	/^#define IDS_FILEFILTER_TMPL_MISSING /;"	d
IDS_FILEPACK_FAILED_LEFT	resource.h	/^#define IDS_FILEPACK_FAILED_LEFT /;"	d
IDS_FILEPACK_FAILED_MIDDLE	resource.h	/^#define IDS_FILEPACK_FAILED_MIDDLE /;"	d
IDS_FILEPACK_FAILED_RIGHT	resource.h	/^#define IDS_FILEPACK_FAILED_RIGHT /;"	d
IDS_FILESAVE_FAILED	resource.h	/^#define IDS_FILESAVE_FAILED /;"	d
IDS_FILESSAME	resource.h	/^#define IDS_FILESSAME /;"	d
IDS_FILES_AFFECTED_FMT	resource.h	/^#define IDS_FILES_AFFECTED_FMT /;"	d
IDS_FILES_AFFECTED_FMT2	resource.h	/^#define IDS_FILES_AFFECTED_FMT2 /;"	d
IDS_FILES_ARE_DIFFERENT	resource.h	/^#define IDS_FILES_ARE_DIFFERENT /;"	d
IDS_FILEWRITE_ERROR	resource.h	/^#define IDS_FILEWRITE_ERROR /;"	d
IDS_FILE_COMPARISON_TITLE	resource.h	/^#define IDS_FILE_COMPARISON_TITLE /;"	d
IDS_FILE_DISAPPEARED	resource.h	/^#define IDS_FILE_DISAPPEARED /;"	d
IDS_FILE_SKIPPED	resource.h	/^#define IDS_FILE_SKIPPED /;"	d
IDS_FILE_TO_ITSELF	resource.h	/^#define IDS_FILE_TO_ITSELF /;"	d
IDS_FILTERCHANGED	resource.h	/^#define IDS_FILTERCHANGED /;"	d
IDS_FILTERFILE_DESCTITLE	resource.h	/^#define IDS_FILTERFILE_DESCTITLE /;"	d
IDS_FILTERFILE_NAMETITLE	resource.h	/^#define IDS_FILTERFILE_NAMETITLE /;"	d
IDS_FILTERFILE_PATHTITLE	resource.h	/^#define IDS_FILTERFILE_PATHTITLE /;"	d
IDS_FILTERLINE_REGEXP	resource.h	/^#define IDS_FILTERLINE_REGEXP /;"	d
IDS_FILTER_PREFIX	resource.h	/^#define IDS_FILTER_PREFIX /;"	d
IDS_FILTER_TITLE	resource.h	/^#define IDS_FILTER_TITLE /;"	d
IDS_FOLDERS_ARE_DIFFERENT	resource.h	/^#define IDS_FOLDERS_ARE_DIFFERENT /;"	d
IDS_FOLDER_NOTEXIST	resource.h	/^#define IDS_FOLDER_NOTEXIST /;"	d
IDS_FRHED_NOTINSTALLED	resource.h	/^#define IDS_FRHED_NOTINSTALLED /;"	d
IDS_FROM_LEFT	resource.h	/^#define IDS_FROM_LEFT /;"	d
IDS_FROM_RIGHT	resource.h	/^#define IDS_FROM_RIGHT /;"	d
IDS_HTML_REPORT_FILES	resource.h	/^#define IDS_HTML_REPORT_FILES /;"	d
IDS_IDENTICAL	resource.h	/^#define IDS_IDENTICAL /;"	d
IDS_IMAGE_MENU	resource.h	/^#define IDS_IMAGE_MENU /;"	d
IDS_INIFILES	resource.h	/^#define IDS_INIFILES /;"	d
IDS_INVALID_DIRECTORY	resource.h	/^#define IDS_INVALID_DIRECTORY /;"	d
IDS_LEFTONLY	resource.h	/^#define IDS_LEFTONLY /;"	d
IDS_LEFTONLY_DIFF	resource.h	/^#define IDS_LEFTONLY_DIFF /;"	d
IDS_LEFT_ONLY_IN_FMT	resource.h	/^#define IDS_LEFT_ONLY_IN_FMT /;"	d
IDS_LINEDIFF_NODIFF	resource.h	/^#define IDS_LINEDIFF_NODIFF /;"	d
IDS_LINEDIFF_NODIFF_CAPTION	resource.h	/^#define IDS_LINEDIFF_NODIFF_CAPTION /;"	d
IDS_LINE_STATUS_INFO	resource.h	/^#define IDS_LINE_STATUS_INFO /;"	d
IDS_LINE_STATUS_INFO_EOL	resource.h	/^#define IDS_LINE_STATUS_INFO_EOL /;"	d
IDS_LOCBAR_CAPTION	resource.h	/^#define IDS_LOCBAR_CAPTION /;"	d
IDS_LOCBAR_GOTOLINE_FMT	resource.h	/^#define IDS_LOCBAR_GOTOLINE_FMT /;"	d
IDS_LOSSY_TRANSCODING_BOTH	resource.h	/^#define IDS_LOSSY_TRANSCODING_BOTH /;"	d
IDS_LOSSY_TRANSCODING_FIRST	resource.h	/^#define IDS_LOSSY_TRANSCODING_FIRST /;"	d
IDS_LOSSY_TRANSCODING_SECOND	resource.h	/^#define IDS_LOSSY_TRANSCODING_SECOND /;"	d
IDS_LOSSY_TRANSCODING_THIRD	resource.h	/^#define IDS_LOSSY_TRANSCODING_THIRD /;"	d
IDS_MERGEMODE_MERGING	resource.h	/^#define IDS_MERGEMODE_MERGING /;"	d
IDS_MERGE_MODE	resource.h	/^#define IDS_MERGE_MODE /;"	d
IDS_MESSAGEBOX_ABORT	resource.h	/^#define IDS_MESSAGEBOX_ABORT /;"	d
IDS_MESSAGEBOX_CANCEL	resource.h	/^#define IDS_MESSAGEBOX_CANCEL /;"	d
IDS_MESSAGEBOX_CHECKBOX_TOOLTIP	resource.h	/^#define IDS_MESSAGEBOX_CHECKBOX_TOOLTIP /;"	d
IDS_MESSAGEBOX_CONTINUE	resource.h	/^#define IDS_MESSAGEBOX_CONTINUE /;"	d
IDS_MESSAGEBOX_DONT_ASK_AGAIN	resource.h	/^#define IDS_MESSAGEBOX_DONT_ASK_AGAIN /;"	d
IDS_MESSAGEBOX_DONT_DISPLAY_AGAIN	resource.h	/^#define IDS_MESSAGEBOX_DONT_DISPLAY_AGAIN /;"	d
IDS_MESSAGEBOX_HELP	resource.h	/^#define IDS_MESSAGEBOX_HELP /;"	d
IDS_MESSAGEBOX_IGNORE	resource.h	/^#define IDS_MESSAGEBOX_IGNORE /;"	d
IDS_MESSAGEBOX_IGNOREALL	resource.h	/^#define IDS_MESSAGEBOX_IGNOREALL /;"	d
IDS_MESSAGEBOX_NO	resource.h	/^#define IDS_MESSAGEBOX_NO /;"	d
IDS_MESSAGEBOX_NO_TO_ALL	resource.h	/^#define IDS_MESSAGEBOX_NO_TO_ALL /;"	d
IDS_MESSAGEBOX_OK	resource.h	/^#define IDS_MESSAGEBOX_OK /;"	d
IDS_MESSAGEBOX_RETRY	resource.h	/^#define IDS_MESSAGEBOX_RETRY /;"	d
IDS_MESSAGEBOX_SKIP	resource.h	/^#define IDS_MESSAGEBOX_SKIP /;"	d
IDS_MESSAGEBOX_SKIPALL	resource.h	/^#define IDS_MESSAGEBOX_SKIPALL /;"	d
IDS_MESSAGEBOX_YES	resource.h	/^#define IDS_MESSAGEBOX_YES /;"	d
IDS_MESSAGEBOX_YES_TO_ALL	resource.h	/^#define IDS_MESSAGEBOX_YES_TO_ALL /;"	d
IDS_MESSAGE_BOX_ARE_RESET	resource.h	/^#define IDS_MESSAGE_BOX_ARE_RESET /;"	d
IDS_MIDDLEONLY	resource.h	/^#define IDS_MIDDLEONLY /;"	d
IDS_MIDDLEONLY_DIFF	resource.h	/^#define IDS_MIDDLEONLY_DIFF /;"	d
IDS_MIDDLE_ONLY_IN_FMT	resource.h	/^#define IDS_MIDDLE_ONLY_IN_FMT /;"	d
IDS_MOVE_LEFT_TO	resource.h	/^#define IDS_MOVE_LEFT_TO /;"	d
IDS_MOVE_LEFT_TO2	resource.h	/^#define IDS_MOVE_LEFT_TO2 /;"	d
IDS_MOVE_MIDDLE_TO	resource.h	/^#define IDS_MOVE_MIDDLE_TO /;"	d
IDS_MOVE_MIDDLE_TO2	resource.h	/^#define IDS_MOVE_MIDDLE_TO2 /;"	d
IDS_MOVE_RIGHT_TO	resource.h	/^#define IDS_MOVE_RIGHT_TO /;"	d
IDS_MOVE_RIGHT_TO2	resource.h	/^#define IDS_MOVE_RIGHT_TO2 /;"	d
IDS_MOVE_TO_NEXTFILE	resource.h	/^#define IDS_MOVE_TO_NEXTFILE /;"	d
IDS_MOVE_TO_NEXTPAGE	resource.h	/^#define IDS_MOVE_TO_NEXTPAGE /;"	d
IDS_MOVE_TO_PREVFILE	resource.h	/^#define IDS_MOVE_TO_PREVFILE /;"	d
IDS_MOVE_TO_PREVPAGE	resource.h	/^#define IDS_MOVE_TO_PREVPAGE /;"	d
IDS_MUST_SPECIFY_OUTPUT	resource.h	/^#define IDS_MUST_SPECIFY_OUTPUT /;"	d
IDS_NOITEMLEFT	resource.h	/^#define IDS_NOITEMLEFT /;"	d
IDS_NOITEMMIDDLE	resource.h	/^#define IDS_NOITEMMIDDLE /;"	d
IDS_NOITEMRIGHT	resource.h	/^#define IDS_NOITEMRIGHT /;"	d
IDS_NOT_CONFLICT_FILE	resource.h	/^#define IDS_NOT_CONFLICT_FILE /;"	d
IDS_NOT_SUGGESTED_PLUGINS	resource.h	/^#define IDS_NOT_SUGGESTED_PLUGINS /;"	d
IDS_NO_DIFF_SEL_FMT	resource.h	/^#define IDS_NO_DIFF_SEL_FMT /;"	d
IDS_NO_EDIT_SCRIPTS	resource.h	/^#define IDS_NO_EDIT_SCRIPTS /;"	d
IDS_NO_PREDIFFER	resource.h	/^#define IDS_NO_PREDIFFER /;"	d
IDS_NO_SCT_SCRIPTS	resource.h	/^#define IDS_NO_SCT_SCRIPTS /;"	d
IDS_NO_ZIP_SUPPORT	resource.h	/^#define IDS_NO_ZIP_SUPPORT /;"	d
IDS_NUM_REPLACED	resource.h	/^#define IDS_NUM_REPLACED /;"	d
IDS_OPEN_ALLINVALID	resource.h	/^#define IDS_OPEN_ALLINVALID /;"	d
IDS_OPEN_BOTHINVALID	resource.h	/^#define IDS_OPEN_BOTHINVALID /;"	d
IDS_OPEN_FILESDIRS	resource.h	/^#define IDS_OPEN_FILESDIRS /;"	d
IDS_OPEN_LEFTINVALID	resource.h	/^#define IDS_OPEN_LEFTINVALID /;"	d
IDS_OPEN_LEFTMIDDLEINVALID	resource.h	/^#define IDS_OPEN_LEFTMIDDLEINVALID /;"	d
IDS_OPEN_LEFTRIGHTINVALID	resource.h	/^#define IDS_OPEN_LEFTRIGHTINVALID /;"	d
IDS_OPEN_MIDDLEINVALID	resource.h	/^#define IDS_OPEN_MIDDLEINVALID /;"	d
IDS_OPEN_MIDDLERIGHTINVALID	resource.h	/^#define IDS_OPEN_MIDDLERIGHTINVALID /;"	d
IDS_OPEN_MISMATCH	resource.h	/^#define IDS_OPEN_MISMATCH /;"	d
IDS_OPEN_RIGHTINVALID2	resource.h	/^#define IDS_OPEN_RIGHTINVALID2 /;"	d
IDS_OPEN_RIGHTINVALID3	resource.h	/^#define IDS_OPEN_RIGHTINVALID3 /;"	d
IDS_OPEN_TITLE	resource.h	/^#define IDS_OPEN_TITLE /;"	d
IDS_OPEN_UNPACKERDISABLED	resource.h	/^#define IDS_OPEN_UNPACKERDISABLED /;"	d
IDS_OPTIONSPG_ARCHIVE	resource.h	/^#define IDS_OPTIONSPG_ARCHIVE /;"	d
IDS_OPTIONSPG_BACKUPS	resource.h	/^#define IDS_OPTIONSPG_BACKUPS /;"	d
IDS_OPTIONSPG_BINARYCOMPARE	resource.h	/^#define IDS_OPTIONSPG_BINARYCOMPARE /;"	d
IDS_OPTIONSPG_CODEPAGE	resource.h	/^#define IDS_OPTIONSPG_CODEPAGE /;"	d
IDS_OPTIONSPG_COLORS	resource.h	/^#define IDS_OPTIONSPG_COLORS /;"	d
IDS_OPTIONSPG_COMPARE	resource.h	/^#define IDS_OPTIONSPG_COMPARE /;"	d
IDS_OPTIONSPG_DIRCOLORS	resource.h	/^#define IDS_OPTIONSPG_DIRCOLORS /;"	d
IDS_OPTIONSPG_EDITOR	resource.h	/^#define IDS_OPTIONSPG_EDITOR /;"	d
IDS_OPTIONSPG_FOLDERCOMPARE	resource.h	/^#define IDS_OPTIONSPG_FOLDERCOMPARE /;"	d
IDS_OPTIONSPG_GENCOMPARE	resource.h	/^#define IDS_OPTIONSPG_GENCOMPARE /;"	d
IDS_OPTIONSPG_GENERAL	resource.h	/^#define IDS_OPTIONSPG_GENERAL /;"	d
IDS_OPTIONSPG_IMAGECOMPARE	resource.h	/^#define IDS_OPTIONSPG_IMAGECOMPARE /;"	d
IDS_OPTIONSPG_MARKERCOLORS	resource.h	/^#define IDS_OPTIONSPG_MARKERCOLORS /;"	d
IDS_OPTIONSPG_MERGECOLORS	resource.h	/^#define IDS_OPTIONSPG_MERGECOLORS /;"	d
IDS_OPTIONSPG_SHELL	resource.h	/^#define IDS_OPTIONSPG_SHELL /;"	d
IDS_OPTIONSPG_SYNTAXCOLORS	resource.h	/^#define IDS_OPTIONSPG_SYNTAXCOLORS /;"	d
IDS_OPTIONSPG_SYSTEM	resource.h	/^#define IDS_OPTIONSPG_SYSTEM /;"	d
IDS_OPTIONSPG_TEXTCOLORS	resource.h	/^#define IDS_OPTIONSPG_TEXTCOLORS /;"	d
IDS_OPTIONS_INVALID_TABSIZE	resource.h	/^#define IDS_OPTIONS_INVALID_TABSIZE /;"	d
IDS_OPTIONS_TITLE	resource.h	/^#define IDS_OPTIONS_TITLE /;"	d
IDS_OPT_EXPORT_CAPTION	resource.h	/^#define IDS_OPT_EXPORT_CAPTION /;"	d
IDS_OPT_EXPORT_DONE	resource.h	/^#define IDS_OPT_EXPORT_DONE /;"	d
IDS_OPT_EXPORT_ERR	resource.h	/^#define IDS_OPT_EXPORT_ERR /;"	d
IDS_OPT_IMPORT_CAPTION	resource.h	/^#define IDS_OPT_IMPORT_CAPTION /;"	d
IDS_OPT_IMPORT_DONE	resource.h	/^#define IDS_OPT_IMPORT_DONE /;"	d
IDS_OPT_IMPORT_ERR	resource.h	/^#define IDS_OPT_IMPORT_ERR /;"	d
IDS_PATH_NOT_ABSOLUTE	resource.h	/^#define IDS_PATH_NOT_ABSOLUTE /;"	d
IDS_PLUGINSLIST_DESC	resource.h	/^#define IDS_PLUGINSLIST_DESC /;"	d
IDS_PLUGINSLIST_NAME	resource.h	/^#define IDS_PLUGINSLIST_NAME /;"	d
IDS_PLUGINSLIST_TYPE	resource.h	/^#define IDS_PLUGINSLIST_TYPE /;"	d
IDS_PLUGINS_TYPE_EDITSCRIPT	resource.h	/^#define IDS_PLUGINS_TYPE_EDITSCRIPT /;"	d
IDS_PLUGINS_TYPE_PREDIFFER	resource.h	/^#define IDS_PLUGINS_TYPE_PREDIFFER /;"	d
IDS_PLUGINS_TYPE_UNPACKER	resource.h	/^#define IDS_PLUGINS_TYPE_UNPACKER /;"	d
IDS_PRIVATEBUILD_FMT	resource.h	/^#define IDS_PRIVATEBUILD_FMT /;"	d
IDS_PROGRAMFILES	resource.h	/^#define IDS_PROGRAMFILES /;"	d
IDS_PROJECTFILES	resource.h	/^#define IDS_PROJECTFILES /;"	d
IDS_PROJECTFILES_EXT	resource.h	/^#define IDS_PROJECTFILES_EXT /;"	d
IDS_PROJFILE_LOAD_SUCCESS	resource.h	/^#define IDS_PROJFILE_LOAD_SUCCESS /;"	d
IDS_PROJFILE_SAVE_SUCCESS	resource.h	/^#define IDS_PROJFILE_SAVE_SUCCESS /;"	d
IDS_RENDERING_MODE_DIRECTWRITE_ALIASED	resource.h	/^#define IDS_RENDERING_MODE_DIRECTWRITE_ALIASED /;"	d
IDS_RENDERING_MODE_DIRECTWRITE_DEFAULT	resource.h	/^#define IDS_RENDERING_MODE_DIRECTWRITE_DEFAULT /;"	d
IDS_RENDERING_MODE_DIRECTWRITE_GDI_CLASSIC	resource.h	/^#define IDS_RENDERING_MODE_DIRECTWRITE_GDI_CLASSIC /;"	d
IDS_RENDERING_MODE_DIRECTWRITE_GDI_NATURAL	resource.h	/^#define IDS_RENDERING_MODE_DIRECTWRITE_GDI_NATURAL /;"	d
IDS_RENDERING_MODE_DIRECTWRITE_NATURAL	resource.h	/^#define IDS_RENDERING_MODE_DIRECTWRITE_NATURAL /;"	d
IDS_RENDERING_MODE_DIRECTWRITE_NATURAL_SYMMETRIC	resource.h	/^#define IDS_RENDERING_MODE_DIRECTWRITE_NATURAL_SYMMETRIC /;"	d
IDS_RENDERING_MODE_GDI	resource.h	/^#define IDS_RENDERING_MODE_GDI /;"	d
IDS_REPORT_COMMALIST	resource.h	/^#define IDS_REPORT_COMMALIST /;"	d
IDS_REPORT_ERROR	resource.h	/^#define IDS_REPORT_ERROR /;"	d
IDS_REPORT_FILEOVERWRITE	resource.h	/^#define IDS_REPORT_FILEOVERWRITE /;"	d
IDS_REPORT_SIMPLEHTML	resource.h	/^#define IDS_REPORT_SIMPLEHTML /;"	d
IDS_REPORT_SIMPLEXML	resource.h	/^#define IDS_REPORT_SIMPLEXML /;"	d
IDS_REPORT_SUCCESS	resource.h	/^#define IDS_REPORT_SUCCESS /;"	d
IDS_REPORT_TABLIST	resource.h	/^#define IDS_REPORT_TABLIST /;"	d
IDS_RIGHTONLY	resource.h	/^#define IDS_RIGHTONLY /;"	d
IDS_RIGHTONLY_DIFF	resource.h	/^#define IDS_RIGHTONLY_DIFF /;"	d
IDS_RIGHT_ONLY_IN_FMT	resource.h	/^#define IDS_RIGHT_ONLY_IN_FMT /;"	d
IDS_SAVEFILES_FORPATCH	resource.h	/^#define IDS_SAVEFILES_FORPATCH /;"	d
IDS_SAVEREADONLY_FMT	resource.h	/^#define IDS_SAVEREADONLY_FMT /;"	d
IDS_SAVEREADONLY_MULTI	resource.h	/^#define IDS_SAVEREADONLY_MULTI /;"	d
IDS_SAVE_AS_TITLE	resource.h	/^#define IDS_SAVE_AS_TITLE /;"	d
IDS_SAVE_FMT	resource.h	/^#define IDS_SAVE_FMT /;"	d
IDS_SAVE_LEFT_AS	resource.h	/^#define IDS_SAVE_LEFT_AS /;"	d
IDS_SAVE_MIDDLE_AS	resource.h	/^#define IDS_SAVE_MIDDLE_AS /;"	d
IDS_SAVE_RIGHT_AS	resource.h	/^#define IDS_SAVE_RIGHT_AS /;"	d
IDS_SELECT_DEST_LEFT	resource.h	/^#define IDS_SELECT_DEST_LEFT /;"	d
IDS_SELECT_DEST_MIDDLE	resource.h	/^#define IDS_SELECT_DEST_MIDDLE /;"	d
IDS_SELECT_DEST_RIGHT	resource.h	/^#define IDS_SELECT_DEST_RIGHT /;"	d
IDS_SPLASH_DEVELOPERS	resource.h	/^#define IDS_SPLASH_DEVELOPERS /;"	d
IDS_SPLASH_GPLTEXT	resource.h	/^#define IDS_SPLASH_GPLTEXT /;"	d
IDS_STATUSBAR_READONLY	resource.h	/^#define IDS_STATUSBAR_READONLY /;"	d
IDS_STATUS_SELITEM1	resource.h	/^#define IDS_STATUS_SELITEM1 /;"	d
IDS_STATUS_SELITEMS	resource.h	/^#define IDS_STATUS_SELITEMS /;"	d
IDS_SUGGESTED_PLUGINS	resource.h	/^#define IDS_SUGGESTED_PLUGINS /;"	d
IDS_SUGGEST_IGNORECODEPAGE	resource.h	/^#define IDS_SUGGEST_IGNORECODEPAGE /;"	d
IDS_SUGGEST_IGNOREEOL	resource.h	/^#define IDS_SUGGEST_IGNOREEOL /;"	d
IDS_TABBAR_AUTO_MAXWIDTH	resource.h	/^#define IDS_TABBAR_AUTO_MAXWIDTH /;"	d
IDS_TEMP_FILEERROR	resource.h	/^#define IDS_TEMP_FILEERROR /;"	d
IDS_TEXT_FILES_DIFF	resource.h	/^#define IDS_TEXT_FILES_DIFF /;"	d
IDS_TEXT_FILES_SAME	resource.h	/^#define IDS_TEXT_FILES_SAME /;"	d
IDS_TEXT_REPORT_FILES	resource.h	/^#define IDS_TEXT_REPORT_FILES /;"	d
IDS_TITLE_PLUGINS_SETTINGS	resource.h	/^#define IDS_TITLE_PLUGINS_SETTINGS /;"	d
IDS_TO	resource.h	/^#define IDS_TO /;"	d
IDS_TO_LEFT	resource.h	/^#define IDS_TO_LEFT /;"	d
IDS_TO_RIGHT	resource.h	/^#define IDS_TO_RIGHT /;"	d
IDS_UNKNOWN_ARCHIVE_FORMAT	resource.h	/^#define IDS_UNKNOWN_ARCHIVE_FORMAT /;"	d
IDS_UNK_ERROR_READING_PROJECT	resource.h	/^#define IDS_UNK_ERROR_READING_PROJECT /;"	d
IDS_UNK_ERROR_SAVING_PROJECT	resource.h	/^#define IDS_UNK_ERROR_SAVING_PROJECT /;"	d
IDS_UNPACK_AUTO	resource.h	/^#define IDS_UNPACK_AUTO /;"	d
IDS_USERCHOICE_AUTOMATIC	resource.h	/^#define IDS_USERCHOICE_AUTOMATIC /;"	d
IDS_USERCHOICE_NONE	resource.h	/^#define IDS_USERCHOICE_NONE /;"	d
IDS_VERSION_FMT	resource.h	/^#define IDS_VERSION_FMT /;"	d
IDS_VIEWS_OUTOFSYNC	resource.h	/^#define IDS_VIEWS_OUTOFSYNC /;"	d
IDS_WINX64	resource.h	/^#define IDS_WINX64 /;"	d
IDS_XML_REPORT_FILES	resource.h	/^#define IDS_XML_REPORT_FILES /;"	d
IDTRYAGAIN	Common/MessageBoxDialog.h	/^#define IDTRYAGAIN	/;"	d
IDT_CHECKFILES	OpenView.cpp	/^const UINT IDT_CHECKFILES = 1;$/;"	v	typeref:typename:const UINT
IDT_RESCAN	MergeEditView.cpp	/^const UINT IDT_RESCAN = 2;$/;"	v	typeref:typename:const UINT
IDT_SAVEPOSITION	MergeEditFrm.cpp	/^#define IDT_SAVEPOSITION /;"	d	file:
IDT_UPDATE	DirCompProgressBar.cpp	/^static const UINT IDT_UPDATE = 1;$/;"	v	typeref:typename:const UINT	file:
IDYESTOALL	Common/MessageBoxDialog.h	/^#define IDYESTOALL	/;"	d
ID_ADD_SYNCPOINT	resource.h	/^#define ID_ADD_SYNCPOINT /;"	d
ID_ALL_LEFT	resource.h	/^#define ID_ALL_LEFT /;"	d
ID_ALL_RIGHT	resource.h	/^#define ID_ALL_RIGHT /;"	d
ID_AUTO_MERGE	resource.h	/^#define ID_AUTO_MERGE /;"	d
ID_CLEAR_SYNCPOINTS	resource.h	/^#define ID_CLEAR_SYNCPOINTS /;"	d
ID_CLOSE_LEFT_TABS	resource.h	/^#define ID_CLOSE_LEFT_TABS /;"	d
ID_CLOSE_OTHER_TABS	resource.h	/^#define ID_CLOSE_OTHER_TABS /;"	d
ID_CLOSE_RIGHT_TABS	resource.h	/^#define ID_CLOSE_RIGHT_TABS /;"	d
ID_COLORSCHEME_FIRST	resource.h	/^#define ID_COLORSCHEME_FIRST /;"	d
ID_COLORSCHEME_LAST	resource.h	/^#define ID_COLORSCHEME_LAST /;"	d
ID_COMPMETHOD_BINARY_CONTENTS	resource.h	/^#define ID_COMPMETHOD_BINARY_CONTENTS /;"	d
ID_COMPMETHOD_DATESIZE	resource.h	/^#define ID_COMPMETHOD_DATESIZE /;"	d
ID_COMPMETHOD_FULL_CONTENTS	resource.h	/^#define ID_COMPMETHOD_FULL_CONTENTS /;"	d
ID_COMPMETHOD_MODDATE	resource.h	/^#define ID_COMPMETHOD_MODDATE /;"	d
ID_COMPMETHOD_QUICK_CONTENTS	resource.h	/^#define ID_COMPMETHOD_QUICK_CONTENTS /;"	d
ID_COMPMETHOD_SIZE	resource.h	/^#define ID_COMPMETHOD_SIZE /;"	d
ID_COPY_FROM_LEFT	resource.h	/^#define ID_COPY_FROM_LEFT /;"	d
ID_COPY_FROM_RIGHT	resource.h	/^#define ID_COPY_FROM_RIGHT /;"	d
ID_CURDIFF	resource.h	/^#define ID_CURDIFF /;"	d
ID_DIR_COPY_ALL_TO_CLIPBOARD	resource.h	/^#define ID_DIR_COPY_ALL_TO_CLIPBOARD /;"	d
ID_DIR_COPY_BOTH_TO_CLIPBOARD	resource.h	/^#define ID_DIR_COPY_BOTH_TO_CLIPBOARD /;"	d
ID_DIR_COPY_FILENAMES	resource.h	/^#define ID_DIR_COPY_FILENAMES /;"	d
ID_DIR_COPY_LEFT_TO_BROWSE	resource.h	/^#define ID_DIR_COPY_LEFT_TO_BROWSE /;"	d
ID_DIR_COPY_LEFT_TO_CLIPBOARD	resource.h	/^#define ID_DIR_COPY_LEFT_TO_CLIPBOARD /;"	d
ID_DIR_COPY_LEFT_TO_MIDDLE	resource.h	/^#define ID_DIR_COPY_LEFT_TO_MIDDLE /;"	d
ID_DIR_COPY_LEFT_TO_RIGHT	resource.h	/^#define ID_DIR_COPY_LEFT_TO_RIGHT /;"	d
ID_DIR_COPY_MIDDLE_TO_BROWSE	resource.h	/^#define ID_DIR_COPY_MIDDLE_TO_BROWSE /;"	d
ID_DIR_COPY_MIDDLE_TO_CLIPBOARD	resource.h	/^#define ID_DIR_COPY_MIDDLE_TO_CLIPBOARD /;"	d
ID_DIR_COPY_MIDDLE_TO_LEFT	resource.h	/^#define ID_DIR_COPY_MIDDLE_TO_LEFT /;"	d
ID_DIR_COPY_MIDDLE_TO_RIGHT	resource.h	/^#define ID_DIR_COPY_MIDDLE_TO_RIGHT /;"	d
ID_DIR_COPY_PATHNAMES_ALL	resource.h	/^#define ID_DIR_COPY_PATHNAMES_ALL /;"	d
ID_DIR_COPY_PATHNAMES_BOTH	resource.h	/^#define ID_DIR_COPY_PATHNAMES_BOTH /;"	d
ID_DIR_COPY_PATHNAMES_LEFT	resource.h	/^#define ID_DIR_COPY_PATHNAMES_LEFT /;"	d
ID_DIR_COPY_PATHNAMES_MIDDLE	resource.h	/^#define ID_DIR_COPY_PATHNAMES_MIDDLE /;"	d
ID_DIR_COPY_PATHNAMES_RIGHT	resource.h	/^#define ID_DIR_COPY_PATHNAMES_RIGHT /;"	d
ID_DIR_COPY_RIGHT_TO_BROWSE	resource.h	/^#define ID_DIR_COPY_RIGHT_TO_BROWSE /;"	d
ID_DIR_COPY_RIGHT_TO_CLIPBOARD	resource.h	/^#define ID_DIR_COPY_RIGHT_TO_CLIPBOARD /;"	d
ID_DIR_COPY_RIGHT_TO_LEFT	resource.h	/^#define ID_DIR_COPY_RIGHT_TO_LEFT /;"	d
ID_DIR_COPY_RIGHT_TO_MIDDLE	resource.h	/^#define ID_DIR_COPY_RIGHT_TO_MIDDLE /;"	d
ID_DIR_DEL_ALL	resource.h	/^#define ID_DIR_DEL_ALL /;"	d
ID_DIR_DEL_BOTH	resource.h	/^#define ID_DIR_DEL_BOTH /;"	d
ID_DIR_DEL_LEFT	resource.h	/^#define ID_DIR_DEL_LEFT /;"	d
ID_DIR_DEL_MIDDLE	resource.h	/^#define ID_DIR_DEL_MIDDLE /;"	d
ID_DIR_DEL_RIGHT	resource.h	/^#define ID_DIR_DEL_RIGHT /;"	d
ID_DIR_HIDE_FILENAMES	resource.h	/^#define ID_DIR_HIDE_FILENAMES /;"	d
ID_DIR_ITEM_RENAME	resource.h	/^#define ID_DIR_ITEM_RENAME /;"	d
ID_DIR_MOVE_LEFT_TO_BROWSE	resource.h	/^#define ID_DIR_MOVE_LEFT_TO_BROWSE /;"	d
ID_DIR_MOVE_MIDDLE_TO_BROWSE	resource.h	/^#define ID_DIR_MOVE_MIDDLE_TO_BROWSE /;"	d
ID_DIR_MOVE_RIGHT_TO_BROWSE	resource.h	/^#define ID_DIR_MOVE_RIGHT_TO_BROWSE /;"	d
ID_DIR_OPEN_LEFT	resource.h	/^#define ID_DIR_OPEN_LEFT /;"	d
ID_DIR_OPEN_LEFT_PARENT_FOLDER	resource.h	/^#define ID_DIR_OPEN_LEFT_PARENT_FOLDER /;"	d
ID_DIR_OPEN_LEFT_WITH	resource.h	/^#define ID_DIR_OPEN_LEFT_WITH /;"	d
ID_DIR_OPEN_LEFT_WITHEDITOR	resource.h	/^#define ID_DIR_OPEN_LEFT_WITHEDITOR /;"	d
ID_DIR_OPEN_MIDDLE	resource.h	/^#define ID_DIR_OPEN_MIDDLE /;"	d
ID_DIR_OPEN_MIDDLE_PARENT_FOLDER	resource.h	/^#define ID_DIR_OPEN_MIDDLE_PARENT_FOLDER /;"	d
ID_DIR_OPEN_MIDDLE_WITH	resource.h	/^#define ID_DIR_OPEN_MIDDLE_WITH /;"	d
ID_DIR_OPEN_MIDDLE_WITHEDITOR	resource.h	/^#define ID_DIR_OPEN_MIDDLE_WITHEDITOR /;"	d
ID_DIR_OPEN_RIGHT	resource.h	/^#define ID_DIR_OPEN_RIGHT /;"	d
ID_DIR_OPEN_RIGHT_PARENT_FOLDER	resource.h	/^#define ID_DIR_OPEN_RIGHT_PARENT_FOLDER /;"	d
ID_DIR_OPEN_RIGHT_WITH	resource.h	/^#define ID_DIR_OPEN_RIGHT_WITH /;"	d
ID_DIR_OPEN_RIGHT_WITHEDITOR	resource.h	/^#define ID_DIR_OPEN_RIGHT_WITHEDITOR /;"	d
ID_DIR_SHELL_CONTEXT_MENU_LEFT	resource.h	/^#define ID_DIR_SHELL_CONTEXT_MENU_LEFT /;"	d
ID_DIR_SHELL_CONTEXT_MENU_MIDDLE	resource.h	/^#define ID_DIR_SHELL_CONTEXT_MENU_MIDDLE /;"	d
ID_DIR_SHELL_CONTEXT_MENU_RIGHT	resource.h	/^#define ID_DIR_SHELL_CONTEXT_MENU_RIGHT /;"	d
ID_DIR_ZIP_ALL	resource.h	/^#define ID_DIR_ZIP_ALL /;"	d
ID_DIR_ZIP_BOTH	resource.h	/^#define ID_DIR_ZIP_BOTH /;"	d
ID_DIR_ZIP_BOTH_DIFFS_ONLY	resource.h	/^#define ID_DIR_ZIP_BOTH_DIFFS_ONLY /;"	d
ID_DIR_ZIP_LEFT	resource.h	/^#define ID_DIR_ZIP_LEFT /;"	d
ID_DIR_ZIP_MIDDLE	resource.h	/^#define ID_DIR_ZIP_MIDDLE /;"	d
ID_DIR_ZIP_RIGHT	resource.h	/^#define ID_DIR_ZIP_RIGHT /;"	d
ID_DISPLAY_MOVED_ALL	resource.h	/^#define ID_DISPLAY_MOVED_ALL /;"	d
ID_DISPLAY_MOVED_FOLLOW_DIFF	resource.h	/^#define ID_DISPLAY_MOVED_FOLLOW_DIFF /;"	d
ID_DISPLAY_MOVED_NONE	resource.h	/^#define ID_DISPLAY_MOVED_NONE /;"	d
ID_EDITOR_COPY	resource.h	/^#define ID_EDITOR_COPY /;"	d
ID_EDITOR_COPY_FILENAME	resource.h	/^#define ID_EDITOR_COPY_FILENAME /;"	d
ID_EDITOR_COPY_PATH	resource.h	/^#define ID_EDITOR_COPY_PATH /;"	d
ID_EDIT_CLEAR_ALL_BOOKMARKS	resource.h	/^#define ID_EDIT_CLEAR_ALL_BOOKMARKS /;"	d
ID_EDIT_COPY_LINENUMBERS	resource.h	/^#define ID_EDIT_COPY_LINENUMBERS /;"	d
ID_EDIT_FIND_PREVIOUS	resource.h	/^#define ID_EDIT_FIND_PREVIOUS /;"	d
ID_EDIT_GOTO_NEXT_BOOKMARK	resource.h	/^#define ID_EDIT_GOTO_NEXT_BOOKMARK /;"	d
ID_EDIT_GOTO_PREV_BOOKMARK	resource.h	/^#define ID_EDIT_GOTO_PREV_BOOKMARK /;"	d
ID_EDIT_LOWERCASE	resource.h	/^#define ID_EDIT_LOWERCASE /;"	d
ID_EDIT_MARK	resource.h	/^#define ID_EDIT_MARK /;"	d
ID_EDIT_TOGGLE_BOOKMARK	resource.h	/^#define ID_EDIT_TOGGLE_BOOKMARK /;"	d
ID_EDIT_UPPERCASE	resource.h	/^#define ID_EDIT_UPPERCASE /;"	d
ID_EDIT_WMGOTO	resource.h	/^#define ID_EDIT_WMGOTO /;"	d
ID_EOL_TO_DOS	resource.h	/^#define ID_EOL_TO_DOS /;"	d
ID_EOL_TO_MAC	resource.h	/^#define ID_EOL_TO_MAC /;"	d
ID_EOL_TO_UNIX	resource.h	/^#define ID_EOL_TO_UNIX /;"	d
ID_FILE_ENCODING	resource.h	/^#define ID_FILE_ENCODING /;"	d
ID_FILE_LEFT_READONLY	resource.h	/^#define ID_FILE_LEFT_READONLY /;"	d
ID_FILE_MERGINGMODE	resource.h	/^#define ID_FILE_MERGINGMODE /;"	d
ID_FILE_MIDDLE_READONLY	resource.h	/^#define ID_FILE_MIDDLE_READONLY /;"	d
ID_FILE_NEW3	resource.h	/^#define ID_FILE_NEW3 /;"	d
ID_FILE_OPENCONFLICT	resource.h	/^#define ID_FILE_OPENCONFLICT /;"	d
ID_FILE_OPENPROJECT	resource.h	/^#define ID_FILE_OPENPROJECT /;"	d
ID_FILE_OPEN_REGISTERED	resource.h	/^#define ID_FILE_OPEN_REGISTERED /;"	d
ID_FILE_OPEN_WITH	resource.h	/^#define ID_FILE_OPEN_WITH /;"	d
ID_FILE_OPEN_WITHEDITOR	resource.h	/^#define ID_FILE_OPEN_WITHEDITOR /;"	d
ID_FILE_PROJECT_MRU_FIRST	resource.h	/^#define ID_FILE_PROJECT_MRU_FIRST /;"	d
ID_FILE_PROJECT_MRU_LAST	resource.h	/^#define ID_FILE_PROJECT_MRU_LAST /;"	d
ID_FILE_RIGHT_READONLY	resource.h	/^#define ID_FILE_RIGHT_READONLY /;"	d
ID_FILE_SAVEAS_LEFT	resource.h	/^#define ID_FILE_SAVEAS_LEFT /;"	d
ID_FILE_SAVEAS_MIDDLE	resource.h	/^#define ID_FILE_SAVEAS_MIDDLE /;"	d
ID_FILE_SAVEAS_RIGHT	resource.h	/^#define ID_FILE_SAVEAS_RIGHT /;"	d
ID_FILE_SAVEPROJECT	resource.h	/^#define ID_FILE_SAVEPROJECT /;"	d
ID_FILE_SAVE_LEFT	resource.h	/^#define ID_FILE_SAVE_LEFT /;"	d
ID_FILE_SAVE_MIDDLE	resource.h	/^#define ID_FILE_SAVE_MIDDLE /;"	d
ID_FILE_SAVE_RIGHT	resource.h	/^#define ID_FILE_SAVE_RIGHT /;"	d
ID_FILE_SHELLMENU	resource.h	/^#define ID_FILE_SHELLMENU /;"	d
ID_FIRSTDIFF	resource.h	/^#define ID_FIRSTDIFF /;"	d
ID_HELP_CONTENTS	resource.h	/^#define ID_HELP_CONTENTS /;"	d
ID_HELP_GETCONFIG	resource.h	/^#define ID_HELP_GETCONFIG /;"	d
ID_HELP_GNULICENSE	resource.h	/^#define ID_HELP_GNULICENSE /;"	d
ID_HELP_RELEASENOTES	resource.h	/^#define ID_HELP_RELEASENOTES /;"	d
ID_HELP_SEARCH	resource.h	/^#define ID_HELP_SEARCH /;"	d
ID_HELP_TRANSLATIONS	resource.h	/^#define ID_HELP_TRANSLATIONS /;"	d
ID_IMG_CURPANE_NEXTPAGE	resource.h	/^#define ID_IMG_CURPANE_NEXTPAGE /;"	d
ID_IMG_CURPANE_PREVPAGE	resource.h	/^#define ID_IMG_CURPANE_PREVPAGE /;"	d
ID_IMG_DIFFBLOCKSIZE_1	resource.h	/^#define ID_IMG_DIFFBLOCKSIZE_1 /;"	d
ID_IMG_DIFFBLOCKSIZE_16	resource.h	/^#define ID_IMG_DIFFBLOCKSIZE_16 /;"	d
ID_IMG_DIFFBLOCKSIZE_2	resource.h	/^#define ID_IMG_DIFFBLOCKSIZE_2 /;"	d
ID_IMG_DIFFBLOCKSIZE_32	resource.h	/^#define ID_IMG_DIFFBLOCKSIZE_32 /;"	d
ID_IMG_DIFFBLOCKSIZE_4	resource.h	/^#define ID_IMG_DIFFBLOCKSIZE_4 /;"	d
ID_IMG_DIFFBLOCKSIZE_8	resource.h	/^#define ID_IMG_DIFFBLOCKSIZE_8 /;"	d
ID_IMG_DRAGGINGMODE_ADJUST_OFFSET	resource.h	/^#define ID_IMG_DRAGGINGMODE_ADJUST_OFFSET /;"	d
ID_IMG_DRAGGINGMODE_MOVE	resource.h	/^#define ID_IMG_DRAGGINGMODE_MOVE /;"	d
ID_IMG_DRAGGINGMODE_NONE	resource.h	/^#define ID_IMG_DRAGGINGMODE_NONE /;"	d
ID_IMG_INSERTIONDELETIONDETECTION_HORIZONTAL	resource.h	/^#define ID_IMG_INSERTIONDELETIONDETECTION_HORIZONTAL /;"	d
ID_IMG_INSERTIONDELETIONDETECTION_NONE	resource.h	/^#define ID_IMG_INSERTIONDELETIONDETECTION_NONE /;"	d
ID_IMG_INSERTIONDELETIONDETECTION_VERTICAL	resource.h	/^#define ID_IMG_INSERTIONDELETIONDETECTION_VERTICAL /;"	d
ID_IMG_NEXTPAGE	resource.h	/^#define ID_IMG_NEXTPAGE /;"	d
ID_IMG_OVERLAY_ALPHABLEND	resource.h	/^#define ID_IMG_OVERLAY_ALPHABLEND /;"	d
ID_IMG_OVERLAY_ALPHABLEND_ANIM	resource.h	/^#define ID_IMG_OVERLAY_ALPHABLEND_ANIM /;"	d
ID_IMG_OVERLAY_NONE	resource.h	/^#define ID_IMG_OVERLAY_NONE /;"	d
ID_IMG_OVERLAY_XOR	resource.h	/^#define ID_IMG_OVERLAY_XOR /;"	d
ID_IMG_PREVPAGE	resource.h	/^#define ID_IMG_PREVPAGE /;"	d
ID_IMG_THRESHOLD_0	resource.h	/^#define ID_IMG_THRESHOLD_0 /;"	d
ID_IMG_THRESHOLD_16	resource.h	/^#define ID_IMG_THRESHOLD_16 /;"	d
ID_IMG_THRESHOLD_2	resource.h	/^#define ID_IMG_THRESHOLD_2 /;"	d
ID_IMG_THRESHOLD_32	resource.h	/^#define ID_IMG_THRESHOLD_32 /;"	d
ID_IMG_THRESHOLD_4	resource.h	/^#define ID_IMG_THRESHOLD_4 /;"	d
ID_IMG_THRESHOLD_64	resource.h	/^#define ID_IMG_THRESHOLD_64 /;"	d
ID_IMG_THRESHOLD_8	resource.h	/^#define ID_IMG_THRESHOLD_8 /;"	d
ID_IMG_USEBACKCOLOR	resource.h	/^#define ID_IMG_USEBACKCOLOR /;"	d
ID_IMG_VIEWDIFFERENCES	resource.h	/^#define ID_IMG_VIEWDIFFERENCES /;"	d
ID_IMG_ZOOM_100	resource.h	/^#define ID_IMG_ZOOM_100 /;"	d
ID_IMG_ZOOM_200	resource.h	/^#define ID_IMG_ZOOM_200 /;"	d
ID_IMG_ZOOM_25	resource.h	/^#define ID_IMG_ZOOM_25 /;"	d
ID_IMG_ZOOM_400	resource.h	/^#define ID_IMG_ZOOM_400 /;"	d
ID_IMG_ZOOM_50	resource.h	/^#define ID_IMG_ZOOM_50 /;"	d
ID_IMG_ZOOM_800	resource.h	/^#define ID_IMG_ZOOM_800 /;"	d
ID_L2R	resource.h	/^#define ID_L2R /;"	d
ID_L2RNEXT	resource.h	/^#define ID_L2RNEXT /;"	d
ID_LASTDIFF	resource.h	/^#define ID_LASTDIFF /;"	d
ID_LOAD_PROJECT	resource.h	/^#define ID_LOAD_PROJECT /;"	d
ID_LOCBAR_GOTODIFF	resource.h	/^#define ID_LOCBAR_GOTODIFF /;"	d
ID_MERGE_COMPARE	resource.h	/^#define ID_MERGE_COMPARE /;"	d
ID_MERGE_COMPARE_HEX	resource.h	/^#define ID_MERGE_COMPARE_HEX /;"	d
ID_MERGE_COMPARE_IMAGE	resource.h	/^#define ID_MERGE_COMPARE_IMAGE /;"	d
ID_MERGE_COMPARE_LEFT1_LEFT2	resource.h	/^#define ID_MERGE_COMPARE_LEFT1_LEFT2 /;"	d
ID_MERGE_COMPARE_LEFT1_RIGHT2	resource.h	/^#define ID_MERGE_COMPARE_LEFT1_RIGHT2 /;"	d
ID_MERGE_COMPARE_LEFT2_RIGHT1	resource.h	/^#define ID_MERGE_COMPARE_LEFT2_RIGHT1 /;"	d
ID_MERGE_COMPARE_NONHORIZONTALLY	resource.h	/^#define ID_MERGE_COMPARE_NONHORIZONTALLY /;"	d
ID_MERGE_COMPARE_RIGHT1_RIGHT2	resource.h	/^#define ID_MERGE_COMPARE_RIGHT1_RIGHT2 /;"	d
ID_MERGE_COMPARE_TEXT	resource.h	/^#define ID_MERGE_COMPARE_TEXT /;"	d
ID_MERGE_COMPARE_XML	resource.h	/^#define ID_MERGE_COMPARE_XML /;"	d
ID_MERGE_DELETE	resource.h	/^#define ID_MERGE_DELETE /;"	d
ID_MRU_FIRST	resource.h	/^#define ID_MRU_FIRST /;"	d
ID_MRU_LAST	resource.h	/^#define ID_MRU_LAST /;"	d
ID_NEXTCONFLICT	resource.h	/^#define ID_NEXTCONFLICT /;"	d
ID_NEXTDIFF	resource.h	/^#define ID_NEXTDIFF /;"	d
ID_NEXTDIFFLM	resource.h	/^#define ID_NEXTDIFFLM /;"	d
ID_NEXTDIFFLO	resource.h	/^#define ID_NEXTDIFFLO /;"	d
ID_NEXTDIFFLR	resource.h	/^#define ID_NEXTDIFFLR /;"	d
ID_NEXTDIFFMO	resource.h	/^#define ID_NEXTDIFFMO /;"	d
ID_NEXTDIFFMR	resource.h	/^#define ID_NEXTDIFFMR /;"	d
ID_NEXTDIFFRO	resource.h	/^#define ID_NEXTDIFFRO /;"	d
ID_NOT_SUGGESTED_PLUGINS	resource.h	/^#define ID_NOT_SUGGESTED_PLUGINS /;"	d
ID_NO_EDIT_SCRIPTS	resource.h	/^#define ID_NO_EDIT_SCRIPTS /;"	d
ID_NO_MRU	resource.h	/^#define ID_NO_MRU /;"	d
ID_NO_PREDIFFER	resource.h	/^#define ID_NO_PREDIFFER /;"	d
ID_NO_SCT_SCRIPTS	resource.h	/^#define ID_NO_SCT_SCRIPTS /;"	d
ID_OPTIONS	resource.h	/^#define ID_OPTIONS /;"	d
ID_OPTIONS_SHOWBINARIES	resource.h	/^#define ID_OPTIONS_SHOWBINARIES /;"	d
ID_OPTIONS_SHOWDIFFERENT	resource.h	/^#define ID_OPTIONS_SHOWDIFFERENT /;"	d
ID_OPTIONS_SHOWDIFFERENTLEFTONLY	resource.h	/^#define ID_OPTIONS_SHOWDIFFERENTLEFTONLY /;"	d
ID_OPTIONS_SHOWDIFFERENTMIDDLEONLY	resource.h	/^#define ID_OPTIONS_SHOWDIFFERENTMIDDLEONLY /;"	d
ID_OPTIONS_SHOWDIFFERENTRIGHTONLY	resource.h	/^#define ID_OPTIONS_SHOWDIFFERENTRIGHTONLY /;"	d
ID_OPTIONS_SHOWIDENTICAL	resource.h	/^#define ID_OPTIONS_SHOWIDENTICAL /;"	d
ID_OPTIONS_SHOWMISSINGLEFTONLY	resource.h	/^#define ID_OPTIONS_SHOWMISSINGLEFTONLY /;"	d
ID_OPTIONS_SHOWMISSINGMIDDLEONLY	resource.h	/^#define ID_OPTIONS_SHOWMISSINGMIDDLEONLY /;"	d
ID_OPTIONS_SHOWMISSINGRIGHTONLY	resource.h	/^#define ID_OPTIONS_SHOWMISSINGRIGHTONLY /;"	d
ID_OPTIONS_SHOWSKIPPED	resource.h	/^#define ID_OPTIONS_SHOWSKIPPED /;"	d
ID_OPTIONS_SHOWUNIQUELEFT	resource.h	/^#define ID_OPTIONS_SHOWUNIQUELEFT /;"	d
ID_OPTIONS_SHOWUNIQUEMIDDLE	resource.h	/^#define ID_OPTIONS_SHOWUNIQUEMIDDLE /;"	d
ID_OPTIONS_SHOWUNIQUERIGHT	resource.h	/^#define ID_OPTIONS_SHOWUNIQUERIGHT /;"	d
ID_PLUGINS_LIST	resource.h	/^#define ID_PLUGINS_LIST /;"	d
ID_POPUP_OPEN_WITH_UNPACKER	resource.h	/^#define ID_POPUP_OPEN_WITH_UNPACKER /;"	d
ID_PREDIFFERS_FIRST	resource.h	/^#define ID_PREDIFFERS_FIRST /;"	d
ID_PREDIFFERS_LAST	resource.h	/^#define ID_PREDIFFERS_LAST /;"	d
ID_PREDIFFER_AUTO	resource.h	/^#define ID_PREDIFFER_AUTO /;"	d
ID_PREDIFFER_MANUAL	resource.h	/^#define ID_PREDIFFER_MANUAL /;"	d
ID_PREDIFF_AUTO	resource.h	/^#define ID_PREDIFF_AUTO /;"	d
ID_PREDIFF_MANUAL	resource.h	/^#define ID_PREDIFF_MANUAL /;"	d
ID_PREVCONFLICT	resource.h	/^#define ID_PREVCONFLICT /;"	d
ID_PREVDIFF	resource.h	/^#define ID_PREVDIFF /;"	d
ID_PREVDIFFLM	resource.h	/^#define ID_PREVDIFFLM /;"	d
ID_PREVDIFFLO	resource.h	/^#define ID_PREVDIFFLO /;"	d
ID_PREVDIFFLR	resource.h	/^#define ID_PREVDIFFLR /;"	d
ID_PREVDIFFMO	resource.h	/^#define ID_PREVDIFFMO /;"	d
ID_PREVDIFFMR	resource.h	/^#define ID_PREVDIFFMR /;"	d
ID_PREVDIFFRO	resource.h	/^#define ID_PREVDIFFRO /;"	d
ID_R2L	resource.h	/^#define ID_R2L /;"	d
ID_R2LNEXT	resource.h	/^#define ID_R2LNEXT /;"	d
ID_REFRESH	resource.h	/^#define ID_REFRESH /;"	d
ID_RELOAD_PLUGINS	resource.h	/^#define ID_RELOAD_PLUGINS /;"	d
ID_RESCAN	resource.h	/^#define ID_RESCAN /;"	d
ID_SAVE_PROJECT	resource.h	/^#define ID_SAVE_PROJECT /;"	d
ID_SCRIPT_FIRST	resource.h	/^#define ID_SCRIPT_FIRST /;"	d
ID_SCRIPT_LAST	resource.h	/^#define ID_SCRIPT_LAST /;"	d
ID_SELECTLINEDIFF	resource.h	/^#define ID_SELECTLINEDIFF /;"	d
ID_SELECTPREVLINEDIFF	resource.h	/^#define ID_SELECTPREVLINEDIFF /;"	d
ID_STATUS_DIFFNUM	resource.h	/^#define ID_STATUS_DIFFNUM /;"	d
ID_STATUS_FILTER	resource.h	/^#define ID_STATUS_FILTER /;"	d
ID_STATUS_LEFTDIR_RO	resource.h	/^#define ID_STATUS_LEFTDIR_RO /;"	d
ID_STATUS_MERGINGMODE	resource.h	/^#define ID_STATUS_MERGINGMODE /;"	d
ID_STATUS_MIDDLEDIR_RO	resource.h	/^#define ID_STATUS_MIDDLEDIR_RO /;"	d
ID_STATUS_PANE0FILE_ENCODING	resource.h	/^#define ID_STATUS_PANE0FILE_ENCODING /;"	d
ID_STATUS_PANE0FILE_EOL	resource.h	/^#define ID_STATUS_PANE0FILE_EOL /;"	d
ID_STATUS_PANE0FILE_INFO	resource.h	/^#define ID_STATUS_PANE0FILE_INFO /;"	d
ID_STATUS_PANE0FILE_RO	resource.h	/^#define ID_STATUS_PANE0FILE_RO /;"	d
ID_STATUS_PANE1FILE_ENCODING	resource.h	/^#define ID_STATUS_PANE1FILE_ENCODING /;"	d
ID_STATUS_PANE1FILE_EOL	resource.h	/^#define ID_STATUS_PANE1FILE_EOL /;"	d
ID_STATUS_PANE1FILE_INFO	resource.h	/^#define ID_STATUS_PANE1FILE_INFO /;"	d
ID_STATUS_PANE1FILE_RO	resource.h	/^#define ID_STATUS_PANE1FILE_RO /;"	d
ID_STATUS_PANE2FILE_ENCODING	resource.h	/^#define ID_STATUS_PANE2FILE_ENCODING /;"	d
ID_STATUS_PANE2FILE_EOL	resource.h	/^#define ID_STATUS_PANE2FILE_EOL /;"	d
ID_STATUS_PANE2FILE_INFO	resource.h	/^#define ID_STATUS_PANE2FILE_INFO /;"	d
ID_STATUS_PANE2FILE_RO	resource.h	/^#define ID_STATUS_PANE2FILE_RO /;"	d
ID_STATUS_PLUGIN	resource.h	/^#define ID_STATUS_PLUGIN /;"	d
ID_STATUS_RIGHTDIR_RO	resource.h	/^#define ID_STATUS_RIGHTDIR_RO /;"	d
ID_SUGGESTED_PLUGINS	resource.h	/^#define ID_SUGGESTED_PLUGINS /;"	d
ID_TABBAR_AUTO_MAXWIDTH	resource.h	/^#define ID_TABBAR_AUTO_MAXWIDTH /;"	d
ID_TOOLBAR_BIG	resource.h	/^#define ID_TOOLBAR_BIG /;"	d
ID_TOOLBAR_HUGE	resource.h	/^#define ID_TOOLBAR_HUGE /;"	d
ID_TOOLBAR_NONE	resource.h	/^#define ID_TOOLBAR_NONE /;"	d
ID_TOOLBAR_SMALL	resource.h	/^#define ID_TOOLBAR_SMALL /;"	d
ID_TOOLS_CUSTOMIZECOLUMNS	resource.h	/^#define ID_TOOLS_CUSTOMIZECOLUMNS /;"	d
ID_TOOLS_FILTERS	resource.h	/^#define ID_TOOLS_FILTERS /;"	d
ID_TOOLS_GENERATEPATCH	resource.h	/^#define ID_TOOLS_GENERATEPATCH /;"	d
ID_TOOLS_GENERATEREPORT	resource.h	/^#define ID_TOOLS_GENERATEREPORT /;"	d
ID_UNPACK_AUTO	resource.h	/^#define ID_UNPACK_AUTO /;"	d
ID_UNPACK_MANUAL	resource.h	/^#define ID_UNPACK_MANUAL /;"	d
ID_VIEW_CHANGESCHEME	resource.h	/^#define ID_VIEW_CHANGESCHEME /;"	d
ID_VIEW_COLLAPSE	resource.h	/^#define ID_VIEW_COLLAPSE /;"	d
ID_VIEW_COLLAPSE_ALLSUBDIRS	resource.h	/^#define ID_VIEW_COLLAPSE_ALLSUBDIRS /;"	d
ID_VIEW_DETAIL_BAR	resource.h	/^#define ID_VIEW_DETAIL_BAR /;"	d
ID_VIEW_DIFFCONTEXT_0	resource.h	/^#define ID_VIEW_DIFFCONTEXT_0 /;"	d
ID_VIEW_DIFFCONTEXT_1	resource.h	/^#define ID_VIEW_DIFFCONTEXT_1 /;"	d
ID_VIEW_DIFFCONTEXT_3	resource.h	/^#define ID_VIEW_DIFFCONTEXT_3 /;"	d
ID_VIEW_DIFFCONTEXT_5	resource.h	/^#define ID_VIEW_DIFFCONTEXT_5 /;"	d
ID_VIEW_DIFFCONTEXT_7	resource.h	/^#define ID_VIEW_DIFFCONTEXT_7 /;"	d
ID_VIEW_DIFFCONTEXT_9	resource.h	/^#define ID_VIEW_DIFFCONTEXT_9 /;"	d
ID_VIEW_DIFFCONTEXT_ALL	resource.h	/^#define ID_VIEW_DIFFCONTEXT_ALL /;"	d
ID_VIEW_DIFFCONTEXT_TOGGLE	resource.h	/^#define ID_VIEW_DIFFCONTEXT_TOGGLE /;"	d
ID_VIEW_DIR_STATISTICS	resource.h	/^#define ID_VIEW_DIR_STATISTICS /;"	d
ID_VIEW_EXPAND	resource.h	/^#define ID_VIEW_EXPAND /;"	d
ID_VIEW_EXPAND_ALLSUBDIRS	resource.h	/^#define ID_VIEW_EXPAND_ALLSUBDIRS /;"	d
ID_VIEW_FILEMARGIN	resource.h	/^#define ID_VIEW_FILEMARGIN /;"	d
ID_VIEW_LINEDIFFS	resource.h	/^#define ID_VIEW_LINEDIFFS /;"	d
ID_VIEW_LINENUMBERS	resource.h	/^#define ID_VIEW_LINENUMBERS /;"	d
ID_VIEW_LOCATION_BAR	resource.h	/^#define ID_VIEW_LOCATION_BAR /;"	d
ID_VIEW_RESIZE_PANES	resource.h	/^#define ID_VIEW_RESIZE_PANES /;"	d
ID_VIEW_SELECTFONT	resource.h	/^#define ID_VIEW_SELECTFONT /;"	d
ID_VIEW_SHOWHIDDENITEMS	resource.h	/^#define ID_VIEW_SHOWHIDDENITEMS /;"	d
ID_VIEW_SPLITVERTICALLY	resource.h	/^#define ID_VIEW_SPLITVERTICALLY /;"	d
ID_VIEW_SWAPPANES	resource.h	/^#define ID_VIEW_SWAPPANES /;"	d
ID_VIEW_TAB_BAR	resource.h	/^#define ID_VIEW_TAB_BAR /;"	d
ID_VIEW_TREEMODE	resource.h	/^#define ID_VIEW_TREEMODE /;"	d
ID_VIEW_USEDEFAULTFONT	resource.h	/^#define ID_VIEW_USEDEFAULTFONT /;"	d
ID_VIEW_WHITESPACE	resource.h	/^#define ID_VIEW_WHITESPACE /;"	d
ID_VIEW_WORDWRAP	resource.h	/^#define ID_VIEW_WORDWRAP /;"	d
ID_VIEW_ZOOMIN	resource.h	/^#define ID_VIEW_ZOOMIN /;"	d
ID_VIEW_ZOOMNORMAL	resource.h	/^#define ID_VIEW_ZOOMNORMAL /;"	d
ID_VIEW_ZOOMOUT	resource.h	/^#define ID_VIEW_ZOOMOUT /;"	d
ID_WINDOW_CHANGE_PANE	resource.h	/^#define ID_WINDOW_CHANGE_PANE /;"	d
ID_WINDOW_CLOSEALL	resource.h	/^#define ID_WINDOW_CLOSEALL /;"	d
IDiffFilter	FileFilterHelper.h	/^class IDiffFilter$/;"	c
IEnumShellItemsPtr	Merge7zFormatShellImpl.cpp	/^typedef _com_ptr_t<_com_IIID<IEnumShellItems, &__uuidof(IEnumShellItems)>> IEnumShellItemsPtr;$/;"	t	file:
IExconverter	Common/ExConverter.h	/^struct IExconverter$/;"	s
IFileCmpReport	DirCmpReport.h	/^struct IFileCmpReport$/;"	s
IFileOperationPtr	DropHandler.cpp	/^	typedef _com_ptr_t<_com_IIID<IFileOperation, &__uuidof(IFileOperation)>> IFileOperationPtr;$/;"	t	namespace:__anonfdfe2aa90111	file:
IFileOperationPtr	Merge7zFormatShellImpl.cpp	/^typedef _com_ptr_t<_com_IIID<IFileOperation, &__uuidof(IFileOperation)>> IFileOperationPtr;$/;"	t	file:
IHeaderBar	EditorFilepathBar.h	/^class IHeaderBar$/;"	c
IHexEditorWindow	heksedit.h	/^class IHexEditorWindow$/;"	c
IID_IMultiLanguage2	Common/ExConverter.cpp	/^const IID IID_IMultiLanguage2 = {0xDCCFC164, 0x2B38, 0x11d2, {0xB7, 0xEC, 0x00, 0xC0, 0x4F, 0x8F/;"	v	typeref:typename:const IID
IImgMergeWindow	WinIMergeLib.h	/^struct IImgMergeWindow$/;"	s
IImgToolWindow	WinIMergeLib.h	/^struct IImgToolWindow$/;"	s
IListCtrl	IListCtrl.h	/^struct IListCtrl$/;"	s
IListCtrlImpl	IListCtrlImpl.h	/^	explicit IListCtrlImpl(HWND hwndListCtrl) : m_hwndListCtrl(hwndListCtrl)$/;"	f	class:IListCtrlImpl
IListCtrlImpl	IListCtrlImpl.h	/^class IListCtrlImpl : public IListCtrl$/;"	c
IMPLEMENT_DYNAMIC	Common/BCMenu.cpp	/^IMPLEMENT_DYNAMIC( BCMenu, CMenu )$/;"	f
IMPLEMENT_DYNAMIC	Common/MDITabBar.cpp	/^IMPLEMENT_DYNAMIC(CMDITabBar, CControlBar)$/;"	f	file:
IMPLEMENT_DYNAMIC	Common/MessageBoxDialog.cpp	/^IMPLEMENT_DYNAMIC(CMessageBoxDialog, CDialog)$/;"	f
IMPLEMENT_DYNAMIC	Common/SortHeaderCtrl.cpp	/^IMPLEMENT_DYNAMIC(CSortHeaderCtrl, CHeaderCtrl)$/;"	f
IMPLEMENT_DYNAMIC	CompareStatisticsDlg.cpp	/^IMPLEMENT_DYNAMIC(CompareStatisticsDlg, CTrDialog)$/;"	f
IMPLEMENT_DYNAMIC	ConfirmFolderCopyDlg.cpp	/^IMPLEMENT_DYNAMIC(ConfirmFolderCopyDlg, CTrDialog)$/;"	f
IMPLEMENT_DYNAMIC	DirCmpReportDlg.cpp	/^IMPLEMENT_DYNAMIC(DirCmpReportDlg, CTrDialog)$/;"	f
IMPLEMENT_DYNAMIC	DirFilterDlg.cpp	/^IMPLEMENT_DYNAMIC(DirFilterDlg, CDialog)$/;"	f
IMPLEMENT_DYNAMIC	LineFiltersDlg.cpp	/^IMPLEMENT_DYNAMIC(LineFiltersDlg, CTrPropertyPage)$/;"	f
IMPLEMENT_DYNAMIC	PluginsListDlg.cpp	/^IMPLEMENT_DYNAMIC(PluginsListDlg, CTrDialog)$/;"	f
IMPLEMENT_DYNAMIC	PropSyntaxColors.cpp	/^IMPLEMENT_DYNAMIC(PropSyntaxColors, CPropertyPage)$/;"	f
IMPLEMENT_DYNAMIC	SaveClosingDlg.cpp	/^IMPLEMENT_DYNAMIC(SaveClosingDlg, CTrDialog)$/;"	f
IMPLEMENT_DYNAMIC	TrDialogs.cpp	/^IMPLEMENT_DYNAMIC(CTrDialog, CDialog)$/;"	f
IMPLEMENT_DYNCREATE	DirDoc.cpp	/^IMPLEMENT_DYNCREATE(CDirDoc, CDocument)$/;"	f
IMPLEMENT_DYNCREATE	DirFrame.cpp	/^IMPLEMENT_DYNCREATE(CDirFrame, CMergeFrameCommon)$/;"	f
IMPLEMENT_DYNCREATE	DirView.cpp	/^IMPLEMENT_DYNCREATE(CDirView, CListView)$/;"	f
IMPLEMENT_DYNCREATE	FileFiltersDlg.cpp	/^IMPLEMENT_DYNCREATE(FileFiltersDlg, CPropertyPage)$/;"	f
IMPLEMENT_DYNCREATE	GhostTextView.cpp	/^IMPLEMENT_DYNCREATE (CGhostTextView, CCrystalEditViewEx)$/;"	f
IMPLEMENT_DYNCREATE	HexMergeDoc.cpp	/^IMPLEMENT_DYNCREATE(CHexMergeDoc, CDocument)$/;"	f
IMPLEMENT_DYNCREATE	HexMergeView.cpp	/^IMPLEMENT_DYNCREATE(CHexMergeView, CView)$/;"	f
IMPLEMENT_DYNCREATE	LocationView.cpp	/^IMPLEMENT_DYNCREATE(CLocationView, CView)$/;"	f
IMPLEMENT_DYNCREATE	MergeDoc.cpp	/^IMPLEMENT_DYNCREATE(CMergeDoc, CDocument)$/;"	f
IMPLEMENT_DYNCREATE	MergeEditFrm.cpp	/^IMPLEMENT_DYNCREATE(CMergeEditFrame, CMergeFrameCommon)$/;"	f
IMPLEMENT_DYNCREATE	MergeEditSplitterView.cpp	/^IMPLEMENT_DYNCREATE(CMergeEditSplitterView, CView)$/;"	f
IMPLEMENT_DYNCREATE	MergeEditView.cpp	/^IMPLEMENT_DYNCREATE(CMergeEditView, CCrystalEditViewEx)$/;"	f
IMPLEMENT_DYNCREATE	MergeFrameCommon.cpp	/^IMPLEMENT_DYNCREATE(CMergeFrameCommon, CMDIChildWnd)$/;"	f
IMPLEMENT_DYNCREATE	OpenDoc.cpp	/^IMPLEMENT_DYNCREATE(COpenDoc, CDocument)$/;"	f
IMPLEMENT_DYNCREATE	OpenFrm.cpp	/^IMPLEMENT_DYNCREATE(COpenFrame, CMergeFrameCommon)$/;"	f
IMPLEMENT_DYNCREATE	OpenView.cpp	/^IMPLEMENT_DYNCREATE(COpenView, CFormView)$/;"	f
IMergeDoc	IMergeDoc.h	/^struct IMergeDoc$/;"	s
IMergeEditStatus	MergeEditStatus.h	/^class IMergeEditStatus$/;"	c
INCLUDED	DiffItem.h	/^		FILTERFLAGS=0x20000U, INCLUDED=0x00000U, SKIPPED=0x20000U,$/;"	e	enum:DIFFCODE::__anon902ab4a30103
INDICATOR_MARGIN	LocationView.cpp	/^static const long INDICATOR_MARGIN = 2;$/;"	v	typeref:typename:const long	file:
INDICATOR_MIN_HEIGHT	LocationView.cpp	/^static const int INDICATOR_MIN_HEIGHT = 2;$/;"	v	typeref:typename:const int	file:
INSERTION_DELETION_DETECTION_HORIZONTAL	WinIMergeLib.h	/^		INSERTION_DELETION_DETECTION_NONE = 0, INSERTION_DELETION_DETECTION_VERTICAL, INSERTION_DELETI/;"	e	enum:IImgMergeWindow::INSERTION_DELETION_DETECTION_MODE
INSERTION_DELETION_DETECTION_MODE	WinIMergeLib.h	/^	enum INSERTION_DELETION_DETECTION_MODE {$/;"	g	struct:IImgMergeWindow
INSERTION_DELETION_DETECTION_NONE	WinIMergeLib.h	/^		INSERTION_DELETION_DETECTION_NONE = 0, INSERTION_DELETION_DETECTION_VERTICAL, INSERTION_DELETI/;"	e	enum:IImgMergeWindow::INSERTION_DELETION_DETECTION_MODE
INSERTION_DELETION_DETECTION_VERTICAL	WinIMergeLib.h	/^		INSERTION_DELETION_DETECTION_NONE = 0, INSERTION_DELETION_DETECTION_VERTICAL, INSERTION_DELETI/;"	e	enum:IImgMergeWindow::INSERTION_DELETION_DETECTION_MODE
INT_MAX	diffutils/src/system.h	/^#define INT_MAX /;"	d
INVALID_CODE	DiffItem.h	/^	INVALID_CODE = 0,$/;"	e	enum:ViewCustomFlags
IOptionsPanel	IOptionsPanel.h	/^class IOptionsPanel$/;"	c
IPluginInfos	DiffContext.h	/^class IPluginInfos$/;"	c
ISWSPACE	diffutils/src/io.c	/^ISWSPACE (char ch)$/;"	f	typeref:typename:int	file:
ISWSPACE	diffutils/src/util.c	/^ISWSPACE (char ch)$/;"	f	typeref:typename:int	file:
IS_EXISTING_DIR	paths.h	/^	IS_EXISTING_DIR, \/**< It is existing folder *\/$/;"	e	enum:paths::__anon9beca83b0103
IS_EXISTING_DIR_ARCHIVE	paths.h	/^	IS_EXISTING_DIR_ARCHIVE, \/**< It is existing folder *\/$/;"	e	enum:paths::__anon9beca83b0103
IS_EXISTING_FILE	paths.h	/^	IS_EXISTING_FILE, \/**< It is existing file *\/$/;"	e	enum:paths::__anon9beca83b0103
IShellItemPtr	DropHandler.cpp	/^	typedef _com_ptr_t<_com_IIID<IShellItem, &__uuidof(IShellItem)>> IShellItemPtr;$/;"	t	namespace:__anonfdfe2aa90111	file:
IShellItemPtr	Merge7zFormatShellImpl.cpp	/^typedef _com_ptr_t<_com_IIID<IShellItem, &__uuidof(IShellItem)>> IShellItemPtr;$/;"	t	file:
IStream_WriteToFile	DropHandler.cpp	/^	HRESULT IStream_WriteToFile(IStream *pStream, const String& filename)$/;"	f	namespace:__anonfdfe2aa90111	typeref:typename:HRESULT
Identical	DiffWrapper.h	/^	IDENTLEVEL Identical = IDENTLEVEL_NONE; \/**< diffutils said files are identical *\/$/;"	m	struct:DIFFSTATUS	typeref:typename:IDENTLEVEL
IgnoreCase	markdown.h	/^		IgnoreCase = 0x10,$/;"	e	enum:CMarkdown::__anon649c46be0103
ImageListDuplicate	Common/BCMenu.cpp	/^bool BCMenu::ImageListDuplicate(CImageList *il,int xoffset,CImageList *newlist)$/;"	f	class:BCMenu	typeref:typename:bool
Impl	AboutDlg.cpp	/^class CAboutDlg::Impl : public CTrDialog$/;"	c	class:CAboutDlg	file:
Impl	DirSelectFilesDlg.cpp	/^DirSelectFilesDlg::Impl::Impl(DirSelectFilesDlg *p, CWnd* pParent \/*= nullptr*\/)$/;"	f	class:DirSelectFilesDlg::Impl
Impl	DirSelectFilesDlg.cpp	/^class DirSelectFilesDlg::Impl : public CTrDialog$/;"	c	class:DirSelectFilesDlg	file:
Impl	WMGotoDlg.cpp	/^WMGotoDlg::Impl::Impl(WMGotoDlg *p, CWnd* pParent \/*= nullptr*\/)$/;"	f	class:WMGotoDlg::Impl
Impl	WMGotoDlg.cpp	/^class WMGotoDlg::Impl : public CTrDialog$/;"	c	class:WMGotoDlg	file:
Import	LineFiltersList.cpp	/^void LineFiltersList::Import(const String& filters)$/;"	f	class:LineFiltersList	typeref:typename:void
ImportOptions	Common/RegOptionsMgr.cpp	/^int CRegOptionsMgr::ImportOptions(const String& filename)$/;"	f	class:CRegOptionsMgr	typeref:typename:int
IncreaseTotalItems	CompareStats.h	/^inline void CompareStats::IncreaseTotalItems(int count)$/;"	f	class:CompareStats	typeref:typename:void
Increment	IntToIntMap.h	/^	void Increment(int key)$/;"	f	class:IntToIntMap	typeref:typename:void
Init	Common/CMoveConstraint.cpp	/^CMoveConstraint::Constraint::Init()$/;"	f	class:prdlg::CMoveConstraint::Constraint	typeref:typename:void
Init	Common/MyCom.h	/^	HRESULT Init(IDispatch *pdisp, LPCWSTR name)$/;"	f	class:CMyDispId	typeref:typename:HRESULT
Init	Common/OptionsMgr.cpp	/^int COption::Init(const String& name, const varprop::VariantValue& defaultValue)$/;"	f	class:COption	typeref:typename:int
Init	OptionsInit.cpp	/^void Init(COptionsMgr *pOptions)$/;"	f	namespace:Options	typeref:typename:void
Init	stringdiffs.cpp	/^void Init()$/;"	f	namespace:strdiff	typeref:typename:void
InitCompare	DirDoc.cpp	/^void CDirDoc::InitCompare(const PathContext & paths, bool bRecursive, CTempPathContext *pTempPat/;"	f	class:CDirDoc	typeref:typename:void
InitDiffItemList	DiffItemList.cpp	/^void DiffItemList::InitDiffItemList()$/;"	f	class:DiffItemList	typeref:typename:void
InitDiffMap	DiffList.cpp	/^void DiffMap::InitDiffMap(int nlines)$/;"	f	class:DiffMap	typeref:typename:void
InitInstance	Merge.cpp	/^BOOL CMergeApp::InitInstance()$/;"	f	class:CMergeApp	typeref:typename:BOOL
InitLinks	DiffList.h	/^	void InitLinks() { next = prev = -1; }$/;"	f	struct:DiffRangeInfo	typeref:typename:void
InitList	FileFiltersDlg.cpp	/^void FileFiltersDlg::InitList()$/;"	f	class:FileFiltersDlg	typeref:typename:void
InitList	LineFiltersDlg.cpp	/^void LineFiltersDlg::InitList()$/;"	f	class:LineFiltersDlg	typeref:typename:void
InitList	PluginsListDlg.cpp	/^void PluginsListDlg::InitList()$/;"	f	class:PluginsListDlg	typeref:typename:void
InitOption	Common/RegOptionsMgr.cpp	/^int CRegOptionsMgr::InitOption(const String& name, bool defaultValue)$/;"	f	class:CRegOptionsMgr	typeref:typename:int
InitOption	Common/RegOptionsMgr.cpp	/^int CRegOptionsMgr::InitOption(const String& name, const String& defaultValue)$/;"	f	class:CRegOptionsMgr	typeref:typename:int
InitOption	Common/RegOptionsMgr.cpp	/^int CRegOptionsMgr::InitOption(const String& name, const TCHAR *defaultValue)$/;"	f	class:CRegOptionsMgr	typeref:typename:int
InitOption	Common/RegOptionsMgr.cpp	/^int CRegOptionsMgr::InitOption(const String& name, const varprop::VariantValue& defaultValue)$/;"	f	class:CRegOptionsMgr	typeref:typename:int
InitOption	Common/RegOptionsMgr.cpp	/^int CRegOptionsMgr::InitOption(const String& name, int defaultValue, bool serializable)$/;"	f	class:CRegOptionsMgr	typeref:typename:int
InitStatusStrings	DirDoc.cpp	/^void CDirDoc::InitStatusStrings()$/;"	f	class:CDirDoc	typeref:typename:void
Initialize	Common/ShellContextMenu.cpp	/^void CShellContextMenu::Initialize()$/;"	f	class:CShellContextMenu	typeref:typename:void
Initialize	Common/multiformatText.cpp	/^void storageForPlugins::Initialize()$/;"	f	class:storageForPlugins	typeref:typename:void
Initialize	FileTransform.h	/^	void Initialize(PLUGIN_MODE Mode)$/;"	f	class:PluginForFile	typeref:typename:void
Initialize	LineFiltersList.cpp	/^void LineFiltersList::Initialize(COptionsMgr *pOptionsMgr)$/;"	f	class:LineFiltersList	typeref:typename:void
Initialize	SelectUnpackerDlg.cpp	/^void CSelectUnpackerDlg::Initialize()$/;"	f	class:CSelectUnpackerDlg	typeref:typename:void
InitializeChildConstraintData	Common/CMoveConstraint.cpp	/^InitializeChildConstraintData(HWND hwndDlg, Constraint & constraint)$/;"	f	class:prdlg::CMoveConstraint	typeref:typename:void
InitializeCurrentSize	Common/CMoveConstraint.cpp	/^CMoveConstraint::InitializeCurrentSize(CWnd * pDlg)$/;"	f	class:prdlg::CMoveConstraint	typeref:typename:bool
InitializeCurrentSize	Common/CMoveConstraint.cpp	/^CMoveConstraint::InitializeCurrentSize(HWND hwndDlg)$/;"	f	class:prdlg::CMoveConstraint	typeref:typename:bool
InitializeFileFilters	Merge.cpp	/^void CMergeApp::InitializeFileFilters()$/;"	f	class:CMergeApp	typeref:typename:void
InitializeLanguage	Common/LanguageSelect.cpp	/^void CLanguageSelect::InitializeLanguage(WORD langID)$/;"	f	class:CLanguageSelect	typeref:typename:void
InitializeLogFont	OptionsFont.cpp	/^void InitializeLogFont(LOGFONT &logfont, int lfHeight, int lfCharSet, int lfPitchAndFamily, Stri/;"	f	namespace:Options::Font	typeref:typename:void
InitializeMenuList	Common/BCMenu.cpp	/^void BCMenu::InitializeMenuList(int value)$/;"	f	class:BCMenu	typeref:typename:void
InitializeOriginalSize	Common/CMoveConstraint.cpp	/^CMoveConstraint::InitializeOriginalSize(CWnd * pParent)$/;"	f	class:prdlg::CMoveConstraint	typeref:typename:bool
InitializeOriginalSize	Common/CMoveConstraint.cpp	/^CMoveConstraint::InitializeOriginalSize(HWND hwndDlg)$/;"	f	class:prdlg::CMoveConstraint	typeref:typename:bool
InitializeSpecificSize	Common/CMoveConstraint.cpp	/^CMoveConstraint::InitializeSpecificSize(CWnd * pDlg, int nWidth, int nHeight)$/;"	f	class:prdlg::CMoveConstraint	typeref:typename:void
InitializeSpecificSize	Common/CMoveConstraint.cpp	/^CMoveConstraint::InitializeSpecificSize(HWND \/*hwndDlg*\/, int nWidth, int nHeight)$/;"	f	class:prdlg::CMoveConstraint	typeref:typename:void
Initialized	stringdiffs.cpp	/^static bool Initialized;$/;"	v	namespace:strdiff	typeref:typename:bool	file:
InitiateSort	DirView.cpp	/^void CDirView::InitiateSort()$/;"	f	class:CDirView	typeref:typename:void
InlineMarker	FilterCommentsManager.h	/^	std::string InlineMarker;$/;"	m	struct:FilterCommentsSet	typeref:typename:std::string
InsertItem	Common/MDITabBar.h	/^	BOOL InsertItem(int nItem, TCITEM* pTabCtrlItem)$/;"	f	class:CMDITabBar	typeref:typename:BOOL
InsertMenu	Common/BCMenu.h	/^#define InsertMenu /;"	d
InsertMenuA	Common/BCMenu.h	/^	bool InsertMenuA(UINT nPosition,UINT nFlags,UINT_PTR nIDNewItem,const char *lpszNewItem,CBitmap/;"	f	class:BCMenu	typeref:typename:bool
InsertMenuA	Common/BCMenu.h	/^	bool InsertMenuA(UINT nPosition,UINT nFlags,UINT_PTR nIDNewItem,const char *lpszNewItem,CImageL/;"	f	class:BCMenu	typeref:typename:bool
InsertMenuA	Common/BCMenu.h	/^	bool InsertMenuA(UINT nPosition,UINT nFlags,UINT_PTR nIDNewItem,const char *lpszNewItem,int nIc/;"	f	class:BCMenu	typeref:typename:bool
InsertMenuW	Common/BCMenu.cpp	/^bool BCMenu::InsertMenuW(UINT nPosition, UINT nFlags, UINT_PTR nIDNewItem, wchar_t *lpszNewItem,/;"	f	class:BCMenu	typeref:typename:bool
InsertMenuW	Common/BCMenu.cpp	/^bool BCMenu::InsertMenuW(UINT nPosition,UINT nFlags,UINT_PTR nIDNewItem \/*= 0*\/,wchar_t *lpszN/;"	f	class:BCMenu	typeref:typename:bool
InsertMenuW	Common/BCMenu.cpp	/^bool BCMenu::InsertMenuW(UINT nPosition,UINT nFlags,UINT_PTR nIDNewItem,wchar_t *lpszNewItem,CBi/;"	f	class:BCMenu	typeref:typename:bool
InsertODMenu	Common/BCMenu.h	/^#define InsertODMenu /;"	d
InsertODMenuA	Common/BCMenu.h	/^	bool InsertODMenuA(UINT nPosition,LPCSTR lpstrText,UINT nFlags,UINT_PTR nID,$/;"	f	class:BCMenu	typeref:typename:bool
InsertODMenuW	Common/BCMenu.cpp	/^bool BCMenu::InsertODMenuW(UINT nPosition,wchar_t *lpstrText,UINT nFlags,UINT_PTR nID,$/;"	f	class:BCMenu	typeref:typename:bool
InsertString	Common/SuperComboBox.cpp	/^int CSuperComboBox::InsertString(int nIndex, LPCTSTR lpszItem)$/;"	f	class:CSuperComboBox	typeref:typename:int
InsertText	GhostTextBuffer.cpp	/^InsertText (CCrystalTextView * pSource, int nLine,$/;"	f	class:CGhostTextBuffer	typeref:typename:bool
IntSet	MovedBlocks.cpp	/^class IntSet$/;"	c	file:
IntToIntMap	IntToIntMap.h	/^class IntToIntMap$/;"	c
Interactive	FileTransform.cpp	/^bool Interactive(String & text, const wchar_t *TransformationEvent, int iFncChosen)$/;"	f	namespace:FileTransform	typeref:typename:bool
InternalDeleteGhostLine	GhostTextBuffer.cpp	/^bool CGhostTextBuffer::InternalDeleteGhostLine (CCrystalTextView * pSource,$/;"	f	class:CGhostTextBuffer	typeref:typename:bool
InvalidateSubLineIndexCache	MergeEditView.cpp	/^void CMergeEditView::InvalidateSubLineIndexCache( int nLineIndex )$/;"	f	class:CMergeEditView	typeref:typename:void
Invoke	Common/lwdisp.c	/^static STDMETHODIMP Invoke(struct LWDispatch *This,$/;"	f	typeref:typename:STDMETHODIMP	file:
InvokeCommand	Common/ShellContextMenu.cpp	/^bool CShellContextMenu::InvokeCommand(UINT nCmd, HWND hWnd)$/;"	f	class:CShellContextMenu	typeref:typename:bool
InvokeIsFolder	Plugins.cpp	/^bool InvokeIsFolder(const String& path, IDispatch *piScript)$/;"	f	namespace:plugin	typeref:typename:bool
InvokePackBuffer	Plugins.cpp	/^bool InvokePackBuffer(VARIANT & array, int & nChanged, IDispatch *piScript, int subcode)$/;"	f	namespace:plugin	typeref:typename:bool
InvokePackFile	Plugins.cpp	/^bool InvokePackFile(const String& fileSource, const String& fileDest, int & nChanged, IDispatch /;"	f	namespace:plugin	typeref:typename:bool
InvokePackFolder	Plugins.cpp	/^bool InvokePackFolder(const String& folderSource, const String& fileDest, int & nChanged, IDispa/;"	f	namespace:plugin	typeref:typename:bool
InvokePrediffBuffer	Plugins.cpp	/^bool InvokePrediffBuffer(BSTR & bstrBuf, int & nChanged, IDispatch *piScript)$/;"	f	namespace:plugin	typeref:typename:bool
InvokePrediffFile	Plugins.cpp	/^bool InvokePrediffFile(const String& fileSource, const String& fileDest, int & nChanged, IDispat/;"	f	namespace:plugin	typeref:typename:bool
InvokeShowSettingsDialog	Plugins.cpp	/^bool InvokeShowSettingsDialog(IDispatch *piScript)$/;"	f	namespace:plugin	typeref:typename:bool
InvokeTransformText	Plugins.cpp	/^bool InvokeTransformText(String & text, int & changed, IDispatch *piScript, int fncId)$/;"	f	namespace:plugin	typeref:typename:bool
InvokeUnpackBuffer	Plugins.cpp	/^bool InvokeUnpackBuffer(VARIANT & array, int & nChanged, IDispatch *piScript, int & subcode)$/;"	f	namespace:plugin	typeref:typename:bool
InvokeUnpackFile	Plugins.cpp	/^bool InvokeUnpackFile(const String& fileSource, const String& fileDest, int & nChanged, IDispatc/;"	f	namespace:plugin	typeref:typename:bool
InvokeUnpackFolder	Plugins.cpp	/^bool InvokeUnpackFolder(const String& fileSource, const String& folderDest, int & nChanged, IDis/;"	f	namespace:plugin	typeref:typename:bool
IsAborting	DiffThread.h	/^	bool IsAborting() const { return m_bAborting; }$/;"	f	class:CDiffThread	typeref:typename:bool
IsActivated	MergeFrameCommon.h	/^	bool IsActivated() const { return m_bActivated; }$/;"	f	class:CMergeFrameCommon	typeref:typename:bool
IsAncestor	DiffItem.cpp	/^bool DIFFITEM::IsAncestor(const DIFFITEM *pdi) const$/;"	f	class:DIFFITEM	typeref:typename:bool
IsArchiveFile	7zCommon.cpp	/^bool IsArchiveFile(const String& pszFile)$/;"	f	typeref:typename:bool
IsArchiveFolders	DirDoc.cpp	/^bool CDirDoc::IsArchiveFolders() const$/;"	f	class:CDirDoc	typeref:typename:bool
IsBinary	files.h	/^	static bool IsBinary(DWORD flr) { return Main(flr) == FRESULT_BINARY; }$/;"	f	class:FileLoadResult	typeref:typename:bool
IsBool	Common/varprop.h	/^	bool IsBool() const { return m_vtype == VT_BOOL; }$/;"	f	class:varprop::VariantValue	typeref:typename:bool
IsBreak	stringdiffsi.h	/^	inline bool IsBreak(const word & word1) const$/;"	f	class:strdiff::stringdiffs	typeref:typename:bool
IsCanceled	Common/ShellFileOperations.h	/^inline bool ShellFileOperations::IsCanceled() const$/;"	f	class:ShellFileOperations	typeref:typename:bool
IsCleared	FileVersion.h	/^	bool IsCleared() const { return m_fileVersionMS == 0xffffffff && m_fileVersionLS == 0xffffffff;/;"	f	class:FileVersion	typeref:typename:bool
IsColById	DirViewColItems.cpp	/^DirViewColItems::IsColById(int col, const char *idname) const$/;"	f	class:DirViewColItems	typeref:typename:bool
IsColLmTime	DirViewColItems.cpp	/^DirViewColItems::IsColLmTime(int col) const$/;"	f	class:DirViewColItems	typeref:typename:bool
IsColMmTime	DirViewColItems.cpp	/^DirViewColItems::IsColMmTime(int col) const$/;"	f	class:DirViewColItems	typeref:typename:bool
IsColName	DirViewColItems.cpp	/^DirViewColItems::IsColName(int col) const$/;"	f	class:DirViewColItems	typeref:typename:bool
IsColRmTime	DirViewColItems.cpp	/^DirViewColItems::IsColRmTime(int col) const$/;"	f	class:DirViewColItems	typeref:typename:bool
IsColStatus	DirViewColItems.cpp	/^DirViewColItems::IsColStatus(int col) const$/;"	f	class:DirViewColItems	typeref:typename:bool
IsColStatusAbbr	DirViewColItems.cpp	/^DirViewColItems::IsColStatusAbbr(int col) const$/;"	f	class:DirViewColItems	typeref:typename:bool
IsCompareDone	CompareStats.h	/^	bool IsCompareDone() const { return m_bCompareDone; }$/;"	f	class:CompareStats	typeref:typename:bool
IsConflictFile	ConflictFileParser.cpp	/^bool IsConflictFile(const String& conflictFileName)$/;"	f	typeref:typename:bool
IsCurrentScanAbortable	DirDoc.cpp	/^bool CDirDoc::IsCurrentScanAbortable() const$/;"	f	class:CDirDoc	typeref:typename:bool
IsCursorInDiff	MergeEditView.h	/^inline bool CMergeEditView::IsCursorInDiff() const$/;"	f	class:CMergeEditView	typeref:typename:bool
IsDecendant	paths.cpp	/^bool IsDecendant(const String& path, const String& ancestor)$/;"	f	namespace:paths	typeref:typename:bool
IsDefaultSortAscending	DirViewColItems.cpp	/^DirViewColItems::IsDefaultSortAscending(int col) const$/;"	f	class:DirViewColItems	typeref:typename:bool
IsDialogMessage	Common/PropertyPageHost.cpp	/^BOOL COccManager::IsDialogMessage(CWnd* pWndDlg, LPMSG lpMsg)$/;"	f	class:COccManager	typeref:typename:BOOL
IsDiffSignificant	DiffList.cpp	/^bool DiffList::IsDiffSignificant(int nDiff) const$/;"	f	class:DiffList	typeref:typename:bool
IsDiffVisible	MergeEditView.cpp	/^bool CMergeEditView::IsDiffVisible(const DIFFRANGE& diff, int nLinesBelow \/*=0*\/)$/;"	f	class:CMergeEditView	typeref:typename:bool
IsDiffVisible	MergeEditView.cpp	/^bool CMergeEditView::IsDiffVisible(int nDiff)$/;"	f	class:CMergeEditView	typeref:typename:bool
IsDirectory	paths.cpp	/^bool IsDirectory(const String &path)$/;"	f	namespace:paths	typeref:typename:bool
IsEditableEncoding	DiffFileInfo.h	/^inline bool DiffFileInfo::IsEditableEncoding() const$/;"	f	class:DiffFileInfo	typeref:typename:bool
IsEditedAfterRescan	MergeDoc.h	/^	bool IsEditedAfterRescan(int nBuffer) { return m_bEditAfterRescan[nBuffer]; }$/;"	f	class:CMergeDoc	typeref:typename:bool
IsError	files.h	/^	static bool IsError(DWORD flr) { return Main(flr) == FRESULT_ERROR; }$/;"	f	class:FileLoadResult	typeref:typename:bool
IsErrorUnpack	files.h	/^	static bool IsErrorUnpack(DWORD flr) { return Main(flr) == FRESULT_ERROR_UNPACK; }$/;"	f	class:FileLoadResult	typeref:typename:bool
IsFileChangedOnDisk	HexMergeView.cpp	/^IMergeDoc::FileChange CHexMergeView::IsFileChangedOnDisk(LPCTSTR path)$/;"	f	class:CHexMergeView	typeref:typename:IMergeDoc::FileChange
IsFileChangedOnDisk	ImgMergeFrm.cpp	/^IMergeDoc::FileChange CImgMergeFrame::IsFileChangedOnDisk(int pane) const$/;"	f	class:CImgMergeFrame	typeref:typename:IMergeDoc::FileChange
IsFileChangedOnDisk	MergeDoc.cpp	/^CMergeDoc::FileChange CMergeDoc::IsFileChangedOnDisk(LPCTSTR szPath, DiffFileInfo &dfi,$/;"	f	class:CMergeDoc	typeref:typename:CMergeDoc::FileChange
IsFilterItemNone	FileFiltersDlg.cpp	/^bool FileFiltersDlg::IsFilterItemNone(int item) const$/;"	f	class:FileFiltersDlg	typeref:typename:bool
IsFloat	Common/varprop.h	/^	bool IsFloat() const { return m_vtype == VT_FLOAT; }$/;"	f	class:varprop::VariantValue	typeref:typename:bool
IsFloating	Common/sizecbar.cpp	/^const bool CSizingControlBar::IsFloating() const$/;"	f	class:CSizingControlBar	typeref:typename:const bool
IsHorzDocked	Common/sizecbar.cpp	/^const bool CSizingControlBar::IsHorzDocked() const$/;"	f	class:CSizingControlBar	typeref:typename:const bool
IsInitalized	Common/CMoveConstraint.h	/^	bool IsInitalized() { return m_hwndDlg!=nullptr; }$/;"	f	class:prdlg::CMoveConstraint	typeref:typename:bool
IsInitialized	DiffTextBuffer.h	/^inline bool CDiffTextBuffer::IsInitialized() const$/;"	f	class:CDiffTextBuffer	typeref:typename:bool
IsInitialized	MergeEditView.cpp	/^bool CMergeEditView::IsInitialized() const$/;"	f	class:CMergeEditView	typeref:typename:bool
IsInsert	stringdiffsi.h	/^	inline bool IsInsert(const word & word1) const$/;"	f	class:strdiff::stringdiffs	typeref:typename:bool
IsInsideBar	LocationView.cpp	/^int CLocationView::IsInsideBar(const CRect& rc, const POINT& pt)$/;"	f	class:CLocationView	typeref:typename:int
IsInt	Common/varprop.h	/^	bool IsInt() const { return m_vtype == VT_INT; }$/;"	f	class:varprop::VariantValue	typeref:typename:bool
IsItemCopyable	DirActions.cpp	/^bool IsItemCopyable(const DIFFITEM &di, int index)$/;"	f	typeref:typename:bool
IsItemCopyableBothToOn	DirActions.h	/^	bool IsItemCopyableBothToOn(const DIFFITEM& di) const$/;"	f	struct:DirActions	typeref:typename:bool
IsItemCopyableOnTo	DirActions.h	/^	bool IsItemCopyableOnTo(const DIFFITEM& di) const$/;"	f	struct:DirActions	typeref:typename:bool
IsItemCopyableToOn	DirActions.cpp	/^bool IsItemCopyableToOn(const DIFFITEM &di, int index)$/;"	f	typeref:typename:bool
IsItemCopyableToOn	DirActions.h	/^	bool IsItemCopyableToOn(const DIFFITEM& di) const$/;"	f	struct:DirActions	typeref:typename:bool
IsItemDeletable	DirActions.cpp	/^bool IsItemDeletable(const DIFFITEM &di, int index)$/;"	f	typeref:typename:bool
IsItemDeletableOn	DirActions.h	/^	bool IsItemDeletableOn(const DIFFITEM& di) const$/;"	f	struct:DirActions	typeref:typename:bool
IsItemDeletableOnBoth	DirActions.cpp	/^bool IsItemDeletableOnBoth(const CDiffContext& ctxt, const DIFFITEM &di)$/;"	f	typeref:typename:bool
IsItemDeletableOnBoth	DirActions.h	/^	bool IsItemDeletableOnBoth(const DIFFITEM& di) const$/;"	f	struct:DirActions	typeref:typename:bool
IsItemDeletableOnEitherOrBoth	DirActions.h	/^	bool IsItemDeletableOnEitherOrBoth(const DIFFITEM& di) const$/;"	f	struct:DirActions	typeref:typename:bool
IsItemEditableEncoding	DirActions.h	/^	bool IsItemEditableEncoding(const DIFFITEM& di) const$/;"	f	struct:DirActions	typeref:typename:bool
IsItemExist	DirActions.h	/^	bool IsItemExist(const DIFFITEM& di) const$/;"	f	struct:DirActions	typeref:typename:bool
IsItemExistAll	DirActions.cpp	/^bool IsItemExistAll(const CDiffContext& ctxt, const DIFFITEM &di)$/;"	f	typeref:typename:bool
IsItemFile	DirActions.h	/^	bool IsItemFile(const DIFFITEM& di) const$/;"	f	struct:DirActions	typeref:typename:bool
IsItemMovableToOn	DirActions.h	/^	bool IsItemMovableToOn(const DIFFITEM& di) const$/;"	f	struct:DirActions	typeref:typename:bool
IsItemNavigableDiff	DirActions.cpp	/^bool IsItemNavigableDiff(const CDiffContext& ctxt, const DIFFITEM &di)$/;"	f	typeref:typename:bool
IsItemNavigableDiff	DirActions.h	/^	bool IsItemNavigableDiff(const DIFFITEM& di) const$/;"	f	struct:DirActions	typeref:typename:bool
IsItemOpenableOn	DirActions.cpp	/^bool IsItemOpenableOn(const DIFFITEM &di, int index)$/;"	f	typeref:typename:bool
IsItemOpenableOn	DirActions.h	/^	bool IsItemOpenableOn(const DIFFITEM& di) const$/;"	f	struct:DirActions	typeref:typename:bool
IsItemOpenableOnWith	DirActions.cpp	/^bool IsItemOpenableOnWith(const DIFFITEM &di, int index)$/;"	f	typeref:typename:bool
IsItemOpenableOnWith	DirActions.h	/^	bool IsItemOpenableOnWith(const DIFFITEM& di) const$/;"	f	struct:DirActions	typeref:typename:bool
IsLabelEdit	DirView.cpp	/^bool CDirView::IsLabelEdit() const$/;"	f	class:CDirView	typeref:typename:bool
IsLeadByte	stringdiffs.cpp	/^static inline bool IsLeadByte(TCHAR ch)$/;"	f	namespace:strdiff	typeref:typename:bool	file:
IsLineInCurrentDiff	MergeEditView.cpp	/^bool CMergeEditView::IsLineInCurrentDiff(int nLine) const$/;"	f	class:CMergeEditView	typeref:typename:bool
IsLoadable	HexMergeView.cpp	/^bool CHexMergeView::IsLoadable()$/;"	f	class:CHexMergeView	typeref:typename:bool
IsLoadable	ImgMergeFrm.cpp	/^bool CImgMergeFrame::IsLoadable()$/;"	f	class:CImgMergeFrame	typeref:typename:bool
IsLossy	files.h	/^	static bool IsLossy(DWORD flr) { return IsModifier(flr, FRESULT_LOSSY); }$/;"	f	class:FileLoadResult	typeref:typename:bool
IsMenu	Common/BCMenu.cpp	/^bool BCMenu::IsMenu(CMenu *submenu)$/;"	f	class:BCMenu	typeref:typename:bool
IsMenu	Common/BCMenu.cpp	/^bool BCMenu::IsMenu(HMENU submenu)$/;"	f	class:BCMenu	typeref:typename:bool
IsMixedEOL	DiffTextBuffer.h	/^	bool IsMixedEOL() const { return m_bMixedEOL; }$/;"	f	class:CDiffTextBuffer	typeref:typename:bool
IsMixedEOL	MergeDoc.cpp	/^bool CMergeDoc::IsMixedEOL(int nBuffer) const$/;"	f	class:CMergeDoc	typeref:typename:bool
IsModified	ImgMergeFrm.cpp	/^bool CImgMergeFrame::IsModified() const$/;"	f	class:CImgMergeFrame	typeref:typename:bool
IsModified	MergeDoc.h	/^	bool IsModified() const$/;"	f	class:CMergeDoc	typeref:typename:bool
IsModified	MergeEditView.h	/^	bool IsModified() { return (LocateTextBuffer()->IsModified()); }$/;"	f	class:CMergeEditView	typeref:typename:bool
IsModifier	files.h	/^	static bool IsModifier(DWORD flr, DWORD modifier) { return (flr & modifier) != 0; }$/;"	f	class:FileLoadResult	typeref:typename:bool
IsOk	files.h	/^	static bool IsOk(DWORD flr) { return Main(flr) == FRESULT_OK; }$/;"	f	class:FileLoadResult	typeref:typename:bool
IsOkImpure	files.h	/^	static bool IsOkImpure(DWORD flr) { return Main(flr) == FRESULT_OK_IMPURE; }$/;"	f	class:FileLoadResult	typeref:typename:bool
IsOpen	Common/UniFile.h	/^inline bool UniMemFile::IsOpen() const$/;"	f	class:UniMemFile	typeref:typename:bool
IsOpen	Common/UniFile.h	/^inline bool UniStdioFile::IsOpen() const$/;"	f	class:UniStdioFile	typeref:typename:bool
IsParentFolderOpenable	DirActions.h	/^	bool IsParentFolderOpenable(const DIFFITEM& di) const$/;"	f	struct:DirActions	typeref:typename:bool
IsPathAbsolute	paths.cpp	/^bool IsPathAbsolute(const String &path)$/;"	f	namespace:paths	typeref:typename:bool
IsPaused	DiffThread.h	/^	bool IsPaused() const { return m_bPaused; }$/;"	f	class:CDiffThread	typeref:typename:bool
IsProjectFile	Merge.cpp	/^bool CMergeApp::IsProjectFile(const String& filepath) const$/;"	f	class:CMergeApp	typeref:typename:bool
IsReadOnly	MergeEditView.cpp	/^bool CMergeEditView::IsReadOnly(int pane) const$/;"	f	class:CMergeEditView	typeref:typename:bool
IsReallyIdle	Merge.cpp	/^bool CMergeApp::IsReallyIdle() const$/;"	f	class:CMergeApp	typeref:typename:bool
IsSelectedItem	IListCtrlImpl.h	/^	bool IsSelectedItem(int sel) const override$/;"	f	class:IListCtrlImpl	typeref:typename:bool
IsShellExtensionRegistered	PropShell.cpp	/^static bool IsShellExtensionRegistered(bool peruser)$/;"	f	typeref:typename:bool	file:
IsShortcut	paths.cpp	/^bool IsShortcut(const String& inPath)$/;"	f	namespace:paths	typeref:typename:bool
IsShowable	DirActions.cpp	/^bool IsShowable(const CDiffContext& ctxt, const DIFFITEM &di, const DirViewFilterSettings& filte/;"	f	typeref:typename:bool
IsSideTracking	Common/sizecbar.cpp	/^const bool CSizingControlBar::IsSideTracking() const$/;"	f	class:CSizingControlBar	typeref:typename:const bool
IsSlash	paths.cpp	/^static bool IsSlash(const String& pszStart, size_t nPos)$/;"	f	namespace:paths	typeref:typename:bool	file:
IsSlashOrColon	paths.cpp	/^bool IsSlashOrColon(const TCHAR *pszChar, const TCHAR *begin)$/;"	f	namespace:paths	typeref:typename:bool
IsSpace	stringdiffsi.h	/^	inline bool IsSpace(const word & word1) const$/;"	f	class:strdiff::stringdiffs	typeref:typename:bool
IsSpecial	markdown.cpp	/^int CMarkdown::Token::IsSpecial(const char *p, const char *ahead)$/;"	f	class:CMarkdown::Token	typeref:typename:int
IsString	Common/varprop.h	/^	bool IsString() const { return m_vtype == VT_STRING; }$/;"	f	class:varprop::VariantValue	typeref:typename:bool
IsTextFileStylePure	DiffTextBuffer.cpp	/^static bool IsTextFileStylePure(const UniMemFile::txtstats & stats)$/;"	f	typeref:typename:bool	file:
IsTime	Common/varprop.h	/^	bool IsTime() const { return m_vtype == VT_TIME; }$/;"	f	class:varprop::VariantValue	typeref:typename:bool
IsTrivialBytes	DiffWrapper.cpp	/^bool CDiffWrapper::IsTrivialBytes(const char* Start, const char* End,$/;"	f	class:CDiffWrapper	typeref:typename:bool
IsTrivialLine	DiffWrapper.cpp	/^bool CDiffWrapper::IsTrivialLine(const std::string &Line, $/;"	f	class:CDiffWrapper	typeref:typename:bool
IsURLorCLSID	paths.cpp	/^bool IsURLorCLSID(const String& path)$/;"	f	namespace:paths	typeref:typename:bool
IsUnicode	Common/UniFile.cpp	/^bool UniLocalFile::IsUnicode()$/;"	f	class:UniLocalFile	typeref:typename:bool
IsUsingMask	FileFilterHelper.h	/^inline bool FileFilterHelper::IsUsingMask() const$/;"	f	class:FileFilterHelper	typeref:typename:bool
IsValidCodepageForMergeEditor	MergeDoc.cpp	/^bool CMergeDoc::IsValidCodepageForMergeEditor(unsigned cp) const$/;"	f	class:CMergeDoc	typeref:typename:bool
IsVertDocked	Common/sizecbar.cpp	/^const bool CSizingControlBar::IsVertDocked() const$/;"	f	class:CSizingControlBar	typeref:typename:const bool
IsVista_OrGreater	Win_VersionHelper.h	/^IsVista_OrGreater()$/;"	f	typeref:typename:bool
IsWin7_OrGreater	Win_VersionHelper.h	/^IsWin7_OrGreater()$/;"	f	typeref:typename:bool
IsWinVer_OrGreater	Win_VersionHelper.h	/^IsWinVer_OrGreater(WORD wVersion, WORD wServicePack = 0)$/;"	f	typeref:typename:bool
IsWindowsScriptThere	Plugins.cpp	/^bool IsWindowsScriptThere()$/;"	f	namespace:plugin	typeref:typename:bool
Item	JumpList.h	/^		Item(const String& path, const String& params, const String& title, const String& desc): path(/;"	f	struct:JumpList::Item
Item	JumpList.h	/^	struct Item$/;"	s	namespace:JumpList
Items	ProjectFile.h	/^	const std::list<ProjectFileItem>& Items() const { return m_items; };$/;"	f	class:ProjectFile	typeref:typename:const std::list<ProjectFileItem> &
Items	ProjectFile.h	/^	std::list<ProjectFileItem>& Items() { return m_items; }$/;"	f	class:ProjectFile	typeref:typename:std::list<ProjectFileItem> &
JumpList	JumpList.cpp	/^namespace JumpList$/;"	n	file:
JumpList	JumpList.h	/^namespace JumpList$/;"	n
KEYDOWN	WinIMergeLib.h	/^		KEYDOWN, KEYUP,$/;"	e	enum:IImgMergeWindow::EVENT_TYPE
KEYUP	WinIMergeLib.h	/^		KEYDOWN, KEYUP,$/;"	e	enum:IImgMergeWindow::EVENT_TYPE
KILLFOCUS	WinIMergeLib.h	/^		SIZE, HSCROLL, VSCROLL, SETFOCUS, KILLFOCUS,$/;"	e	enum:IImgMergeWindow::EVENT_TYPE
KILO	CompareEngines/ByteCompare.cpp	/^static const int KILO = 1024; \/\/ Kilo(byte)$/;"	v	namespace:CompareEngines	typeref:typename:const int	file:
LANGUAGEANDCODEPAGE	Common/VersionInfo.cpp	/^struct LANGUAGEANDCODEPAGE$/;"	s	file:
LBUTTONDBLCLK	WinIMergeLib.h	/^		LBUTTONDOWN = 0, LBUTTONUP, LBUTTONDBLCLK, $/;"	e	enum:IImgMergeWindow::EVENT_TYPE
LBUTTONDOWN	WinIMergeLib.h	/^		LBUTTONDOWN = 0, LBUTTONUP, LBUTTONDBLCLK, $/;"	e	enum:IImgMergeWindow::EVENT_TYPE
LBUTTONUP	WinIMergeLib.h	/^		LBUTTONDOWN = 0, LBUTTONUP, LBUTTONDBLCLK, $/;"	e	enum:IImgMergeWindow::EVENT_TYPE
LF_DIFF	MergeLineFlags.h	/^	LF_DIFF = 0x00200000UL,$/;"	e	enum:MERGE_LINEFLAGS
LF_GHOST	GhostTextBuffer.h	/^	LF_GHOST = 0x00400000UL, \/**< Ghost line. *\/$/;"	e	enum:GHOST_LINEFLAGS
LF_MOVED	MergeLineFlags.h	/^	LF_MOVED = 0x01000000UL,$/;"	e	enum:MERGE_LINEFLAGS
LF_NONTRIVIAL_DIFF	MergeLineFlags.h	/^#define LF_NONTRIVIAL_DIFF /;"	d
LF_SNP	MergeLineFlags.h	/^	LF_SNP = 0x02000000UL,$/;"	e	enum:MERGE_LINEFLAGS
LF_TRIVIAL	MergeLineFlags.h	/^	LF_TRIVIAL = 0x00800000UL,$/;"	e	enum:MERGE_LINEFLAGS
LF_WINMERGE_FLAGS	MergeLineFlags.h	/^#define LF_WINMERGE_FLAGS /;"	d
LOAD_COLORS	PropMarkerColors.h	/^	typedef enum { SET_DEFAULTS, READ_OPTIONS, LOAD_COLORS } OPERATION;$/;"	e	enum:PropMarkerColors::__anon05ae34500203
LOAD_COLORS	PropTextColors.h	/^	typedef enum { SET_DEFAULTS, READ_OPTIONS, LOAD_COLORS } OPERATION;$/;"	e	enum:PropTextColors::__anon432a02130203
LOBYTE	markdown.cpp	/^#define LOBYTE(/;"	d	file:
LOCBAR_TYPE	LocationView.cpp	/^enum LOCBAR_TYPE$/;"	g	file:
LODD	Common/lwdisp.h	/^#define LODD(/;"	d
LOWORD	FileVersion.cpp	/^#define LOWORD(/;"	d	file:
LOWORD	markdown.cpp	/^#define LOWORD(/;"	d	file:
LPPluginArray	Plugins.cpp	/^	typedef PluginArray * LPPluginArray;$/;"	t	function:CScriptsOfThread::CScriptsOfThread	typeref:typename:PluginArray *	file:
LWArg	Common/lwdisp.c	/^VARIANT NTAPI LWArg(LPDISPATCH pdispVal)$/;"	f	typeref:typename:VARIANT NTAPI
LWArgA	Common/lwdisp.c	/^VARIANT NTAPI LWArgA(LPCSTR cVal)$/;"	f	typeref:typename:VARIANT NTAPI
LWArgT	Common/lwdisp.h	/^#define LWArgT /;"	d
LWArgV	Common/lwdisp.c	/^VARIANT NTAPI LWArgV(UINT vt, ...)$/;"	f	typeref:typename:VARIANT NTAPI
LWArgW	Common/lwdisp.c	/^VARIANT NTAPI LWArgW(LPCWSTR wcVal)$/;"	f	typeref:typename:VARIANT NTAPI
LWDefProc	Common/lwdisp.c	/^STDAPI LWDefProc(PVOID UNUSED_ARG(target), HRESULT UNUSED_ARG(sc),$/;"	f	typeref:typename:STDAPI
LWDispFxn	Common/lwdisp.h	/^typedef HRESULT(NTAPI*LWDispFxn)$/;"	t	typeref:typename:HRESULT (NTAPI *)(PVOID,HRESULT,VARIANT *,VARIANT *,UINT,EXCEPINFO *)
LWDispMap	Common/lwdisp.c	/^struct LWDispMap$/;"	s	file:
LWDispRef	Common/lwdisp.h	/^struct LWDispRef$/;"	s
LWDispSubclass	Common/lwdisp.c	/^const struct LWDispVtbl *NTAPI LWDispSubclass(struct LWDispVtbl *lpVtbl)$/;"	f	typeref:typename:const struct LWDispVtbl * NTAPI
LWDispVtbl	Common/lwdisp.h	/^struct LWDispVtbl$/;"	s
LWDispatch	Common/lwdisp.c	/^IDispatch *NTAPI LWDispatch(void *target, const void *disp_map,$/;"	f	typeref:typename:IDispatch * NTAPI
LWDispatch	Common/lwdisp.h	/^struct LWDispatch$/;"	s
LWRet	Common/lwdisp.h	/^	LWRet() {VariantInit(this);}$/;"	f	struct:LWRet
LWRet	Common/lwdisp.h	/^struct LWRet: public VARIANT$/;"	s
LWVT	Common/lwdisp.h	/^#define LWVT(/;"	d
LangFileInfo	Common/LanguageSelect.cpp	/^	explicit LangFileInfo(LANGID id): id(id) { };$/;"	f	class:LangFileInfo	file:
LangFileInfo	Common/LanguageSelect.cpp	/^LangFileInfo::LangFileInfo(LPCTSTR path)$/;"	f	class:LangFileInfo
LangFileInfo	Common/LanguageSelect.cpp	/^class LangFileInfo$/;"	c	file:
LangId	Common/LanguageSelect.cpp	/^LANGID LangFileInfo::LangId(const char *lang, const char *sublang)$/;"	f	class:LangFileInfo	typeref:typename:LANGID
LangMessageBox	StdAfx.cpp	/^int NTAPI LangMessageBox(UINT nIDPrompt, UINT nType, UINT nIDHelp)$/;"	f	typeref:typename:int NTAPI
LangTranslateDialog	StdAfx.cpp	/^void NTAPI LangTranslateDialog(HWND h)$/;"	f	typeref:typename:void NTAPI
LastErrorCustom	Common/UniFile.cpp	/^void UniLocalFile::LastErrorCustom(const String& desc)$/;"	f	class:UniLocalFile	typeref:typename:void
LastErrorCustom	Common/UniFile.cpp	/^void UniStdioFile::LastErrorCustom(const String& desc)$/;"	f	class:UniStdioFile	typeref:typename:void
LastSelectedFolder	FileOrFolderSelect.cpp	/^static String LastSelectedFolder;$/;"	v	typeref:typename:String	file:
LastSignificant3wayDiff	DiffList.cpp	/^int DiffList::LastSignificant3wayDiff(int nDiffType) const$/;"	f	class:DiffList	typeref:typename:int
LastSignificant3wayDiffRange	DiffList.cpp	/^const DIFFRANGE * DiffList::LastSignificant3wayDiffRange(int nDiffType) const$/;"	f	class:DiffList	typeref:typename:const DIFFRANGE *
LastSignificantDiff	DiffList.h	/^inline int DiffList::LastSignificantDiff() const$/;"	f	class:DiffList	typeref:typename:int
LastSignificantDiffRange	DiffList.cpp	/^const DIFFRANGE * DiffList::LastSignificantDiffRange() const$/;"	f	class:DiffList	typeref:typename:const DIFFRANGE *
Left	7zCommon.h	/^		Left = 0x00,$/;"	e	enum:DirItemEnumerator::__anond3316a350103
LeftCmdFirst	DirView.cpp	/^const UINT LeftCmdFirst = 0x9000; \/\/ this should be greater than any of already defined comman/;"	v	typeref:typename:const UINT
LeftCmdLast	DirView.cpp	/^const UINT LeftCmdLast = LeftCmdFirst + (RightCmdLast - LeftCmdFirst) \/ 3; \/\/ divide availabl/;"	v	typeref:typename:const UINT
LeftLineInMovedBlock	MergeDoc.cpp	/^int CMergeDoc::LeftLineInMovedBlock(int nBuffer, int apparentRightLine)$/;"	f	class:CMergeDoc	typeref:typename:int
Left_element_name	ProjectFile.cpp	/^const char Left_element_name[] = "left";$/;"	v	typeref:typename:const char[]
Left_ro_element_name	ProjectFile.cpp	/^const char Left_ro_element_name[] = "left-readonly";$/;"	v	typeref:typename:const char[]
Length	Common/MyCom.h	/^  UINT Length() const { return ::SysStringLen(m_str); }$/;"	f	class:CMyComBSTR	typeref:typename:UINT
LicenceUrl	Constants.h	/^const TCHAR LicenceUrl[] = _T("http:\/\/www.gnu.org\/licenses\/gpl-2.0.html");$/;"	v	typeref:typename:const TCHAR[]
LicenseFile	Constants.h	/^const TCHAR LicenseFile[] = _T("Copying");$/;"	v	typeref:typename:const TCHAR[]
LightenColor	Common/BCMenu.cpp	/^inline COLORREF BCMenu::LightenColor(COLORREF col,double factor)$/;"	f	class:BCMenu	typeref:typename:COLORREF
LineFilterItem	LineFiltersList.h	/^	LineFilterItem() : enabled(false) { }$/;"	f	struct:LineFilterItem
LineFilterItem	LineFiltersList.h	/^struct LineFilterItem$/;"	s
LineFilterItemPtr	LineFiltersList.h	/^typedef std::shared_ptr<LineFilterItem> LineFilterItemPtr;$/;"	t	typeref:typename:std::shared_ptr<LineFilterItem>
LineFiltersDlg	LineFiltersDlg.h	/^class LineFiltersDlg : public CTrPropertyPage$/;"	c
LineFiltersList	LineFiltersList.cpp	/^LineFiltersList::LineFiltersList()$/;"	f	class:LineFiltersList
LineFiltersList	LineFiltersList.h	/^class LineFiltersList$/;"	c
LineInBlock	MovedLines.cpp	/^int MovedLines::LineInBlock(unsigned line, ML_SIDE side) const$/;"	f	class:MovedLines	typeref:typename:int
LineInDiff	DiffList.cpp	/^bool DiffList::LineInDiff(int nLine, int nDiff) const$/;"	f	class:DiffList	typeref:typename:bool
LineRelDiff	DiffList.cpp	/^int DiffList::LineRelDiff(int nLine, int nDiff) const$/;"	f	class:DiffList	typeref:typename:int
LineToDiff	DiffList.cpp	/^int DiffList::LineToDiff(int nLine) const$/;"	f	class:DiffList	typeref:typename:int
ListContextMenu	DirView.cpp	/^void CDirView::ListContextMenu(CPoint point, int \/*i*\/)$/;"	f	class:CDirView	typeref:typename:void
ListCopy	MergeDoc.cpp	/^bool CMergeDoc::ListCopy(int srcPane, int dstPane, int nDiff \/* = -1*\/,$/;"	f	class:CMergeDoc	typeref:typename:bool
ListShellContextMenu	DirView.cpp	/^bool CDirView::ListShellContextMenu(SIDE_TYPE stype)$/;"	f	class:CDirView	typeref:typename:bool
Load	FilterCommentsManager.cpp	/^void FilterCommentsManager::Load()$/;"	f	class:FilterCommentsManager	typeref:typename:void
Load	OptionsCustomColors.cpp	/^void Load(COptionsMgr *pOptionsMgr, COLORREF * colors)$/;"	f	namespace:Options::CustomColors	typeref:typename:void
Load	OptionsDiffColors.cpp	/^void Load(const COptionsMgr *pOptionsMgr, COLORSETTINGS& colors)$/;"	f	namespace:Options::DiffColors	typeref:typename:void
Load	OptionsDiffOptions.cpp	/^void Load(const COptionsMgr *pOptionsMgr, DIFFOPTIONS& options)$/;"	f	namespace:Options::DiffOptions	typeref:typename:void
Load	OptionsDirColors.cpp	/^void Load(const COptionsMgr *pOptionsMgr, DIRCOLORSETTINGS& colors)$/;"	f	namespace:Options::DirColors	typeref:typename:void
Load	OptionsFont.cpp	/^LOGFONT Load(const COptionsMgr *pOptionsMgr, const String& name)$/;"	f	namespace:Options::Font	typeref:typename:LOGFONT
Load	OptionsSyntaxColors.cpp	/^void Load(COptionsMgr *pOptionsMgr, ::SyntaxColors *pSyntaxColors)$/;"	f	namespace:Options::SyntaxColors	typeref:typename:void
Load	dllpstub.cpp	/^HMODULE DLLPSTUB::Load()$/;"	f	class:DLLPSTUB	typeref:typename:HMODULE
Load	markdown.cpp	/^void CMarkdown::Load(EntityMap &entityMap)$/;"	f	class:CMarkdown	typeref:typename:void
Load	markdown.cpp	/^void CMarkdown::Load(EntityMap &entityMap, int dummy)$/;"	f	class:CMarkdown	typeref:typename:void
LoadAllFileFilters	FileFilterHelper.cpp	/^void FileFilterHelper::LoadAllFileFilters()$/;"	f	class:FileFilterHelper	typeref:typename:void
LoadAndOpenProjectFile	Merge.cpp	/^bool CMergeApp::LoadAndOpenProjectFile(const String& sProject, const String& sReportFile)$/;"	f	class:CMergeApp	typeref:typename:bool
LoadAndSortFiles	DirTravel.cpp	/^void LoadAndSortFiles(const String& sDir, DirItemArray * dirs, DirItemArray * files, bool casese/;"	f	typeref:typename:void
LoadColumnHeaderItems	DirView.cpp	/^void CDirView::LoadColumnHeaderItems()$/;"	f	class:CDirView	typeref:typename:void
LoadColumnOrders	DirViewColItems.cpp	/^void DirViewColItems::LoadColumnOrders(String colorders)$/;"	f	class:DirViewColItems	typeref:typename:void
LoadColumnWidths	DirViewColItems.h	/^	void LoadColumnWidths(String colwidths, SetColumnWidthFunc setcolwidth, int defcolwidth)$/;"	f	class:DirViewColItems	typeref:typename:void
LoadComboBoxStrings	PropEditor.cpp	/^void PropEditor::LoadComboBoxStrings()$/;"	f	class:PropEditor	typeref:typename:void
LoadComboboxStates	OpenView.cpp	/^void COpenView::LoadComboboxStates()$/;"	f	class:COpenView	typeref:typename:void
LoadDefLists	DirColsDlg.cpp	/^void CDirColsDlg::LoadDefLists()$/;"	f	class:CDirColsDlg	typeref:typename:void
LoadDialogCaption	Common/LanguageSelect.cpp	/^std::wstring CLanguageSelect::LoadDialogCaption(LPCTSTR lpDialogTemplateID) const$/;"	f	class:CLanguageSelect	typeref:typename:std::wstring
LoadDialogCaption	Merge.cpp	/^std::wstring CMergeApp::LoadDialogCaption(LPCTSTR lpDialogTemplateID) const$/;"	f	class:CMergeApp	typeref:typename:std::wstring
LoadFile	HexMergeView.cpp	/^HRESULT CHexMergeView::LoadFile(LPCTSTR path)$/;"	f	class:CHexMergeView	typeref:typename:HRESULT
LoadFile	MergeDoc.cpp	/^int CMergeDoc::LoadFile(CString sFileName, int nBuffer, bool & readOnly, const FileTextEncoding /;"	f	class:CMergeDoc	typeref:typename:int
LoadFileFilterDirPattern	FileFilterHelper.cpp	/^void FileFilterHelper::LoadFileFilterDirPattern(const String& dir, const String& szPattern)$/;"	f	class:FileFilterHelper	typeref:typename:void
LoadFiles	DirTravel.cpp	/^static void LoadFiles(const String& sDir, DirItemArray * dirs, DirItemArray * files)$/;"	f	typeref:typename:void	file:
LoadFilterFile	FileFilterMgr.cpp	/^FileFilter * FileFilterMgr::LoadFilterFile(const String& szFilepath, int & error)$/;"	f	class:FileFilterMgr	typeref:typename:FileFilter *
LoadFilterString	Plugins.cpp	/^void PluginInfo::LoadFilterString()$/;"	f	class:PluginInfo	typeref:typename:void
LoadFromDirectory	FileFilterMgr.cpp	/^void FileFilterMgr::LoadFromDirectory(const String& dir, const String& szPattern, const String& /;"	f	class:FileFilterMgr	typeref:typename:void
LoadFromFile	DiffTextBuffer.cpp	/^int CDiffTextBuffer::LoadFromFile(LPCTSTR pszFileNameInit,$/;"	f	class:CDiffTextBuffer	typeref:typename:int
LoadFromToolBar	Common/BCMenu.cpp	/^bool BCMenu::LoadFromToolBar(UINT nID,UINT nToolBar,int& xoffset)$/;"	f	class:BCMenu	typeref:typename:bool
LoadHiColImageList	MainFrm.cpp	/^static void LoadHiColImageList(UINT nIDResource, UINT nIDResourceMask, int nWidth, int nHeight, /;"	f	typeref:typename:void	file:
LoadImageFromResource	Common/Bitmap.cpp	/^bool LoadImageFromResource(ATL::CImage& image, const TCHAR *pName, const TCHAR *pType)$/;"	f	typeref:typename:bool
LoadLanguageFile	Common/LanguageSelect.cpp	/^bool CLanguageSelect::LoadLanguageFile(LANGID wLangId, bool bShowError \/*= false*\/)$/;"	f	class:CLanguageSelect	typeref:typename:bool
LoadLanguagesThreadProc	PropGeneral.cpp	/^UINT PropGeneral::LoadLanguagesThreadProc(void *pParam)$/;"	f	class:PropGeneral	typeref:typename:UINT
LoadLineFilterList	DirDoc.cpp	/^void CDirDoc::LoadLineFilterList()$/;"	f	class:CDirDoc	typeref:typename:void
LoadLists	DirColsDlg.cpp	/^void CDirColsDlg::LoadLists()$/;"	f	class:CDirColsDlg	typeref:typename:void
LoadMenu	Common/BCMenu.cpp	/^BOOL BCMenu::LoadMenu(LPCTSTR lpszResourceName)$/;"	f	class:BCMenu	typeref:typename:BOOL
LoadMenu	Common/BCMenu.cpp	/^BOOL BCMenu::LoadMenu(int nResource)$/;"	f	class:BCMenu	typeref:typename:BOOL
LoadOneFile	HexMergeDoc.cpp	/^HRESULT CHexMergeDoc::LoadOneFile(int index, LPCTSTR filename, bool readOnly, const String& strD/;"	f	class:CHexMergeDoc	typeref:typename:HRESULT
LoadOneFile	MergeDoc.cpp	/^DWORD CMergeDoc::LoadOneFile(int index, String filename, bool readOnly, const String& strDesc, $/;"	f	class:CMergeDoc	typeref:typename:DWORD
LoadOption	Common/RegOptionsMgr.cpp	/^int CRegOptionsMgr::LoadOption(const String& name)$/;"	f	class:CRegOptionsMgr	typeref:typename:int
LoadOptions	ImgMergeFrm.cpp	/^void CImgMergeFrame::LoadOptions()$/;"	f	class:CImgMergeFrame	typeref:typename:void
LoadPlugin	Plugins.cpp	/^int PluginInfo::LoadPlugin(const String & scriptletFilepath, const wchar_t *transformationEvent)$/;"	f	class:PluginInfo	typeref:typename:int
LoadPluginWrapper	Plugins.cpp	/^static int LoadPluginWrapper(PluginInfo & plugin, const String & scriptletFilepath, const wchar_/;"	f	typeref:typename:int	file:
LoadPosition	Common/CMoveConstraint.cpp	/^CMoveConstraint::LoadPosition(LPCTSTR szKeyName, LPCTSTR szValueName, bool position)$/;"	f	class:prdlg::CMoveConstraint	typeref:typename:void
LoadPosition	Common/CMoveConstraint.cpp	/^CMoveConstraint::LoadPosition(LPCTSTR szValueName, bool position)$/;"	f	class:prdlg::CMoveConstraint	typeref:typename:void
LoadProjectFile	Merge.cpp	/^bool CMergeApp::LoadProjectFile(const String& sProject, ProjectFile &project)$/;"	f	class:CMergeApp	typeref:typename:bool
LoadProjectFile	OpenView.cpp	/^bool COpenView::LoadProjectFile(const String &path)$/;"	f	class:COpenView	typeref:typename:bool
LoadRegistryFromFile	Environment.cpp	/^bool LoadRegistryFromFile(const String& sRegFilePath)$/;"	f	namespace:env	typeref:typename:bool
LoadResString	MergeApp.cpp	/^String LoadResString(unsigned id)$/;"	f	typeref:typename:String
LoadSettings	DirCmpReportDlg.cpp	/^void DirCmpReportDlg::LoadSettings()$/;"	f	class:DirCmpReportDlg	typeref:typename:void
LoadSettings	PatchDlg.cpp	/^void CPatchDlg::LoadSettings()$/;"	f	class:CPatchDlg	typeref:typename:void
LoadState	Common/SuperComboBox.cpp	/^void CSuperComboBox::LoadState(LPCTSTR szRegSubKey)$/;"	f	class:CSuperComboBox	typeref:typename:void
LoadState	Common/sizecbar.cpp	/^void CSizingControlBar::LoadState(LPCTSTR lpszProfileName)$/;"	f	class:CSizingControlBar	typeref:typename:void
LoadString	Common/LanguageSelect.cpp	/^String CLanguageSelect::LoadString(UINT id) const$/;"	f	class:CLanguageSelect	typeref:typename:String
LoadString	Merge.cpp	/^String CMergeApp::LoadString(UINT id) const$/;"	f	class:CMergeApp	typeref:typename:String
LoadSysColorBitmap	Common/BCMenu.cpp	/^HBITMAP BCMenu::LoadSysColorBitmap(int nResourceId)$/;"	f	class:BCMenu	typeref:typename:HBITMAP
LoadTheScriptletList	Plugins.cpp	/^static vector<String>& LoadTheScriptletList()$/;"	f	typeref:typename:vector<String> &	file:
LoadToolbar	Common/BCMenu.cpp	/^bool BCMenu::LoadToolbar(UINT nToolBar)$/;"	f	class:BCMenu	typeref:typename:bool
LoadToolbarImageList	MainFrm.cpp	/^static void LoadToolbarImageList(int imageWidth, UINT nIDResource, UINT nIDResourceMask, bool bG/;"	f	typeref:typename:void	file:
LoadToolbarImages	MainFrm.cpp	/^void CMainFrame::LoadToolbarImages()$/;"	f	class:CMainFrame	typeref:typename:void
LoadToolbars	Common/BCMenu.cpp	/^bool BCMenu::LoadToolbars(const UINT *arID,int n)$/;"	f	class:BCMenu	typeref:typename:bool
LoadValueFromReg	Common/RegOptionsMgr.cpp	/^int CRegOptionsMgr::LoadValueFromReg(HKEY hKey, const String& strName,$/;"	f	class:CRegOptionsMgr	typeref:typename:int
LoadWinMergeDiffsFromDiffUtilsScript	DiffWrapper.cpp	/^CDiffWrapper::LoadWinMergeDiffsFromDiffUtilsScript(struct change * script, const file_data * inf/;"	f	class:CDiffWrapper	typeref:typename:void
LoadWinMergeDiffsFromDiffUtilsScript3	DiffWrapper.cpp	/^CDiffWrapper::LoadWinMergeDiffsFromDiffUtilsScript3($/;"	f	class:CDiffWrapper	typeref:typename:void
LocateTextBuffer	MergeEditView.cpp	/^CCrystalTextBuffer *CMergeEditView::LocateTextBuffer()$/;"	f	class:CMergeEditView	typeref:typename:CCrystalTextBuffer *
LocateTextBuffer	MergeEditView.h	/^	const CCrystalTextBuffer *LocateTextBuffer () const { return const_cast<CMergeEditView *>(this)/;"	f	class:CMergeEditView	typeref:typename:const CCrystalTextBuffer *
Lock	Plugins.h	/^	void Lock()	  { m_nLocks ++; };$/;"	f	class:CScriptsOfThread	typeref:typename:void
LockBar	Common/SplitterWndEx.h	/^	void LockBar(bool bState=true){m_bBarLocked=bState;};$/;"	f	class:CSplitterWndEx	typeref:typename:void
Log	Plugins.cpp	/^	void Log(const TCHAR *szError)$/;"	f	struct:ScriptInfo	typeref:typename:void	file:
LogErrorString	MergeApp.cpp	/^void LogErrorString(const String& sz)$/;"	f	typeref:typename:void
LogErrorStringUTF8	MergeApp.cpp	/^void LogErrorStringUTF8(const std::string& sz)$/;"	f	typeref:typename:void
MAKELONG	markdown.cpp	/^#define MAKELONG(/;"	d	file:
MAKEWORD	markdown.cpp	/^#define MAKEWORD(/;"	d	file:
MAXIMIZE	MergeCmdLineInfo.h	/^		MAXIMIZE = 3,$/;"	e	enum:MergeCmdLineInfo::ShowWindowType
MAX_LINEPIX	LocationView.cpp	/^static const double MAX_LINEPIX = 4.0;$/;"	v	typeref:typename:const double	file:
MAX_PATH	StdAfx.h	/^#define MAX_PATH /;"	d
MAX_PATH_FULL	Common/RegOptionsMgr.cpp	/^#define MAX_PATH_FULL /;"	d	file:
MAX_PATH_FULL	StdAfx.h	/^#define MAX_PATH_FULL /;"	d
MAX_PATH_FULL	paths.h	/^#  define MAX_PATH_FULL /;"	d
MAX_TABSIZE	PropEditor.cpp	/^static const int MAX_TABSIZE = 64;$/;"	v	typeref:typename:const int	file:
MB_CANCELTRYCONTINUE	Common/MessageBoxDialog.h	/^#define MB_CANCELTRYCONTINUE	/;"	d
MB_CONTINUEABORT	Common/MessageBoxDialog.h	/^#define MB_CONTINUEABORT	/;"	d
MB_DEFAULT_CHECKED	Common/MessageBoxDialog.h	/^#define MB_DEFAULT_CHECKED	/;"	d
MB_DEFBUTTON5	Common/MessageBoxDialog.h	/^#define MB_DEFBUTTON5	/;"	d
MB_DEFBUTTON6	Common/MessageBoxDialog.h	/^#define MB_DEFBUTTON6	/;"	d
MB_DONT_ASK_AGAIN	Common/MessageBoxDialog.h	/^#define MB_DONT_ASK_AGAIN	/;"	d
MB_DONT_DISPLAY_AGAIN	Common/MessageBoxDialog.h	/^#define MB_DONT_DISPLAY_AGAIN	/;"	d
MB_IGNOREIGNOREALLCANCEL	Common/MessageBoxDialog.h	/^#define MB_IGNOREIGNOREALLCANCEL	/;"	d
MB_IGNORE_IF_SILENCED	Common/MessageBoxDialog.h	/^#define MB_IGNORE_IF_SILENCED	/;"	d
MB_MODELESS	Common/MessageBoxDialog.h	/^#define MB_MODELESS	/;"	d
MB_NO_SOUND	Common/MessageBoxDialog.h	/^#define MB_NO_SOUND	/;"	d
MB_NO_TO_ALL	Common/MessageBoxDialog.h	/^#define MB_NO_TO_ALL	/;"	d
MB_RIGHT_ALIGN	Common/MessageBoxDialog.h	/^#define MB_RIGHT_ALIGN	/;"	d
MB_SKIPSKIPALLCANCEL	Common/MessageBoxDialog.h	/^#define MB_SKIPSKIPALLCANCEL	/;"	d
MB_YES_TO_ALL	Common/MessageBoxDialog.h	/^#define MB_YES_TO_ALL	/;"	d
MDITABBAR_MAXTITLELENGTH	Common/MDITabBar.h	/^	enum {MDITABBAR_MINTITLELENGTH = 8, MDITABBAR_MAXTITLELENGTH = 64};$/;"	e	enum:CMDITabBar::__anondc6678d90103
MDITABBAR_MINTITLELENGTH	Common/MDITabBar.h	/^	enum {MDITABBAR_MINTITLELENGTH = 8, MDITABBAR_MAXTITLELENGTH = 64};$/;"	e	enum:CMDITabBar::__anondc6678d90103
MENUITEM_ICON	MainFrm.h	/^	struct MENUITEM_ICON$/;"	s	class:CMainFrame
MENU_ALL	MainFrm.h	/^		MENU_ALL = MENU_MAINFRM | MENU_FILECMP | MENU_FOLDERCMP$/;"	e	enum:CMainFrame::__anon18e99e050203
MENU_COUNT	MainFrm.h	/^		MENU_COUNT, \/\/ Add new items before this item$/;"	e	enum:CMainFrame::__anon18e99e050103
MENU_DEFAULT	MainFrm.h	/^		MENU_DEFAULT,$/;"	e	enum:CMainFrame::__anon18e99e050103
MENU_DIRVIEW	MainFrm.h	/^		MENU_DIRVIEW,$/;"	e	enum:CMainFrame::__anon18e99e050103
MENU_FILECMP	MainFrm.h	/^		MENU_FILECMP = 0x000002,$/;"	e	enum:CMainFrame::__anon18e99e050203
MENU_FOLDERCMP	MainFrm.h	/^		MENU_FOLDERCMP = 0x000004,$/;"	e	enum:CMainFrame::__anon18e99e050203
MENU_HEXMERGEVIEW	MainFrm.h	/^		MENU_HEXMERGEVIEW,$/;"	e	enum:CMainFrame::__anon18e99e050103
MENU_IMGMERGEVIEW	MainFrm.h	/^		MENU_IMGMERGEVIEW,$/;"	e	enum:CMainFrame::__anon18e99e050103
MENU_MAINFRM	MainFrm.h	/^		MENU_MAINFRM = 0x000001,$/;"	e	enum:CMainFrame::__anon18e99e050203
MENU_MERGEVIEW	MainFrm.h	/^		MENU_MERGEVIEW,$/;"	e	enum:CMainFrame::__anon18e99e050103
MENU_OPENVIEW	MainFrm.h	/^		MENU_OPENVIEW,$/;"	e	enum:CMainFrame::__anon18e99e050103
MERGE_LINEFLAGS	MergeLineFlags.h	/^enum MERGE_LINEFLAGS : DWORD$/;"	g	typeref:typename:DWORD
MESSAGE_BOX_TIMER	Common/MessageBoxDialog.cpp	/^#define MESSAGE_BOX_TIMER	/;"	d	file:
MINIMIZE	MergeCmdLineInfo.h	/^		MINIMIZE = 6,$/;"	e	enum:MergeCmdLineInfo::ShowWindowType
ML_SIDE	MovedLines.h	/^	enum ML_SIDE$/;"	g	class:MovedLines
MOUSEMOVE	WinIMergeLib.h	/^		MOUSEMOVE, MOUSEWHEEL, CONTEXTMENU,$/;"	e	enum:IImgMergeWindow::EVENT_TYPE
MOUSEWHEEL	WinIMergeLib.h	/^		MOUSEMOVE, MOUSEWHEEL, CONTEXTMENU,$/;"	e	enum:IImgMergeWindow::EVENT_TYPE
MOVE	WinIMergeLib.h	/^		NONE = 0, MOVE, ADJUST_OFFSET$/;"	e	enum:IImgMergeWindow::DRAGGING_MODE
MOVEDLINE_LIST	LocationView.h	/^typedef CList<MovedLine, MovedLine&> MOVEDLINE_LIST;$/;"	t	typeref:typename:CList<MovedLine,MovedLine &>
MSGBOXBTN	Common/MessageBoxDialog.h	/^	} MSGBOXBTN;$/;"	t	class:CMessageBoxDialog	typeref:struct:CMessageBoxDialog::tagMSGBOXBTN
MSG_GENERATE_FLIE_COMPARE_REPORT	StdAfx.h	/^const UINT MSG_GENERATE_FLIE_COMPARE_REPORT = WM_USER + 3;$/;"	v	typeref:typename:const UINT
MSG_STORE_PANESIZES	StdAfx.h	/^const UINT MSG_STORE_PANESIZES = WM_USER + 2;$/;"	v	typeref:typename:const UINT
MSG_UI_UPDATE	StdAfx.h	/^const UINT MSG_UI_UPDATE = WM_USER + 1;$/;"	v	typeref:typename:const UINT
Main	files.h	/^	static DWORD Main(DWORD flr) { return flr & FRESULT_MAIN_MASK; }$/;"	f	class:FileLoadResult	typeref:typename:DWORD
Make	Common/MyCom.h	/^	void Make(VARIANT *_rgvarg)$/;"	f	class:CMyDispParamsUnnamed	typeref:typename:void
Make3wayDiff	Diff3.h	/^size_t Make3wayDiff(std::vector<Element>& diff3, const std::vector<Element>& diff10, const std::/;"	f	typeref:typename:size_t
MakeDirActions	DirView.cpp	/^DirActions CDirView::MakeDirActions(DirActions::method_type func) const$/;"	f	class:CDirView	typeref:typename:DirActions
MakeDirActions	DirView.cpp	/^DirActions CDirView::MakeDirActions(DirActions::method_type2 func) const$/;"	f	class:CDirView	typeref:typename:DirActions
MakeShortSize	DirViewColItems.cpp	/^static String MakeShortSize(int64_t size)$/;"	f	typeref:typename:String	file:
MakeVersionString	Common/VersionInfo.cpp	/^static String MakeVersionString(DWORD hi, DWORD lo)$/;"	f	typeref:typename:String	file:
MapWindowRect	Common/CMoveConstraint.cpp	/^#define MapWindowRect(/;"	d	file:
Mapping	markdown.h	/^		Mapping = 0x40$/;"	e	enum:CMarkdown::FileImage::__anon649c46be0203
MarkForRescan	DirActions.cpp	/^void MarkForRescan(DIFFITEM &di)$/;"	f	typeref:typename:void
Match	FilterList.cpp	/^bool FilterList::Match(const std::string& string, int codepage\/*=CP_UTF8*\/)$/;"	f	class:FilterList	typeref:typename:bool
MeasureItem	Common/BCMenu.cpp	/^void BCMenu::MeasureItem( LPMEASUREITEMSTRUCT lpMIS )$/;"	f	class:BCMenu	typeref:typename:void
Mega	PropCompareFolder.cpp	/^static const int Mega = 1024 * 1024;$/;"	v	typeref:typename:const int	file:
Merge7zFormatMergePluginImpl	Merge7zFormatMergePluginImpl.h	/^	Merge7zFormatMergePluginImpl() : m_plugin(nullptr) {}$/;"	f	struct:Merge7zFormatMergePluginImpl
Merge7zFormatMergePluginImpl	Merge7zFormatMergePluginImpl.h	/^struct Merge7zFormatMergePluginImpl : public Merge7z::Format$/;"	s
Merge7zFormatMergePluginScope	Merge7zFormatMergePluginImpl.h	/^	explicit Merge7zFormatMergePluginScope(const PackingInfo *infoUnpacker) : m_oldPackingInfo(*Mer/;"	f	struct:Merge7zFormatMergePluginScope
Merge7zFormatMergePluginScope	Merge7zFormatMergePluginImpl.h	/^struct Merge7zFormatMergePluginScope$/;"	s
Merge7zFormatRegister	Merge7zFormatRegister.h	/^	explicit Merge7zFormatRegister(Merge7z::Format *(*pfnGuessFormat)(const String& path))$/;"	f	struct:Merge7zFormatRegister
Merge7zFormatRegister	Merge7zFormatRegister.h	/^struct Merge7zFormatRegister$/;"	s
Merge7zFormatShellImpl	Merge7zFormatShellImpl.h	/^struct Merge7zFormatShellImpl : public Merge7z::Format$/;"	s
MergeCmdLineInfo	MergeCmdLineInfo.cpp	/^MergeCmdLineInfo::MergeCmdLineInfo(const TCHAR *q):$/;"	f	class:MergeCmdLineInfo
MergeCmdLineInfo	MergeCmdLineInfo.h	/^class MergeCmdLineInfo$/;"	c
MergeDocClosing	DirDoc.cpp	/^void CDirDoc::MergeDocClosing(IMergeDoc * pMergeDoc)$/;"	f	class:CDirDoc	typeref:typename:void
MergeDocList	MainFrm.h	/^typedef CTypedPtrList<CPtrList, CMergeDoc *> MergeDocList;$/;"	t	typeref:typename:CTypedPtrList<CPtrList,CMergeDoc * >
MergeDocPtrList	DirDoc.h	/^typedef CTypedPtrList<CPtrList, IMergeDoc *> MergeDocPtrList;$/;"	t	typeref:typename:CTypedPtrList<CPtrList,IMergeDoc * >
MergeModeKeyDown	ImgMergeFrm.cpp	/^bool CImgMergeFrame::MergeModeKeyDown(MSG* pMsg)$/;"	f	class:CImgMergeFrame	typeref:typename:bool
MergeModeKeyDown	MergeEditView.cpp	/^bool CMergeEditView::MergeModeKeyDown(MSG* pMsg)$/;"	f	class:CMergeEditView	typeref:typename:bool
MergeResult	MergeDoc.cpp	/^enum MergeResult { NoMergeNeeded, Merged, Conflict };$/;"	g	file:
MergeStatus	DiffWrapper.h	/^	void MergeStatus(const DIFFSTATUS& other)$/;"	f	struct:DIFFSTATUS	typeref:typename:void
MergeStatus	MergeStatusBar.cpp	/^CMergeStatusBar::MergeStatus::MergeStatus()$/;"	f	class:CMergeStatusBar::MergeStatus
MergeStatus	MergeStatusBar.h	/^	class MergeStatus : public IMergeEditStatus$/;"	c	class:CMergeStatusBar
MergeViewHelpLocation	MergeEditView.cpp	/^static TCHAR MergeViewHelpLocation[] = _T("::\/htmlhelp\/Compare_files.html");$/;"	v	typeref:typename:TCHAR[]	file:
Merged	MergeDoc.cpp	/^enum MergeResult { NoMergeNeeded, Merged, Conflict };$/;"	e	enum:MergeResult	file:
Middle	7zCommon.h	/^		Middle = 0x10,$/;"	e	enum:DirItemEnumerator::__anond3316a350103
MiddleCmdFirst	DirView.cpp	/^const UINT MiddleCmdFirst = LeftCmdLast + 1;$/;"	v	typeref:typename:const UINT
MiddleCmdLast	DirView.cpp	/^const UINT MiddleCmdLast = MiddleCmdFirst + (RightCmdLast - LeftCmdFirst) \/ 3;$/;"	v	typeref:typename:const UINT
Middle_element_name	ProjectFile.cpp	/^const char Middle_element_name[] = "middle";$/;"	v	typeref:typename:const char[]
Middle_ro_element_name	ProjectFile.cpp	/^const char Middle_ro_element_name[] = "middle-readonly";$/;"	v	typeref:typename:const char[]
MineBegin	ConflictFileParser.cpp	/^static const TCHAR MineBegin[] = _T("<<<<<<< ");$/;"	v	typeref:typename:const TCHAR[]	file:
ModelessMesssageBoxParam	Common/MessageBoxDialog.cpp	/^struct ModelessMesssageBoxParam$/;"	s	file:
ModelessMesssageBoxThread	Common/MessageBoxDialog.cpp	/^static UINT ModelessMesssageBoxThread(LPVOID lpParam)$/;"	f	typeref:typename:UINT	file:
ModifyODMenu	Common/BCMenu.h	/^#define ModifyODMenu /;"	d
ModifyODMenuA	Common/BCMenu.h	/^	bool ModifyODMenuA(const char * lpstrText,UINT_PTR nID,CImageList *il,int xoffset)$/;"	f	class:BCMenu	typeref:typename:bool
ModifyODMenuA	Common/BCMenu.h	/^	bool ModifyODMenuA(const char * lpstrText,UINT_PTR nID,int nIconNormal)$/;"	f	class:BCMenu	typeref:typename:bool
ModifyODMenuA	Common/BCMenu.h	/^	bool ModifyODMenuA(const char *lpstrText,UINT_PTR nID,CBitmap *bmp)$/;"	f	class:BCMenu	typeref:typename:bool
ModifyODMenuA	Common/BCMenu.h	/^	bool ModifyODMenuA(const char *lpstrText,const char *OptionText,$/;"	f	class:BCMenu	typeref:typename:bool
ModifyODMenuW	Common/BCMenu.cpp	/^bool BCMenu::ModifyODMenuW(wchar_t *lpstrText,UINT_PTR nID,CBitmap *bmp)$/;"	f	class:BCMenu	typeref:typename:bool
ModifyODMenuW	Common/BCMenu.cpp	/^bool BCMenu::ModifyODMenuW(wchar_t *lpstrText,UINT_PTR nID,CImageList *il,int xoffset)$/;"	f	class:BCMenu	typeref:typename:bool
ModifyODMenuW	Common/BCMenu.cpp	/^bool BCMenu::ModifyODMenuW(wchar_t *lpstrText,UINT_PTR nID,int nIconNormal)$/;"	f	class:BCMenu	typeref:typename:bool
ModifyODMenuW	Common/BCMenu.cpp	/^bool BCMenu::ModifyODMenuW(wchar_t *lpstrText,wchar_t *OptionText,$/;"	f	class:BCMenu	typeref:typename:bool
Move	Common/scbarg.h	/^    void Move(CPoint ptTo) {ptOrg = ptTo; };$/;"	f	class:CSCBButton	typeref:typename:void
Move	UniMarkdownFile.cpp	/^void UniMarkdownFile::Move()$/;"	f	class:UniMarkdownFile	typeref:typename:void
Move	markdown.cpp	/^CMarkdown &CMarkdown::Move()$/;"	f	class:CMarkdown	typeref:typename:CMarkdown &
Move	markdown.cpp	/^CMarkdown &CMarkdown::Move(const char *name)$/;"	f	class:CMarkdown	typeref:typename:CMarkdown &
MoveColumn	DirViewColItems.cpp	/^void DirViewColItems::MoveColumn(int psrc, int pdest)$/;"	f	class:DirViewColItems	typeref:typename:void
MoveFocus	DirView.cpp	/^void CDirView::MoveFocus(int currentInd, int i, int selCount)$/;"	f	class:CDirView	typeref:typename:void
MoveItem	DirColsDlg.cpp	/^void CDirColsDlg::MoveItem(int index, int newIndex)$/;"	f	class:CDirColsDlg	typeref:typename:void
MoveOnLoad	HexMergeDoc.cpp	/^void CHexMergeDoc::MoveOnLoad(int nPane, int)$/;"	f	class:CHexMergeDoc	typeref:typename:void
MoveOnLoad	ImgMergeFrm.cpp	/^void CImgMergeFrame::MoveOnLoad(int nPane, int)$/;"	f	class:CImgMergeFrame	typeref:typename:void
MoveOnLoad	MergeDoc.cpp	/^void CMergeDoc::MoveOnLoad(int nPane, int nLineIndex)$/;"	f	class:CMergeDoc	typeref:typename:void
MoveSelectedItems	DirColsDlg.cpp	/^void CDirColsDlg::MoveSelectedItems(bool bUp)$/;"	f	class:CDirColsDlg	typeref:typename:void
MoveTo	DirActions.h	/^	FileActionScript *MoveTo(FileActionScript *pscript, const std::pair<int, const DIFFITEM *>& it)/;"	f	struct:DirActions	typeref:typename:FileActionScript *
MoveToNextDiff	DirDoc.cpp	/^void CDirDoc::MoveToNextDiff(IMergeDoc *pMergeDoc)$/;"	f	class:CDirDoc	typeref:typename:void
MoveToNextDiff	DirView.cpp	/^void CDirView::MoveToNextDiff()$/;"	f	class:CDirView	typeref:typename:void
MoveToPrevDiff	DirDoc.cpp	/^void CDirDoc::MoveToPrevDiff(IMergeDoc *pMergeDoc)$/;"	f	class:CDirDoc	typeref:typename:void
MoveToPrevDiff	DirView.cpp	/^void CDirView::MoveToPrevDiff()$/;"	f	class:CDirView	typeref:typename:void
MoveableToNextDiff	DirDoc.cpp	/^bool CDirDoc::MoveableToNextDiff()$/;"	f	class:CDirDoc	typeref:typename:bool
MoveableToPrevDiff	DirDoc.cpp	/^bool CDirDoc::MoveableToPrevDiff()$/;"	f	class:CDirDoc	typeref:typename:bool
MovedLine	LocationView.h	/^struct MovedLine$/;"	s
MovedLines	MovedLines.h	/^class MovedLines$/;"	c
MovedLinesMap	MovedLines.h	/^	typedef std::map<int, int> MovedLinesMap;$/;"	t	class:MovedLines	typeref:typename:std::map<int,int>
MultiStepCompressArchive	7zCommon.cpp	/^bool DirItemEnumerator::MultiStepCompressArchive(LPCTSTR path)$/;"	f	class:DirItemEnumerator	typeref:typename:bool
MyCopy	Common/MyCom.h	/^  BSTR MyCopy() const$/;"	f	class:CMyComBSTR	typeref:typename:BSTR
MyGetDibBits	Common/BCMenu.cpp	/^static pBGR MyGetDibBits(HDC hdcSrc, HBITMAP hBmpSrc, int nx, int ny)$/;"	f	typeref:typename:pBGR	file:
MySHCreateEnumShellItemsFromPath	Merge7zFormatShellImpl.cpp	/^static HRESULT MySHCreateEnumShellItemsFromPath(PCWSTR pszPath, IEnumShellItems **ppEnumShellIte/;"	f	typeref:typename:HRESULT	file:
MySHCreateShellItemFromPath	Merge7zFormatShellImpl.cpp	/^static HRESULT MySHCreateShellItemFromPath(PCWSTR pszPath, IShellItem **ppShellItem)$/;"	f	typeref:typename:HRESULT	file:
MySetDibBits	Common/BCMenu.cpp	/^static void MySetDibBits(HDC hdcDst, HBITMAP hBmpDst, pBGR pdstBGR, int nx, int ny)$/;"	f	typeref:typename:void	file:
NCHITTEST_RESULT	Common/scbarg.h	/^#define NCHITTEST_RESULT /;"	d
NCHITTEST_RESULT	Common/sizecbar.h	/^#define NCHITTEST_RESULT /;"	d
NC_	MergeApp.h	/^#define NC_(/;"	d
NEEDSCAN	DiffItem.h	/^		SCANFLAGS=0x100000U, NEEDSCAN=0x100000U,$/;"	e	enum:DIFFCODE::__anon902ab4a30103
NEED_MORE_0	CompareEngines/ByteComparator.h	/^		NEED_MORE_0, \/**< First buffer needs more data *\/$/;"	e	enum:CompareEngines::ByteComparator::__anon9fdbae860103
NEED_MORE_1	CompareEngines/ByteComparator.h	/^		NEED_MORE_1, \/**< Second buffer needs more data *\/$/;"	e	enum:CompareEngines::ByteComparator::__anon9fdbae860103
NEED_MORE_BOTH	CompareEngines/ByteComparator.h	/^		NEED_MORE_BOTH, \/**< Both buffers need more data *\/$/;"	e	enum:CompareEngines::ByteComparator::__anon9fdbae860103
NEW	diffutils/src/diff.h	/^  NEW,$/;"	e	enum:line_class
NO	MergeApp.h	/^		NO = 4,$/;"	e	enum:AppMsgBox::__anon8063e6ec0103
NOCMP	DiffItem.h	/^		COMPAREFLAGS=0x7000U, NOCMP=0x0000U, SAME=0x1000U, DIFF=0x2000U, CMPERR=0x3000U, CMPABORT=0x40/;"	e	enum:DIFFCODE::__anon902ab4a30103
NOMINMAX	Common/RegKey.cpp	/^#define NOMINMAX$/;"	d	file:
NOMINMAX	Common/multiformatText.cpp	/^#define NOMINMAX$/;"	d	file:
NOMINMAX	DiffWrapper.cpp	/^#define NOMINMAX$/;"	d	file:
NOMINMAX	stringdiffs.cpp	/^#define NOMINMAX$/;"	d	file:
NONAMELESSUNION	Common/lwdisp.c	/^#define NONAMELESSUNION	/;"	d	file:
NONE	Common/unicoder.h	/^	NONE = 0,  \/**< No unicode. *\/$/;"	e	enum:ucr::UNICODESET
NONE	WinIMergeLib.h	/^		NONE = 0, MOVE, ADJUST_OFFSET$/;"	e	enum:IImgMergeWindow::DRAGGING_MODE
NONE	diffutils/src/io.c	/^  NONE = 0,  \/**< No unicode. *\/$/;"	e	enum:UNICODESET	file:
N_	MergeApp.h	/^#define N_(/;"	d
Name	7zCommon.h	/^		String Name;$/;"	m	struct:DirItemEnumerator::Envelope	typeref:typename:String
Name	7zCommon.h	/^	LPCTSTR Name;$/;"	m	class:SingleItemEnumerator	typeref:typename:LPCTSTR
NameColumn	DirView.cpp	/^void CDirView::NameColumn(const DirColInfo *col, int subitem)$/;"	f	class:CDirView	typeref:typename:void
NcCalcClient	Common/scbarg.cpp	/^void CSizingControlBarG::NcCalcClient(LPRECT pRc, UINT nDockBarID)$/;"	f	class:CSizingControlBarG	typeref:typename:void
NcCalcClient	Common/sizecbar.cpp	/^void CSizingControlBar::NcCalcClient(LPRECT pRc, UINT nDockBarID)$/;"	f	class:CSizingControlBar	typeref:typename:void
NcPaintGripper	Common/scbarcf.cpp	/^void CSizingControlBarCF::NcPaintGripper(CDC* pDC, CRect rcClient)$/;"	f	class:CSizingControlBarCF	typeref:typename:void
NcPaintGripper	Common/scbarg.cpp	/^void CSizingControlBarG::NcPaintGripper(CDC* pDC, CRect rcClient)$/;"	f	class:CSizingControlBarG	typeref:typename:void
NcPaintGripper	Common/sizecbar.cpp	/^void CSizingControlBar::NcPaintGripper(CDC* pDC, CRect rcClient)$/;"	f	class:CSizingControlBar	typeref:typename:void
NegotiateSpace	Common/sizecbar.cpp	/^bool CSizingControlBar::NegotiateSpace(int nLengthTotal, bool bHorz)$/;"	f	class:CSizingControlBar	typeref:typename:bool
Never	DirActions.h	/^		Never,$/;"	e	enum:AllowUpwardDirectory::ReturnCode
NewDefaultMenu	MainFrm.cpp	/^HMENU CMainFrame::NewDefaultMenu(int ID \/*=0*\/)$/;"	f	class:CMainFrame	typeref:typename:HMENU
NewDirViewMenu	MainFrm.cpp	/^HMENU CMainFrame::NewDirViewMenu()$/;"	f	class:CMainFrame	typeref:typename:HMENU
NewHexMergeViewMenu	MainFrm.cpp	/^HMENU CMainFrame::NewHexMergeViewMenu()$/;"	f	class:CMainFrame	typeref:typename:HMENU
NewImgMergeViewMenu	MainFrm.cpp	/^HMENU CMainFrame::NewImgMergeViewMenu()$/;"	f	class:CMainFrame	typeref:typename:HMENU
NewMenu	MainFrm.cpp	/^HMENU CMainFrame::NewMenu(int view, int ID)$/;"	f	class:CMainFrame	typeref:typename:HMENU
NewMergeViewMenu	MainFrm.cpp	/^HMENU CMainFrame::NewMergeViewMenu()$/;"	f	class:CMainFrame	typeref:typename:HMENU
NewODMenu	Common/BCMenu.cpp	/^BCMenuData *BCMenu::NewODMenu(UINT pos,UINT nFlags,UINT_PTR nID,CString string)$/;"	f	class:BCMenu	typeref:typename:BCMenuData *
NewOpenViewMenu	MainFrm.cpp	/^HMENU CMainFrame::NewOpenViewMenu()$/;"	f	class:CMainFrame	typeref:typename:HMENU
Next	7zCommon.cpp	/^const DIFFITEM &DirItemEnumerator::Next()$/;"	f	class:DirItemEnumerator	typeref:typename:const DIFFITEM &
NextSignificant3wayDiff	DiffList.cpp	/^int DiffList::NextSignificant3wayDiff(int nDiff, int nDiffType) const$/;"	f	class:DiffList	typeref:typename:int
NextSignificant3wayDiffFromLine	DiffList.cpp	/^int DiffList::NextSignificant3wayDiffFromLine(int nLine, int nDiffType) const$/;"	f	class:DiffList	typeref:typename:int
NextSignificantDiff	DiffList.h	/^inline int DiffList::NextSignificantDiff(int nDiff) const$/;"	f	class:DiffList	typeref:typename:int
NextSignificantDiffFromLine	DiffList.cpp	/^int DiffList::NextSignificantDiffFromLine(int nLine) const$/;"	f	class:DiffList	typeref:typename:int
No	DirActions.h	/^		No,$/;"	e	enum:AllowUpwardDirectory::ReturnCode
NoMergeNeeded	MergeDoc.cpp	/^enum MergeResult { NoMergeNeeded, Merged, Conflict };$/;"	e	enum:MergeResult	file:
NormalizeCodepage	Common/unicoder.cpp	/^static int NormalizeCodepage(int cp)$/;"	f	namespace:ucr	typeref:typename:int	file:
NormalizePath	PathContext.cpp	/^void PathInfo::NormalizePath()$/;"	f	class:PathInfo	typeref:typename:void
NumBitmapColors	Common/BCMenu.cpp	/^WORD BCMenu::NumBitmapColors(LPBITMAPINFOHEADER lpBitmap)$/;"	f	class:BCMenu	typeref:typename:WORD
NumCustomColors	PropSyntaxColors.h	/^const int NumCustomColors = 16;$/;"	v	typeref:typename:const int
NumToLocaleStr	locality.cpp	/^String NumToLocaleStr(int n)$/;"	f	namespace:locality	typeref:typename:String
NumToLocaleStr	locality.cpp	/^String NumToLocaleStr(int64_t n)$/;"	f	namespace:locality	typeref:typename:String
NumToStr	DirActions.cpp	/^String NumToStr(int n)$/;"	f	typeref:typename:String
OK	MergeApp.h	/^		OK = 2,$/;"	e	enum:AppMsgBox::__anon8063e6ec0103
OLD	diffutils/src/diff.h	/^  OLD,$/;"	e	enum:line_class
OP	OptionsDef.cpp	/^#define OP(/;"	d	file:
OP	OptionsDef.h	/^#define OP(/;"	d
OPEN	WinIMergeLib.h	/^		REFRESH, SCROLLTODIFF, OPEN$/;"	e	enum:IImgMergeWindow::EVENT_TYPE
OPERATION	PropColors.h	/^	typedef enum { SET_DEFAULTS, WRITE_OPTIONS, READ_OPTIONS } OPERATION;$/;"	t	class:PropMergeColors	typeref:enum:PropMergeColors::__anonf8c04cae0203
OPERATION	PropDirColors.h	/^	typedef enum { SET_DEFAULTS, WRITE_OPTIONS, READ_OPTIONS } OPERATION;$/;"	t	class:PropDirColors	typeref:enum:PropDirColors::__anon04e0652d0203
OPERATION	PropMarkerColors.h	/^	typedef enum { SET_DEFAULTS, READ_OPTIONS, LOAD_COLORS } OPERATION;$/;"	t	class:PropMarkerColors	typeref:enum:PropMarkerColors::__anon05ae34500203
OPERATION	PropTextColors.h	/^	typedef enum { SET_DEFAULTS, READ_OPTIONS, LOAD_COLORS } OPERATION;$/;"	t	class:PropTextColors	typeref:enum:PropTextColors::__anon432a02130203
OPT_ERR	Common/OptionsMgr.h	/^		OPT_ERR				= 1, \/**< General error. *\/$/;"	e	enum:COption::__anoneb3987a50103
OPT_NOTFOUND	Common/OptionsMgr.h	/^		OPT_NOTFOUND		= 4, \/**< Option name not found. *\/$/;"	e	enum:COption::__anoneb3987a50103
OPT_OK	Common/OptionsMgr.h	/^		OPT_OK				= 0, \/**< All good. *\/$/;"	e	enum:COption::__anoneb3987a50103
OPT_UNKNOWN_TYPE	Common/OptionsMgr.h	/^		OPT_UNKNOWN_TYPE	= 3, \/**< Given option type is not known. *\/$/;"	e	enum:COption::__anoneb3987a50103
OPT_WRONG_TYPE	Common/OptionsMgr.h	/^		OPT_WRONG_TYPE		= 2, \/**< Option type was wrong. *\/$/;"	e	enum:COption::__anoneb3987a50103
OP_1STONLY	DiffList.h	/^	OP_1STONLY,$/;"	e	enum:OP_TYPE
OP_2NDONLY	DiffList.h	/^	OP_2NDONLY,$/;"	e	enum:OP_TYPE
OP_3RDONLY	DiffList.h	/^	OP_3RDONLY,$/;"	e	enum:OP_TYPE
OP_DIFF	DiffList.h	/^	OP_DIFF,$/;"	e	enum:OP_TYPE
OP_NONE	DiffList.h	/^	OP_NONE = 0,$/;"	e	enum:OP_TYPE
OP_TRIVIAL	DiffList.h	/^	OP_TRIVIAL$/;"	e	enum:OP_TYPE
OP_TYPE	DiffList.h	/^enum OP_TYPE$/;"	g
OUTPUT_CONTEXT	diffutils/src/diff.h	/^  OUTPUT_CONTEXT = 1,$/;"	e	enum:output_style
OUTPUT_HTML	diffutils/src/diff.h	/^  OUTPUT_HTML = 8$/;"	e	enum:output_style
OUTPUT_NORMAL	diffutils/src/diff.h	/^  OUTPUT_NORMAL = 0,$/;"	e	enum:output_style
OUTPUT_UNIFIED	diffutils/src/diff.h	/^  OUTPUT_UNIFIED = 2,$/;"	e	enum:output_style
OVERLAY_ALPHABLEND	WinIMergeLib.h	/^		OVERLAY_NONE = 0, OVERLAY_XOR, OVERLAY_ALPHABLEND, OVERLAY_ALPHABLEND_ANIM$/;"	e	enum:IImgMergeWindow::OVERLAY_MODE
OVERLAY_ALPHABLEND_ANIM	WinIMergeLib.h	/^		OVERLAY_NONE = 0, OVERLAY_XOR, OVERLAY_ALPHABLEND, OVERLAY_ALPHABLEND_ANIM$/;"	e	enum:IImgMergeWindow::OVERLAY_MODE
OVERLAY_MODE	WinIMergeLib.h	/^	enum OVERLAY_MODE {$/;"	g	struct:IImgMergeWindow
OVERLAY_NONE	WinIMergeLib.h	/^		OVERLAY_NONE = 0, OVERLAY_XOR, OVERLAY_ALPHABLEND, OVERLAY_ALPHABLEND_ANIM$/;"	e	enum:IImgMergeWindow::OVERLAY_MODE
OVERLAY_XOR	WinIMergeLib.h	/^		OVERLAY_NONE = 0, OVERLAY_XOR, OVERLAY_ALPHABLEND, OVERLAY_ALPHABLEND_ANIM$/;"	e	enum:IImgMergeWindow::OVERLAY_MODE
O_RDONLY	diffutils/src/system.h	/^#define O_RDONLY /;"	d
Octets	markdown.h	/^		Octets = 0x02 + 0x04,$/;"	e	enum:CMarkdown::FileImage::__anon649c46be0203
OnActivate	OpenView.cpp	/^void COpenView::OnActivate(UINT nState, CWnd* pWndOther, BOOL bMinimized)$/;"	f	class:COpenView	typeref:typename:void
OnActivateApp	MainFrm.cpp	/^void CMainFrame::OnActivateApp(BOOL bActive, DWORD dwThreadID)$/;"	f	class:CMainFrame	typeref:typename:void
OnActivateView	HexMergeView.cpp	/^void CHexMergeView::OnActivateView(BOOL bActivate, CView* pActivateView, CView* pDeactiveView)$/;"	f	class:CHexMergeView	typeref:typename:void
OnActivateView	MergeEditView.cpp	/^void CMergeEditView::OnActivateView(BOOL bActivate, CView* pActivateView, CView* pDeactiveView)$/;"	f	class:CMergeEditView	typeref:typename:void
OnAddSyncPoint	MergeEditView.cpp	/^void CMergeEditView::OnAddSyncPoint()$/;"	f	class:CMergeEditView	typeref:typename:void
OnAddToExplorer	PropShell.cpp	/^void PropShell::OnAddToExplorer()$/;"	f	class:PropShell	typeref:typename:void
OnAffectsLeftBtnClicked	LoadSaveCodepageDlg.cpp	/^void CLoadSaveCodepageDlg::OnAffectsLeftBtnClicked()$/;"	f	class:CLoadSaveCodepageDlg	typeref:typename:void
OnAffectsMiddleBtnClicked	LoadSaveCodepageDlg.cpp	/^void CLoadSaveCodepageDlg::OnAffectsMiddleBtnClicked()$/;"	f	class:CLoadSaveCodepageDlg	typeref:typename:void
OnAffectsRightBtnClicked	LoadSaveCodepageDlg.cpp	/^void CLoadSaveCodepageDlg::OnAffectsRightBtnClicked()$/;"	f	class:CLoadSaveCodepageDlg	typeref:typename:void
OnAllLeft	HexMergeDoc.cpp	/^void CHexMergeDoc::OnAllLeft()$/;"	f	class:CHexMergeDoc	typeref:typename:void
OnAllLeft	ImgMergeFrm.cpp	/^void CImgMergeFrame::OnAllLeft()$/;"	f	class:CImgMergeFrame	typeref:typename:void
OnAllLeft	MergeEditView.cpp	/^void CMergeEditView::OnAllLeft()$/;"	f	class:CMergeEditView	typeref:typename:void
OnAllRight	HexMergeDoc.cpp	/^void CHexMergeDoc::OnAllRight()$/;"	f	class:CHexMergeDoc	typeref:typename:void
OnAllRight	ImgMergeFrm.cpp	/^void CImgMergeFrame::OnAllRight()$/;"	f	class:CImgMergeFrame	typeref:typename:void
OnAllRight	MergeEditView.cpp	/^void CMergeEditView::OnAllRight()$/;"	f	class:CMergeEditView	typeref:typename:void
OnAppAbout	Merge.cpp	/^void CMergeApp::OnAppAbout()$/;"	f	class:CMergeApp	typeref:typename:void
OnAutoMerge	ImgMergeFrm.cpp	/^void CImgMergeFrame::OnAutoMerge()$/;"	f	class:CImgMergeFrame	typeref:typename:void
OnAutoMerge	MergeEditView.cpp	/^void CMergeEditView::OnAutoMerge()$/;"	f	class:CMergeEditView	typeref:typename:void
OnBeginDrag	DirView.cpp	/^void CDirView::OnBeginDrag(NMHDR* pNMHDR, LRESULT* pResult) $/;"	f	class:CDirView	typeref:typename:void
OnBeginLabelEdit	DirView.cpp	/^afx_msg void CDirView::OnBeginLabelEdit(NMHDR* pNMHDR, LRESULT* pResult)$/;"	f	class:CDirView	typeref:typename:afx_msg void
OnBeginPrinting	MergeEditView.cpp	/^void CMergeEditView::OnBeginPrinting(CDC * pDC, CPrintInfo * pInfo)$/;"	f	class:CMergeEditView	typeref:typename:void
OnBinaryMode	PropCompareBinary.cpp	/^void PropCompareBinary::OnBinaryMode()$/;"	f	class:PropCompareBinary	typeref:typename:void
OnBnClicked	DirSelectFilesDlg.cpp	/^void DirSelectFilesDlg::Impl::OnBnClicked(UINT id)$/;"	f	class:DirSelectFilesDlg::Impl	typeref:typename:void
OnBnClickedBackupBrowse	PropBackups.cpp	/^void PropBackups::OnBnClickedBackupBrowse()$/;"	f	class:PropBackups	typeref:typename:void
OnBnClickedBoldButton	PropSyntaxColors.cpp	/^void PropSyntaxColors::OnBnClickedBoldButton()$/;"	f	class:PropSyntaxColors	typeref:typename:void
OnBnClickedComparisonContinue	DirView.cpp	/^void CDirView::OnBnClickedComparisonContinue()$/;"	f	class:CDirView	typeref:typename:void
OnBnClickedComparisonPause	DirView.cpp	/^void CDirView::OnBnClickedComparisonPause()$/;"	f	class:CDirView	typeref:typename:void
OnBnClickedComparisonStop	DirView.cpp	/^void CDirView::OnBnClickedComparisonStop()$/;"	f	class:CDirView	typeref:typename:void
OnBnClickedEcolor	PropSyntaxColors.cpp	/^void PropSyntaxColors::OnBnClickedEcolor()$/;"	f	class:PropSyntaxColors	typeref:typename:void
OnBnClickedEcolorsBdefaults	PropSyntaxColors.cpp	/^void PropSyntaxColors::OnBnClickedEcolorsBdefaults()$/;"	f	class:PropSyntaxColors	typeref:typename:void
OnBnClickedFileEncoding	MergeDoc.cpp	/^void CMergeDoc::OnBnClickedFileEncoding()$/;"	f	class:CMergeDoc	typeref:typename:void
OnBnClickedFileFiltesDefaults	PluginsListDlg.cpp	/^void PluginsListDlg::OnBnClickedFileFiltesDefaults()$/;"	f	class:PluginsListDlg	typeref:typename:void
OnBnClickedFilterfileDelete	FileFiltersDlg.cpp	/^void FileFiltersDlg::OnBnClickedFilterfileDelete()$/;"	f	class:FileFiltersDlg	typeref:typename:void
OnBnClickedFilterfileInstall	FileFiltersDlg.cpp	/^void FileFiltersDlg::OnBnClickedFilterfileInstall()$/;"	f	class:FileFiltersDlg	typeref:typename:void
OnBnClickedFilterfileNewbutton	FileFiltersDlg.cpp	/^void FileFiltersDlg::OnBnClickedFilterfileNewbutton()$/;"	f	class:FileFiltersDlg	typeref:typename:void
OnBnClickedFilterfileTestButton	FileFiltersDlg.cpp	/^void FileFiltersDlg::OnBnClickedFilterfileTestButton()$/;"	f	class:FileFiltersDlg	typeref:typename:void
OnBnClickedHexView	MergeDoc.cpp	/^void CMergeDoc::OnBnClickedHexView()$/;"	f	class:CMergeDoc	typeref:typename:void
OnBnClickedLfilterAddBtn	LineFiltersDlg.cpp	/^void LineFiltersDlg::OnBnClickedLfilterAddBtn()$/;"	f	class:LineFiltersDlg	typeref:typename:void
OnBnClickedLfilterEditbtn	LineFiltersDlg.cpp	/^void LineFiltersDlg::OnBnClickedLfilterEditbtn()$/;"	f	class:LineFiltersDlg	typeref:typename:void
OnBnClickedLfilterRemovebtn	LineFiltersDlg.cpp	/^void LineFiltersDlg::OnBnClickedLfilterRemovebtn()$/;"	f	class:LineFiltersDlg	typeref:typename:void
OnBnClickedNo	ConfirmFolderCopyDlg.cpp	/^void ConfirmFolderCopyDlg::OnBnClickedNo()$/;"	f	class:ConfirmFolderCopyDlg	typeref:typename:void
OnBnClickedOk	PluginsListDlg.cpp	/^void PluginsListDlg::OnBnClickedOk()$/;"	f	class:PluginsListDlg	typeref:typename:void
OnBnClickedOpenContributors	AboutDlg.cpp	/^void CAboutDlg::Impl::OnBnClickedOpenContributors()$/;"	f	class:CAboutDlg::Impl	typeref:typename:void
OnBnClickedPlugin	MergeDoc.cpp	/^void CMergeDoc::OnBnClickedPlugin()$/;"	f	class:CMergeDoc	typeref:typename:void
OnBnClickedPluginSettings	PluginsListDlg.cpp	/^void PluginsListDlg::OnBnClickedPluginSettings()$/;"	f	class:PluginsListDlg	typeref:typename:void
OnBnClickedRecursCheck	PropCompareFolder.cpp	/^void PropCompareFolder::OnBnClickedRecursCheck()$/;"	f	class:PropCompareFolder	typeref:typename:void
OnBnClickedResetButton	DirSelectFilesDlg.cpp	/^void DirSelectFilesDlg::Impl::OnBnClickedResetButton()$/;"	f	class:DirSelectFilesDlg::Impl	typeref:typename:void
OnBnClickedWWW	AboutDlg.cpp	/^void CAboutDlg::Impl::OnBnClickedWWW(NMHDR *pNMHDR, LRESULT *pResult)$/;"	f	class:CAboutDlg::Impl	typeref:typename:void
OnBnClickedYes	ConfirmFolderCopyDlg.cpp	/^void ConfirmFolderCopyDlg::OnBnClickedYes()$/;"	f	class:ConfirmFolderCopyDlg	typeref:typename:void
OnBrowseEditor	PropRegistry.cpp	/^void PropRegistry::OnBrowseEditor()$/;"	f	class:PropRegistry	typeref:typename:void
OnBrowseFilterPath	PropRegistry.cpp	/^void PropRegistry::OnBrowseFilterPath()$/;"	f	class:PropRegistry	typeref:typename:void
OnBrowseTmpFolder	PropRegistry.cpp	/^void PropRegistry::OnBrowseTmpFolder()$/;"	f	class:PropRegistry	typeref:typename:void
OnBtnClickReportBrowse	DirCmpReportDlg.cpp	/^void DirCmpReportDlg::OnBtnClickReportBrowse()$/;"	f	class:DirCmpReportDlg	typeref:typename:void
OnBtnClickReportBrowse	DirFilterDlg.cpp	/^void DirFilterDlg::OnBtnClickReportBrowse()$/;"	f	class:DirFilterDlg	typeref:typename:void
OnBtnDblclickCopyClipboard	DirCmpReportDlg.cpp	/^void DirCmpReportDlg::OnBtnDblclickCopyClipboard()$/;"	f	class:DirCmpReportDlg	typeref:typename:void
OnBtnDblclickCopyClipboard	DirFilterDlg.cpp	/^void DirFilterDlg::OnBtnDblclickCopyClipboard()$/;"	f	class:DirFilterDlg	typeref:typename:void
OnButton	OpenView.cpp	/^void COpenView::OnButton(int index)$/;"	f	class:COpenView	typeref:typename:void
OnCancel	OpenView.cpp	/^void COpenView::OnCancel()$/;"	f	class:COpenView	typeref:typename:void
OnCaptureChanged	Common/sizecbar.cpp	/^void CSizingControlBar::OnCaptureChanged(CWnd *pWnd)$/;"	f	class:CSizingControlBar	typeref:typename:void
OnCbnSelchangeComparemethodcombo	PropCompareFolder.cpp	/^void PropCompareFolder::OnCbnSelchangeComparemethodcombo()$/;"	f	class:PropCompareFolder	typeref:typename:void
OnCbnSelchangeDiffAlgorithm	PropCompare.cpp	/^void PropCompare::OnCbnSelchangeDiffAlgorithm()$/;"	f	class:PropCompare	typeref:typename:void
OnCbnSelchangeReportStylecombo	DirCmpReportDlg.cpp	/^void DirCmpReportDlg::OnCbnSelchangeReportStylecombo()$/;"	f	class:DirCmpReportDlg	typeref:typename:void
OnChangePane	MergeEditView.cpp	/^void CMergeEditView::OnChangePane()$/;"	f	class:CMergeEditView	typeref:typename:void
OnChangeScheme	MergeEditView.cpp	/^void CMergeEditView::OnChangeScheme(UINT nID)$/;"	f	class:CMergeEditView	typeref:typename:void
OnChar	DirView.cpp	/^void CDirView::OnChar(UINT nChar, UINT nRepCnt, UINT nFlags)$/;"	f	class:CDirView	typeref:typename:void
OnCharacterSet	PropCompareBinary.cpp	/^void PropCompareBinary::OnCharacterSet()$/;"	f	class:PropCompareBinary	typeref:typename:void
OnChildNotify	DirView.cpp	/^BOOL CDirView::OnChildNotify(UINT uMsg, WPARAM wParam, LPARAM lParam, LRESULT* pResult)$/;"	f	class:CDirView	typeref:typename:BOOL
OnChildPaneEvent	ImgMergeFrm.cpp	/^void CImgMergeFrame::OnChildPaneEvent(const IImgMergeWindow::Event& evt)$/;"	f	class:CImgMergeFrame	typeref:typename:void
OnClearSyncPoints	MergeEditView.cpp	/^void CMergeEditView::OnClearSyncPoints()$/;"	f	class:CMergeEditView	typeref:typename:void
OnClick	DirView.cpp	/^void CDirView::OnClick(NMHDR* pNMHDR, LRESULT* pResult)$/;"	f	class:CDirView	typeref:typename:void
OnClose	Common/sizecbar.cpp	/^void CSizingControlBar::OnClose()$/;"	f	class:CSizingControlBar	typeref:typename:void
OnClose	DirFrame.cpp	/^void CDirFrame::OnClose() $/;"	f	class:CDirFrame	typeref:typename:void
OnClose	ImgMergeFrm.cpp	/^void CImgMergeFrame::OnClose() $/;"	f	class:CImgMergeFrame	typeref:typename:void
OnClose	LocationView.cpp	/^void CLocationView::OnClose()$/;"	f	class:CLocationView	typeref:typename:void
OnClose	MainFrm.cpp	/^void CMainFrame::OnClose()$/;"	f	class:CMainFrame	typeref:typename:void
OnClose	MergeEditFrm.cpp	/^void CMergeEditFrame::OnClose() $/;"	f	class:CMergeEditFrame	typeref:typename:void
OnCmdMsg	Common/MessageBoxDialog.cpp	/^BOOL CMessageBoxDialog::OnCmdMsg ( UINT nID, int nCode, void* pExtra,$/;"	f	class:CMessageBoxDialog	typeref:typename:BOOL
OnColorSchemeButton	PropColors.cpp	/^void PropMergeColors::OnColorSchemeButton()$/;"	f	class:PropMergeColors	typeref:typename:void
OnColumnClick	DirView.cpp	/^void CDirView::OnColumnClick(NMHDR *pNMHDR, LRESULT *pResult)$/;"	f	class:CDirView	typeref:typename:void
OnCompareMethod	MainFrm.cpp	/^void CMainFrame::OnCompareMethod(UINT nID)$/;"	f	class:CMainFrame	typeref:typename:void
OnContextMenu	Common/MDITabBar.cpp	/^void CMDITabBar::OnContextMenu(CWnd *pWnd, CPoint point)$/;"	f	class:CMDITabBar	typeref:typename:void
OnContextMenu	DirView.cpp	/^void CDirView::OnContextMenu(CWnd*, CPoint point)$/;"	f	class:CDirView	typeref:typename:void
OnContextMenu	FilepathEdit.cpp	/^void CFilepathEdit::OnContextMenu(CWnd*, CPoint point)$/;"	f	class:CFilepathEdit	typeref:typename:void
OnContextMenu	LocationView.cpp	/^void CLocationView::OnContextMenu(CWnd* pWnd, CPoint point) $/;"	f	class:CLocationView	typeref:typename:void
OnContextMenu	MergeEditView.cpp	/^void CMergeEditView::OnContextMenu(CWnd* pWnd, CPoint point)$/;"	f	class:CMergeEditView	typeref:typename:void
OnConvertEolTo	MergeEditView.cpp	/^void CMergeEditView::OnConvertEolTo(UINT nID )$/;"	f	class:CMergeEditView	typeref:typename:void
OnCopyBothPathnames	DirView.cpp	/^void CDirView::OnCopyBothPathnames()$/;"	f	class:CDirView	typeref:typename:void
OnCopyBothToClipboard	DirView.cpp	/^void CDirView::OnCopyBothToClipboard()$/;"	f	class:CDirView	typeref:typename:void
OnCopyData	MainFrm.cpp	/^LRESULT CMainFrame::OnCopyData(WPARAM wParam, LPARAM lParam)$/;"	f	class:CMainFrame	typeref:typename:LRESULT
OnCopyFilenames	DirView.cpp	/^void CDirView::OnCopyFilenames()$/;"	f	class:CDirView	typeref:typename:void
OnCopyFromLeft	HexMergeDoc.cpp	/^void CHexMergeDoc::OnCopyFromLeft()$/;"	f	class:CHexMergeDoc	typeref:typename:void
OnCopyFromLeft	ImgMergeFrm.cpp	/^void CImgMergeFrame::OnCopyFromLeft()$/;"	f	class:CImgMergeFrame	typeref:typename:void
OnCopyFromLeft	MergeEditView.cpp	/^void CMergeEditView::OnCopyFromLeft()$/;"	f	class:CMergeEditView	typeref:typename:void
OnCopyFromRight	HexMergeDoc.cpp	/^void CHexMergeDoc::OnCopyFromRight()$/;"	f	class:CHexMergeDoc	typeref:typename:void
OnCopyFromRight	ImgMergeFrm.cpp	/^void CImgMergeFrame::OnCopyFromRight()$/;"	f	class:CImgMergeFrame	typeref:typename:void
OnCopyFromRight	MergeEditView.cpp	/^void CMergeEditView::OnCopyFromRight()$/;"	f	class:CMergeEditView	typeref:typename:void
OnCopyPathnames	DirView.cpp	/^void CDirView::OnCopyPathnames()$/;"	f	class:CDirView	typeref:typename:void
OnCopyToClipboard	DirView.cpp	/^void CDirView::OnCopyToClipboard()$/;"	f	class:CDirView	typeref:typename:void
OnCpCustom	PropCodepage.cpp	/^void PropCodepage::OnCpCustom() $/;"	f	class:PropCodepage	typeref:typename:void
OnCpSystem	PropCodepage.cpp	/^void PropCodepage::OnCpSystem() $/;"	f	class:PropCodepage	typeref:typename:void
OnCpUi	PropCodepage.cpp	/^void PropCodepage::OnCpUi() $/;"	f	class:PropCodepage	typeref:typename:void
OnCreate	Common/PropertyPageHost.cpp	/^int CPropertyPageHost::OnCreate(LPCREATESTRUCT lpCreateStruct) $/;"	f	class:CPropertyPageHost	typeref:typename:int
OnCreate	Common/SuperComboBox.cpp	/^int CSuperComboBox::OnCreate(LPCREATESTRUCT lpCreateStruct) $/;"	f	class:CSuperComboBox	typeref:typename:int
OnCreate	Common/sizecbar.cpp	/^int CSizingControlBar::OnCreate(LPCREATESTRUCT lpCreateStruct) $/;"	f	class:CSizingControlBar	typeref:typename:int
OnCreate	DiffViewBar.cpp	/^int CDiffViewBar::OnCreate(LPCREATESTRUCT lpCreateStruct) $/;"	f	class:CDiffViewBar	typeref:typename:int
OnCreate	HexMergeView.cpp	/^int CHexMergeView::OnCreate(LPCREATESTRUCT lpCreateStruct) $/;"	f	class:CHexMergeView	typeref:typename:int
OnCreate	ImgMergeFrm.cpp	/^int CImgMergeFrame::OnCreate(LPCREATESTRUCT lpCreateStruct)$/;"	f	class:CImgMergeFrame	typeref:typename:int
OnCreate	LocationBar.cpp	/^int CLocationBar::OnCreate(LPCREATESTRUCT lpCreateStruct) $/;"	f	class:CLocationBar	typeref:typename:int
OnCreate	MainFrm.cpp	/^int CMainFrame::OnCreate(LPCREATESTRUCT lpCreateStruct)$/;"	f	class:CMainFrame	typeref:typename:int
OnCreate	MergeEditFrm.cpp	/^int CMergeEditFrame::OnCreate(LPCREATESTRUCT lpCreateStruct) $/;"	f	class:CMergeEditFrame	typeref:typename:int
OnCreateClient	HexMergeFrm.cpp	/^BOOL CHexMergeFrame::OnCreateClient( LPCREATESTRUCT \/*lpcs*\/,$/;"	f	class:CHexMergeFrame	typeref:typename:BOOL
OnCreateClient	ImgMergeFrm.cpp	/^BOOL CImgMergeFrame::OnCreateClient( LPCREATESTRUCT \/*lpcs*\/,$/;"	f	class:CImgMergeFrame	typeref:typename:BOOL
OnCreateClient	MergeEditFrm.cpp	/^BOOL CMergeEditFrame::OnCreateClient( LPCREATESTRUCT \/*lpcs*\/,$/;"	f	class:CMergeEditFrame	typeref:typename:BOOL
OnCtlColor	AboutDlg.cpp	/^HBRUSH CAboutDlg::Impl::OnCtlColor(CDC* pDC, CWnd* pWnd, UINT nCtlColor)$/;"	f	class:CAboutDlg::Impl	typeref:typename:HBRUSH
OnCtlColor	Common/MessageBoxDialog.cpp	/^HBRUSH CMessageBoxDialog::OnCtlColor(CDC* pDC, CWnd* pWnd, UINT nCtlColor)$/;"	f	class:CMessageBoxDialog	typeref:typename:HBRUSH
OnCtxtDirCopy	DirView.cpp	/^void CDirView::OnCtxtDirCopy()$/;"	f	class:CDirView	typeref:typename:void
OnCtxtDirCopyTo	DirView.cpp	/^void CDirView::OnCtxtDirCopyTo()$/;"	f	class:CDirView	typeref:typename:void
OnCtxtDirDel	DirView.cpp	/^void CDirView::OnCtxtDirDel()$/;"	f	class:CDirView	typeref:typename:void
OnCtxtDirDelBoth	DirView.cpp	/^void CDirView::OnCtxtDirDelBoth()$/;"	f	class:CDirView	typeref:typename:void
OnCtxtDirMoveTo	DirView.cpp	/^void CDirView::OnCtxtDirMoveTo()$/;"	f	class:CDirView	typeref:typename:void
OnCtxtDirOpen	DirView.cpp	/^void CDirView::OnCtxtDirOpen()$/;"	f	class:CDirView	typeref:typename:void
OnCtxtDirOpenParentFolder	DirView.cpp	/^void CDirView::OnCtxtDirOpenParentFolder()$/;"	f	class:CDirView	typeref:typename:void
OnCtxtDirOpenWith	DirView.cpp	/^void CDirView::OnCtxtDirOpenWith()$/;"	f	class:CDirView	typeref:typename:void
OnCtxtDirOpenWithEditor	DirView.cpp	/^void CDirView::OnCtxtDirOpenWithEditor()$/;"	f	class:CDirView	typeref:typename:void
OnCtxtDirShellContextMenu	DirView.cpp	/^void CDirView::OnCtxtDirShellContextMenu()$/;"	f	class:CDirView	typeref:typename:void
OnCtxtDirZip	DirView.cpp	/^void CDirView::OnCtxtDirZip()$/;"	f	class:CDirView	typeref:typename:void
OnCtxtOpenWithUnpacker	DirView.cpp	/^void CDirView::OnCtxtOpenWithUnpacker()$/;"	f	class:CDirView	typeref:typename:void
OnCtxtOpenWithUnpacker	MergeDoc.cpp	/^void CMergeDoc::OnCtxtOpenWithUnpacker() $/;"	f	class:CMergeDoc	typeref:typename:void
OnCurdiff	DirView.cpp	/^void CDirView::OnCurdiff()$/;"	f	class:CDirView	typeref:typename:void
OnCurdiff	MergeEditView.cpp	/^void CMergeEditView::OnCurdiff()$/;"	f	class:CMergeEditView	typeref:typename:void
OnCustomDraw	DirView.cpp	/^void CDirView::OnCustomDraw(NMHDR* pNMHDR, LRESULT* pResult) $/;"	f	class:CDirView	typeref:typename:void
OnCustomizeColumns	DirView.cpp	/^void CDirView::OnCustomizeColumns()$/;"	f	class:CDirView	typeref:typename:void
OnDblclkFiltersList	FileFiltersDlg.cpp	/^void FileFiltersDlg::OnDblclkFiltersList(NMHDR* pNMHDR, LRESULT* pResult)$/;"	f	class:FileFiltersDlg	typeref:typename:void
OnDefaultSettings	PatchDlg.cpp	/^void CPatchDlg::OnDefaultSettings()$/;"	f	class:CPatchDlg	typeref:typename:void
OnDefaults	DirColsDlg.cpp	/^void CDirColsDlg::OnDefaults()$/;"	f	class:CDirColsDlg	typeref:typename:void
OnDefaults	PropColors.cpp	/^void PropMergeColors::OnDefaults()$/;"	f	class:PropMergeColors	typeref:typename:void
OnDefaults	PropCompare.cpp	/^void PropCompare::OnDefaults()$/;"	f	class:PropCompare	typeref:typename:void
OnDefaults	PropCompareBinary.cpp	/^void PropCompareBinary::OnDefaults()$/;"	f	class:PropCompareBinary	typeref:typename:void
OnDefaults	PropCompareFolder.cpp	/^void PropCompareFolder::OnDefaults()$/;"	f	class:PropCompareFolder	typeref:typename:void
OnDefaults	PropCompareImage.cpp	/^void PropCompareImage::OnDefaults()$/;"	f	class:PropCompareImage	typeref:typename:void
OnDefaults	PropDirColors.cpp	/^void PropDirColors::OnDefaults()$/;"	f	class:PropDirColors	typeref:typename:void
OnDefaultsStandardColors	PropTextColors.cpp	/^void PropTextColors::OnDefaultsStandardColors()$/;"	f	class:PropTextColors	typeref:typename:void
OnDelete	DirView.cpp	/^void CDirView::OnDelete()$/;"	f	class:CDirView	typeref:typename:void
OnDestroy	Common/CMoveConstraint.cpp	/^CMoveConstraint::OnDestroy()$/;"	f	class:prdlg::CMoveConstraint	typeref:typename:void
OnDestroy	Common/PreferencesDlg.cpp	/^void CPreferencesDlg::OnDestroy() $/;"	f	class:CPreferencesDlg	typeref:typename:void
OnDestroy	Common/SuperComboBox.cpp	/^void CSuperComboBox::OnDestroy(void)$/;"	f	class:CSuperComboBox	typeref:typename:void
OnDestroy	DirView.cpp	/^void CDirView::OnDestroy()$/;"	f	class:CDirView	typeref:typename:void
OnDestroy	MainFrm.cpp	/^void CMainFrame::OnDestroy(void)$/;"	f	class:CMainFrame	typeref:typename:void
OnDestroy	OpenView.cpp	/^void COpenView::OnDestroy()$/;"	f	class:COpenView	typeref:typename:void
OnDestroy	PropGeneral.cpp	/^void PropGeneral::OnDestroy()$/;"	f	class:PropGeneral	typeref:typename:void
OnDetectAutodetecttype	PropCodepage.cpp	/^void PropCodepage::OnDetectAutodetecttype()$/;"	f	class:PropCodepage	typeref:typename:void
OnDetectCodepage2	PropCodepage.cpp	/^void PropCodepage::OnDetectCodepage2() $/;"	f	class:PropCodepage	typeref:typename:void
OnDiffBrowseFile1	PatchDlg.cpp	/^void CPatchDlg::OnDiffBrowseFile1()$/;"	f	class:CPatchDlg	typeref:typename:void
OnDiffBrowseFile2	PatchDlg.cpp	/^void CPatchDlg::OnDiffBrowseFile2()$/;"	f	class:CPatchDlg	typeref:typename:void
OnDiffBrowseResult	PatchDlg.cpp	/^void CPatchDlg::OnDiffBrowseResult()$/;"	f	class:CPatchDlg	typeref:typename:void
OnDiffCaseSensitive	MainFrm.cpp	/^void CMainFrame::OnDiffCaseSensitive()$/;"	f	class:CMainFrame	typeref:typename:void
OnDiffContext	MergeDoc.cpp	/^void CMergeDoc::OnDiffContext(UINT nID)$/;"	f	class:CMergeDoc	typeref:typename:void
OnDiffIgnoreCP	MainFrm.cpp	/^void CMainFrame::OnDiffIgnoreCP()$/;"	f	class:CMainFrame	typeref:typename:void
OnDiffIgnoreEOL	MainFrm.cpp	/^void CMainFrame::OnDiffIgnoreEOL()$/;"	f	class:CMainFrame	typeref:typename:void
OnDiffOptionsDropDown	MainFrm.cpp	/^void CMainFrame::OnDiffOptionsDropDown(NMHDR* pNMHDR, LRESULT* pResult)$/;"	f	class:CMainFrame	typeref:typename:void
OnDiffSwapFiles	PatchDlg.cpp	/^void CPatchDlg::OnDiffSwapFiles()$/;"	f	class:CPatchDlg	typeref:typename:void
OnDiffWhitespace	MainFrm.cpp	/^void CMainFrame::OnDiffWhitespace(UINT nID)$/;"	f	class:CMainFrame	typeref:typename:void
OnDifferenceColor	PropColors.cpp	/^void PropMergeColors::OnDifferenceColor() $/;"	f	class:PropMergeColors	typeref:typename:void
OnDifferenceDeletedColor	PropColors.cpp	/^void PropMergeColors::OnDifferenceDeletedColor() $/;"	f	class:PropMergeColors	typeref:typename:void
OnDifferenceTextColor	PropColors.cpp	/^void PropMergeColors::OnDifferenceTextColor() $/;"	f	class:PropMergeColors	typeref:typename:void
OnDirCopy	DirView.cpp	/^void CDirView::OnDirCopy(UINT id)$/;"	f	class:CDirView	typeref:typename:void
OnDirItemDiffColor	PropDirColors.cpp	/^void PropDirColors::OnDirItemDiffColor()$/;"	f	class:PropDirColors	typeref:typename:void
OnDirItemDiffTextColor	PropDirColors.cpp	/^void PropDirColors::OnDirItemDiffTextColor()$/;"	f	class:PropDirColors	typeref:typename:void
OnDirItemEqualColor	PropDirColors.cpp	/^void PropDirColors::OnDirItemEqualColor()$/;"	f	class:PropDirColors	typeref:typename:void
OnDirItemEqualTextColor	PropDirColors.cpp	/^void PropDirColors::OnDirItemEqualTextColor()$/;"	f	class:PropDirColors	typeref:typename:void
OnDirItemFilteredColor	PropDirColors.cpp	/^void PropDirColors::OnDirItemFilteredColor()$/;"	f	class:PropDirColors	typeref:typename:void
OnDirItemFilteredTextColor	PropDirColors.cpp	/^void PropDirColors::OnDirItemFilteredTextColor()$/;"	f	class:PropDirColors	typeref:typename:void
OnDirItemNotExistAllColor	PropDirColors.cpp	/^void PropDirColors::OnDirItemNotExistAllColor()$/;"	f	class:PropDirColors	typeref:typename:void
OnDirItemNotExistAllTextColor	PropDirColors.cpp	/^void PropDirColors::OnDirItemNotExistAllTextColor()$/;"	f	class:PropDirColors	typeref:typename:void
OnDiscardAll	SaveClosingDlg.cpp	/^void SaveClosingDlg::OnDiscardAll()$/;"	f	class:SaveClosingDlg	typeref:typename:void
OnDisplayDiff	MergeEditView.cpp	/^void CMergeEditView::OnDisplayDiff(int nDiff \/*=0*\/)$/;"	f	class:CMergeEditView	typeref:typename:void
OnDown	DirColsDlg.cpp	/^void CDirColsDlg::OnDown() $/;"	f	class:CDirColsDlg	typeref:typename:void
OnDragBeginPathCombo	OpenView.cpp	/^void COpenView::OnDragBeginPathCombo(UINT id, NMHDR *pNMHDR, LRESULT *pResult)$/;"	f	class:COpenView	typeref:typename:void
OnDraw	HexMergeView.cpp	/^void CHexMergeView::OnDraw(CDC *)$/;"	f	class:CHexMergeView	typeref:typename:void
OnDraw	LocationView.cpp	/^void CLocationView::OnDraw(CDC* pDC)$/;"	f	class:CLocationView	typeref:typename:void
OnDraw	MergeEditSplitterView.cpp	/^void CMergeEditSplitterView::OnDraw(CDC* pDC)$/;"	f	class:CMergeEditSplitterView	typeref:typename:void
OnDrawItem	AboutDlg.cpp	/^void CAboutDlg::Impl::OnDrawItem(int nIDCtl, LPDRAWITEMSTRUCT lpDrawItemStruct)$/;"	f	class:CAboutDlg::Impl	typeref:typename:void
OnDrawItem	Common/SuperComboBox.cpp	/^void CSuperComboBox::OnDrawItem(int nIDCtl, LPDRAWITEMSTRUCT lpDrawItemStruct)$/;"	f	class:CSuperComboBox	typeref:typename:void
OnDrawSplitter	Common/SplitterWndEx.cpp	/^void CSplitterWndEx::OnDrawSplitter(CDC* pDC, ESplitType nType, const CRect& rectArg)$/;"	f	class:CSplitterWndEx	typeref:typename:void
OnDropDownOptions	OpenView.cpp	/^void COpenView::OnDropDownOptions(NMHDR *pNMHDR, LRESULT *pResult)$/;"	f	class:COpenView	typeref:typename:void
OnDropDownSaveProject	OpenView.cpp	/^void COpenView::OnDropDownSaveProject(NMHDR *pNMHDR, LRESULT *pResult)$/;"	f	class:COpenView	typeref:typename:void
OnDropFiles	Common/SuperComboBox.cpp	/^void CSuperComboBox::OnDropFiles(const std::vector<String>& files)$/;"	f	class:CSuperComboBox	typeref:typename:void
OnDropFiles	ImgMergeFrm.cpp	/^void CImgMergeFrame::OnDropFiles(int pane, const std::vector<String>& files)$/;"	f	class:CImgMergeFrame	typeref:typename:void
OnDropFiles	MainFrm.cpp	/^void CMainFrame::OnDropFiles(const std::vector<String>& dropped_files)$/;"	f	class:CMainFrame	typeref:typename:void
OnDropFiles	MergeEditView.cpp	/^void CMergeEditView::OnDropFiles(const std::vector<String>& tFiles)$/;"	f	class:CMergeEditView	typeref:typename:void
OnDropFiles	OpenView.cpp	/^void COpenView::OnDropFiles(const std::vector<String>& files)$/;"	f	class:COpenView	typeref:typename:void
OnEditAction	OpenView.cpp	/^void COpenView::OnEditAction()$/;"	f	class:COpenView	typeref:typename:void
OnEditClear	HexMergeView.cpp	/^void CHexMergeView::OnEditClear()$/;"	f	class:CHexMergeView	typeref:typename:void
OnEditColumns	DirView.cpp	/^void CDirView::OnEditColumns()$/;"	f	class:CDirView	typeref:typename:void
OnEditCopy	DirView.cpp	/^void CDirView::OnEditCopy()$/;"	f	class:CDirView	typeref:typename:void
OnEditCopy	FilepathEdit.cpp	/^void CFilepathEdit::OnEditCopy()$/;"	f	class:CFilepathEdit	typeref:typename:void
OnEditCopy	HexMergeView.cpp	/^void CHexMergeView::OnEditCopy()$/;"	f	class:CHexMergeView	typeref:typename:void
OnEditCopy	MergeEditView.cpp	/^void CMergeEditView::OnEditCopy()$/;"	f	class:CMergeEditView	typeref:typename:void
OnEditCopyLineNumbers	MergeEditView.cpp	/^void CMergeEditView::OnEditCopyLineNumbers()$/;"	f	class:CMergeEditView	typeref:typename:void
OnEditCut	DirView.cpp	/^void CDirView::OnEditCut()$/;"	f	class:CDirView	typeref:typename:void
OnEditCut	HexMergeView.cpp	/^void CHexMergeView::OnEditCut()$/;"	f	class:CHexMergeView	typeref:typename:void
OnEditCut	MergeEditView.cpp	/^void CMergeEditView::OnEditCut()$/;"	f	class:CMergeEditView	typeref:typename:void
OnEditEvent	OpenView.cpp	/^void COpenView::OnEditEvent()$/;"	f	class:COpenView	typeref:typename:void
OnEditFind	HexMergeView.cpp	/^void CHexMergeView::OnEditFind()$/;"	f	class:CHexMergeView	typeref:typename:void
OnEditOperation	MergeEditView.cpp	/^void CMergeEditView::OnEditOperation(int nAction, LPCTSTR pszText, size_t cchText)$/;"	f	class:CMergeEditView	typeref:typename:void
OnEditPaste	DirView.cpp	/^void CDirView::OnEditPaste()$/;"	f	class:CDirView	typeref:typename:void
OnEditPaste	HexMergeView.cpp	/^void CHexMergeView::OnEditPaste()$/;"	f	class:CHexMergeView	typeref:typename:void
OnEditPaste	MergeEditView.cpp	/^void CMergeEditView::OnEditPaste()$/;"	f	class:CMergeEditView	typeref:typename:void
OnEditRedo	HexMergeView.cpp	/^void CHexMergeView::OnEditRedo()$/;"	f	class:CHexMergeView	typeref:typename:void
OnEditRedo	ImgMergeFrm.cpp	/^void CImgMergeFrame::OnEditRedo()$/;"	f	class:CImgMergeFrame	typeref:typename:void
OnEditRedo	MergeEditView.cpp	/^void CMergeEditView::OnEditRedo()$/;"	f	class:CMergeEditView	typeref:typename:void
OnEditRepeat	HexMergeView.cpp	/^void CHexMergeView::OnEditRepeat()$/;"	f	class:CHexMergeView	typeref:typename:void
OnEditReplace	HexMergeView.cpp	/^void CHexMergeView::OnEditReplace()$/;"	f	class:CHexMergeView	typeref:typename:void
OnEditSelectAll	HexMergeView.cpp	/^void CHexMergeView::OnEditSelectAll()$/;"	f	class:CHexMergeView	typeref:typename:void
OnEditUndo	DirView.cpp	/^void CDirView::OnEditUndo()$/;"	f	class:CDirView	typeref:typename:void
OnEditUndo	HexMergeView.cpp	/^void CHexMergeView::OnEditUndo()$/;"	f	class:CHexMergeView	typeref:typename:void
OnEditUndo	ImgMergeFrm.cpp	/^void CImgMergeFrame::OnEditUndo()$/;"	f	class:CImgMergeFrame	typeref:typename:void
OnEditUndo	MergeEditView.cpp	/^void CMergeEditView::OnEditUndo()$/;"	f	class:CMergeEditView	typeref:typename:void
OnEditchange	Common/SuperComboBox.cpp	/^BOOL CSuperComboBox::OnEditchange()$/;"	f	class:CSuperComboBox	typeref:typename:BOOL
OnEnKillfocusTabEdit	PropEditor.cpp	/^void PropEditor::OnEnKillfocusTabEdit()$/;"	f	class:PropEditor	typeref:typename:void
OnEnableClicked	PropArchive.cpp	/^void PropArchive::OnEnableClicked()$/;"	f	class:PropArchive	typeref:typename:void
OnEndLabelEdit	DirView.cpp	/^afx_msg void CDirView::OnEndLabelEdit(NMHDR* pNMHDR, LRESULT* pResult)$/;"	f	class:CDirView	typeref:typename:afx_msg void
OnEndLabelEditLfilterList	LineFiltersDlg.cpp	/^void LineFiltersDlg::OnEndLabelEditLfilterList(NMHDR *pNMHDR, LRESULT *pResult)$/;"	f	class:LineFiltersDlg	typeref:typename:void
OnEndPrinting	MergeEditView.cpp	/^void CMergeEditView::OnEndPrinting(CDC * pDC, CPrintInfo * pInfo)$/;"	f	class:CMergeEditView	typeref:typename:void
OnEraseBkgnd	Common/MDITabBar.cpp	/^BOOL CMDITabBar::OnEraseBkgnd(CDC* pDC)$/;"	f	class:CMDITabBar	typeref:typename:BOOL
OnEraseBkgnd	Common/MessageBoxDialog.cpp	/^BOOL CMessageBoxDialog::OnEraseBkgnd(CDC* pDC)$/;"	f	class:CMessageBoxDialog	typeref:typename:BOOL
OnEraseBkgnd	Common/PropertyPageHost.cpp	/^BOOL CPropertyPageHost::OnEraseBkgnd(CDC* pDC) $/;"	f	class:CPropertyPageHost	typeref:typename:BOOL
OnEraseBkgnd	LocationView.cpp	/^BOOL CLocationView::OnEraseBkgnd(CDC* pDC)$/;"	f	class:CLocationView	typeref:typename:BOOL
OnEraseBkgnd	MergeEditSplitterView.cpp	/^BOOL CMergeEditSplitterView::OnEraseBkgnd (CDC * pdc)$/;"	f	class:CMergeEditSplitterView	typeref:typename:BOOL
OnEraseBkgnd	OpenFrm.cpp	/^BOOL COpenFrame::OnEraseBkgnd(CDC* pDC)$/;"	f	class:COpenFrame	typeref:typename:BOOL
OnExportButton	Common/PreferencesDlg.cpp	/^void CPreferencesDlg::OnExportButton()$/;"	f	class:CPreferencesDlg	typeref:typename:void
OnFileClose	ImgMergeFrm.cpp	/^void CImgMergeFrame::OnFileClose() $/;"	f	class:CImgMergeFrame	typeref:typename:void
OnFileEncoding	DirView.cpp	/^void CDirView::OnFileEncoding()$/;"	f	class:CDirView	typeref:typename:void
OnFileEncoding	MergeDoc.cpp	/^void CMergeDoc::OnFileEncoding()$/;"	f	class:CMergeDoc	typeref:typename:void
OnFileNew	MainFrm.cpp	/^void CMainFrame::OnFileNew() $/;"	f	class:CMainFrame	typeref:typename:void
OnFileNew3	MainFrm.cpp	/^void CMainFrame::OnFileNew3() $/;"	f	class:CMainFrame	typeref:typename:void
OnFileOpen	MainFrm.cpp	/^void CMainFrame::OnFileOpen() $/;"	f	class:CMainFrame	typeref:typename:void
OnFileOpenConflict	MainFrm.cpp	/^void CMainFrame::OnFileOpenConflict()$/;"	f	class:CMainFrame	typeref:typename:void
OnFileOpenProject	MainFrm.cpp	/^void CMainFrame::OnFileOpenProject()$/;"	f	class:CMainFrame	typeref:typename:void
OnFileRecompareAs	HexMergeDoc.cpp	/^void CHexMergeDoc::OnFileRecompareAs(UINT nID)$/;"	f	class:CHexMergeDoc	typeref:typename:void
OnFileRecompareAs	ImgMergeFrm.cpp	/^void CImgMergeFrame::OnFileRecompareAs(UINT nId)$/;"	f	class:CImgMergeFrame	typeref:typename:void
OnFileRecompareAs	MergeDoc.cpp	/^void CMergeDoc::OnFileRecompareAs(UINT nID)$/;"	f	class:CMergeDoc	typeref:typename:void
OnFileRecompareAsText	MergeDoc.cpp	/^void CMergeDoc::OnFileRecompareAsText()$/;"	f	class:CMergeDoc	typeref:typename:void
OnFileRecompareAsXML	MergeDoc.cpp	/^void CMergeDoc::OnFileRecompareAsXML()$/;"	f	class:CMergeDoc	typeref:typename:void
OnFileReload	HexMergeDoc.cpp	/^void CHexMergeDoc::OnFileReload()$/;"	f	class:CHexMergeDoc	typeref:typename:void
OnFileReload	ImgMergeFrm.cpp	/^void CImgMergeFrame::OnFileReload()$/;"	f	class:CImgMergeFrame	typeref:typename:void
OnFileReload	MergeDoc.cpp	/^void CMergeDoc::OnFileReload()$/;"	f	class:CMergeDoc	typeref:typename:void
OnFileSave	HexMergeDoc.cpp	/^void CHexMergeDoc::OnFileSave() $/;"	f	class:CHexMergeDoc	typeref:typename:void
OnFileSave	ImgMergeFrm.cpp	/^void CImgMergeFrame::OnFileSave() $/;"	f	class:CImgMergeFrame	typeref:typename:void
OnFileSave	MergeDoc.cpp	/^void CMergeDoc::OnFileSave() $/;"	f	class:CMergeDoc	typeref:typename:void
OnFileSaveAsLeft	HexMergeDoc.cpp	/^void CHexMergeDoc::OnFileSaveAsLeft()$/;"	f	class:CHexMergeDoc	typeref:typename:void
OnFileSaveAsLeft	ImgMergeFrm.cpp	/^void CImgMergeFrame::OnFileSaveAsLeft()$/;"	f	class:CImgMergeFrame	typeref:typename:void
OnFileSaveAsLeft	MergeDoc.cpp	/^void CMergeDoc::OnFileSaveAsLeft()$/;"	f	class:CMergeDoc	typeref:typename:void
OnFileSaveAsMiddle	HexMergeDoc.cpp	/^void CHexMergeDoc::OnFileSaveAsMiddle()$/;"	f	class:CHexMergeDoc	typeref:typename:void
OnFileSaveAsMiddle	ImgMergeFrm.cpp	/^void CImgMergeFrame::OnFileSaveAsMiddle()$/;"	f	class:CImgMergeFrame	typeref:typename:void
OnFileSaveAsMiddle	MergeDoc.cpp	/^void CMergeDoc::OnFileSaveAsMiddle()$/;"	f	class:CMergeDoc	typeref:typename:void
OnFileSaveAsRight	HexMergeDoc.cpp	/^void CHexMergeDoc::OnFileSaveAsRight()$/;"	f	class:CHexMergeDoc	typeref:typename:void
OnFileSaveAsRight	ImgMergeFrm.cpp	/^void CImgMergeFrame::OnFileSaveAsRight()$/;"	f	class:CImgMergeFrame	typeref:typename:void
OnFileSaveAsRight	MergeDoc.cpp	/^void CMergeDoc::OnFileSaveAsRight()$/;"	f	class:CMergeDoc	typeref:typename:void
OnFileSaveLeft	HexMergeDoc.cpp	/^void CHexMergeDoc::OnFileSaveLeft()$/;"	f	class:CHexMergeDoc	typeref:typename:void
OnFileSaveLeft	ImgMergeFrm.cpp	/^void CImgMergeFrame::OnFileSaveLeft() $/;"	f	class:CImgMergeFrame	typeref:typename:void
OnFileSaveLeft	MergeDoc.cpp	/^void CMergeDoc::OnFileSaveLeft()$/;"	f	class:CMergeDoc	typeref:typename:void
OnFileSaveMiddle	HexMergeDoc.cpp	/^void CHexMergeDoc::OnFileSaveMiddle()$/;"	f	class:CHexMergeDoc	typeref:typename:void
OnFileSaveMiddle	ImgMergeFrm.cpp	/^void CImgMergeFrame::OnFileSaveMiddle()$/;"	f	class:CImgMergeFrame	typeref:typename:void
OnFileSaveMiddle	MergeDoc.cpp	/^void CMergeDoc::OnFileSaveMiddle()$/;"	f	class:CMergeDoc	typeref:typename:void
OnFileSaveRight	HexMergeDoc.cpp	/^void CHexMergeDoc::OnFileSaveRight()$/;"	f	class:CHexMergeDoc	typeref:typename:void
OnFileSaveRight	ImgMergeFrm.cpp	/^void CImgMergeFrame::OnFileSaveRight()$/;"	f	class:CImgMergeFrame	typeref:typename:void
OnFileSaveRight	MergeDoc.cpp	/^void CMergeDoc::OnFileSaveRight()$/;"	f	class:CMergeDoc	typeref:typename:void
OnFiltersEditbtn	FileFiltersDlg.cpp	/^void FileFiltersDlg::OnFiltersEditbtn()$/;"	f	class:FileFiltersDlg	typeref:typename:void
OnFirstdiff	DirView.cpp	/^void CDirView::OnFirstdiff()$/;"	f	class:CDirView	typeref:typename:void
OnFirstdiff	HexMergeView.cpp	/^void CHexMergeView::OnFirstdiff()$/;"	f	class:CHexMergeView	typeref:typename:void
OnFirstdiff	ImgMergeFrm.cpp	/^void CImgMergeFrame::OnFirstdiff()$/;"	f	class:CImgMergeFrame	typeref:typename:void
OnFirstdiff	MergeEditView.cpp	/^void CMergeEditView::OnFirstdiff()$/;"	f	class:CMergeEditView	typeref:typename:void
OnGenerateFileCmpReport	DirView.cpp	/^LRESULT CDirView::OnGenerateFileCmpReport(WPARAM wParam, LPARAM lParam)$/;"	f	class:CDirView	typeref:typename:LRESULT
OnGetCurrentPageHwnd	Common/PropertyPageHost.cpp	/^LRESULT CPropertyPageHost::OnGetCurrentPageHwnd(WPARAM wParam, LPARAM lParam)$/;"	f	class:CPropertyPageHost	typeref:typename:LRESULT
OnGetDispInfo	Common/SuperComboBox.cpp	/^void CSuperComboBox::OnGetDispInfo(NMHDR *pNotifyStruct, LRESULT *pResult)$/;"	f	class:CSuperComboBox	typeref:typename:void
OnGetMinMaxInfo	Common/CMoveConstraint.cpp	/^CMoveConstraint::OnGetMinMaxInfo(MINMAXINFO FAR* lpMMI)$/;"	f	class:prdlg::CMoveConstraint	typeref:typename:void
OnGetMinMaxInfo	Common/sizecbar.cpp	/^void CSCBMiniDockFrameWnd::OnGetMinMaxInfo(MINMAXINFO FAR* lpMMI)$/;"	f	class:CSCBMiniDockFrameWnd	typeref:typename:void
OnGetMinMaxInfo	MergeFrameCommon.cpp	/^void CMergeFrameCommon::OnGetMinMaxInfo(MINMAXINFO* lpMMI)$/;"	f	class:CMergeFrameCommon	typeref:typename:void
OnHScroll	Common/SplitterWndEx.cpp	/^void CSplitterWndEx::OnHScroll(UINT nSBCode, UINT nPos, CScrollBar *pScrollBar)$/;"	f	class:CSplitterWndEx	typeref:typename:void
OnHScroll	HexMergeView.cpp	/^void CHexMergeView::OnHScroll(UINT nSBCode, UINT nPos, CScrollBar * pScrollBar)$/;"	f	class:CHexMergeView	typeref:typename:void
OnHScroll	MergeEditView.cpp	/^void CMergeEditView::OnHScroll(UINT nSBCode, UINT nPos, CScrollBar *pScrollBar)$/;"	f	class:CMergeEditView	typeref:typename:void
OnHeaderBeginDrag	DirView.cpp	/^bool CDirView::OnHeaderBeginDrag(LPNMHEADER hdr, LRESULT* pResult)$/;"	f	class:CDirView	typeref:typename:bool
OnHeaderEndDrag	DirView.cpp	/^bool CDirView::OnHeaderEndDrag(LPNMHEADER hdr, LRESULT* pResult)$/;"	f	class:CDirView	typeref:typename:bool
OnHelp	DirView.cpp	/^void CDirView::OnHelp()$/;"	f	class:CDirView	typeref:typename:void
OnHelp	FileFiltersDlg.cpp	/^void FileFiltersDlg::OnHelp()$/;"	f	class:FileFiltersDlg	typeref:typename:void
OnHelp	LineFiltersDlg.cpp	/^void LineFiltersDlg::OnHelp()$/;"	f	class:LineFiltersDlg	typeref:typename:void
OnHelp	Merge.cpp	/^void CMergeApp::OnHelp()$/;"	f	class:CMergeApp	typeref:typename:void
OnHelp	MergeEditView.cpp	/^void CMergeEditView::OnHelp()$/;"	f	class:CMergeEditView	typeref:typename:void
OnHelp	OpenView.cpp	/^void COpenView::OnHelp()$/;"	f	class:COpenView	typeref:typename:void
OnHelpButton	Common/PreferencesDlg.cpp	/^void CPreferencesDlg::OnHelpButton() $/;"	f	class:CPreferencesDlg	typeref:typename:void
OnHelpContents	MainFrm.cpp	/^void CMainFrame::OnHelpContents()$/;"	f	class:CMainFrame	typeref:typename:void
OnHelpGnulicense	MainFrm.cpp	/^void CMainFrame::OnHelpGnulicense() $/;"	f	class:CMainFrame	typeref:typename:void
OnHelpReleasenotes	MainFrm.cpp	/^void CMainFrame::OnHelpReleasenotes()$/;"	f	class:CMainFrame	typeref:typename:void
OnHelpTranslations	MainFrm.cpp	/^void CMainFrame::OnHelpTranslations()$/;"	f	class:CMainFrame	typeref:typename:void
OnHideFilenames	DirView.cpp	/^void CDirView::OnHideFilenames()$/;"	f	class:CDirView	typeref:typename:void
OnIdle	Merge.cpp	/^BOOL CMergeApp::OnIdle(LONG lCount) $/;"	f	class:CMergeApp	typeref:typename:BOOL
OnIdleUpdateCmdUI	HexMergeFrm.cpp	/^void CHexMergeFrame::OnIdleUpdateCmdUI()$/;"	f	class:CHexMergeFrame	typeref:typename:void
OnIdleUpdateCmdUI	ImgMergeFrm.cpp	/^void CImgMergeFrame::OnIdleUpdateCmdUI()$/;"	f	class:CImgMergeFrame	typeref:typename:void
OnIdleUpdateCmdUI	MergeEditFrm.cpp	/^void CMergeEditFrame::OnIdleUpdateCmdUI()$/;"	f	class:CMergeEditFrame	typeref:typename:void
OnImgCurPaneNextPage	ImgMergeFrm.cpp	/^void CImgMergeFrame::OnImgCurPaneNextPage()$/;"	f	class:CImgMergeFrame	typeref:typename:void
OnImgCurPanePrevPage	ImgMergeFrm.cpp	/^void CImgMergeFrame::OnImgCurPanePrevPage()$/;"	f	class:CImgMergeFrame	typeref:typename:void
OnImgDiffBlockSize	ImgMergeFrm.cpp	/^void CImgMergeFrame::OnImgDiffBlockSize(UINT nId)$/;"	f	class:CImgMergeFrame	typeref:typename:void
OnImgDraggingMode	ImgMergeFrm.cpp	/^void CImgMergeFrame::OnImgDraggingMode(UINT nId)$/;"	f	class:CImgMergeFrame	typeref:typename:void
OnImgInsertionDeletionDetectionMode	ImgMergeFrm.cpp	/^void CImgMergeFrame::OnImgInsertionDeletionDetectionMode(UINT nId)$/;"	f	class:CImgMergeFrame	typeref:typename:void
OnImgNextPage	ImgMergeFrm.cpp	/^void CImgMergeFrame::OnImgNextPage()$/;"	f	class:CImgMergeFrame	typeref:typename:void
OnImgOverlayMode	ImgMergeFrm.cpp	/^void CImgMergeFrame::OnImgOverlayMode(UINT nId)$/;"	f	class:CImgMergeFrame	typeref:typename:void
OnImgPrevPage	ImgMergeFrm.cpp	/^void CImgMergeFrame::OnImgPrevPage()$/;"	f	class:CImgMergeFrame	typeref:typename:void
OnImgThreshold	ImgMergeFrm.cpp	/^void CImgMergeFrame::OnImgThreshold(UINT nId)$/;"	f	class:CImgMergeFrame	typeref:typename:void
OnImgUseBackColor	ImgMergeFrm.cpp	/^void CImgMergeFrame::OnImgUseBackColor()$/;"	f	class:CImgMergeFrame	typeref:typename:void
OnImgViewDifferences	ImgMergeFrm.cpp	/^void CImgMergeFrame::OnImgViewDifferences()$/;"	f	class:CImgMergeFrame	typeref:typename:void
OnImgZoom	ImgMergeFrm.cpp	/^void CImgMergeFrame::OnImgZoom(UINT nId)$/;"	f	class:CImgMergeFrame	typeref:typename:void
OnImportButton	Common/PreferencesDlg.cpp	/^void CPreferencesDlg::OnImportButton()$/;"	f	class:CPreferencesDlg	typeref:typename:void
OnIncludeSubfolders	MainFrm.cpp	/^void CMainFrame::OnIncludeSubfolders()$/;"	f	class:CMainFrame	typeref:typename:void
OnInfoTip	FileFiltersDlg.cpp	/^void FileFiltersDlg::OnInfoTip(NMHDR * pNMHDR, LRESULT * pResult)$/;"	f	class:FileFiltersDlg	typeref:typename:void
OnInitDialog	AboutDlg.cpp	/^BOOL CAboutDlg::Impl::OnInitDialog() $/;"	f	class:CAboutDlg::Impl	typeref:typename:BOOL
OnInitDialog	Common/MessageBoxDialog.cpp	/^BOOL CMessageBoxDialog::OnInitDialog ( )$/;"	f	class:CMessageBoxDialog	typeref:typename:BOOL
OnInitDialog	DirCmpReportDlg.cpp	/^BOOL DirCmpReportDlg::OnInitDialog()$/;"	f	class:DirCmpReportDlg	typeref:typename:BOOL
OnInitDialog	DirColsDlg.cpp	/^BOOL CDirColsDlg::OnInitDialog() $/;"	f	class:CDirColsDlg	typeref:typename:BOOL
OnInitDialog	DirFilterDlg.cpp	/^BOOL DirFilterDlg::OnInitDialog()$/;"	f	class:DirFilterDlg	typeref:typename:BOOL
OnInitDialog	FileFiltersDlg.cpp	/^BOOL FileFiltersDlg::OnInitDialog()$/;"	f	class:FileFiltersDlg	typeref:typename:BOOL
OnInitDialog	PatchDlg.cpp	/^BOOL CPatchDlg::OnInitDialog()$/;"	f	class:CPatchDlg	typeref:typename:BOOL
OnInitDialog	PluginsListDlg.cpp	/^BOOL PluginsListDlg::OnInitDialog()$/;"	f	class:PluginsListDlg	typeref:typename:BOOL
OnInitDialog	PropCodepage.cpp	/^BOOL PropCodepage::OnInitDialog() $/;"	f	class:PropCodepage	typeref:typename:BOOL
OnInitDialog	PropCompare.cpp	/^BOOL PropCompare::OnInitDialog()$/;"	f	class:PropCompare	typeref:typename:BOOL
OnInitDialog	PropCompareFolder.cpp	/^BOOL PropCompareFolder::OnInitDialog() $/;"	f	class:PropCompareFolder	typeref:typename:BOOL
OnInitDialog	PropEditor.cpp	/^BOOL PropEditor::OnInitDialog() $/;"	f	class:PropEditor	typeref:typename:BOOL
OnInitDialog	PropGeneral.cpp	/^BOOL PropGeneral::OnInitDialog()$/;"	f	class:PropGeneral	typeref:typename:BOOL
OnInitDialog	PropRegistry.cpp	/^BOOL PropRegistry::OnInitDialog()$/;"	f	class:PropRegistry	typeref:typename:BOOL
OnInitDialog	PropShell.cpp	/^BOOL PropShell::OnInitDialog()$/;"	f	class:PropShell	typeref:typename:BOOL
OnInitDialog	SelectUnpackerDlg.cpp	/^BOOL CSelectUnpackerDlg::OnInitDialog() $/;"	f	class:CSelectUnpackerDlg	typeref:typename:BOOL
OnInitDialog	TrDialogs.cpp	/^BOOL CTrPropertyPage::OnInitDialog()$/;"	f	class:CTrPropertyPage	typeref:typename:BOOL
OnInitMenuPopup	MainFrm.cpp	/^void CMainFrame::OnInitMenuPopup(CMenu* pPopupMenu, UINT nIndex, BOOL bSysMenu) $/;"	f	class:CMainFrame	typeref:typename:void
OnInitialUpdate	DirView.cpp	/^void CDirView::OnInitialUpdate()$/;"	f	class:CDirView	typeref:typename:void
OnInitialUpdate	MergeEditSplitterView.cpp	/^void CMergeEditSplitterView::OnInitialUpdate()$/;"	f	class:CMergeEditSplitterView	typeref:typename:void
OnInitialUpdate	MergeEditView.cpp	/^void CMergeEditView::OnInitialUpdate()$/;"	f	class:CMergeEditView	typeref:typename:void
OnInitialUpdate	OpenView.cpp	/^void COpenView::OnInitialUpdate()$/;"	f	class:COpenView	typeref:typename:void
OnItemChanged	DirView.cpp	/^void CDirView::OnItemChanged(NMHDR* pNMHDR, LRESULT* pResult)$/;"	f	class:CDirView	typeref:typename:void
OnItemRename	DirView.cpp	/^void CDirView::OnItemRename()$/;"	f	class:CDirView	typeref:typename:void
OnL2RNext	MergeEditView.cpp	/^void CMergeEditView::OnL2RNext()$/;"	f	class:CMergeEditView	typeref:typename:void
OnL2r	HexMergeDoc.cpp	/^void CHexMergeDoc::OnL2r()$/;"	f	class:CHexMergeDoc	typeref:typename:void
OnL2r	ImgMergeFrm.cpp	/^void CImgMergeFrame::OnL2r()$/;"	f	class:CImgMergeFrame	typeref:typename:void
OnL2r	MergeEditView.cpp	/^void CMergeEditView::OnL2r()$/;"	f	class:CMergeEditView	typeref:typename:void
OnLButtonDblClk	Common/sizecbar.cpp	/^void CSizingControlBar::OnLButtonDblClk(UINT nFlags, CPoint point)$/;"	f	class:CSizingControlBar	typeref:typename:void
OnLButtonDblClk	DirView.cpp	/^void CDirView::OnLButtonDblClk(UINT nFlags, CPoint point)$/;"	f	class:CDirView	typeref:typename:void
OnLButtonDblClk	LocationView.cpp	/^void CLocationView::OnLButtonDblClk(UINT nFlags, CPoint point) $/;"	f	class:CLocationView	typeref:typename:void
OnLButtonDblClk	MergeEditView.cpp	/^void CMergeEditView::OnLButtonDblClk(UINT nFlags, CPoint point)$/;"	f	class:CMergeEditView	typeref:typename:void
OnLButtonDown	Common/MDITabBar.cpp	/^void CMDITabBar::OnLButtonDown(UINT nFlags, CPoint point)$/;"	f	class:CMDITabBar	typeref:typename:void
OnLButtonDown	Common/sizecbar.cpp	/^void CSizingControlBar::OnLButtonDown(UINT nFlags, CPoint point)$/;"	f	class:CSizingControlBar	typeref:typename:void
OnLButtonDown	DiffViewBar.cpp	/^void CDiffViewBar::OnLButtonDown(UINT nFlags, CPoint point)$/;"	f	class:CDiffViewBar	typeref:typename:void
OnLButtonDown	LocationBar.cpp	/^void CLocationBar::OnLButtonDown(UINT nFlags, CPoint point)$/;"	f	class:CLocationBar	typeref:typename:void
OnLButtonDown	LocationView.cpp	/^void CLocationView::OnLButtonDown(UINT nFlags, CPoint point) $/;"	f	class:CLocationView	typeref:typename:void
OnLButtonUp	Common/MDITabBar.cpp	/^void CMDITabBar::OnLButtonUp(UINT nFlags, CPoint point)$/;"	f	class:CMDITabBar	typeref:typename:void
OnLButtonUp	Common/sizecbar.cpp	/^void CSizingControlBar::OnLButtonUp(UINT nFlags, CPoint point)$/;"	f	class:CSizingControlBar	typeref:typename:void
OnLButtonUp	LocationView.cpp	/^void CLocationView::OnLButtonUp(UINT nFlags, CPoint point) $/;"	f	class:CLocationView	typeref:typename:void
OnLButtonUp	MergeEditView.cpp	/^void CMergeEditView::OnLButtonUp(UINT nFlags, CPoint point)$/;"	f	class:CMergeEditView	typeref:typename:void
OnLButtonUp	OpenView.cpp	/^void COpenView::OnLButtonUp(UINT nFlags, CPoint point)$/;"	f	class:COpenView	typeref:typename:void
OnLVNItemChanged	PluginsListDlg.cpp	/^void PluginsListDlg::OnLVNItemChanged(NMHDR *pNMHDR, LRESULT *pResult)$/;"	f	class:PluginsListDlg	typeref:typename:void
OnLVNItemChanging	PluginsListDlg.cpp	/^void PluginsListDlg::OnLVNItemChanging(NMHDR *pNMHDR, LRESULT *pResult)$/;"	f	class:PluginsListDlg	typeref:typename:void
OnLastdiff	DirView.cpp	/^void CDirView::OnLastdiff()$/;"	f	class:CDirView	typeref:typename:void
OnLastdiff	HexMergeView.cpp	/^void CHexMergeView::OnLastdiff()$/;"	f	class:CHexMergeView	typeref:typename:void
OnLastdiff	ImgMergeFrm.cpp	/^void CImgMergeFrame::OnLastdiff()$/;"	f	class:CImgMergeFrame	typeref:typename:void
OnLastdiff	MergeEditView.cpp	/^void CMergeEditView::OnLastdiff()$/;"	f	class:CMergeEditView	typeref:typename:void
OnLeftReadOnly	ImgMergeFrm.cpp	/^void CImgMergeFrame::OnLeftReadOnly()$/;"	f	class:CImgMergeFrame	typeref:typename:void
OnLeftReadOnly	MergeEditView.cpp	/^void CMergeEditView::OnLeftReadOnly()$/;"	f	class:CMergeEditView	typeref:typename:void
OnLineDiffControlClicked	PropEditor.cpp	/^void PropEditor::OnLineDiffControlClicked()$/;"	f	class:PropEditor	typeref:typename:void
OnLoadLanguages	PropGeneral.cpp	/^LRESULT PropGeneral::OnLoadLanguages(WPARAM, LPARAM)$/;"	f	class:PropGeneral	typeref:typename:LRESULT
OnLoadProject	OpenView.cpp	/^void COpenView::OnLoadProject()$/;"	f	class:COpenView	typeref:typename:void
OnLoadSaveSameCodepage	LoadSaveCodepageDlg.cpp	/^void CLoadSaveCodepageDlg::OnLoadSaveSameCodepage()$/;"	f	class:CLoadSaveCodepageDlg	typeref:typename:void
OnLvnItemActivateLfilterList	LineFiltersDlg.cpp	/^void LineFiltersDlg::OnLvnItemActivateLfilterList(NMHDR *pNMHDR, LRESULT *pResult)$/;"	f	class:LineFiltersDlg	typeref:typename:void
OnLvnItemchangedColdlgList	DirColsDlg.cpp	/^void CDirColsDlg::OnLvnItemchangedColdlgList(NMHDR *pNMHDR, LRESULT *pResult)$/;"	f	class:CDirColsDlg	typeref:typename:void
OnLvnItemchangedFilterfileList	FileFiltersDlg.cpp	/^void FileFiltersDlg::OnLvnItemchangedFilterfileList(NMHDR *pNMHDR, LRESULT *pResult)$/;"	f	class:FileFiltersDlg	typeref:typename:void
OnLvnKeyDownLfilterList	LineFiltersDlg.cpp	/^void LineFiltersDlg::OnLvnKeyDownLfilterList(NMHDR *pNMHDR, LRESULT *pResult)$/;"	f	class:LineFiltersDlg	typeref:typename:void
OnMButtonDown	Common/MDITabBar.cpp	/^void CMDITabBar::OnMButtonDown(UINT nFlags, CPoint point)$/;"	f	class:CMDITabBar	typeref:typename:void
OnMDIActivate	HexMergeFrm.cpp	/^void CHexMergeFrame::OnMDIActivate(BOOL bActivate, CWnd* pActivateWnd, CWnd* pDeactivateWnd)$/;"	f	class:CHexMergeFrame	typeref:typename:void
OnMDIActivate	ImgMergeFrm.cpp	/^void CImgMergeFrame::OnMDIActivate(BOOL bActivate, CWnd* pActivateWnd, CWnd* pDeactivateWnd)$/;"	f	class:CImgMergeFrame	typeref:typename:void
OnMDIActivate	MergeEditFrm.cpp	/^void CMergeEditFrame::OnMDIActivate(BOOL bActivate, CWnd* pActivateWnd, CWnd* pDeactivateWnd)$/;"	f	class:CMergeEditFrame	typeref:typename:void
OnMRUs	MainFrm.cpp	/^void CMainFrame::OnMRUs(UINT nID)$/;"	f	class:CMainFrame	typeref:typename:void
OnMarginBackgroundColor	PropTextColors.cpp	/^void PropTextColors::OnMarginBackgroundColor() $/;"	f	class:PropTextColors	typeref:typename:void
OnMarkedRescan	DirView.cpp	/^void CDirView::OnMarkedRescan()$/;"	f	class:CDirView	typeref:typename:void
OnMarkerColors	PropMarkerColors.cpp	/^void PropMarkerColors::OnMarkerColors(UINT nID) $/;"	f	class:PropMarkerColors	typeref:typename:void
OnMeasureItem	MainFrm.cpp	/^void CMainFrame::OnMeasureItem(int nIDCtl,$/;"	f	class:CMainFrame	typeref:typename:void
OnMenuChar	MainFrm.cpp	/^LRESULT CMainFrame::OnMenuChar(UINT nChar, UINT nFlags, $/;"	f	class:CMainFrame	typeref:typename:LRESULT
OnMergeCompare	DirView.cpp	/^void CDirView::OnMergeCompare()$/;"	f	class:CDirView	typeref:typename:void
OnMergeCompare2	DirView.cpp	/^void CDirView::OnMergeCompare2()$/;"	f	class:CDirView	typeref:typename:void
OnMergeCompareAs	DirView.cpp	/^void CDirView::OnMergeCompareAs(UINT nID)$/;"	f	class:CDirView	typeref:typename:void
OnMergeCompareNonHorizontally	DirView.cpp	/^void CDirView::OnMergeCompareNonHorizontally()$/;"	f	class:CDirView	typeref:typename:void
OnMergeCompareXML	DirView.cpp	/^void CDirView::OnMergeCompareXML()$/;"	f	class:CDirView	typeref:typename:void
OnMergingMode	Merge.cpp	/^void CMergeApp::OnMergingMode()$/;"	f	class:CMergeApp	typeref:typename:void
OnMiddleReadOnly	ImgMergeFrm.cpp	/^void CImgMergeFrame::OnMiddleReadOnly()$/;"	f	class:CImgMergeFrame	typeref:typename:void
OnMiddleReadOnly	MergeEditView.cpp	/^void CMergeEditView::OnMiddleReadOnly()$/;"	f	class:CMergeEditView	typeref:typename:void
OnMouseActivate	LocationView.cpp	/^int  CLocationView::OnMouseActivate(CWnd* pDesktopWnd, UINT nHitTest, UINT message)$/;"	f	class:CLocationView	typeref:typename:int
OnMouseLeave	Common/MDITabBar.cpp	/^void CMDITabBar::OnMouseLeave()$/;"	f	class:CMDITabBar	typeref:typename:void
OnMouseMove	Common/MDITabBar.cpp	/^void CMDITabBar::OnMouseMove(UINT nFlags, CPoint point)$/;"	f	class:CMDITabBar	typeref:typename:void
OnMouseMove	Common/sizecbar.cpp	/^void CSizingControlBar::OnMouseMove(UINT nFlags, CPoint point)$/;"	f	class:CSizingControlBar	typeref:typename:void
OnMouseMove	FileFiltersDlg.cpp	/^void FileFiltersDlg::OnMouseMove(UINT nFlags, CPoint point) $/;"	f	class:FileFiltersDlg	typeref:typename:void
OnMouseMove	LocationView.cpp	/^void CLocationView::OnMouseMove(UINT nFlags, CPoint point) $/;"	f	class:CLocationView	typeref:typename:void
OnMouseMove	OpenView.cpp	/^void COpenView::OnMouseMove(UINT nFlags, CPoint point)$/;"	f	class:COpenView	typeref:typename:void
OnMouseWheel	MergeEditView.cpp	/^BOOL CMergeEditView::OnMouseWheel(UINT nFlags, short zDelta, CPoint pt)$/;"	f	class:CMergeEditView	typeref:typename:BOOL
OnMovedColor	PropColors.cpp	/^void PropMergeColors::OnMovedColor()$/;"	f	class:PropMergeColors	typeref:typename:void
OnMovedDeletedColor	PropColors.cpp	/^void PropMergeColors::OnMovedDeletedColor()$/;"	f	class:PropMergeColors	typeref:typename:void
OnMovedTextColor	PropColors.cpp	/^void PropMergeColors::OnMovedTextColor()$/;"	f	class:PropMergeColors	typeref:typename:void
OnNMDblclkList	PluginsListDlg.cpp	/^void PluginsListDlg::OnNMDblclkList(NMHDR *pNMHDR, LRESULT *pResult)$/;"	f	class:PluginsListDlg	typeref:typename:void
OnNcCalcSize	Common/sizecbar.cpp	/^void CSizingControlBar::OnNcCalcSize(BOOL bCalcValidRects,$/;"	f	class:CSizingControlBar	typeref:typename:void
OnNcCalcSize	HexMergeView.cpp	/^void CHexMergeView::OnNcCalcSize(BOOL, NCCALCSIZE_PARAMS *)$/;"	f	class:CHexMergeView	typeref:typename:void
OnNcHitTest	Common/CMoveConstraint.cpp	/^CMoveConstraint::OnNcHitTest(UINT msg, WPARAM wParam, LPARAM lParam, LRESULT * plresult)$/;"	f	class:prdlg::CMoveConstraint	typeref:typename:bool
OnNcHitTest	Common/scbarg.cpp	/^NCHITTEST_RESULT CSizingControlBarG::OnNcHitTest(CPoint point)$/;"	f	class:CSizingControlBarG	typeref:typename:NCHITTEST_RESULT
OnNcHitTest	Common/sizecbar.cpp	/^NCHITTEST_RESULT CSizingControlBar::OnNcHitTest(CPoint point)$/;"	f	class:CSizingControlBar	typeref:typename:NCHITTEST_RESULT
OnNcHitTest	OpenFrm.cpp	/^LRESULT COpenFrame::OnNcHitTest(CPoint point)$/;"	f	class:COpenFrame	typeref:typename:LRESULT
OnNcHitTest	OpenView.cpp	/^LRESULT COpenView::OnNcHitTest(CPoint point)$/;"	f	class:COpenView	typeref:typename:LRESULT
OnNcLButtonDown	Common/sizecbar.cpp	/^void CSCBMiniDockFrameWnd::OnNcLButtonDown(UINT nHitTest, CPoint point)$/;"	f	class:CSCBMiniDockFrameWnd	typeref:typename:void
OnNcLButtonDown	Common/sizecbar.cpp	/^void CSizingControlBar::OnNcLButtonDown(UINT nHitTest, CPoint point) $/;"	f	class:CSizingControlBar	typeref:typename:void
OnNcPaint	Common/sizecbar.cpp	/^void CSizingControlBar::OnNcPaint()$/;"	f	class:CSizingControlBar	typeref:typename:void
OnNcPaint	FilepathEdit.cpp	/^void CFilepathEdit::OnNcPaint()$/;"	f	class:CFilepathEdit	typeref:typename:void
OnNewDocument	DirDoc.cpp	/^BOOL CDirDoc::OnNewDocument()$/;"	f	class:CDirDoc	typeref:typename:BOOL
OnNewDocument	MergeDoc.cpp	/^BOOL CMergeDoc::OnNewDocument()$/;"	f	class:CMergeDoc	typeref:typename:BOOL
OnNewDocument	OpenDoc.cpp	/^BOOL COpenDoc::OnNewDocument()$/;"	f	class:COpenDoc	typeref:typename:BOOL
OnNext3wayDiff	MergeEditView.cpp	/^void CMergeEditView::OnNext3wayDiff(int nDiffType)$/;"	f	class:CMergeEditView	typeref:typename:void
OnNextConflict	ImgMergeFrm.cpp	/^void CImgMergeFrame::OnNextConflict()$/;"	f	class:CImgMergeFrame	typeref:typename:void
OnNextConflict	MergeEditView.cpp	/^void CMergeEditView::OnNextConflict()$/;"	f	class:CMergeEditView	typeref:typename:void
OnNextdiff	DirView.cpp	/^void CDirView::OnNextdiff()$/;"	f	class:CDirView	typeref:typename:void
OnNextdiff	HexMergeView.cpp	/^void CHexMergeView::OnNextdiff()$/;"	f	class:CHexMergeView	typeref:typename:void
OnNextdiff	ImgMergeFrm.cpp	/^void CImgMergeFrame::OnNextdiff()$/;"	f	class:CImgMergeFrame	typeref:typename:void
OnNextdiff	MergeEditView.cpp	/^void CMergeEditView::OnNextdiff()$/;"	f	class:CMergeEditView	typeref:typename:void
OnNextdiffLM	MergeEditView.cpp	/^void CMergeEditView::OnNextdiffLM()$/;"	f	class:CMergeEditView	typeref:typename:void
OnNextdiffLO	MergeEditView.cpp	/^void CMergeEditView::OnNextdiffLO()$/;"	f	class:CMergeEditView	typeref:typename:void
OnNextdiffLR	MergeEditView.cpp	/^void CMergeEditView::OnNextdiffLR()$/;"	f	class:CMergeEditView	typeref:typename:void
OnNextdiffMO	MergeEditView.cpp	/^void CMergeEditView::OnNextdiffMO()$/;"	f	class:CMergeEditView	typeref:typename:void
OnNextdiffMR	MergeEditView.cpp	/^void CMergeEditView::OnNextdiffMR()$/;"	f	class:CMergeEditView	typeref:typename:void
OnNextdiffRO	MergeEditView.cpp	/^void CMergeEditView::OnNextdiffRO()$/;"	f	class:CMergeEditView	typeref:typename:void
OnNoPrediffer	MergeEditView.cpp	/^void CMergeEditView::OnNoPrediffer()$/;"	f	class:CMergeEditView	typeref:typename:void
OnNotify	DirView.cpp	/^BOOL CDirView::OnNotify(WPARAM wParam, LPARAM lParam, LRESULT* pResult)$/;"	f	class:CDirView	typeref:typename:BOOL
OnNotifyLineHasBeenEdited	DiffTextBuffer.cpp	/^OnNotifyLineHasBeenEdited(int nLine)$/;"	f	class:CDiffTextBuffer	typeref:typename:void
OnNotifyLineHasBeenEdited	GhostTextBuffer.cpp	/^OnNotifyLineHasBeenEdited(int nLine)$/;"	f	class:CGhostTextBuffer	typeref:typename:void
OnOK	Common/PreferencesDlg.cpp	/^void CPreferencesDlg::OnOK()$/;"	f	class:CPreferencesDlg	typeref:typename:void
OnOK	Common/PropertyPageHost.cpp	/^void CPropertyPageHost::OnOK()$/;"	f	class:CPropertyPageHost	typeref:typename:void
OnOK	DirCmpReportDlg.cpp	/^void DirCmpReportDlg::OnOK()$/;"	f	class:DirCmpReportDlg	typeref:typename:void
OnOK	DirColsDlg.cpp	/^void CDirColsDlg::OnOK() $/;"	f	class:CDirColsDlg	typeref:typename:void
OnOK	DirFilterDlg.cpp	/^void DirFilterDlg::OnOK()$/;"	f	class:DirFilterDlg	typeref:typename:void
OnOK	FileFiltersDlg.cpp	/^void FileFiltersDlg::OnOK()$/;"	f	class:FileFiltersDlg	typeref:typename:void
OnOK	LineFiltersDlg.cpp	/^void LineFiltersDlg::OnOK()$/;"	f	class:LineFiltersDlg	typeref:typename:void
OnOK	LoadSaveCodepageDlg.cpp	/^void CLoadSaveCodepageDlg::OnOK ()$/;"	f	class:CLoadSaveCodepageDlg	typeref:typename:void
OnOK	MergeDoc.cpp	/^void CMergeDoc::OnOK()$/;"	f	class:CMergeDoc	typeref:typename:void
OnOK	OpenView.cpp	/^void COpenView::OnOK() $/;"	f	class:COpenView	typeref:typename:void
OnOpenFile	MergeEditView.cpp	/^void CMergeEditView::OnOpenFile()$/;"	f	class:CMergeEditView	typeref:typename:void
OnOpenFileWith	MergeEditView.cpp	/^void CMergeEditView::OnOpenFileWith()$/;"	f	class:CMergeEditView	typeref:typename:void
OnOpenFileWithEditor	MergeEditView.cpp	/^void CMergeEditView::OnOpenFileWithEditor()$/;"	f	class:CMergeEditView	typeref:typename:void
OnOpenRecentFile	Merge.cpp	/^BOOL CMergeApp::OnOpenRecentFile(UINT nID)$/;"	f	class:CMergeApp	typeref:typename:BOOL
OnOptions	MainFrm.cpp	/^void CMainFrame::OnOptions() $/;"	f	class:CMainFrame	typeref:typename:void
OnOptions	OpenView.cpp	/^void COpenView::OnOptions()$/;"	f	class:COpenView	typeref:typename:void
OnOptionsShowBinaries	DirView.cpp	/^void CDirView::OnOptionsShowBinaries()$/;"	f	class:CDirView	typeref:typename:void
OnOptionsShowDifferent	DirView.cpp	/^void CDirView::OnOptionsShowDifferent() $/;"	f	class:CDirView	typeref:typename:void
OnOptionsShowDifferentLeftOnly	DirView.cpp	/^void CDirView::OnOptionsShowDifferentLeftOnly() $/;"	f	class:CDirView	typeref:typename:void
OnOptionsShowDifferentMiddleOnly	DirView.cpp	/^void CDirView::OnOptionsShowDifferentMiddleOnly() $/;"	f	class:CDirView	typeref:typename:void
OnOptionsShowDifferentRightOnly	DirView.cpp	/^void CDirView::OnOptionsShowDifferentRightOnly() $/;"	f	class:CDirView	typeref:typename:void
OnOptionsShowIdentical	DirView.cpp	/^void CDirView::OnOptionsShowIdentical() $/;"	f	class:CDirView	typeref:typename:void
OnOptionsShowMissingLeftOnly	DirView.cpp	/^void CDirView::OnOptionsShowMissingLeftOnly() $/;"	f	class:CDirView	typeref:typename:void
OnOptionsShowMissingMiddleOnly	DirView.cpp	/^void CDirView::OnOptionsShowMissingMiddleOnly() $/;"	f	class:CDirView	typeref:typename:void
OnOptionsShowMissingRightOnly	DirView.cpp	/^void CDirView::OnOptionsShowMissingRightOnly() $/;"	f	class:CDirView	typeref:typename:void
OnOptionsShowSkipped	DirView.cpp	/^void CDirView::OnOptionsShowSkipped()$/;"	f	class:CDirView	typeref:typename:void
OnOptionsShowUniqueLeft	DirView.cpp	/^void CDirView::OnOptionsShowUniqueLeft() $/;"	f	class:CDirView	typeref:typename:void
OnOptionsShowUniqueMiddle	DirView.cpp	/^void CDirView::OnOptionsShowUniqueMiddle() $/;"	f	class:CDirView	typeref:typename:void
OnOptionsShowUniqueRight	DirView.cpp	/^void CDirView::OnOptionsShowUniqueRight() $/;"	f	class:CDirView	typeref:typename:void
OnPaint	Common/MDITabBar.cpp	/^void CMDITabBar::OnPaint() $/;"	f	class:CMDITabBar	typeref:typename:void
OnPaint	Common/sizecbar.cpp	/^void CSizingControlBar::OnPaint()$/;"	f	class:CSizingControlBar	typeref:typename:void
OnPaint	OpenView.cpp	/^void COpenView::OnPaint()$/;"	f	class:COpenView	typeref:typename:void
OnPathButton	OpenView.cpp	/^void COpenView::OnPathButton()$/;"	f	class:COpenView	typeref:typename:void
OnPluginPrediffMode	MainFrm.cpp	/^void CMainFrame::OnPluginPrediffMode(UINT nID )$/;"	f	class:CMainFrame	typeref:typename:void
OnPluginPredifferMode	DirView.cpp	/^void CDirView::OnPluginPredifferMode(UINT nID)$/;"	f	class:CDirView	typeref:typename:void
OnPluginUnpackMode	MainFrm.cpp	/^void CMainFrame::OnPluginUnpackMode(UINT nID )$/;"	f	class:CMainFrame	typeref:typename:void
OnPluginsList	MainFrm.cpp	/^void CMainFrame::OnPluginsList()$/;"	f	class:CMainFrame	typeref:typename:void
OnPrediffer	MergeEditView.cpp	/^void CMergeEditView::OnPrediffer(UINT nID )$/;"	f	class:CMergeEditView	typeref:typename:void
OnPrev3wayDiff	MergeEditView.cpp	/^void CMergeEditView::OnPrev3wayDiff(int nDiffType)$/;"	f	class:CMergeEditView	typeref:typename:void
OnPrevConflict	ImgMergeFrm.cpp	/^void CImgMergeFrame::OnPrevConflict()$/;"	f	class:CImgMergeFrame	typeref:typename:void
OnPrevConflict	MergeEditView.cpp	/^void CMergeEditView::OnPrevConflict()$/;"	f	class:CMergeEditView	typeref:typename:void
OnPrevdiff	DirView.cpp	/^void CDirView::OnPrevdiff()$/;"	f	class:CDirView	typeref:typename:void
OnPrevdiff	HexMergeView.cpp	/^void CHexMergeView::OnPrevdiff()$/;"	f	class:CHexMergeView	typeref:typename:void
OnPrevdiff	ImgMergeFrm.cpp	/^void CImgMergeFrame::OnPrevdiff()$/;"	f	class:CImgMergeFrame	typeref:typename:void
OnPrevdiff	MergeEditView.cpp	/^void CMergeEditView::OnPrevdiff()$/;"	f	class:CMergeEditView	typeref:typename:void
OnPrevdiffLM	MergeEditView.cpp	/^void CMergeEditView::OnPrevdiffLM()$/;"	f	class:CMergeEditView	typeref:typename:void
OnPrevdiffLO	MergeEditView.cpp	/^void CMergeEditView::OnPrevdiffLO()$/;"	f	class:CMergeEditView	typeref:typename:void
OnPrevdiffLR	MergeEditView.cpp	/^void CMergeEditView::OnPrevdiffLR()$/;"	f	class:CMergeEditView	typeref:typename:void
OnPrevdiffMO	MergeEditView.cpp	/^void CMergeEditView::OnPrevdiffMO()$/;"	f	class:CMergeEditView	typeref:typename:void
OnPrevdiffMR	MergeEditView.cpp	/^void CMergeEditView::OnPrevdiffMR()$/;"	f	class:CMergeEditView	typeref:typename:void
OnPrevdiffRO	MergeEditView.cpp	/^void CMergeEditView::OnPrevdiffRO()$/;"	f	class:CMergeEditView	typeref:typename:void
OnPrint	MergeEditView.cpp	/^void CMergeEditView::OnPrint(CDC* pDC, CPrintInfo* pInfo) $/;"	f	class:CMergeEditView	typeref:typename:void
OnR2LNext	MergeEditView.cpp	/^void CMergeEditView::OnR2LNext()$/;"	f	class:CMergeEditView	typeref:typename:void
OnR2l	HexMergeDoc.cpp	/^void CHexMergeDoc::OnR2l()$/;"	f	class:CHexMergeDoc	typeref:typename:void
OnR2l	ImgMergeFrm.cpp	/^void CImgMergeFrame::OnR2l()$/;"	f	class:CImgMergeFrame	typeref:typename:void
OnR2l	MergeEditView.cpp	/^void CMergeEditView::OnR2l()$/;"	f	class:CMergeEditView	typeref:typename:void
OnRButtonDown	Common/sizecbar.cpp	/^void CSizingControlBar::OnRButtonDown(UINT nFlags, CPoint point)$/;"	f	class:CSizingControlBar	typeref:typename:void
OnRButtonDown	MergeEditView.cpp	/^void CMergeEditView::OnRButtonDown(UINT nFlags, CPoint point)$/;"	f	class:CMergeEditView	typeref:typename:void
OnReadOnly	DirView.cpp	/^void CDirView::OnReadOnly()$/;"	f	class:CDirView	typeref:typename:void
OnRefresh	DirView.cpp	/^void CDirView::OnRefresh()$/;"	f	class:CDirView	typeref:typename:void
OnRefresh	HexMergeDoc.cpp	/^void CHexMergeDoc::OnRefresh()$/;"	f	class:CHexMergeDoc	typeref:typename:void
OnRefresh	ImgMergeFrm.cpp	/^void CImgMergeFrame::OnRefresh()$/;"	f	class:CImgMergeFrame	typeref:typename:void
OnRefresh	MergeEditView.cpp	/^void CMergeEditView::OnRefresh()$/;"	f	class:CMergeEditView	typeref:typename:void
OnRegisterShellExtension	PropShell.cpp	/^void PropShell::OnRegisterShellExtension()$/;"	f	class:PropShell	typeref:typename:void
OnRegisterShellExtensionPerUser	PropShell.cpp	/^void PropShell::OnRegisterShellExtensionPerUser()$/;"	f	class:PropShell	typeref:typename:void
OnRegularBackgroundColor	PropTextColors.cpp	/^void PropTextColors::OnRegularBackgroundColor() $/;"	f	class:PropTextColors	typeref:typename:void
OnRegularTextColor	PropTextColors.cpp	/^void PropTextColors::OnRegularTextColor() $/;"	f	class:PropTextColors	typeref:typename:void
OnReloadPlugins	MainFrm.cpp	/^void CMainFrame::OnReloadPlugins()$/;"	f	class:CMainFrame	typeref:typename:void
OnResetAllMessageBoxes	PropGeneral.cpp	/^void PropGeneral::OnResetAllMessageBoxes()$/;"	f	class:PropGeneral	typeref:typename:void
OnResizePanes	MainFrm.cpp	/^void CMainFrame::OnResizePanes()$/;"	f	class:CMainFrame	typeref:typename:void
OnRightReadOnly	ImgMergeFrm.cpp	/^void CImgMergeFrame::OnRightReadOnly()$/;"	f	class:CImgMergeFrame	typeref:typename:void
OnRightReadOnly	MergeEditView.cpp	/^void CMergeEditView::OnRightReadOnly()$/;"	f	class:CMergeEditView	typeref:typename:void
OnSNPColor	PropColors.cpp	/^void PropMergeColors::OnSNPColor()$/;"	f	class:PropMergeColors	typeref:typename:void
OnSNPDeletedColor	PropColors.cpp	/^void PropMergeColors::OnSNPDeletedColor()$/;"	f	class:PropMergeColors	typeref:typename:void
OnSNPTextColor	PropColors.cpp	/^void PropMergeColors::OnSNPTextColor()$/;"	f	class:PropMergeColors	typeref:typename:void
OnSaveConfigData	MainFrm.cpp	/^void CMainFrame::OnSaveConfigData()$/;"	f	class:CMainFrame	typeref:typename:void
OnSaveProject	MainFrm.cpp	/^void CMainFrame::OnSaveProject()$/;"	f	class:CMainFrame	typeref:typename:void
OnSaveProject	OpenView.cpp	/^void COpenView::OnSaveProject()$/;"	f	class:COpenView	typeref:typename:void
OnScripts	MergeEditView.cpp	/^void CMergeEditView::OnScripts(UINT nID )$/;"	f	class:CMergeEditView	typeref:typename:void
OnSearch	DirView.cpp	/^void CDirView::OnSearch()$/;"	f	class:CDirView	typeref:typename:void
OnSelDifferenceColor	PropColors.cpp	/^void PropMergeColors::OnSelDifferenceColor() $/;"	f	class:PropMergeColors	typeref:typename:void
OnSelDifferenceDeletedColor	PropColors.cpp	/^void PropMergeColors::OnSelDifferenceDeletedColor() $/;"	f	class:PropMergeColors	typeref:typename:void
OnSelDifferenceTextColor	PropColors.cpp	/^void PropMergeColors::OnSelDifferenceTextColor() $/;"	f	class:PropMergeColors	typeref:typename:void
OnSelMovedColor	PropColors.cpp	/^void PropMergeColors::OnSelMovedColor()$/;"	f	class:PropMergeColors	typeref:typename:void
OnSelMovedDeletedColor	PropColors.cpp	/^void PropMergeColors::OnSelMovedDeletedColor()$/;"	f	class:PropMergeColors	typeref:typename:void
OnSelMovedTextColor	PropColors.cpp	/^void PropMergeColors::OnSelMovedTextColor()$/;"	f	class:PropMergeColors	typeref:typename:void
OnSelSNPColor	PropColors.cpp	/^void PropMergeColors::OnSelSNPColor()$/;"	f	class:PropMergeColors	typeref:typename:void
OnSelSNPDeletedColor	PropColors.cpp	/^void PropMergeColors::OnSelSNPDeletedColor()$/;"	f	class:PropMergeColors	typeref:typename:void
OnSelSNPTextColor	PropColors.cpp	/^void PropMergeColors::OnSelSNPTextColor()$/;"	f	class:PropMergeColors	typeref:typename:void
OnSelWordDiffColor	PropColors.cpp	/^void PropMergeColors::OnSelWordDiffColor() $/;"	f	class:PropMergeColors	typeref:typename:void
OnSelWordDiffDeletedColor	PropColors.cpp	/^void PropMergeColors::OnSelWordDiffDeletedColor()$/;"	f	class:PropMergeColors	typeref:typename:void
OnSelWordDiffTextColor	PropColors.cpp	/^void PropMergeColors::OnSelWordDiffTextColor() $/;"	f	class:PropMergeColors	typeref:typename:void
OnSelchange	Common/MDITabBar.cpp	/^BOOL CMDITabBar::OnSelchange(NMHDR* pNMHDR, LRESULT* pResult)$/;"	f	class:CMDITabBar	typeref:typename:BOOL
OnSelchangeCombo	OpenView.cpp	/^void COpenView::OnSelchangeCombo(int index) $/;"	f	class:COpenView	typeref:typename:void
OnSelchangeDiffStyle	PatchDlg.cpp	/^void CPatchDlg::OnSelchangeDiffStyle()$/;"	f	class:CPatchDlg	typeref:typename:void
OnSelchangePathCombo	OpenView.cpp	/^void COpenView::OnSelchangePathCombo() $/;"	f	class:COpenView	typeref:typename:void
OnSelchangeUnpackerName	SelectUnpackerDlg.cpp	/^void CSelectUnpackerDlg::OnSelchangeUnpackerName() $/;"	f	class:CSelectUnpackerDlg	typeref:typename:void
OnSelchangedPages	Common/PreferencesDlg.cpp	/^void CPreferencesDlg::OnSelchangedPages(NMHDR* pNMHDR, LRESULT* pResult) $/;"	f	class:CPreferencesDlg	typeref:typename:void
OnSelectAll	DirView.cpp	/^void CDirView::OnSelectAll()$/;"	f	class:CDirView	typeref:typename:void
OnSelectFilter	OpenView.cpp	/^void COpenView::OnSelectFilter()$/;"	f	class:COpenView	typeref:typename:void
OnSelectLineDiff	MergeEditView.cpp	/^void CMergeEditView::OnSelectLineDiff()$/;"	f	class:CMergeEditView	typeref:typename:void
OnSelectUnpacker	OpenView.cpp	/^void COpenView::OnSelectUnpacker()$/;"	f	class:COpenView	typeref:typename:void
OnSelectionBackgroundColor	PropTextColors.cpp	/^void PropTextColors::OnSelectionBackgroundColor() $/;"	f	class:PropTextColors	typeref:typename:void
OnSelectionTextColor	PropTextColors.cpp	/^void PropTextColors::OnSelectionTextColor() $/;"	f	class:PropTextColors	typeref:typename:void
OnSetFocus	ImgMergeFrm.cpp	/^void CImgMergeFrame::OnSetFocus(CWnd* pNewWnd)$/;"	f	class:CImgMergeFrame	typeref:typename:void
OnSetFocusEdit	EditorFilepathBar.cpp	/^void CEditorFilePathBar::OnSetFocusEdit(UINT id)$/;"	f	class:CEditorFilePathBar	typeref:typename:void
OnSetText	Common/scbarcf.cpp	/^LRESULT CSizingControlBarCF::OnSetText(WPARAM wParam, LPARAM lParam)$/;"	f	class:CSizingControlBarCF	typeref:typename:LRESULT
OnSetText	Common/sizecbar.cpp	/^LRESULT CSizingControlBar::OnSetText(WPARAM wParam, LPARAM lParam)$/;"	f	class:CSizingControlBar	typeref:typename:LRESULT
OnSetfocus	Common/SuperComboBox.cpp	/^BOOL CSuperComboBox::OnSetfocus()$/;"	f	class:CSuperComboBox	typeref:typename:BOOL
OnSetfocusPathCombo	OpenView.cpp	/^void COpenView::OnSetfocusPathCombo(UINT id, NMHDR *pNMHDR, LRESULT *pResult) $/;"	f	class:COpenView	typeref:typename:void
OnSettingChange	Common/sizecbar.cpp	/^void CSizingControlBar::OnSettingChange(UINT uFlags, LPCTSTR lpszSection)$/;"	f	class:CSizingControlBar	typeref:typename:void
OnShellMenu	MergeEditView.cpp	/^void CMergeEditView::OnShellMenu()$/;"	f	class:CMergeEditView	typeref:typename:void
OnSize	Common/PropertyPageHost.cpp	/^void CPropertyPageHost::OnSize(UINT nType, int cx, int cy) $/;"	f	class:CPropertyPageHost	typeref:typename:void
OnSize	Common/SplitterWndEx.cpp	/^void CSplitterWndEx::OnSize(UINT nType, int cx, int cy) $/;"	f	class:CSplitterWndEx	typeref:typename:void
OnSize	Common/sizecbar.cpp	/^void CSCBMiniDockFrameWnd::OnSize(UINT nType, int cx, int cy) $/;"	f	class:CSCBMiniDockFrameWnd	typeref:typename:void
OnSize	Common/sizecbar.cpp	/^void CSizingControlBar::OnSize(UINT nType, int cx, int cy)$/;"	f	class:CSizingControlBar	typeref:typename:void
OnSize	DirFrame.cpp	/^void CDirFrame::OnSize(UINT nType, int cx, int cy) $/;"	f	class:CDirFrame	typeref:typename:void
OnSize	DirView.cpp	/^void CDirView::OnSize(UINT nType, int cx, int cy)$/;"	f	class:CDirView	typeref:typename:void
OnSize	HexMergeFrm.cpp	/^void CHexMergeFrame::OnSize(UINT nType, int cx, int cy) $/;"	f	class:CHexMergeFrame	typeref:typename:void
OnSize	ImgMergeFrm.cpp	/^void CImgMergeFrame::OnSize(UINT nType, int cx, int cy) $/;"	f	class:CImgMergeFrame	typeref:typename:void
OnSize	LocationBar.cpp	/^void CLocationBar::OnSize(UINT nType, int cx, int cy) $/;"	f	class:CLocationBar	typeref:typename:void
OnSize	LocationView.cpp	/^void CLocationView::OnSize(UINT nType, int cx, int cy) $/;"	f	class:CLocationView	typeref:typename:void
OnSize	MergeEditFrm.cpp	/^void CMergeEditFrame::OnSize(UINT nType, int cx, int cy) $/;"	f	class:CMergeEditFrame	typeref:typename:void
OnSize	MergeEditSplitterView.cpp	/^void CMergeEditSplitterView::OnSize(UINT nType, int cx, int cy)$/;"	f	class:CMergeEditSplitterView	typeref:typename:void
OnSize	MergeEditView.cpp	/^void CMergeEditView::OnSize(UINT nType, int cx, int cy) $/;"	f	class:CMergeEditView	typeref:typename:void
OnStorePaneSizes	HexMergeFrm.cpp	/^LRESULT CHexMergeFrame::OnStorePaneSizes(WPARAM wParam, LPARAM lParam)$/;"	f	class:CHexMergeFrame	typeref:typename:LRESULT
OnStorePaneSizes	ImgMergeFrm.cpp	/^LRESULT CImgMergeFrame::OnStorePaneSizes(WPARAM wParam, LPARAM lParam)$/;"	f	class:CImgMergeFrame	typeref:typename:LRESULT
OnStorePaneSizes	MergeEditFrm.cpp	/^LRESULT CMergeEditFrame::OnStorePaneSizes(WPARAM wParam, LPARAM lParam)$/;"	f	class:CMergeEditFrame	typeref:typename:LRESULT
OnSwapButton	OpenView.cpp	/^void COpenView::OnSwapButton() $/;"	f	class:COpenView	typeref:typename:void
OnTestBtn	TestFilterDlg.cpp	/^void CTestFilterDlg::OnTestBtn() $/;"	f	class:CTestFilterDlg	typeref:typename:void
OnTimer	Common/MessageBoxDialog.cpp	/^void CMessageBoxDialog::OnTimer ( UINT_PTR nIDEvent )$/;"	f	class:CMessageBoxDialog	typeref:typename:void
OnTimer	DirCompProgressBar.cpp	/^void DirCompProgressBar::OnTimer(UINT_PTR nIDEvent)$/;"	f	class:DirCompProgressBar	typeref:typename:void
OnTimer	DirView.cpp	/^void CDirView::OnTimer(UINT_PTR nIDEvent)$/;"	f	class:CDirView	typeref:typename:void
OnTimer	MergeEditFrm.cpp	/^void CMergeEditFrame::OnTimer(UINT_PTR nIDEvent) $/;"	f	class:CMergeEditFrame	typeref:typename:void
OnTimer	MergeEditView.cpp	/^void CMergeEditView::OnTimer(UINT_PTR nIDEvent)$/;"	f	class:CMergeEditView	typeref:typename:void
OnTimer	OpenView.cpp	/^void COpenView::OnTimer(UINT_PTR nIDEvent)$/;"	f	class:COpenView	typeref:typename:void
OnTimer	PropShell.cpp	/^void PropShell::OnTimer(UINT_PTR nIDEvent)$/;"	f	class:PropShell	typeref:typename:void
OnToolTipNotify	EditorFilepathBar.cpp	/^BOOL CEditorFilePathBar::OnToolTipNotify(UINT id, NMHDR * pTTTStruct, LRESULT * pResult)$/;"	f	class:CEditorFilePathBar	typeref:typename:BOOL
OnToolTipText	MainFrm.cpp	/^BOOL CMainFrame::OnToolTipText(UINT, NMHDR* pNMHDR, LRESULT* pResult)$/;"	f	class:CMainFrame	typeref:typename:BOOL
OnToolbarSize	MainFrm.cpp	/^void CMainFrame::OnToolbarSize(UINT id)$/;"	f	class:CMainFrame	typeref:typename:void
OnToolsFilters	MainFrm.cpp	/^void CMainFrame::OnToolsFilters()$/;"	f	class:CMainFrame	typeref:typename:void
OnToolsGeneratePatch	DirView.cpp	/^void CDirView::OnToolsGeneratePatch()$/;"	f	class:CDirView	typeref:typename:void
OnToolsGeneratePatch	MainFrm.cpp	/^void CMainFrame::OnToolsGeneratePatch()$/;"	f	class:CMainFrame	typeref:typename:void
OnToolsGeneratePatch	MergeDoc.cpp	/^void CMergeDoc::OnToolsGeneratePatch()$/;"	f	class:CMergeDoc	typeref:typename:void
OnToolsGenerateReport	DirView.cpp	/^void CDirView::OnToolsGenerateReport()$/;"	f	class:CDirView	typeref:typename:void
OnToolsGenerateReport	ImgMergeFrm.cpp	/^void CImgMergeFrame::OnToolsGenerateReport()$/;"	f	class:CImgMergeFrame	typeref:typename:void
OnToolsGenerateReport	MergeDoc.cpp	/^void CMergeDoc::OnToolsGenerateReport()$/;"	f	class:CMergeDoc	typeref:typename:void
OnTrackInvertTracker	Common/sizecbar.cpp	/^void CSizingControlBar::OnTrackInvertTracker()$/;"	f	class:CSizingControlBar	typeref:typename:void
OnTrackUpdateSize	Common/sizecbar.cpp	/^void CSizingControlBar::OnTrackUpdateSize(CPoint& point)$/;"	f	class:CSizingControlBar	typeref:typename:void
OnTrivialDiffColor	PropColors.cpp	/^void PropMergeColors::OnTrivialDiffColor() $/;"	f	class:PropMergeColors	typeref:typename:void
OnTrivialDiffDeletedColor	PropColors.cpp	/^void PropMergeColors::OnTrivialDiffDeletedColor() $/;"	f	class:PropMergeColors	typeref:typename:void
OnTrivialDiffTextColor	PropColors.cpp	/^void PropMergeColors::OnTrivialDiffTextColor()$/;"	f	class:PropMergeColors	typeref:typename:void
OnTtnNeedText	Common/CMoveConstraint.cpp	/^CMoveConstraint::OnTtnNeedText(TOOLTIPTEXT * pTTT, LRESULT * plresult)$/;"	f	class:prdlg::CMoveConstraint	typeref:typename:bool
OnUnpackerAllowAll	SelectUnpackerDlg.cpp	/^void CSelectUnpackerDlg::OnUnpackerAllowAll() $/;"	f	class:CSelectUnpackerDlg	typeref:typename:void
OnUnregisterShellExtension	PropShell.cpp	/^void PropShell::OnUnregisterShellExtension()$/;"	f	class:PropShell	typeref:typename:void
OnUnregisterShellExtensionPerUser	PropShell.cpp	/^void PropShell::OnUnregisterShellExtensionPerUser()$/;"	f	class:PropShell	typeref:typename:void
OnUp	DirColsDlg.cpp	/^void CDirColsDlg::OnUp()$/;"	f	class:CDirColsDlg	typeref:typename:void
OnUpdate	LocationView.cpp	/^void CLocationView::OnUpdate( CView* pSender, LPARAM lHint, CObject* pHint )$/;"	f	class:CLocationView	typeref:typename:void
OnUpdate	MergeEditView.cpp	/^void CMergeEditView::OnUpdate(CView* pSender, LPARAM lHint, CObject* pHint)$/;"	f	class:CMergeEditView	typeref:typename:void
OnUpdate	OpenView.cpp	/^void COpenView::OnUpdate(CView* pSender, LPARAM lHint, CObject* pHint)$/;"	f	class:COpenView	typeref:typename:void
OnUpdateAllLeft	ImgMergeFrm.cpp	/^void CImgMergeFrame::OnUpdateAllLeft(CCmdUI* pCmdUI)$/;"	f	class:CImgMergeFrame	typeref:typename:void
OnUpdateAllLeft	MergeEditView.cpp	/^void CMergeEditView::OnUpdateAllLeft(CCmdUI* pCmdUI)$/;"	f	class:CMergeEditView	typeref:typename:void
OnUpdateAllRight	ImgMergeFrm.cpp	/^void CImgMergeFrame::OnUpdateAllRight(CCmdUI* pCmdUI)$/;"	f	class:CImgMergeFrame	typeref:typename:void
OnUpdateAllRight	MergeEditView.cpp	/^void CMergeEditView::OnUpdateAllRight(CCmdUI* pCmdUI)$/;"	f	class:CMergeEditView	typeref:typename:void
OnUpdateAutoMerge	ImgMergeFrm.cpp	/^void CImgMergeFrame::OnUpdateAutoMerge(CCmdUI* pCmdUI)$/;"	f	class:CImgMergeFrame	typeref:typename:void
OnUpdateAutoMerge	MergeEditView.cpp	/^void CMergeEditView::OnUpdateAutoMerge(CCmdUI* pCmdUI)$/;"	f	class:CMergeEditView	typeref:typename:void
OnUpdateCaret	MergeEditView.cpp	/^void CMergeEditView::OnUpdateCaret()$/;"	f	class:CMergeEditView	typeref:typename:void
OnUpdateChangeScheme	MergeEditView.cpp	/^void CMergeEditView::OnUpdateChangeScheme(CCmdUI* pCmdUI)$/;"	f	class:CMergeEditView	typeref:typename:void
OnUpdateClearSyncPoints	MergeEditView.cpp	/^void CMergeEditView::OnUpdateClearSyncPoints(CCmdUI* pCmdUI)$/;"	f	class:CMergeEditView	typeref:typename:void
OnUpdateCmdUI	Common/MDITabBar.h	/^	virtual void OnUpdateCmdUI(CFrameWnd* pTarget, BOOL bDisableIfNoHndler) {}$/;"	f	class:CMDITabBar	typeref:typename:void
OnUpdateCmdUI	Common/scbarg.cpp	/^void CSizingControlBarG::OnUpdateCmdUI(CFrameWnd* pTarget,$/;"	f	class:CSizingControlBarG	typeref:typename:void
OnUpdateCmdUI	Common/sizecbar.cpp	/^void CSizingControlBar::OnUpdateCmdUI(CFrameWnd* pTarget,$/;"	f	class:CSizingControlBar	typeref:typename:void
OnUpdateCompareMethod	MainFrm.cpp	/^void CMainFrame::OnUpdateCompareMethod(CCmdUI* pCmdUI)$/;"	f	class:CMainFrame	typeref:typename:void
OnUpdateConvertEolTo	MergeEditView.cpp	/^void CMergeEditView::OnUpdateConvertEolTo(CCmdUI* pCmdUI)$/;"	f	class:CMergeEditView	typeref:typename:void
OnUpdateCopyFilenames	DirView.cpp	/^void CDirView::OnUpdateCopyFilenames(CCmdUI* pCmdUI)$/;"	f	class:CDirView	typeref:typename:void
OnUpdateCopyFromLeft	ImgMergeFrm.cpp	/^void CImgMergeFrame::OnUpdateCopyFromLeft(CCmdUI* pCmdUI)$/;"	f	class:CImgMergeFrame	typeref:typename:void
OnUpdateCopyFromLeft	MergeEditView.cpp	/^void CMergeEditView::OnUpdateCopyFromLeft(CCmdUI* pCmdUI)$/;"	f	class:CMergeEditView	typeref:typename:void
OnUpdateCopyFromRight	ImgMergeFrm.cpp	/^void CImgMergeFrame::OnUpdateCopyFromRight(CCmdUI* pCmdUI)$/;"	f	class:CImgMergeFrame	typeref:typename:void
OnUpdateCopyFromRight	MergeEditView.cpp	/^void CMergeEditView::OnUpdateCopyFromRight(CCmdUI* pCmdUI)$/;"	f	class:CMergeEditView	typeref:typename:void
OnUpdateCtxtDirCopy	DirView.cpp	/^void CDirView::OnUpdateCtxtDirCopy(CCmdUI* pCmdUI)$/;"	f	class:CDirView	typeref:typename:void
OnUpdateCtxtDirCopyBothDiffsOnlyTo	DirView.cpp	/^void CDirView::OnUpdateCtxtDirCopyBothDiffsOnlyTo(CCmdUI* pCmdUI)$/;"	f	class:CDirView	typeref:typename:void
OnUpdateCtxtDirCopyBothTo	DirView.cpp	/^void CDirView::OnUpdateCtxtDirCopyBothTo(CCmdUI* pCmdUI)$/;"	f	class:CDirView	typeref:typename:void
OnUpdateCtxtDirCopyTo	DirView.cpp	/^void CDirView::OnUpdateCtxtDirCopyTo(CCmdUI* pCmdUI)$/;"	f	class:CDirView	typeref:typename:void
OnUpdateCtxtDirDel	DirView.cpp	/^void CDirView::OnUpdateCtxtDirDel(CCmdUI* pCmdUI)$/;"	f	class:CDirView	typeref:typename:void
OnUpdateCtxtDirDelBoth	DirView.cpp	/^void CDirView::OnUpdateCtxtDirDelBoth(CCmdUI* pCmdUI)$/;"	f	class:CDirView	typeref:typename:void
OnUpdateCtxtDirMoveTo	DirView.cpp	/^void CDirView::OnUpdateCtxtDirMoveTo(CCmdUI* pCmdUI)$/;"	f	class:CDirView	typeref:typename:void
OnUpdateCtxtDirOpen	DirView.cpp	/^void CDirView::OnUpdateCtxtDirOpen(CCmdUI* pCmdUI)$/;"	f	class:CDirView	typeref:typename:void
OnUpdateCtxtDirOpenParentFolder	DirView.cpp	/^void CDirView::OnUpdateCtxtDirOpenParentFolder(CCmdUI* pCmdUI)$/;"	f	class:CDirView	typeref:typename:void
OnUpdateCtxtDirOpenWith	DirView.cpp	/^void CDirView::OnUpdateCtxtDirOpenWith(CCmdUI* pCmdUI)$/;"	f	class:CDirView	typeref:typename:void
OnUpdateCtxtDirOpenWithEditor	DirView.cpp	/^void CDirView::OnUpdateCtxtDirOpenWithEditor(CCmdUI* pCmdUI)$/;"	f	class:CDirView	typeref:typename:void
OnUpdateCtxtOpenWithUnpacker	DirView.cpp	/^void CDirView::OnUpdateCtxtOpenWithUnpacker(CCmdUI* pCmdUI)$/;"	f	class:CDirView	typeref:typename:void
OnUpdateCurdiff	DirView.cpp	/^void CDirView::OnUpdateCurdiff(CCmdUI* pCmdUI)$/;"	f	class:CDirView	typeref:typename:void
OnUpdateCurdiff	MergeEditView.cpp	/^void CMergeEditView::OnUpdateCurdiff(CCmdUI* pCmdUI)$/;"	f	class:CMergeEditView	typeref:typename:void
OnUpdateDelete	DirView.cpp	/^void CDirView::OnUpdateDelete(CCmdUI* pCmdUI)$/;"	f	class:CDirView	typeref:typename:void
OnUpdateDiffCaseSensitive	MainFrm.cpp	/^void CMainFrame::OnUpdateDiffCaseSensitive(CCmdUI* pCmdUI)$/;"	f	class:CMainFrame	typeref:typename:void
OnUpdateDiffContext	MergeDoc.cpp	/^void CMergeDoc::OnUpdateDiffContext(CCmdUI* pCmdUI)$/;"	f	class:CMergeDoc	typeref:typename:void
OnUpdateDiffIgnoreCP	MainFrm.cpp	/^void CMainFrame::OnUpdateDiffIgnoreCP(CCmdUI* pCmdUI)$/;"	f	class:CMainFrame	typeref:typename:void
OnUpdateDiffIgnoreEOL	MainFrm.cpp	/^void CMainFrame::OnUpdateDiffIgnoreEOL(CCmdUI* pCmdUI)$/;"	f	class:CMainFrame	typeref:typename:void
OnUpdateDiffWhitespace	MainFrm.cpp	/^void CMainFrame::OnUpdateDiffWhitespace(CCmdUI* pCmdUI)$/;"	f	class:CMainFrame	typeref:typename:void
OnUpdateDirCopy	DirView.cpp	/^void CDirView::OnUpdateDirCopy(CCmdUI* pCmdUI)$/;"	f	class:CDirView	typeref:typename:void
OnUpdateEditCopy	MergeEditView.cpp	/^void CMergeEditView::OnUpdateEditCopy(CCmdUI* pCmdUI)$/;"	f	class:CMergeEditView	typeref:typename:void
OnUpdateEditCopyLinenumbers	MergeEditView.cpp	/^void CMergeEditView::OnUpdateEditCopyLinenumbers(CCmdUI* pCmdUI)$/;"	f	class:CMergeEditView	typeref:typename:void
OnUpdateEditCut	MergeEditView.cpp	/^void CMergeEditView::OnUpdateEditCut(CCmdUI* pCmdUI)$/;"	f	class:CMergeEditView	typeref:typename:void
OnUpdateEditPaste	MergeEditView.cpp	/^void CMergeEditView::OnUpdateEditPaste(CCmdUI* pCmdUI)$/;"	f	class:CMergeEditView	typeref:typename:void
OnUpdateEditRedo	HexMergeView.cpp	/^void CHexMergeView::OnUpdateEditRedo(CCmdUI* pCmdUI)$/;"	f	class:CHexMergeView	typeref:typename:void
OnUpdateEditRedo	ImgMergeFrm.cpp	/^void CImgMergeFrame::OnUpdateEditRedo(CCmdUI* pCmdUI)$/;"	f	class:CImgMergeFrame	typeref:typename:void
OnUpdateEditRedo	MergeEditView.cpp	/^void CMergeEditView::OnUpdateEditRedo(CCmdUI* pCmdUI)$/;"	f	class:CMergeEditView	typeref:typename:void
OnUpdateEditReplace	MergeEditView.cpp	/^void CMergeEditView::OnUpdateEditReplace(CCmdUI* pCmdUI)$/;"	f	class:CMergeEditView	typeref:typename:void
OnUpdateEditUndo	DirView.cpp	/^void CDirView::OnUpdateEditUndo(CCmdUI* pCmdUI)$/;"	f	class:CDirView	typeref:typename:void
OnUpdateEditUndo	HexMergeView.cpp	/^void CHexMergeView::OnUpdateEditUndo(CCmdUI* pCmdUI)$/;"	f	class:CHexMergeView	typeref:typename:void
OnUpdateEditUndo	ImgMergeFrm.cpp	/^void CImgMergeFrame::OnUpdateEditUndo(CCmdUI* pCmdUI)$/;"	f	class:CImgMergeFrame	typeref:typename:void
OnUpdateEditUndo	MergeEditView.cpp	/^void CMergeEditView::OnUpdateEditUndo(CCmdUI* pCmdUI)$/;"	f	class:CMergeEditView	typeref:typename:void
OnUpdateFileRecompareAs	HexMergeDoc.cpp	/^void CHexMergeDoc::OnUpdateFileRecompareAs(CCmdUI* pCmdUI)$/;"	f	class:CHexMergeDoc	typeref:typename:void
OnUpdateFileRecompareAs	ImgMergeFrm.cpp	/^void CImgMergeFrame::OnUpdateFileRecompareAs(CCmdUI* pCmdUI)$/;"	f	class:CImgMergeFrame	typeref:typename:void
OnUpdateFileRecompareAsText	MergeDoc.cpp	/^void CMergeDoc::OnUpdateFileRecompareAsText(CCmdUI *pCmdUI)$/;"	f	class:CMergeDoc	typeref:typename:void
OnUpdateFileRecompareAsXML	MergeDoc.cpp	/^void CMergeDoc::OnUpdateFileRecompareAsXML(CCmdUI *pCmdUI)$/;"	f	class:CMergeDoc	typeref:typename:void
OnUpdateFileSave	HexMergeDoc.cpp	/^void CHexMergeDoc::OnUpdateFileSave(CCmdUI* pCmdUI)$/;"	f	class:CHexMergeDoc	typeref:typename:void
OnUpdateFileSave	ImgMergeFrm.cpp	/^void CImgMergeFrame::OnUpdateFileSave(CCmdUI *pCmdUI)$/;"	f	class:CImgMergeFrame	typeref:typename:void
OnUpdateFileSave	MergeEditView.cpp	/^void CMergeEditView::OnUpdateFileSave(CCmdUI* pCmdUI)$/;"	f	class:CMergeEditView	typeref:typename:void
OnUpdateFileSaveAsMiddle	ImgMergeFrm.cpp	/^void CImgMergeFrame::OnUpdateFileSaveAsMiddle(CCmdUI* pCmdUI)$/;"	f	class:CImgMergeFrame	typeref:typename:void
OnUpdateFileSaveAsMiddle	MergeDoc.cpp	/^void CMergeDoc::OnUpdateFileSaveAsMiddle(CCmdUI* pCmdUI)$/;"	f	class:CMergeDoc	typeref:typename:void
OnUpdateFileSaveLeft	HexMergeDoc.cpp	/^void CHexMergeDoc::OnUpdateFileSaveLeft(CCmdUI* pCmdUI)$/;"	f	class:CHexMergeDoc	typeref:typename:void
OnUpdateFileSaveLeft	MergeEditView.cpp	/^void CMergeEditView::OnUpdateFileSaveLeft(CCmdUI* pCmdUI)$/;"	f	class:CMergeEditView	typeref:typename:void
OnUpdateFileSaveMiddle	HexMergeDoc.cpp	/^void CHexMergeDoc::OnUpdateFileSaveMiddle(CCmdUI* pCmdUI)$/;"	f	class:CHexMergeDoc	typeref:typename:void
OnUpdateFileSaveMiddle	ImgMergeFrm.cpp	/^void CImgMergeFrame::OnUpdateFileSaveMiddle(CCmdUI* pCmdUI)$/;"	f	class:CImgMergeFrame	typeref:typename:void
OnUpdateFileSaveMiddle	MergeEditView.cpp	/^void CMergeEditView::OnUpdateFileSaveMiddle(CCmdUI* pCmdUI)$/;"	f	class:CMergeEditView	typeref:typename:void
OnUpdateFileSaveRight	HexMergeDoc.cpp	/^void CHexMergeDoc::OnUpdateFileSaveRight(CCmdUI* pCmdUI)$/;"	f	class:CHexMergeDoc	typeref:typename:void
OnUpdateFileSaveRight	MergeEditView.cpp	/^void CMergeEditView::OnUpdateFileSaveRight(CCmdUI* pCmdUI)$/;"	f	class:CMergeEditView	typeref:typename:void
OnUpdateFirstdiff	DirView.cpp	/^void CDirView::OnUpdateFirstdiff(CCmdUI* pCmdUI)$/;"	f	class:CDirView	typeref:typename:void
OnUpdateFirstdiff	ImgMergeFrm.cpp	/^void CImgMergeFrame::OnUpdateFirstdiff(CCmdUI* pCmdUI)$/;"	f	class:CImgMergeFrame	typeref:typename:void
OnUpdateFirstdiff	MergeEditView.cpp	/^void CMergeEditView::OnUpdateFirstdiff(CCmdUI* pCmdUI)$/;"	f	class:CMergeEditView	typeref:typename:void
OnUpdateFrameTitle	MainFrm.cpp	/^void CMainFrame::OnUpdateFrameTitle(BOOL bAddToTitle)$/;"	f	class:CMainFrame	typeref:typename:void
OnUpdateHideFilenames	DirView.cpp	/^void CDirView::OnUpdateHideFilenames(CCmdUI* pCmdUI)$/;"	f	class:CDirView	typeref:typename:void
OnUpdateImgCurPaneNextPage	ImgMergeFrm.cpp	/^void CImgMergeFrame::OnUpdateImgCurPaneNextPage(CCmdUI* pCmdUI)$/;"	f	class:CImgMergeFrame	typeref:typename:void
OnUpdateImgCurPanePrevPage	ImgMergeFrm.cpp	/^void CImgMergeFrame::OnUpdateImgCurPanePrevPage(CCmdUI* pCmdUI)$/;"	f	class:CImgMergeFrame	typeref:typename:void
OnUpdateImgDiffBlockSize	ImgMergeFrm.cpp	/^void CImgMergeFrame::OnUpdateImgDiffBlockSize(CCmdUI* pCmdUI)$/;"	f	class:CImgMergeFrame	typeref:typename:void
OnUpdateImgDraggingMode	ImgMergeFrm.cpp	/^void CImgMergeFrame::OnUpdateImgDraggingMode(CCmdUI* pCmdUI)$/;"	f	class:CImgMergeFrame	typeref:typename:void
OnUpdateImgInsertionDeletionDetectionMode	ImgMergeFrm.cpp	/^void CImgMergeFrame::OnUpdateImgInsertionDeletionDetectionMode(CCmdUI* pCmdUI)$/;"	f	class:CImgMergeFrame	typeref:typename:void
OnUpdateImgNextPage	ImgMergeFrm.cpp	/^void CImgMergeFrame::OnUpdateImgNextPage(CCmdUI* pCmdUI)$/;"	f	class:CImgMergeFrame	typeref:typename:void
OnUpdateImgOverlayMode	ImgMergeFrm.cpp	/^void CImgMergeFrame::OnUpdateImgOverlayMode(CCmdUI* pCmdUI)$/;"	f	class:CImgMergeFrame	typeref:typename:void
OnUpdateImgPrevPage	ImgMergeFrm.cpp	/^void CImgMergeFrame::OnUpdateImgPrevPage(CCmdUI* pCmdUI)$/;"	f	class:CImgMergeFrame	typeref:typename:void
OnUpdateImgThreshold	ImgMergeFrm.cpp	/^void CImgMergeFrame::OnUpdateImgThreshold(CCmdUI* pCmdUI)$/;"	f	class:CImgMergeFrame	typeref:typename:void
OnUpdateImgUseBackColor	ImgMergeFrm.cpp	/^void CImgMergeFrame::OnUpdateImgUseBackColor(CCmdUI* pCmdUI)$/;"	f	class:CImgMergeFrame	typeref:typename:void
OnUpdateImgViewDifferences	ImgMergeFrm.cpp	/^void CImgMergeFrame::OnUpdateImgViewDifferences(CCmdUI* pCmdUI)$/;"	f	class:CImgMergeFrame	typeref:typename:void
OnUpdateImgZoom	ImgMergeFrm.cpp	/^void CImgMergeFrame::OnUpdateImgZoom(CCmdUI* pCmdUI)$/;"	f	class:CImgMergeFrame	typeref:typename:void
OnUpdateIncludeSubfolders	MainFrm.cpp	/^void CMainFrame::OnUpdateIncludeSubfolders(CCmdUI* pCmdUI)$/;"	f	class:CMainFrame	typeref:typename:void
OnUpdateItemRename	DirView.cpp	/^void CDirView::OnUpdateItemRename(CCmdUI* pCmdUI)$/;"	f	class:CDirView	typeref:typename:void
OnUpdateL2RNext	MergeEditView.cpp	/^void CMergeEditView::OnUpdateL2RNext(CCmdUI* pCmdUI)$/;"	f	class:CMergeEditView	typeref:typename:void
OnUpdateL2r	ImgMergeFrm.cpp	/^void CImgMergeFrame::OnUpdateL2r(CCmdUI* pCmdUI)$/;"	f	class:CImgMergeFrame	typeref:typename:void
OnUpdateL2r	MergeEditView.cpp	/^void CMergeEditView::OnUpdateL2r(CCmdUI* pCmdUI)$/;"	f	class:CMergeEditView	typeref:typename:void
OnUpdateLastdiff	DirView.cpp	/^void CDirView::OnUpdateLastdiff(CCmdUI* pCmdUI)$/;"	f	class:CDirView	typeref:typename:void
OnUpdateLastdiff	ImgMergeFrm.cpp	/^void CImgMergeFrame::OnUpdateLastdiff(CCmdUI* pCmdUI)$/;"	f	class:CImgMergeFrame	typeref:typename:void
OnUpdateLastdiff	MergeEditView.cpp	/^void CMergeEditView::OnUpdateLastdiff(CCmdUI* pCmdUI)$/;"	f	class:CMergeEditView	typeref:typename:void
OnUpdateLeftReadOnly	ImgMergeFrm.cpp	/^void CImgMergeFrame::OnUpdateLeftReadOnly(CCmdUI* pCmdUI)$/;"	f	class:CImgMergeFrame	typeref:typename:void
OnUpdateLeftReadOnly	MergeEditView.cpp	/^void CMergeEditView::OnUpdateLeftReadOnly(CCmdUI* pCmdUI)$/;"	f	class:CMergeEditView	typeref:typename:void
OnUpdateMergeCompare	DirView.cpp	/^void CDirView::OnUpdateMergeCompare(CCmdUI *pCmdUI)$/;"	f	class:CDirView	typeref:typename:void
OnUpdateMergeCompare2	DirView.cpp	/^void CDirView::OnUpdateMergeCompare2(CCmdUI *pCmdUI)$/;"	f	class:CDirView	typeref:typename:void
OnUpdateMergingMode	Merge.cpp	/^void CMergeApp::OnUpdateMergingMode(CCmdUI* pCmdUI)$/;"	f	class:CMergeApp	typeref:typename:void
OnUpdateMergingStatus	Merge.cpp	/^void CMergeApp::OnUpdateMergingStatus(CCmdUI *pCmdUI)$/;"	f	class:CMergeApp	typeref:typename:void
OnUpdateMiddleReadOnly	ImgMergeFrm.cpp	/^void CImgMergeFrame::OnUpdateMiddleReadOnly(CCmdUI* pCmdUI)$/;"	f	class:CImgMergeFrame	typeref:typename:void
OnUpdateMiddleReadOnly	MergeEditView.cpp	/^void CMergeEditView::OnUpdateMiddleReadOnly(CCmdUI* pCmdUI)$/;"	f	class:CMergeEditView	typeref:typename:void
OnUpdateNext3wayDiff	MergeEditView.cpp	/^void CMergeEditView::OnUpdateNext3wayDiff(CCmdUI* pCmdUI, int nDiffType)$/;"	f	class:CMergeEditView	typeref:typename:void
OnUpdateNextConflict	ImgMergeFrm.cpp	/^void CImgMergeFrame::OnUpdateNextConflict(CCmdUI* pCmdUI)$/;"	f	class:CImgMergeFrame	typeref:typename:void
OnUpdateNextConflict	MergeEditView.cpp	/^void CMergeEditView::OnUpdateNextConflict(CCmdUI* pCmdUI)$/;"	f	class:CMergeEditView	typeref:typename:void
OnUpdateNextdiff	DirView.cpp	/^void CDirView::OnUpdateNextdiff(CCmdUI* pCmdUI)$/;"	f	class:CDirView	typeref:typename:void
OnUpdateNextdiff	ImgMergeFrm.cpp	/^void CImgMergeFrame::OnUpdateNextdiff(CCmdUI* pCmdUI)$/;"	f	class:CImgMergeFrame	typeref:typename:void
OnUpdateNextdiff	MergeEditView.cpp	/^void CMergeEditView::OnUpdateNextdiff(CCmdUI* pCmdUI)$/;"	f	class:CMergeEditView	typeref:typename:void
OnUpdateNextdiffLM	MergeEditView.cpp	/^void CMergeEditView::OnUpdateNextdiffLM(CCmdUI* pCmdUI)$/;"	f	class:CMergeEditView	typeref:typename:void
OnUpdateNextdiffLO	MergeEditView.cpp	/^void CMergeEditView::OnUpdateNextdiffLO(CCmdUI* pCmdUI)$/;"	f	class:CMergeEditView	typeref:typename:void
OnUpdateNextdiffLR	MergeEditView.cpp	/^void CMergeEditView::OnUpdateNextdiffLR(CCmdUI* pCmdUI)$/;"	f	class:CMergeEditView	typeref:typename:void
OnUpdateNextdiffMO	MergeEditView.cpp	/^void CMergeEditView::OnUpdateNextdiffMO(CCmdUI* pCmdUI)$/;"	f	class:CMergeEditView	typeref:typename:void
OnUpdateNextdiffMR	MergeEditView.cpp	/^void CMergeEditView::OnUpdateNextdiffMR(CCmdUI* pCmdUI)$/;"	f	class:CMergeEditView	typeref:typename:void
OnUpdateNextdiffRO	MergeEditView.cpp	/^void CMergeEditView::OnUpdateNextdiffRO(CCmdUI* pCmdUI)$/;"	f	class:CMergeEditView	typeref:typename:void
OnUpdateNoEditScripts	MergeEditView.cpp	/^void CMergeEditView::OnUpdateNoEditScripts(CCmdUI* pCmdUI)$/;"	f	class:CMergeEditView	typeref:typename:void
OnUpdateNoMRUs	MainFrm.cpp	/^void CMainFrame::OnUpdateNoMRUs(CCmdUI* pCmdUI)$/;"	f	class:CMainFrame	typeref:typename:void
OnUpdateNoPrediffer	MergeEditView.cpp	/^void CMergeEditView::OnUpdateNoPrediffer(CCmdUI* pCmdUI)$/;"	f	class:CMergeEditView	typeref:typename:void
OnUpdateOptionsShowBinaries	DirView.cpp	/^void CDirView::OnUpdateOptionsShowBinaries(CCmdUI* pCmdUI) $/;"	f	class:CDirView	typeref:typename:void
OnUpdateOptionsShowDifferentLeftOnly	DirView.cpp	/^void CDirView::OnUpdateOptionsShowDifferentLeftOnly(CCmdUI* pCmdUI) $/;"	f	class:CDirView	typeref:typename:void
OnUpdateOptionsShowDifferentMiddleOnly	DirView.cpp	/^void CDirView::OnUpdateOptionsShowDifferentMiddleOnly(CCmdUI* pCmdUI) $/;"	f	class:CDirView	typeref:typename:void
OnUpdateOptionsShowDifferentRightOnly	DirView.cpp	/^void CDirView::OnUpdateOptionsShowDifferentRightOnly(CCmdUI* pCmdUI) $/;"	f	class:CDirView	typeref:typename:void
OnUpdateOptionsShowMissingLeftOnly	DirView.cpp	/^void CDirView::OnUpdateOptionsShowMissingLeftOnly(CCmdUI* pCmdUI) $/;"	f	class:CDirView	typeref:typename:void
OnUpdateOptionsShowMissingMiddleOnly	DirView.cpp	/^void CDirView::OnUpdateOptionsShowMissingMiddleOnly(CCmdUI* pCmdUI) $/;"	f	class:CDirView	typeref:typename:void
OnUpdateOptionsShowMissingRightOnly	DirView.cpp	/^void CDirView::OnUpdateOptionsShowMissingRightOnly(CCmdUI* pCmdUI) $/;"	f	class:CDirView	typeref:typename:void
OnUpdateOptionsShowSkipped	DirView.cpp	/^void CDirView::OnUpdateOptionsShowSkipped(CCmdUI* pCmdUI)$/;"	f	class:CDirView	typeref:typename:void
OnUpdateOptionsShowdifferent	DirView.cpp	/^void CDirView::OnUpdateOptionsShowdifferent(CCmdUI* pCmdUI) $/;"	f	class:CDirView	typeref:typename:void
OnUpdateOptionsShowidentical	DirView.cpp	/^void CDirView::OnUpdateOptionsShowidentical(CCmdUI* pCmdUI) $/;"	f	class:CDirView	typeref:typename:void
OnUpdateOptionsShowuniqueleft	DirView.cpp	/^void CDirView::OnUpdateOptionsShowuniqueleft(CCmdUI* pCmdUI) $/;"	f	class:CDirView	typeref:typename:void
OnUpdateOptionsShowuniquemiddle	DirView.cpp	/^void CDirView::OnUpdateOptionsShowuniquemiddle(CCmdUI* pCmdUI) $/;"	f	class:CDirView	typeref:typename:void
OnUpdateOptionsShowuniqueright	DirView.cpp	/^void CDirView::OnUpdateOptionsShowuniqueright(CCmdUI* pCmdUI) $/;"	f	class:CDirView	typeref:typename:void
OnUpdatePluginName	MainFrm.cpp	/^void CMainFrame::OnUpdatePluginName(CCmdUI* pCmdUI)$/;"	f	class:CMainFrame	typeref:typename:void
OnUpdatePluginName	MergeDoc.cpp	/^void CMergeDoc::OnUpdatePluginName(CCmdUI* pCmdUI)$/;"	f	class:CMergeDoc	typeref:typename:void
OnUpdatePluginPrediffMode	MainFrm.cpp	/^void CMainFrame::OnUpdatePluginPrediffMode(CCmdUI* pCmdUI) $/;"	f	class:CMainFrame	typeref:typename:void
OnUpdatePluginPredifferMode	DirView.cpp	/^void CDirView::OnUpdatePluginPredifferMode(CCmdUI* pCmdUI)$/;"	f	class:CDirView	typeref:typename:void
OnUpdatePluginUnpackMode	MainFrm.cpp	/^void CMainFrame::OnUpdatePluginUnpackMode(CCmdUI* pCmdUI) $/;"	f	class:CMainFrame	typeref:typename:void
OnUpdatePrediffer	MergeEditView.cpp	/^void CMergeEditView::OnUpdatePrediffer(CCmdUI* pCmdUI)$/;"	f	class:CMergeEditView	typeref:typename:void
OnUpdatePrev3wayDiff	MergeEditView.cpp	/^void CMergeEditView::OnUpdatePrev3wayDiff(CCmdUI* pCmdUI, int nDiffType)$/;"	f	class:CMergeEditView	typeref:typename:void
OnUpdatePrevConflict	ImgMergeFrm.cpp	/^void CImgMergeFrame::OnUpdatePrevConflict(CCmdUI* pCmdUI)$/;"	f	class:CImgMergeFrame	typeref:typename:void
OnUpdatePrevConflict	MergeEditView.cpp	/^void CMergeEditView::OnUpdatePrevConflict(CCmdUI* pCmdUI)$/;"	f	class:CMergeEditView	typeref:typename:void
OnUpdatePrevdiff	DirView.cpp	/^void CDirView::OnUpdatePrevdiff(CCmdUI* pCmdUI)$/;"	f	class:CDirView	typeref:typename:void
OnUpdatePrevdiff	ImgMergeFrm.cpp	/^void CImgMergeFrame::OnUpdatePrevdiff(CCmdUI* pCmdUI)$/;"	f	class:CImgMergeFrame	typeref:typename:void
OnUpdatePrevdiff	MergeEditView.cpp	/^void CMergeEditView::OnUpdatePrevdiff(CCmdUI* pCmdUI)$/;"	f	class:CMergeEditView	typeref:typename:void
OnUpdatePrevdiffLM	MergeEditView.cpp	/^void CMergeEditView::OnUpdatePrevdiffLM(CCmdUI* pCmdUI)$/;"	f	class:CMergeEditView	typeref:typename:void
OnUpdatePrevdiffLO	MergeEditView.cpp	/^void CMergeEditView::OnUpdatePrevdiffLO(CCmdUI* pCmdUI)$/;"	f	class:CMergeEditView	typeref:typename:void
OnUpdatePrevdiffLR	MergeEditView.cpp	/^void CMergeEditView::OnUpdatePrevdiffLR(CCmdUI* pCmdUI)$/;"	f	class:CMergeEditView	typeref:typename:void
OnUpdatePrevdiffMO	MergeEditView.cpp	/^void CMergeEditView::OnUpdatePrevdiffMO(CCmdUI* pCmdUI)$/;"	f	class:CMergeEditView	typeref:typename:void
OnUpdatePrevdiffMR	MergeEditView.cpp	/^void CMergeEditView::OnUpdatePrevdiffMR(CCmdUI* pCmdUI)$/;"	f	class:CMergeEditView	typeref:typename:void
OnUpdatePrevdiffRO	MergeEditView.cpp	/^void CMergeEditView::OnUpdatePrevdiffRO(CCmdUI* pCmdUI)$/;"	f	class:CMergeEditView	typeref:typename:void
OnUpdateR2LNext	MergeEditView.cpp	/^void CMergeEditView::OnUpdateR2LNext(CCmdUI* pCmdUI)$/;"	f	class:CMergeEditView	typeref:typename:void
OnUpdateR2l	ImgMergeFrm.cpp	/^void CImgMergeFrame::OnUpdateR2l(CCmdUI* pCmdUI)$/;"	f	class:CImgMergeFrame	typeref:typename:void
OnUpdateR2l	MergeEditView.cpp	/^void CMergeEditView::OnUpdateR2l(CCmdUI* pCmdUI)$/;"	f	class:CMergeEditView	typeref:typename:void
OnUpdateReadOnly	DirView.cpp	/^void CDirView::OnUpdateReadOnly(CCmdUI* pCmdUI)$/;"	f	class:CDirView	typeref:typename:void
OnUpdateRefresh	DirView.cpp	/^void CDirView::OnUpdateRefresh(CCmdUI* pCmdUI)$/;"	f	class:CDirView	typeref:typename:void
OnUpdateReloadPlugins	MainFrm.cpp	/^void CMainFrame::OnUpdateReloadPlugins(CCmdUI* pCmdUI)$/;"	f	class:CMainFrame	typeref:typename:void
OnUpdateResizePanes	MainFrm.cpp	/^void CMainFrame::OnUpdateResizePanes(CCmdUI* pCmdUI)$/;"	f	class:CMainFrame	typeref:typename:void
OnUpdateRightReadOnly	ImgMergeFrm.cpp	/^void CImgMergeFrame::OnUpdateRightReadOnly(CCmdUI* pCmdUI)$/;"	f	class:CImgMergeFrame	typeref:typename:void
OnUpdateRightReadOnly	MergeEditView.cpp	/^void CMergeEditView::OnUpdateRightReadOnly(CCmdUI* pCmdUI)$/;"	f	class:CMergeEditView	typeref:typename:void
OnUpdateSave	DirView.cpp	/^void CDirView::OnUpdateSave(CCmdUI* pCmdUI)$/;"	f	class:CDirView	typeref:typename:void
OnUpdateSelectAll	DirView.cpp	/^void CDirView::OnUpdateSelectAll(CCmdUI* pCmdUI)$/;"	f	class:CDirView	typeref:typename:void
OnUpdateSelectLineDiff	MergeEditView.cpp	/^void CMergeEditView::OnUpdateSelectLineDiff(CCmdUI* pCmdUI)$/;"	f	class:CMergeEditView	typeref:typename:void
OnUpdateShellMenu	MergeEditView.cpp	/^void CMergeEditView::OnUpdateShellMenu(CCmdUI* pCmdUI)$/;"	f	class:CMergeEditView	typeref:typename:void
OnUpdateSibling	MergeEditView.cpp	/^void CMergeEditView::OnUpdateSibling (CCrystalTextView * pUpdateSource, bool bHorz)$/;"	f	class:CMergeEditView	typeref:typename:void
OnUpdateStatus	OpenView.cpp	/^LRESULT COpenView::OnUpdateStatus(WPARAM wParam, LPARAM lParam)$/;"	f	class:COpenView	typeref:typename:LRESULT
OnUpdateStatusEOL	MergeEditView.cpp	/^void CMergeEditView::OnUpdateStatusEOL(CCmdUI* pCmdUI)$/;"	f	class:CMergeEditView	typeref:typename:void
OnUpdateStatusLeftRO	DirView.cpp	/^void CDirView::OnUpdateStatusLeftRO(CCmdUI* pCmdUI)$/;"	f	class:CDirView	typeref:typename:void
OnUpdateStatusMiddleRO	DirView.cpp	/^void CDirView::OnUpdateStatusMiddleRO(CCmdUI* pCmdUI)$/;"	f	class:CDirView	typeref:typename:void
OnUpdateStatusNum	DirView.cpp	/^void CDirView::OnUpdateStatusNum(CCmdUI* pCmdUI)$/;"	f	class:CDirView	typeref:typename:void
OnUpdateStatusNum	HexMergeDoc.cpp	/^void CHexMergeDoc::OnUpdateStatusNum(CCmdUI* pCmdUI) $/;"	f	class:CHexMergeDoc	typeref:typename:void
OnUpdateStatusNum	ImgMergeFrm.cpp	/^void CImgMergeFrame::OnUpdateStatusNum(CCmdUI* pCmdUI) $/;"	f	class:CImgMergeFrame	typeref:typename:void
OnUpdateStatusNum	MergeDoc.cpp	/^void CMergeDoc::OnUpdateStatusNum(CCmdUI* pCmdUI) $/;"	f	class:CMergeDoc	typeref:typename:void
OnUpdateStatusRO	MergeEditView.cpp	/^void CMergeEditView::OnUpdateStatusRO(CCmdUI* pCmdUI)$/;"	f	class:CMergeEditView	typeref:typename:void
OnUpdateStatusRightRO	DirView.cpp	/^void CDirView::OnUpdateStatusRightRO(CCmdUI* pCmdUI)$/;"	f	class:CDirView	typeref:typename:void
OnUpdateToolbarSize	MainFrm.cpp	/^void CMainFrame::OnUpdateToolbarSize(CCmdUI *pCmdUI)$/;"	f	class:CMainFrame	typeref:typename:void
OnUpdateUIMessage	DirView.cpp	/^LRESULT CDirView::OnUpdateUIMessage(WPARAM wParam, LPARAM lParam)$/;"	f	class:CDirView	typeref:typename:LRESULT
OnUpdateViewChangeScheme	MergeEditView.cpp	/^void CMergeEditView::OnUpdateViewChangeScheme(CCmdUI *pCmdUI)$/;"	f	class:CMergeEditView	typeref:typename:void
OnUpdateViewCollapseAllSubdirs	DirView.cpp	/^void CDirView::OnUpdateViewCollapseAllSubdirs(CCmdUI* pCmdUI)$/;"	f	class:CDirView	typeref:typename:void
OnUpdateViewExpandAllSubdirs	DirView.cpp	/^void CDirView::OnUpdateViewExpandAllSubdirs(CCmdUI* pCmdUI)$/;"	f	class:CDirView	typeref:typename:void
OnUpdateViewLineDiffs	MergeEditView.cpp	/^void CMergeEditView::OnUpdateViewLineDiffs(CCmdUI* pCmdUI)$/;"	f	class:CMergeEditView	typeref:typename:void
OnUpdateViewLineNumbers	MergeEditView.cpp	/^void CMergeEditView::OnUpdateViewLineNumbers(CCmdUI* pCmdUI)$/;"	f	class:CMergeEditView	typeref:typename:void
OnUpdateViewMargin	MergeEditView.cpp	/^void CMergeEditView::OnUpdateViewMargin(CCmdUI* pCmdUI)$/;"	f	class:CMergeEditView	typeref:typename:void
OnUpdateViewShowHiddenItems	DirView.cpp	/^void CDirView::OnUpdateViewShowHiddenItems(CCmdUI* pCmdUI)$/;"	f	class:CDirView	typeref:typename:void
OnUpdateViewSplitVertically	ImgMergeFrm.cpp	/^void CImgMergeFrame::OnUpdateViewSplitVertically(CCmdUI* pCmdUI) $/;"	f	class:CImgMergeFrame	typeref:typename:void
OnUpdateViewSplitVertically	MergeEditFrm.cpp	/^void CMergeEditFrame::OnUpdateViewSplitVertically(CCmdUI* pCmdUI) $/;"	f	class:CMergeEditFrame	typeref:typename:void
OnUpdateViewTabBar	MainFrm.cpp	/^void CMainFrame::OnUpdateViewTabBar(CCmdUI* pCmdUI) $/;"	f	class:CMainFrame	typeref:typename:void
OnUpdateViewTreeMode	DirView.cpp	/^void CDirView::OnUpdateViewTreeMode(CCmdUI* pCmdUI)$/;"	f	class:CDirView	typeref:typename:void
OnUpdateViewWhitespace	MergeEditView.cpp	/^void CMergeEditView::OnUpdateViewWhitespace(CCmdUI* pCmdUI) $/;"	f	class:CMergeEditView	typeref:typename:void
OnUpdateViewWordWrap	MergeEditView.cpp	/^void CMergeEditView::OnUpdateViewWordWrap(CCmdUI* pCmdUI)$/;"	f	class:CMergeEditView	typeref:typename:void
OnUpdateWindowCloseAll	MainFrm.cpp	/^void CMainFrame::OnUpdateWindowCloseAll(CCmdUI* pCmdUI)$/;"	f	class:CMainFrame	typeref:typename:void
OnUpdateWindowSplit	MergeEditView.cpp	/^void CMergeEditView::OnUpdateWindowSplit(CCmdUI* pCmdUI)$/;"	f	class:CMergeEditView	typeref:typename:void
OnUpdateX2Y	ImgMergeFrm.cpp	/^void CImgMergeFrame::OnUpdateX2Y(CCmdUI* pCmdUI, int srcPane, int dstPane)$/;"	f	class:CImgMergeFrame	typeref:typename:void
OnUpdateX2Y	MergeEditView.cpp	/^void CMergeEditView::OnUpdateX2Y(int dstPane, CCmdUI* pCmdUI)$/;"	f	class:CMergeEditView	typeref:typename:void
OnUseTextColor	PropColors.cpp	/^void PropMergeColors::OnUseTextColor()$/;"	f	class:PropMergeColors	typeref:typename:void
OnUser1	MainFrm.cpp	/^LRESULT CMainFrame::OnUser1(WPARAM wParam, LPARAM lParam)$/;"	f	class:CMainFrame	typeref:typename:LRESULT
OnVScroll	Common/SplitterWndEx.cpp	/^void CSplitterWndEx::OnVScroll(UINT nSBCode, UINT nPos, CScrollBar *pScrollBar)$/;"	f	class:CSplitterWndEx	typeref:typename:void
OnVScroll	HexMergeView.cpp	/^void CHexMergeView::OnVScroll(UINT nSBCode, UINT nPos, CScrollBar * pScrollBar)$/;"	f	class:CHexMergeView	typeref:typename:void
OnVScroll	LocationView.cpp	/^void CLocationView::OnVScroll(UINT nSBCode, UINT nPos, CScrollBar *pScrollBar)$/;"	f	class:CLocationView	typeref:typename:void
OnVScroll	MergeEditView.cpp	/^void CMergeEditView::OnVScroll(UINT nSBCode, UINT nPos, CScrollBar *pScrollBar)$/;"	f	class:CMergeEditView	typeref:typename:void
OnViewCollapseAllSubdirs	DirView.cpp	/^void CDirView::OnViewCollapseAllSubdirs()$/;"	f	class:CDirView	typeref:typename:void
OnViewCompareStatistics	DirView.cpp	/^void CDirView::OnViewCompareStatistics()$/;"	f	class:CDirView	typeref:typename:void
OnViewExpandAllSubdirs	DirView.cpp	/^void CDirView::OnViewExpandAllSubdirs()$/;"	f	class:CDirView	typeref:typename:void
OnViewLineDiffs	MergeEditView.cpp	/^void CMergeEditView::OnViewLineDiffs()$/;"	f	class:CMergeEditView	typeref:typename:void
OnViewLineNumbers	MergeEditView.cpp	/^void CMergeEditView::OnViewLineNumbers()$/;"	f	class:CMergeEditView	typeref:typename:void
OnViewMargin	MergeEditView.cpp	/^void CMergeEditView::OnViewMargin()$/;"	f	class:CMergeEditView	typeref:typename:void
OnViewSelectfont	MainFrm.cpp	/^void CMainFrame::OnViewSelectfont() $/;"	f	class:CMainFrame	typeref:typename:void
OnViewSettings	PropCompareBinary.cpp	/^void PropCompareBinary::OnViewSettings()$/;"	f	class:PropCompareBinary	typeref:typename:void
OnViewShowHiddenItems	DirView.cpp	/^void CDirView::OnViewShowHiddenItems()$/;"	f	class:CDirView	typeref:typename:void
OnViewSplitVertically	ImgMergeFrm.cpp	/^void CImgMergeFrame::OnViewSplitVertically() $/;"	f	class:CImgMergeFrame	typeref:typename:void
OnViewSplitVertically	MergeEditFrm.cpp	/^void CMergeEditFrame::OnViewSplitVertically() $/;"	f	class:CMergeEditFrame	typeref:typename:void
OnViewStatusBar	MainFrm.cpp	/^void CMainFrame::OnViewStatusBar()$/;"	f	class:CMainFrame	typeref:typename:void
OnViewSwapPanes	DirView.cpp	/^void CDirView::OnViewSwapPanes()$/;"	f	class:CDirView	typeref:typename:void
OnViewSwapPanes	MergeEditView.cpp	/^void CMergeEditView::OnViewSwapPanes()$/;"	f	class:CMergeEditView	typeref:typename:void
OnViewTabBar	MainFrm.cpp	/^void CMainFrame::OnViewTabBar()$/;"	f	class:CMainFrame	typeref:typename:void
OnViewTreeMode	DirView.cpp	/^void CDirView::OnViewTreeMode()$/;"	f	class:CDirView	typeref:typename:void
OnViewUsedefaultfont	MainFrm.cpp	/^void CMainFrame::OnViewUsedefaultfont() $/;"	f	class:CMainFrame	typeref:typename:void
OnViewWhitespace	MergeEditView.cpp	/^void CMergeEditView::OnViewWhitespace() $/;"	f	class:CMergeEditView	typeref:typename:void
OnViewWordWrap	MergeEditView.cpp	/^void CMergeEditView::OnViewWordWrap()$/;"	f	class:CMergeEditView	typeref:typename:void
OnViewZoomIn	HexMergeDoc.cpp	/^void CHexMergeDoc::OnViewZoomIn()$/;"	f	class:CHexMergeDoc	typeref:typename:void
OnViewZoomIn	ImgMergeFrm.cpp	/^void CImgMergeFrame::OnViewZoomIn()$/;"	f	class:CImgMergeFrame	typeref:typename:void
OnViewZoomIn	MergeEditView.cpp	/^void CMergeEditView::OnViewZoomIn()$/;"	f	class:CMergeEditView	typeref:typename:void
OnViewZoomNormal	HexMergeDoc.cpp	/^void CHexMergeDoc::OnViewZoomNormal()$/;"	f	class:CHexMergeDoc	typeref:typename:void
OnViewZoomNormal	ImgMergeFrm.cpp	/^void CImgMergeFrame::OnViewZoomNormal()$/;"	f	class:CImgMergeFrame	typeref:typename:void
OnViewZoomNormal	MergeEditView.cpp	/^void CMergeEditView::OnViewZoomNormal()$/;"	f	class:CMergeEditView	typeref:typename:void
OnViewZoomOut	HexMergeDoc.cpp	/^void CHexMergeDoc::OnViewZoomOut()$/;"	f	class:CHexMergeDoc	typeref:typename:void
OnViewZoomOut	ImgMergeFrm.cpp	/^void CImgMergeFrame::OnViewZoomOut()$/;"	f	class:CImgMergeFrame	typeref:typename:void
OnViewZoomOut	MergeEditView.cpp	/^void CMergeEditView::OnViewZoomOut()$/;"	f	class:CMergeEditView	typeref:typename:void
OnWMGoto	MergeEditView.cpp	/^void CMergeEditView::OnWMGoto()$/;"	f	class:CMergeEditView	typeref:typename:void
OnWhitespaceBackgroundColor	PropTextColors.cpp	/^void PropTextColors::OnWhitespaceBackgroundColor() $/;"	f	class:PropTextColors	typeref:typename:void
OnWindowChangePane	ImgMergeFrm.cpp	/^void  CImgMergeFrame::OnWindowChangePane() $/;"	f	class:CImgMergeFrame	typeref:typename:void
OnWindowCloseAll	MainFrm.cpp	/^void CMainFrame::OnWindowCloseAll()$/;"	f	class:CMainFrame	typeref:typename:void
OnWindowPosChanged	DiffViewBar.cpp	/^void CDiffViewBar::OnWindowPosChanged(WINDOWPOS* lpwndpos)$/;"	f	class:CDiffViewBar	typeref:typename:void
OnWindowPosChanged	LocationBar.cpp	/^void CLocationBar::OnWindowPosChanged(WINDOWPOS* lpwndpos)$/;"	f	class:CLocationBar	typeref:typename:void
OnWindowPosChanged	OpenView.cpp	/^void COpenView::OnWindowPosChanged(WINDOWPOS* lpwndpos)$/;"	f	class:COpenView	typeref:typename:void
OnWindowPosChanging	Common/sizecbar.cpp	/^void CSCBMiniDockFrameWnd::OnWindowPosChanging(WINDOWPOS FAR* lpwndpos) $/;"	f	class:CSCBMiniDockFrameWnd	typeref:typename:void
OnWindowPosChanging	Common/sizecbar.cpp	/^void CSizingControlBar::OnWindowPosChanging(WINDOWPOS FAR* lpwndpos)$/;"	f	class:CSizingControlBar	typeref:typename:void
OnWindowPosChanging	OpenFrm.cpp	/^void COpenFrame::OnWindowPosChanging(WINDOWPOS* lpwndpos)$/;"	f	class:COpenFrame	typeref:typename:void
OnWindowPosChanging	OpenView.cpp	/^void COpenView::OnWindowPosChanging(WINDOWPOS* lpwndpos)$/;"	f	class:COpenView	typeref:typename:void
OnWindowSplit	MergeEditView.cpp	/^void CMergeEditView::OnWindowSplit()$/;"	f	class:CMergeEditView	typeref:typename:void
OnWndMsg	Common/MessageBoxDialog.cpp	/^BOOL CMessageBoxDialog::OnWndMsg ( UINT message, WPARAM wParam, LPARAM lParam,$/;"	f	class:CMessageBoxDialog	typeref:typename:BOOL
OnWordDiffColor	PropColors.cpp	/^void PropMergeColors::OnWordDiffColor() $/;"	f	class:PropMergeColors	typeref:typename:void
OnWordDiffDeletedColor	PropColors.cpp	/^void PropMergeColors::OnWordDiffDeletedColor() $/;"	f	class:PropMergeColors	typeref:typename:void
OnWordDiffTextColor	PropColors.cpp	/^void PropMergeColors::OnWordDiffTextColor() $/;"	f	class:PropMergeColors	typeref:typename:void
OnX2Y	ImgMergeFrm.cpp	/^void CImgMergeFrame::OnX2Y(int srcPane, int dstPane)$/;"	f	class:CImgMergeFrame	typeref:typename:void
OnX2Y	MergeEditView.cpp	/^void CMergeEditView::OnX2Y(int srcPane, int dstPane)$/;"	f	class:CMergeEditView	typeref:typename:void
Open	7zCommon.cpp	/^UINT DirItemEnumerator::Open()$/;"	f	class:DirItemEnumerator	typeref:typename:UINT
Open	7zCommon.cpp	/^UINT SingleItemEnumerator::Open()$/;"	f	class:SingleItemEnumerator	typeref:typename:UINT
Open	Common/RegKey.cpp	/^LONG CRegKeyEx::Open(HKEY hKeyRoot, LPCTSTR pszPath)$/;"	f	class:CRegKeyEx	typeref:typename:LONG
Open	Common/UniFile.cpp	/^bool UniMemFile::Open(const String& filename)$/;"	f	class:UniMemFile	typeref:typename:bool
Open	Common/UniFile.cpp	/^bool UniMemFile::Open(const String& filename, AccessMode mode)$/;"	f	class:UniMemFile	typeref:typename:bool
Open	Common/UniFile.cpp	/^bool UniStdioFile::Open(const String& filename, const String& mode)$/;"	f	class:UniStdioFile	typeref:typename:bool
Open	DirView.cpp	/^void CDirView::Open(const PathContext& paths, DWORD dwFlags[3], PackingInfo * infoUnpacker)$/;"	f	class:CDirView	typeref:typename:void
Open	Merge7zFormatMergePluginImpl.cpp	/^Merge7z::Format::Inspector *Merge7zFormatMergePluginImpl::Open(HWND, LPCTSTR) { return nullptr; /;"	f	class:Merge7zFormatMergePluginImpl	typeref:typename:Merge7z::Format::Inspector *
Open	Merge7zFormatShellImpl.cpp	/^Merge7z::Format::Inspector *Merge7zFormatShellImpl::Open(HWND, LPCTSTR) { return nullptr; }$/;"	f	class:Merge7zFormatShellImpl	typeref:typename:Merge7z::Format::Inspector *
OpenContributersFile	Merge.cpp	/^static void OpenContributersFile(int&)$/;"	f	typeref:typename:void	file:
OpenCreate	Common/UniFile.cpp	/^bool UniStdioFile::OpenCreate(const String& filename)$/;"	f	class:UniStdioFile	typeref:typename:bool
OpenCreateUtf8	Common/UniFile.cpp	/^bool UniStdioFile::OpenCreateUtf8(const String& filename)$/;"	f	class:UniStdioFile	typeref:typename:bool
OpenDlgHelpLocation	OpenView.cpp	/^static TCHAR OpenDlgHelpLocation[] = _T("::\/htmlhelp\/Open_paths.html");$/;"	v	typeref:typename:TCHAR[]	file:
OpenDocList	MainFrm.h	/^typedef CTypedPtrList<CPtrList, COpenDoc *> OpenDocList;$/;"	t	typeref:typename:CTypedPtrList<CPtrList,COpenDoc * >
OpenDocs	HexMergeDoc.cpp	/^bool CHexMergeDoc::OpenDocs(int nFiles, const FileLocation fileloc[], const bool bRO[], const St/;"	f	class:CHexMergeDoc	typeref:typename:bool
OpenDocs	ImgMergeFrm.cpp	/^bool CImgMergeFrame::OpenDocs(int nFiles, const FileLocation fileloc[], const bool bRO[], const /;"	f	class:CImgMergeFrame	typeref:typename:bool
OpenDocs	MergeDoc.cpp	/^bool CMergeDoc::OpenDocs(int nFiles, const FileLocation ifileloc[],$/;"	f	class:CMergeDoc	typeref:typename:bool
OpenFileOrUrl	Merge.cpp	/^void CMergeApp::OpenFileOrUrl(LPCTSTR szFile, LPCTSTR szUrl)$/;"	f	class:CMergeApp	typeref:typename:void
OpenFileToExternalEditor	Merge.cpp	/^void CMergeApp::OpenFileToExternalEditor(const String& file, int nLineNumber\/* = 1*\/)$/;"	f	class:CMergeApp	typeref:typename:void
OpenFiles	DiffFileData.cpp	/^bool DiffFileData::OpenFiles(const String& szFilepath1, const String& szFilepath2)$/;"	f	class:DiffFileData	typeref:typename:bool
OpenHKCU	OptionsInit.cpp	/^static bool OpenHKCU(HKEY *key, LPCTSTR relpath)$/;"	f	typeref:typename:bool	file:
OpenHKLM	OptionsInit.cpp	/^static bool OpenHKLM(HKEY *key, LPCTSTR relpath)$/;"	f	typeref:typename:bool	file:
OpenNextDiff	DirView.cpp	/^void CDirView::OpenNextDiff()$/;"	f	class:CDirView	typeref:typename:void
OpenNoCreateWithAccess	Common/RegKey.cpp	/^LONG CRegKeyEx::OpenNoCreateWithAccess(HKEY hKeyRoot, LPCTSTR pszPath, REGSAM regsam)$/;"	f	class:CRegKeyEx	typeref:typename:LONG
OpenParentDirectory	DirView.cpp	/^void CDirView::OpenParentDirectory()$/;"	f	class:CDirView	typeref:typename:void
OpenPrevDiff	DirView.cpp	/^void CDirView::OpenPrevDiff()$/;"	f	class:CDirView	typeref:typename:void
OpenReadOnly	Common/UniFile.cpp	/^bool UniMemFile::OpenReadOnly(const String& filename)$/;"	f	class:UniMemFile	typeref:typename:bool
OpenReadOnly	Common/UniFile.cpp	/^bool UniStdioFile::OpenReadOnly(const String& filename)$/;"	f	class:UniStdioFile	typeref:typename:bool
OpenSelection	DirView.cpp	/^void CDirView::OpenSelection(SELECTIONTYPE selectionType \/*= SELECTIONTYPE_NORMAL*\/, PackingIn/;"	f	class:CDirView	typeref:typename:void
OpenSelectionAs	DirView.cpp	/^void CDirView::OpenSelectionAs(UINT id)$/;"	f	class:CDirView	typeref:typename:void
OpenSpecialItems	DirView.cpp	/^void CDirView::OpenSpecialItems(DIFFITEM *pos1, DIFFITEM *pos2, DIFFITEM *pos3)$/;"	f	class:CDirView	typeref:typename:void
OpenWithAccess	Common/RegKey.cpp	/^LONG CRegKeyEx::OpenWithAccess(HKEY hKeyRoot, LPCTSTR pszPath, REGSAM regsam)$/;"	f	class:CRegKeyEx	typeref:typename:LONG
OpenWithUnpackerDialog	MergeDoc.cpp	/^bool CMergeDoc::OpenWithUnpackerDialog()$/;"	f	class:CMergeDoc	typeref:typename:bool
Options	OptionsCustomColors.cpp	/^namespace Options { namespace CustomColors$/;"	n	file:
Options	OptionsCustomColors.h	/^namespace Options { namespace CustomColors {$/;"	n
Options	OptionsDiffColors.cpp	/^namespace Options { namespace DiffColors {$/;"	n	file:
Options	OptionsDiffColors.h	/^namespace Options { namespace DiffColors {$/;"	n
Options	OptionsDiffOptions.cpp	/^namespace Options { namespace DiffOptions {$/;"	n	file:
Options	OptionsDiffOptions.h	/^namespace Options { namespace DiffOptions {$/;"	n
Options	OptionsDirColors.cpp	/^namespace Options { namespace DirColors {$/;"	n	file:
Options	OptionsDirColors.h	/^namespace Options { namespace DirColors {$/;"	n
Options	OptionsFont.cpp	/^namespace Options { namespace Font {$/;"	n	file:
Options	OptionsFont.h	/^namespace Options { namespace Font {$/;"	n
Options	OptionsInit.cpp	/^namespace Options$/;"	n	file:
Options	OptionsInit.h	/^namespace Options {$/;"	n
Options	OptionsSyntaxColors.cpp	/^namespace Options { namespace SyntaxColors {$/;"	n	file:
Options	OptionsSyntaxColors.h	/^namespace Options { namespace SyntaxColors {$/;"	n
OptionsHelpLocation	Common/PreferencesDlg.cpp	/^static TCHAR OptionsHelpLocation[] = _T("::\/htmlhelp\/Configuration.html");$/;"	v	typeref:typename:TCHAR[]	file:
OptionsMap	Common/OptionsMgr.h	/^typedef std::map<String, COption> OptionsMap;$/;"	t	typeref:typename:std::map<String,COption>
OptionsPanel	OptionsPanel.cpp	/^OptionsPanel::OptionsPanel(COptionsMgr *optionsMgr, UINT nIDTemplate)$/;"	f	class:OptionsPanel
OptionsPanel	OptionsPanel.h	/^class OptionsPanel : public CTrPropertyPage, public IOptionsPanel$/;"	c
Original	7zCommon.h	/^		Original = 0x40,$/;"	e	enum:DirItemEnumerator::__anond3316a350103
PAGEITEM	Common/PropertyPageHost.h	/^	PAGEITEM(CPropertyPage* _pPage = nullptr, LPCTSTR szTitle = nullptr, DWORD dwData = 0) : $/;"	f	struct:PAGEITEM
PAGEITEM	Common/PropertyPageHost.h	/^struct PAGEITEM$/;"	s
PANE_COMPMETHOD	DirFrame.cpp	/^	PANE_COMPMETHOD = 1,$/;"	e	enum:__anon18ac27200103	file:
PANE_FILTER	DirFrame.cpp	/^	PANE_FILTER,$/;"	e	enum:__anon18ac27200103	file:
PANE_LEFT_EOL	HexMergeFrm.cpp	/^	PANE_LEFT_EOL,$/;"	e	enum:__anon6fcd00300103	file:
PANE_LEFT_INFO	HexMergeFrm.cpp	/^	PANE_LEFT_INFO = 0,$/;"	e	enum:__anon6fcd00300103	file:
PANE_LEFT_RO	DirFrame.cpp	/^	PANE_LEFT_RO,$/;"	e	enum:__anon18ac27200103	file:
PANE_LEFT_RO	HexMergeFrm.cpp	/^	PANE_LEFT_RO,$/;"	e	enum:__anon6fcd00300103	file:
PANE_MIDDLE_RO	DirFrame.cpp	/^	PANE_MIDDLE_RO,$/;"	e	enum:__anon18ac27200103	file:
PANE_PANE0_ENCODING	MergeStatusBar.cpp	/^	PANE_PANE0_ENCODING,$/;"	e	enum:__anond569877f0103	file:
PANE_PANE0_EOL	MergeStatusBar.cpp	/^	PANE_PANE0_EOL,$/;"	e	enum:__anond569877f0103	file:
PANE_PANE0_INFO	MergeStatusBar.cpp	/^	PANE_PANE0_INFO = 0,$/;"	e	enum:__anond569877f0103	file:
PANE_PANE0_RO	MergeStatusBar.cpp	/^	PANE_PANE0_RO,$/;"	e	enum:__anond569877f0103	file:
PANE_PANE1_ENCODING	MergeStatusBar.cpp	/^	PANE_PANE1_ENCODING,$/;"	e	enum:__anond569877f0103	file:
PANE_PANE1_EOL	MergeStatusBar.cpp	/^	PANE_PANE1_EOL,$/;"	e	enum:__anond569877f0103	file:
PANE_PANE1_INFO	MergeStatusBar.cpp	/^	PANE_PANE1_INFO,$/;"	e	enum:__anond569877f0103	file:
PANE_PANE1_RO	MergeStatusBar.cpp	/^	PANE_PANE1_RO,$/;"	e	enum:__anond569877f0103	file:
PANE_PANE2_ENCODING	MergeStatusBar.cpp	/^	PANE_PANE2_ENCODING,$/;"	e	enum:__anond569877f0103	file:
PANE_PANE2_EOL	MergeStatusBar.cpp	/^	PANE_PANE2_EOL,$/;"	e	enum:__anond569877f0103	file:
PANE_PANE2_INFO	MergeStatusBar.cpp	/^	PANE_PANE2_INFO,$/;"	e	enum:__anond569877f0103	file:
PANE_PANE2_RO	MergeStatusBar.cpp	/^	PANE_PANE2_RO,$/;"	e	enum:__anond569877f0103	file:
PANE_RIGHT_EOL	HexMergeFrm.cpp	/^	PANE_RIGHT_EOL,$/;"	e	enum:__anon6fcd00300103	file:
PANE_RIGHT_INFO	HexMergeFrm.cpp	/^	PANE_RIGHT_INFO,$/;"	e	enum:__anon6fcd00300103	file:
PANE_RIGHT_RO	DirFrame.cpp	/^	PANE_RIGHT_RO,$/;"	e	enum:__anon18ac27200103	file:
PANE_RIGHT_RO	HexMergeFrm.cpp	/^	PANE_RIGHT_RO,$/;"	e	enum:__anon6fcd00300103	file:
PATCHFILES	PatchTool.h	/^	PATCHFILES() : ltime(0), rtime(0) {};$/;"	f	struct:PATCHFILES
PATCHFILES	PatchTool.h	/^struct PATCHFILES$/;"	s
PATCHOPTIONS	DiffWrapper.h	/^struct PATCHOPTIONS$/;"	s
PATHDELIM	Common/PreferencesDlg.cpp	/^const TCHAR PATHDELIM = '>';$/;"	v	typeref:typename:const TCHAR
PATH_EXISTENCE	paths.h	/^} PATH_EXISTENCE;$/;"	t	namespace:paths	typeref:enum:paths::__anon9beca83b0103
PLUGIN_AUTO	FileTransform.h	/^	PLUGIN_AUTO,$/;"	e	enum:PLUGIN_MODE
PLUGIN_BUILTIN_XML	FileTransform.h	/^	PLUGIN_BUILTIN_XML,$/;"	e	enum:PLUGIN_MODE
PLUGIN_MANUAL	FileTransform.h	/^	PLUGIN_MANUAL,$/;"	e	enum:PLUGIN_MODE
PLUGIN_MODE	FileTransform.h	/^enum PLUGIN_MODE$/;"	g
POCO_NO_UNWINDOWS	Common/ExConverter.cpp	/^#define POCO_NO_UNWINDOWS /;"	d	file:
POCO_NO_UNWINDOWS	DiffContext.h	/^#define POCO_NO_UNWINDOWS /;"	d
POCO_NO_UNWINDOWS	DiffThread.h	/^#define POCO_NO_UNWINDOWS /;"	d
POCO_NO_UNWINDOWS	DirItem.h	/^#define POCO_NO_UNWINDOWS /;"	d
POCO_NO_UNWINDOWS	DirScan.cpp	/^#define POCO_NO_UNWINDOWS /;"	d	file:
POCO_NO_UNWINDOWS	Environment.cpp	/^#define POCO_NO_UNWINDOWS /;"	d	file:
POCO_NO_UNWINDOWS	FileFilter.h	/^#define POCO_NO_UNWINDOWS /;"	d
POCO_NO_UNWINDOWS	PluginManager.h	/^#define POCO_NO_UNWINDOWS /;"	d
POCO_NO_UNWINDOWS	Plugins.cpp	/^#define POCO_NO_UNWINDOWS /;"	d	file:
POCO_NO_UNWINDOWS	TFile.h	/^#define POCO_NO_UNWINDOWS /;"	d
PREDIFF_AUTO	FileTransform.h	/^	PREDIFF_AUTO = PLUGIN_AUTO,$/;"	e	enum:PLUGIN_MODE
PREDIFF_MANUAL	FileTransform.h	/^	PREDIFF_MANUAL = PLUGIN_MANUAL,$/;"	e	enum:PLUGIN_MODE
PRIVATE	SharedFilterDlg.h	/^	enum FilterType : int { SHARED = 0, PRIVATE = 1 };$/;"	e	enum:CSharedFilterDlg::FilterType
PROJECTFILE_EXT	ProjectFile.cpp	/^const String ProjectFile::PROJECTFILE_EXT = toTString("WinMerge");$/;"	m	class:ProjectFile	typeref:typename:const String
PROJECTFILE_EXT	ProjectFile.h	/^	static const String PROJECTFILE_EXT;$/;"	m	class:ProjectFile	typeref:typename:const String
PR_FILE_NAME	diffutils/src/diff.h	/^#define PR_FILE_NAME /;"	d
Packing	FileTransform.cpp	/^bool Packing(String & filepath, PackingInfo handler)$/;"	f	namespace:FileTransform	typeref:typename:bool
PackingInfo	FileTransform.h	/^	explicit PackingInfo(PLUGIN_MODE Mode = FileTransform::g_UnpackerMode)$/;"	f	class:PackingInfo
PackingInfo	FileTransform.h	/^class PackingInfo : public PluginForFile$/;"	c
Paint	Common/scbarg.cpp	/^void CSCBButton::Paint(CDC* pDC)$/;"	f	class:CSCBButton	typeref:typename:void
PaintGrip	Common/CMoveConstraint.cpp	/^CMoveConstraint::PaintGrip()$/;"	f	class:prdlg::CMoveConstraint	typeref:typename:bool
ParentIsRegularPath	DirActions.h	/^		ParentIsRegularPath,$/;"	e	enum:AllowUpwardDirectory::ReturnCode
ParentIsTempPath	DirActions.h	/^		ParentIsTempPath$/;"	e	enum:AllowUpwardDirectory::ReturnCode
ParseArgsAndDoOpen	Merge.cpp	/^bool CMergeApp::ParseArgsAndDoOpen(MergeCmdLineInfo& cmdInfo, CMainFrame* pMainFrame)$/;"	f	class:CMergeApp	typeref:typename:bool
ParseConflictFile	ConflictFileParser.cpp	/^bool ParseConflictFile(const String& conflictFileName,$/;"	f	typeref:typename:bool
ParseExtensions	FileFilterHelper.cpp	/^String FileFilterHelper::ParseExtensions(const String &extensions) const$/;"	f	class:FileFilterHelper	typeref:typename:String
ParseStyle	Common/MessageBoxDialog.cpp	/^void CMessageBoxDialog::ParseStyle ( )$/;"	f	class:CMessageBoxDialog	typeref:typename:void
ParseWinMergeCmdLine	MergeCmdLineInfo.cpp	/^void MergeCmdLineInfo::ParseWinMergeCmdLine(const TCHAR *q)$/;"	f	class:MergeCmdLineInfo	typeref:typename:void
PathContext	PathContext.cpp	/^PathContext::PathContext()$/;"	f	class:PathContext
PathContext	PathContext.cpp	/^PathContext::PathContext(const PathContext &paths)$/;"	f	class:PathContext
PathContext	PathContext.cpp	/^PathContext::PathContext(const String& sLeft)$/;"	f	class:PathContext
PathContext	PathContext.cpp	/^PathContext::PathContext(const String& sLeft, const String& sMiddle, const String& sRight)$/;"	f	class:PathContext
PathContext	PathContext.cpp	/^PathContext::PathContext(const String& sLeft, const String& sRight)$/;"	f	class:PathContext
PathContext	PathContext.cpp	/^PathContext::PathContext(const std::vector<String> &paths)$/;"	f	class:PathContext
PathContext	PathContext.h	/^class PathContext$/;"	c
PathContextIterator	PathContext.h	/^	PathContextIterator() : m_pPathContext(nullptr), m_sel(-1)$/;"	f	class:PathContextIterator
PathContextIterator	PathContext.h	/^	explicit PathContextIterator(const PathContext *pPathContext) : m_pPathContext(pPathContext)$/;"	f	class:PathContextIterator
PathContextIterator	PathContext.h	/^class PathContextIterator : public std::iterator<std::forward_iterator_tag, String>$/;"	c
PathInfo	PathContext.cpp	/^PathInfo::PathInfo(const PathInfo &pi)$/;"	f	class:PathInfo
PathInfo	PathContext.h	/^	PathInfo() {}$/;"	f	class:PathInfo
PathInfo	PathContext.h	/^class PathInfo$/;"	c
Paths_element_name	ProjectFile.cpp	/^const char Paths_element_name[] = "paths";$/;"	v	typeref:typename:const char[]
Pause	DiffThread.h	/^	void Pause() { m_bPaused = true; }$/;"	f	class:CDiffThread	typeref:typename:void
PauseCurrentScan	DirDoc.cpp	/^void CDirDoc::PauseCurrentScan()$/;"	f	class:CDirDoc	typeref:typename:void
PerformActionList	DirView.cpp	/^void CDirView::PerformActionList(FileActionScript & actionScript)$/;"	f	class:CDirView	typeref:typename:void
Persist	Common/CMoveConstraint.cpp	/^CMoveConstraint::Persist(bool saving, bool position)$/;"	f	class:prdlg::CMoveConstraint	typeref:typename:void
PidlContainer	Common/PidlContainer.h	/^	typedef std::vector<LPITEMIDLIST> PidlContainer;$/;"	t	class:CPidlContainer	typeref:typename:std::vector<LPITEMIDLIST>
PluginArray	Plugins.h	/^typedef std::vector<PluginInfoPtr> PluginArray;$/;"	t	typeref:typename:std::vector<PluginInfoPtr>
PluginArrayPtr	Plugins.h	/^typedef std::shared_ptr<PluginArray> PluginArrayPtr;$/;"	t	typeref:typename:std::shared_ptr<PluginArray>
PluginFileInfo	PluginManager.h	/^struct PluginFileInfo$/;"	s
PluginFileInfoMap	PluginManager.h	/^	typedef std::map<String, PluginFileInfoPtr> PluginFileInfoMap;$/;"	t	class:PluginManager	typeref:typename:std::map<String,PluginFileInfoPtr>
PluginFileInfoPtr	PluginManager.h	/^typedef std::shared_ptr<PluginFileInfo> PluginFileInfoPtr;$/;"	t	typeref:typename:std::shared_ptr<PluginFileInfo>
PluginForFile	FileTransform.h	/^	explicit PluginForFile(PLUGIN_MODE Mode) $/;"	f	class:PluginForFile
PluginForFile	FileTransform.h	/^class PluginForFile$/;"	c
PluginInfo	Plugins.h	/^	PluginInfo()$/;"	f	class:PluginInfo
PluginInfo	Plugins.h	/^class PluginInfo$/;"	c
PluginInfoPtr	Plugins.h	/^typedef std::shared_ptr<PluginInfo> PluginInfoPtr;$/;"	t	typeref:typename:std::shared_ptr<PluginInfo>
PluginManager	PluginManager.h	/^class PluginManager : public IPluginInfos$/;"	c
PluginsContext	FolderCmp.h	/^struct PluginsContext$/;"	s
PluginsListDlg	PluginsListDlg.h	/^class PluginsListDlg : public CTrDialog$/;"	c
Poco	Common/UniFile.h	/^namespace Poco { class SharedMemory; }$/;"	n
Poco	DiffThread.h	/^namespace Poco$/;"	n
Poco	markdown.h	/^namespace Poco { class SharedMemory; }$/;"	n
Pop	markdown.cpp	/^CMarkdown &CMarkdown::Pop()$/;"	f	class:CMarkdown	typeref:typename:CMarkdown &
PopCursors	GhostTextView.cpp	/^void CGhostTextView::PopCursors ()$/;"	f	class:CGhostTextView	typeref:typename:void
PopulateDiffs	stringdiffs.cpp	/^stringdiffs::PopulateDiffs()$/;"	f	class:strdiff::stringdiffs	typeref:typename:void
PostFilter	DiffWrapper.cpp	/^bool CDiffWrapper::PostFilter(int StartPos, int EndPos, int Direction,$/;"	f	class:CDiffWrapper	typeref:typename:bool
PostFilter	DiffWrapper.cpp	/^void CDiffWrapper::PostFilter(int LineNumberLeft, int QtyLinesLeft, int LineNumberRight,$/;"	f	class:CDiffWrapper	typeref:typename:void
PreCreateWindow	HexMergeView.cpp	/^BOOL CHexMergeView::PreCreateWindow(CREATESTRUCT& cs)$/;"	f	class:CHexMergeView	typeref:typename:BOOL
PreCreateWindow	ImgMergeFrm.cpp	/^BOOL CImgMergeFrame::PreCreateWindow(CREATESTRUCT& cs)$/;"	f	class:CImgMergeFrame	typeref:typename:BOOL
PreCreateWindow	MainFrm.cpp	/^BOOL CMainFrame::PreCreateWindow(CREATESTRUCT& cs)$/;"	f	class:CMainFrame	typeref:typename:BOOL
PreCreateWindow	OpenFrm.cpp	/^BOOL COpenFrame::PreCreateWindow(CREATESTRUCT& cs)$/;"	f	class:COpenFrame	typeref:typename:BOOL
PreCreateWindow	OpenView.cpp	/^BOOL COpenView::PreCreateWindow(CREATESTRUCT& cs)$/;"	f	class:COpenView	typeref:typename:BOOL
PreTranslateMessage	Common/MessageBoxDialog.cpp	/^BOOL CMessageBoxDialog::PreTranslateMessage ( MSG* pMsg )$/;"	f	class:CMessageBoxDialog	typeref:typename:BOOL
PreTranslateMessage	Common/PropertyPageHost.cpp	/^BOOL CPropertyPageHost::PreTranslateMessage(MSG* pMsg) $/;"	f	class:CPropertyPageHost	typeref:typename:BOOL
PreTranslateMessage	Common/SuperComboBox.cpp	/^BOOL CSuperComboBox::PreTranslateMessage(MSG* pMsg)$/;"	f	class:CSuperComboBox	typeref:typename:BOOL
PreTranslateMessage	DirView.cpp	/^BOOL CDirView::PreTranslateMessage(MSG* pMsg)$/;"	f	class:CDirView	typeref:typename:BOOL
PreTranslateMessage	FilepathEdit.cpp	/^BOOL CFilepathEdit::PreTranslateMessage(MSG *pMsg)$/;"	f	class:CFilepathEdit	typeref:typename:BOOL
PreTranslateMessage	HexMergeView.cpp	/^BOOL CHexMergeView::PreTranslateMessage(MSG* pMsg)$/;"	f	class:CHexMergeView	typeref:typename:BOOL
PreTranslateMessage	ImgMergeFrm.cpp	/^BOOL CImgMergeFrame::PreTranslateMessage(MSG* pMsg)$/;"	f	class:CImgMergeFrame	typeref:typename:BOOL
PreTranslateMessage	MainFrm.cpp	/^BOOL CMainFrame::PreTranslateMessage(MSG* pMsg)$/;"	f	class:CMainFrame	typeref:typename:BOOL
PreTranslateMessage	MergeEditView.cpp	/^BOOL CMergeEditView::PreTranslateMessage(MSG* pMsg)$/;"	f	class:CMergeEditView	typeref:typename:BOOL
PreTranslateMessage	PropRegistry.cpp	/^BOOL PropRegistry::PreTranslateMessage(MSG* pMsg)$/;"	f	class:PropRegistry	typeref:typename:BOOL
Prediffing	FileTransform.cpp	/^bool Prediffing(PrediffingInfo * handler, String & filepath, const String& filteredText, bool bM/;"	f	namespace:FileTransform	typeref:typename:bool
Prediffing	FileTransform.cpp	/^bool Prediffing(String & filepath, PrediffingInfo handler, bool bMayOverwrite)$/;"	f	namespace:FileTransform	typeref:typename:bool
Prediffing	FileTransform.cpp	/^bool Prediffing(String & filepath, const String& filteredText, PrediffingInfo * handler, bool bM/;"	f	namespace:FileTransform	typeref:typename:bool
PrediffingInfo	FileTransform.h	/^	explicit PrediffingInfo(PLUGIN_MODE Mode = FileTransform::g_PredifferMode)$/;"	f	class:PrediffingInfo
PrediffingInfo	FileTransform.h	/^class PrediffingInfo : public PluginForFile$/;"	c
PrepareDragData	GhostTextView.cpp	/^HGLOBAL CGhostTextView::PrepareDragData ()$/;"	f	class:CGhostTextView	typeref:typename:HGLOBAL
PrevSignificant3wayDiff	DiffList.cpp	/^int DiffList::PrevSignificant3wayDiff(int nDiff, int nDiffType) const$/;"	f	class:DiffList	typeref:typename:int
PrevSignificant3wayDiffFromLine	DiffList.cpp	/^int DiffList::PrevSignificant3wayDiffFromLine(int nLine, int nDiffType) const$/;"	f	class:DiffList	typeref:typename:int
PrevSignificantDiff	DiffList.h	/^inline int DiffList::PrevSignificantDiff(int nDiff) const$/;"	f	class:DiffList	typeref:typename:int
PrevSignificantDiffFromLine	DiffList.cpp	/^int DiffList::PrevSignificantDiffFromLine(int nLine) const$/;"	f	class:DiffList	typeref:typename:int
PrimeListWithFile	MergeEditView.cpp	/^void CMergeEditView::PrimeListWithFile()$/;"	f	class:CMergeEditView	typeref:typename:void
PrimeTextBuffers	MergeDoc.cpp	/^void CMergeDoc::PrimeTextBuffers()$/;"	f	class:CMergeDoc	typeref:typename:void
PrintFooter	MergeEditView.cpp	/^void CMergeEditView::PrintFooter(CDC * pdc, int nPageNum)$/;"	f	class:CMergeEditView	typeref:typename:void
PrintHeader	MergeEditView.cpp	/^void CMergeEditView::PrintHeader(CDC * pdc, int nPageNum)$/;"	f	class:CMergeEditView	typeref:typename:void
ProjectFile	ProjectFile.h	/^class ProjectFile$/;"	c
ProjectFileHandler	ProjectFile.cpp	/^	explicit ProjectFileHandler(std::list<ProjectFileItem> *pProject) : m_pProject(pProject) {}$/;"	f	class:ProjectFileHandler	file:
ProjectFileHandler	ProjectFile.cpp	/^class ProjectFileHandler: public ContentHandler$/;"	c	file:
ProjectFileItem	ProjectFile.cpp	/^ ProjectFileItem::ProjectFileItem()$/;"	f	class:ProjectFileItem
ProjectFileItem	ProjectFile.h	/^class ProjectFileItem$/;"	c
PromptAndSaveIfNeeded	HexMergeDoc.cpp	/^bool CHexMergeDoc::PromptAndSaveIfNeeded(bool bAllowCancel)$/;"	f	class:CHexMergeDoc	typeref:typename:bool
PromptAndSaveIfNeeded	ImgMergeFrm.cpp	/^bool CImgMergeFrame::PromptAndSaveIfNeeded(bool bAllowCancel)$/;"	f	class:CImgMergeFrame	typeref:typename:bool
PromptAndSaveIfNeeded	MergeDoc.cpp	/^bool CMergeDoc::PromptAndSaveIfNeeded(bool bAllowCancel)$/;"	f	class:CMergeDoc	typeref:typename:bool
PropArchive	PropArchive.cpp	/^PropArchive::PropArchive(COptionsMgr *optionsMgr)$/;"	f	class:PropArchive
PropArchive	PropArchive.h	/^class PropArchive : public OptionsPanel$/;"	c
PropBackups	PropBackups.cpp	/^PropBackups::PropBackups(COptionsMgr *optionsMgr)$/;"	f	class:PropBackups
PropBackups	PropBackups.h	/^class PropBackups : public OptionsPanel$/;"	c
PropCodepage	PropCodepage.cpp	/^PropCodepage::PropCodepage(COptionsMgr *optionsMgr)$/;"	f	class:PropCodepage
PropCodepage	PropCodepage.h	/^class PropCodepage : public OptionsPanel$/;"	c
PropCompare	PropCompare.cpp	/^PropCompare::PropCompare(COptionsMgr *optionsMgr) $/;"	f	class:PropCompare
PropCompare	PropCompare.h	/^class PropCompare : public OptionsPanel$/;"	c
PropCompareBinary	PropCompareBinary.cpp	/^PropCompareBinary::PropCompareBinary(COptionsMgr *optionsMgr) $/;"	f	class:PropCompareBinary
PropCompareBinary	PropCompareBinary.h	/^class PropCompareBinary : public OptionsPanel$/;"	c
PropCompareFolder	PropCompareFolder.cpp	/^PropCompareFolder::PropCompareFolder(COptionsMgr *optionsMgr) $/;"	f	class:PropCompareFolder
PropCompareFolder	PropCompareFolder.h	/^class PropCompareFolder : public OptionsPanel$/;"	c
PropCompareImage	PropCompareImage.cpp	/^PropCompareImage::PropCompareImage(COptionsMgr *optionsMgr) $/;"	f	class:PropCompareImage
PropCompareImage	PropCompareImage.h	/^class PropCompareImage : public OptionsPanel$/;"	c
PropDirColors	PropDirColors.cpp	/^PropDirColors::PropDirColors(COptionsMgr *optionsMgr)$/;"	f	class:PropDirColors
PropDirColors	PropDirColors.h	/^class PropDirColors : public OptionsPanel$/;"	c
PropEditor	PropEditor.cpp	/^PropEditor::PropEditor(COptionsMgr *optionsMgr) $/;"	f	class:PropEditor
PropEditor	PropEditor.h	/^class PropEditor : public OptionsPanel$/;"	c
PropGeneral	PropGeneral.cpp	/^PropGeneral::PropGeneral(COptionsMgr *optionsMgr) $/;"	f	class:PropGeneral
PropGeneral	PropGeneral.h	/^class PropGeneral : public OptionsPanel$/;"	c
PropMarkerColors	PropMarkerColors.cpp	/^PropMarkerColors::PropMarkerColors(COptionsMgr *optionsMgr, SyntaxColors *pColors)$/;"	f	class:PropMarkerColors
PropMarkerColors	PropMarkerColors.h	/^class PropMarkerColors : public OptionsPanel$/;"	c
PropMergeColors	PropColors.cpp	/^PropMergeColors::PropMergeColors(COptionsMgr *optionsMgr)$/;"	f	class:PropMergeColors
PropMergeColors	PropColors.h	/^class PropMergeColors : public OptionsPanel$/;"	c
PropRegistry	PropRegistry.cpp	/^PropRegistry::PropRegistry(COptionsMgr *optionsMgr)$/;"	f	class:PropRegistry
PropRegistry	PropRegistry.h	/^class PropRegistry : public OptionsPanel$/;"	c
PropShell	PropShell.cpp	/^PropShell::PropShell(COptionsMgr *optionsMgr) $/;"	f	class:PropShell
PropShell	PropShell.h	/^class PropShell : public OptionsPanel$/;"	c
PropSyntaxColors	PropSyntaxColors.h	/^class PropSyntaxColors : public OptionsPanel$/;"	c
PropTextColors	PropTextColors.cpp	/^PropTextColors::PropTextColors(COptionsMgr *optionsMgr, SyntaxColors *pColors)$/;"	f	class:PropTextColors
PropTextColors	PropTextColors.h	/^class PropTextColors : public OptionsPanel$/;"	c
Pull	markdown.cpp	/^bool CMarkdown::Pull()$/;"	f	class:CMarkdown	typeref:typename:bool
Push	markdown.cpp	/^bool CMarkdown::Push()$/;"	f	class:CMarkdown	typeref:typename:bool
PushCursors	GhostTextView.cpp	/^void CGhostTextView::PushCursors ()$/;"	f	class:CGhostTextView	typeref:typename:void
PutFilesToClipboard	Common/ClipBoard.h	/^void PutFilesToClipboard(const Container& list, HWND currentWindowHandle)$/;"	f	typeref:typename:void
PutToClipboard	Common/ClipBoard.cpp	/^bool PutToClipboard(const String & text, HWND currentWindowHandle)$/;"	f	typeref:typename:bool
QueryGetData	Common/MyCom.h	/^	HRESULT QueryGetData(IDataObject *pDataObj)$/;"	f	class:CMyFormatEtc	typeref:typename:HRESULT
QueryInterface	Common/MyCom.h	/^  HRESULT QueryInterface(REFGUID iid, Q** pp) const$/;"	f	class:CMyComPtr	typeref:typename:HRESULT
QueryInterface	Common/lwdisp.c	/^static STDMETHODIMP QueryInterface(struct LWDispatch *This,$/;"	f	typeref:typename:STDMETHODIMP	file:
QueryInterface	DropHandler.cpp	/^HRESULT STDMETHODCALLTYPE DropHandler::QueryInterface(REFIID riid, void **ppvObject)$/;"	f	class:DropHandler	typeref:typename:HRESULT STDMETHODCALLTYPE
QueryRegMachine	Common/RegKey.cpp	/^bool CRegKeyEx::QueryRegMachine(LPCTSTR key)$/;"	f	class:CRegKeyEx	typeref:typename:bool
QueryRegUser	Common/RegKey.cpp	/^bool CRegKeyEx::QueryRegUser(LPCTSTR key)$/;"	f	class:CRegKeyEx	typeref:typename:bool
QueryShellContextMenu	Common/ShellContextMenu.cpp	/^bool CShellContextMenu::QueryShellContextMenu()$/;"	f	class:CShellContextMenu	typeref:typename:bool
QueryStrings	Common/VersionInfo.cpp	/^void CVersionInfo::QueryStrings()$/;"	f	class:CVersionInfo	typeref:typename:void
QueryValue	Common/VersionInfo.cpp	/^void CVersionInfo::QueryValue(LPCTSTR szId, String& s)$/;"	f	class:CVersionInfo	typeref:typename:void
QuickCompareOptions	CompareOptions.cpp	/^QuickCompareOptions::QuickCompareOptions()$/;"	f	class:QuickCompareOptions
QuickCompareOptions	CompareOptions.cpp	/^QuickCompareOptions::QuickCompareOptions(const CompareOptions& options)$/;"	f	class:QuickCompareOptions
QuickCompareOptions	CompareOptions.h	/^class QuickCompareOptions : public CompareOptions$/;"	c
RBUTTONDBLCLK	WinIMergeLib.h	/^		RBUTTONDOWN,     RBUTTONUP, RBUTTONDBLCLK,$/;"	e	enum:IImgMergeWindow::EVENT_TYPE
RBUTTONDOWN	WinIMergeLib.h	/^		RBUTTONDOWN,     RBUTTONUP, RBUTTONDBLCLK,$/;"	e	enum:IImgMergeWindow::EVENT_TYPE
RBUTTONUP	WinIMergeLib.h	/^		RBUTTONDOWN,     RBUTTONUP, RBUTTONDBLCLK,$/;"	e	enum:IImgMergeWindow::EVENT_TYPE
READ_OPTIONS	PropColors.h	/^	typedef enum { SET_DEFAULTS, WRITE_OPTIONS, READ_OPTIONS } OPERATION;$/;"	e	enum:PropMergeColors::__anonf8c04cae0203
READ_OPTIONS	PropDirColors.h	/^	typedef enum { SET_DEFAULTS, WRITE_OPTIONS, READ_OPTIONS } OPERATION;$/;"	e	enum:PropDirColors::__anon04e0652d0203
READ_OPTIONS	PropMarkerColors.h	/^	typedef enum { SET_DEFAULTS, READ_OPTIONS, LOAD_COLORS } OPERATION;$/;"	e	enum:PropMarkerColors::__anon05ae34500203
READ_OPTIONS	PropTextColors.h	/^	typedef enum { SET_DEFAULTS, READ_OPTIONS, LOAD_COLORS } OPERATION;$/;"	e	enum:PropTextColors::__anon432a02130203
REFRESH	WinIMergeLib.h	/^		REFRESH, SCROLLTODIFF, OPEN$/;"	e	enum:IImgMergeWindow::EVENT_TYPE
REGISTRY_SECTION_MESSAGEBOX	Common/MessageBoxDialog.h	/^#define REGISTRY_SECTION_MESSAGEBOX	/;"	d
REPORT_TYPE	DirReportTypes.h	/^} REPORT_TYPE;$/;"	t	typeref:enum:__anon7e274f0b0103
REPORT_TYPE_COMMALIST	DirReportTypes.h	/^	REPORT_TYPE_COMMALIST = 0, \/**< Comma-separated list *\/$/;"	e	enum:__anon7e274f0b0103
REPORT_TYPE_SIMPLEHTML	DirReportTypes.h	/^	REPORT_TYPE_SIMPLEHTML, \/**< Simple html table *\/$/;"	e	enum:__anon7e274f0b0103
REPORT_TYPE_SIMPLEXML	DirReportTypes.h	/^	REPORT_TYPE_SIMPLEXML, \/**< Simple xml *\/$/;"	e	enum:__anon7e274f0b0103
REPORT_TYPE_TABLIST	DirReportTypes.h	/^	REPORT_TYPE_TABLIST, \/**< Tab-separated list *\/$/;"	e	enum:__anon7e274f0b0103
RESCAN_FILE_ERR	MergeDoc.h	/^	RESCAN_FILE_ERR, \/**< Error reading file *\/$/;"	e	enum:__anon80996cc10203
RESCAN_OK	MergeDoc.h	/^	RESCAN_OK = 0, \/**< Rescan succeeded *\/$/;"	e	enum:__anon80996cc10203
RESCAN_SUPPRESSED	MergeDoc.h	/^	RESCAN_SUPPRESSED, \/**< Rescan not done - suppressed *\/$/;"	e	enum:__anon80996cc10203
RESCAN_TEMP_ERR	MergeDoc.h	/^	RESCAN_TEMP_ERR, \/**< Error saving to temp file *\/$/;"	e	enum:__anon80996cc10203
RESCAN_TIMEOUT	MergeEditView.cpp	/^const UINT RESCAN_TIMEOUT = 1000;$/;"	v	typeref:typename:const UINT
RESULT	CompareStats.h	/^	enum RESULT$/;"	g	class:CompareStats
RESULT_BINDIFF	CompareStats.h	/^		RESULT_BINDIFF,$/;"	e	enum:CompareStats::RESULT
RESULT_BINSAME	CompareStats.h	/^		RESULT_BINSAME,$/;"	e	enum:CompareStats::RESULT
RESULT_COUNT	CompareStats.h	/^		RESULT_COUNT  \/\/THIS MUST BE THE LAST ITEM$/;"	e	enum:CompareStats::RESULT
RESULT_DIFF	CompareEngines/ByteComparator.h	/^		RESULT_DIFF, \/**< Buffers are different *\/$/;"	e	enum:CompareEngines::ByteComparator::__anon9fdbae860103
RESULT_DIFF	CompareStats.h	/^		RESULT_DIFF,$/;"	e	enum:CompareStats::RESULT
RESULT_DIRDIFF	CompareStats.h	/^		RESULT_DIRDIFF,$/;"	e	enum:CompareStats::RESULT
RESULT_DIRSAME	CompareStats.h	/^		RESULT_DIRSAME,$/;"	e	enum:CompareStats::RESULT
RESULT_DIRSKIP	CompareStats.h	/^		RESULT_DIRSKIP,$/;"	e	enum:CompareStats::RESULT
RESULT_ERROR	CompareStats.h	/^		RESULT_ERROR,$/;"	e	enum:CompareStats::RESULT
RESULT_LDIRMISSING	CompareStats.h	/^		RESULT_LDIRMISSING,$/;"	e	enum:CompareStats::RESULT
RESULT_LDIRUNIQUE	CompareStats.h	/^		RESULT_LDIRUNIQUE,$/;"	e	enum:CompareStats::RESULT
RESULT_LMISSING	CompareStats.h	/^		RESULT_LMISSING,$/;"	e	enum:CompareStats::RESULT
RESULT_LUNIQUE	CompareStats.h	/^		RESULT_LUNIQUE = 0,$/;"	e	enum:CompareStats::RESULT
RESULT_MDIRMISSING	CompareStats.h	/^		RESULT_MDIRMISSING,$/;"	e	enum:CompareStats::RESULT
RESULT_MDIRUNIQUE	CompareStats.h	/^		RESULT_MDIRUNIQUE,$/;"	e	enum:CompareStats::RESULT
RESULT_MMISSING	CompareStats.h	/^		RESULT_MMISSING,$/;"	e	enum:CompareStats::RESULT
RESULT_MUNIQUE	CompareStats.h	/^		RESULT_MUNIQUE,$/;"	e	enum:CompareStats::RESULT
RESULT_RDIRMISSING	CompareStats.h	/^		RESULT_RDIRMISSING,$/;"	e	enum:CompareStats::RESULT
RESULT_RDIRUNIQUE	CompareStats.h	/^		RESULT_RDIRUNIQUE,$/;"	e	enum:CompareStats::RESULT
RESULT_RMISSING	CompareStats.h	/^		RESULT_RMISSING,$/;"	e	enum:CompareStats::RESULT
RESULT_RUNIQUE	CompareStats.h	/^		RESULT_RUNIQUE,$/;"	e	enum:CompareStats::RESULT
RESULT_SAME	CompareEngines/ByteComparator.h	/^		RESULT_SAME, \/**< Buffers are identical *\/$/;"	e	enum:CompareEngines::ByteComparator::__anon9fdbae860103
RESULT_SAME	CompareStats.h	/^		RESULT_SAME,$/;"	e	enum:CompareStats::RESULT
RESULT_SKIP	CompareStats.h	/^		RESULT_SKIP,$/;"	e	enum:CompareStats::RESULT
RETSIGTYPE	diffutils/config.h	/^#define RETSIGTYPE /;"	d
RINOK	Common/MyCom.h	/^#define RINOK(/;"	d
ROBUST_OUTPUT_STYLE	diffutils/src/diff.h	/^#define ROBUST_OUTPUT_STYLE(/;"	d
ROL	diffutils/src/io.c	/^#define ROL(/;"	d	file:
ROL	stringdiffs.cpp	/^#define ROL(/;"	d	file:
RO_PANEL_WIDTH	DirFrame.cpp	/^static UINT RO_PANEL_WIDTH = 30;$/;"	v	typeref:typename:UINT	file:
RO_PANEL_WIDTH	MergeStatusBar.cpp	/^static const UINT RO_PANEL_WIDTH = 20;$/;"	v	typeref:typename:const UINT	file:
ReAttachToBuffer	GhostTextView.cpp	/^ReAttachToBuffer (CCrystalTextBuffer * pBuf \/*= nullptr*\/ )$/;"	f	class:CGhostTextView	typeref:typename:void
Read	ProjectFile.cpp	/^bool ProjectFile::Read(const String& path)$/;"	f	class:ProjectFile	typeref:typename:bool
ReadBom	Common/UniFile.cpp	/^bool UniMemFile::ReadBom()$/;"	f	class:UniMemFile	typeref:typename:bool
ReadBom	Common/UniFile.cpp	/^bool UniStdioFile::ReadBom()$/;"	f	class:UniStdioFile	typeref:typename:bool
ReadBool	Common/RegKey.cpp	/^bool CRegKeyEx::ReadBool(LPCTSTR pszKey, bool defval)$/;"	f	class:CRegKeyEx	typeref:typename:bool
ReadByte	Common/RegKey.cpp	/^BYTE CRegKeyEx::ReadByte(LPCTSTR pszKey, BYTE defval)$/;"	f	class:CRegKeyEx	typeref:typename:BYTE
ReadChars	Common/RegKey.cpp	/^void CRegKeyEx::ReadChars (LPCTSTR pszKey, LPTSTR pData, DWORD dwLen, LPCTSTR defval)$/;"	f	class:CRegKeyEx	typeref:typename:void
ReadDword	Common/RegKey.cpp	/^DWORD CRegKeyEx::ReadDword(LPCTSTR pszKey, DWORD defval)$/;"	f	class:CRegKeyEx	typeref:typename:DWORD
ReadFloat	Common/RegKey.cpp	/^float CRegKeyEx::ReadFloat(LPCTSTR pszKey, float defval)$/;"	f	class:CRegKeyEx	typeref:typename:float
ReadInt	Common/RegKey.cpp	/^UINT CRegKeyEx::ReadInt(LPCTSTR pszKey, int defval)$/;"	f	class:CRegKeyEx	typeref:typename:UINT
ReadLong	Common/RegKey.cpp	/^LONG CRegKeyEx::ReadLong(LPCTSTR pszKey, LONG defval)$/;"	f	class:CRegKeyEx	typeref:typename:LONG
ReadOptions	Common/PreferencesDlg.cpp	/^void CPreferencesDlg::ReadOptions(bool bUpdate)$/;"	f	class:CPreferencesDlg	typeref:typename:void
ReadShort	Common/RegKey.cpp	/^short int CRegKeyEx::ReadShort(LPCTSTR pszKey, short int defval)$/;"	f	class:CRegKeyEx	typeref:typename:short int
ReadString	Common/RegKey.cpp	/^String CRegKeyEx::ReadString (LPCTSTR pszKey, LPCTSTR defval)$/;"	f	class:CRegKeyEx	typeref:typename:String
ReadString	Common/UniFile.cpp	/^bool UniMemFile::ReadString(String & line, String & eol, bool * lossy)$/;"	f	class:UniMemFile	typeref:typename:bool
ReadString	Common/UniFile.cpp	/^bool UniMemFile::ReadString(String & line, bool * lossy)$/;"	f	class:UniMemFile	typeref:typename:bool
ReadString	Common/UniFile.cpp	/^bool UniStdioFile::ReadString(String & line, String & eol, bool * lossy)$/;"	f	class:UniStdioFile	typeref:typename:bool
ReadString	Common/UniFile.cpp	/^bool UniStdioFile::ReadString(String & line, bool * lossy)$/;"	f	class:UniStdioFile	typeref:typename:bool
ReadString	UniMarkdownFile.cpp	/^bool UniMarkdownFile::ReadString(String &line, String &eol, bool *lossy)$/;"	f	class:UniMarkdownFile	typeref:typename:bool
ReadUint	Common/RegKey.cpp	/^UINT CRegKeyEx::ReadUint(LPCTSTR pszKey, UINT defval)$/;"	f	class:CRegKeyEx	typeref:typename:UINT
RealityBlock	GhostTextBuffer.h	/^	struct RealityBlock$/;"	s	class:CGhostTextBuffer
RecalcLayout	Common/SplitterWndEx.cpp	/^void CSplitterWndEx::RecalcLayout()$/;"	f	class:CSplitterWndEx	typeref:typename:void
RecalcPageLayouts	MergeEditView.cpp	/^void CMergeEditView::RecalcPageLayouts (CDC * pDC, CPrintInfo * pInfo)$/;"	f	class:CMergeEditView	typeref:typename:void
RecomputeRealityMapping	GhostTextBuffer.cpp	/^void CGhostTextBuffer::RecomputeRealityMapping()$/;"	f	class:CGhostTextBuffer	typeref:typename:void
RecordZero	Common/UniFile.cpp	/^static void RecordZero(UniFile::txtstats & txstats, size_t offset)$/;"	f	typeref:typename:void	file:
Redisplay	DirDoc.cpp	/^void CDirDoc::Redisplay()$/;"	f	class:CDirDoc	typeref:typename:void
Redisplay	DirView.cpp	/^void CDirView::Redisplay()$/;"	f	class:CDirView	typeref:typename:void
RedisplayChildren	DirView.cpp	/^void CDirView::RedisplayChildren(DIFFITEM *diffpos, int level, UINT &index, int &alldiffs)$/;"	f	class:CDirView	typeref:typename:void
ReflectGetdispinfo	DirView.cpp	/^void CDirView::ReflectGetdispinfo(NMLVDISPINFO *pParam)$/;"	f	class:CDirView	typeref:typename:void
RefreshDisplayText	FilepathEdit.cpp	/^void CFilepathEdit::RefreshDisplayText()$/;"	f	class:CFilepathEdit	typeref:typename:void
RefreshOptions	DirDoc.cpp	/^void CDirDoc::RefreshOptions()$/;"	f	class:CDirDoc	typeref:typename:void
RefreshOptions	DirView.cpp	/^void CDirView::RefreshOptions()$/;"	f	class:CDirView	typeref:typename:void
RefreshOptions	HexMergeDoc.cpp	/^void CHexMergeDoc::RefreshOptions()$/;"	f	class:CHexMergeDoc	typeref:typename:void
RefreshOptions	MergeDoc.cpp	/^void CMergeDoc::RefreshOptions()$/;"	f	class:CMergeDoc	typeref:typename:void
RefreshOptions	MergeEditView.cpp	/^void CMergeEditView::RefreshOptions()$/;"	f	class:CMergeEditView	typeref:typename:void
RefreshOptions	OpenDoc.cpp	/^void COpenDoc::RefreshOptions()$/;"	f	class:COpenDoc	typeref:typename:void
RegDir	Constants.h	/^const TCHAR RegDir[] = _T("Software\\\\Thingamahoochie\\\\WinMerge");$/;"	v	typeref:typename:const TCHAR[]
RegExpFilter	CompareEngines/Wrap_DiffUtils.cpp	/^bool DiffUtils::RegExpFilter(int StartPos, int EndPos, int FileNo) const$/;"	f	class:CompareEngines::DiffUtils	typeref:typename:bool
RegExpFilter	DiffWrapper.cpp	/^bool CDiffWrapper::RegExpFilter(int StartPos, int EndPos, int FileNo) const$/;"	f	class:CDiffWrapper	typeref:typename:bool
RegisterShellExtension	PropShell.cpp	/^static bool RegisterShellExtension(bool unregister, bool peruser)$/;"	f	typeref:typename:bool	file:
RelNotes	Constants.h	/^const TCHAR RelNotes[] = _T("\\\\Docs\\\\ReleaseNotes.html");$/;"	v	typeref:typename:const TCHAR[]
Release	Common/MyCom.h	/^  void Release() { if (_p) { _p->Release(); _p = NULL; } }$/;"	f	class:CMyComPtr	typeref:typename:void
Release	Common/lwdisp.c	/^static ULONG STDMETHODCALLTYPE Release(struct LWDispatch *This)$/;"	f	typeref:typename:ULONG STDMETHODCALLTYPE	file:
Release	DropHandler.cpp	/^ULONG STDMETHODCALLTYPE DropHandler::Release(void)$/;"	f	class:DropHandler	typeref:typename:ULONG STDMETHODCALLTYPE
ReleaseShellContextMenu	Common/ShellContextMenu.cpp	/^void CShellContextMenu::ReleaseShellContextMenu()$/;"	f	class:CShellContextMenu	typeref:typename:void
ReloadColumns	DirView.cpp	/^void CDirView::ReloadColumns()$/;"	f	class:CDirView	typeref:typename:void
ReloadFilterFromDisk	FileFilterMgr.cpp	/^int FileFilterMgr::ReloadFilterFromDisk(FileFilter * pfilter)$/;"	f	class:FileFilterMgr	typeref:typename:int
ReloadFilterFromDisk	FileFilterMgr.cpp	/^int FileFilterMgr::ReloadFilterFromDisk(const String& szFullPath)$/;"	f	class:FileFilterMgr	typeref:typename:int
ReloadItemStatus	DirDoc.cpp	/^void CDirDoc::ReloadItemStatus(DIFFITEM *diffPos, int idx)$/;"	f	class:CDirDoc	typeref:typename:void
ReloadMenu	MainFrm.cpp	/^void CMainFrame::ReloadMenu()$/;"	f	class:CMainFrame	typeref:typename:void
ReloadUpdatedFilters	FileFilterHelper.cpp	/^void FileFilterHelper::ReloadUpdatedFilters()$/;"	f	class:FileFilterHelper	typeref:typename:void
Remove	MovedBlocks.cpp	/^	void Remove(int val) { m_map.erase(val); }$/;"	f	class:IntSet	typeref:typename:void	file:
Remove	Plugins.cpp	/^void CAllThreadsScripts::Remove(CScriptsOfThread * scripts)$/;"	f	class:CAllThreadsScripts	typeref:typename:void
RemoveAll	DiffItemList.cpp	/^void DiffItemList::RemoveAll()$/;"	f	class:DiffItemList	typeref:typename:void
RemoveAll	PathContext.cpp	/^void PathContext::RemoveAll()$/;"	f	class:PathContext	typeref:typename:void
RemoveAllFilters	FilterList.h	/^inline void FilterList::RemoveAllFilters()$/;"	f	class:FilterList	typeref:typename:void
RemoveAllGhostLines	GhostTextBuffer.cpp	/^void CGhostTextBuffer::RemoveAllGhostLines()$/;"	f	class:CGhostTextBuffer	typeref:typename:void
RemoveChildren	DiffItem.cpp	/^void DIFFITEM::RemoveChildren()$/;"	f	class:DIFFITEM	typeref:typename:void
RemoveFilter	FileFilterMgr.cpp	/^void FileFilterMgr::RemoveFilter(const String& szFilterFile)$/;"	f	class:FileFilterMgr	typeref:typename:void
RemoveListener	DiffThread.h	/^	void RemoveListener(T *pObj, void (T::*pMethod)(int& state)) {$/;"	f	class:CDiffThread	typeref:typename:void
RemoveMenu	Common/BCMenu.cpp	/^bool BCMenu::RemoveMenu(UINT uiId,UINT nFlags)$/;"	f	class:BCMenu	typeref:typename:bool
RemoveMenu	Common/BCMenu.cpp	/^int BCMenu::RemoveMenu(wchar_t* pText, BC_Seperator sPos)$/;"	f	class:BCMenu	typeref:typename:int
RemoveMenu	Common/BCMenu.h	/^	int RemoveMenu(char* pText, BC_Seperator sPos)$/;"	f	class:BCMenu	typeref:typename:int
RemoveMergeViews	MergeDoc.cpp	/^void CMergeDoc::RemoveMergeViews(int nGroup)$/;"	f	class:CMergeDoc	typeref:typename:void
RemoveOperation	Merge.h	/^	void RemoveOperation()$/;"	f	class:CMergeApp	typeref:typename:void
RemoveOption	Common/OptionsMgr.cpp	/^int COptionsMgr::RemoveOption(const String& name)$/;"	f	class:COptionsMgr	typeref:typename:int
RemoveOption	Common/RegOptionsMgr.cpp	/^int CRegOptionsMgr::RemoveOption(const String& name)$/;"	f	class:CRegOptionsMgr	typeref:typename:int
RemoveScriptletCandidate	Plugins.cpp	/^static void RemoveScriptletCandidate(const String &scriptletFilepath)$/;"	f	typeref:typename:void	file:
RemoveTailActionItem	FileActionScript.cpp	/^FileActionItem FileActionScript::RemoveTailActionItem()$/;"	f	class:FileActionScript	typeref:typename:FileActionItem
RemoveTopLevelOwnerDraw	Common/BCMenu.cpp	/^void BCMenu::RemoveTopLevelOwnerDraw(void)$/;"	f	class:BCMenu	typeref:typename:void
RenameOnSameDir	DirActions.cpp	/^bool RenameOnSameDir(const String& szOldFileName, const String& szNewFileName)$/;"	f	typeref:typename:bool
RepaintLocationPane	MergeEditView.cpp	/^void CMergeEditView::RepaintLocationPane()$/;"	f	class:CMergeEditView	typeref:typename:void
ReplaceFullLines	DiffTextBuffer.cpp	/^void CDiffTextBuffer::ReplaceFullLines(CDiffTextBuffer& dbuf, CDiffTextBuffer& sbuf, CCrystalTex/;"	f	class:CDiffTextBuffer	typeref:typename:void
ReplaceSpaces	DiffWrapper.cpp	/^static void ReplaceSpaces(std::string & str, const char *rep)$/;"	f	typeref:typename:void	file:
ReportError	Common/lwdisp.c	/^static LPTSTR NTAPI ReportError(HRESULT sc, UINT style)$/;"	f	typeref:typename:LPTSTR NTAPI	file:
ReportPluginLoadFailure	Plugins.cpp	/^static void ReportPluginLoadFailure(const String & scriptletFilepath, const wchar_t *transformat/;"	f	typeref:typename:void	file:
ReportTypeInfo	DirCmpReportDlg.cpp	/^struct ReportTypeInfo$/;"	s	file:
ReportTypeInfo	DirFilterDlg.cpp	/^struct ReportTypeInfo$/;"	s	file:
RequeryShellContextMenu	Common/ShellContextMenu.cpp	/^bool CShellContextMenu::RequeryShellContextMenu()$/;"	f	class:CShellContextMenu	typeref:typename:bool
Rescan	DirDoc.cpp	/^void CDirDoc::Rescan()$/;"	f	class:CDirDoc	typeref:typename:void
Rescan	MergeDoc.cpp	/^int CMergeDoc::Rescan(bool &bBinary, IDENTLEVEL &identical,$/;"	f	class:CMergeDoc	typeref:typename:int
RescanIfNeeded	MergeDoc.cpp	/^void CMergeDoc::RescanIfNeeded(float timeOutInSecond)$/;"	f	class:CMergeDoc	typeref:typename:void
RescanSuppress	MergeDoc.cpp	/^	explicit RescanSuppress(CMergeDoc & doc) : m_doc(doc)$/;"	f	class:RescanSuppress	file:
RescanSuppress	MergeDoc.cpp	/^class RescanSuppress$/;"	c	file:
Reset	Common/OptionsMgr.cpp	/^int COptionsMgr::Reset(const String& name)$/;"	f	class:COptionsMgr	typeref:typename:int
Reset	Common/OptionsMgr.cpp	/^void COption::Reset()$/;"	f	class:COption	typeref:typename:void
Reset	Common/ShellFileOperations.cpp	/^void ShellFileOperations::Reset()$/;"	f	class:ShellFileOperations	typeref:typename:void
Reset	CompareStats.cpp	/^void CompareStats::Reset()$/;"	f	class:CompareStats	typeref:typename:void
Reset	DiffFileData.cpp	/^void DiffFileData::Reset()$/;"	f	class:DiffFileData	typeref:typename:void
Reset	OptionsFont.cpp	/^void Reset(COptionsMgr *pOptionsMgr, const String& name)$/;"	f	namespace:Options::Font	typeref:typename:void
ResetColumnOrdering	DirViewColItems.cpp	/^void DirViewColItems::ResetColumnOrdering()$/;"	f	class:DirViewColItems	typeref:typename:void
ResetColumnWidths	DirViewColItems.cpp	/^String DirViewColItems::ResetColumnWidths(int defcolwidth)$/;"	f	class:DirViewColItems	typeref:typename:String
ResetContent	Common/SuperComboBox.cpp	/^void CSuperComboBox::ResetContent()$/;"	f	class:CSuperComboBox	typeref:typename:void
ResetMessageBoxes	Common/MessageBoxDialog.cpp	/^void CMessageBoxDialog::ResetMessageBoxes ( )$/;"	f	class:CMessageBoxDialog	typeref:typename:void
ResetTimer	StdAfx.h	/^	static void ResetTimer()$/;"	f	class:CWinMergeProfile	typeref:typename:void
ResizablePanes	Common/SplitterWndEx.h	/^	void ResizablePanes(bool bState=true){m_bResizePanes=bState;};$/;"	f	class:CSplitterWndEx	typeref:typename:void
Resize	Common/CMoveConstraint.cpp	/^CMoveConstraint::Resize(HWND hWnd, UINT nType)$/;"	f	class:prdlg::CMoveConstraint	typeref:typename:void
Resize	EditorFilepathBar.cpp	/^void CEditorFilePathBar::Resize()$/;"	f	class:CEditorFilePathBar	typeref:typename:void
Resize	EditorFilepathBar.cpp	/^void CEditorFilePathBar::Resize(int widths[])$/;"	f	class:CEditorFilePathBar	typeref:typename:void
Resize	MergeStatusBar.cpp	/^void CMergeStatusBar::Resize(int widths[])$/;"	f	class:CMergeStatusBar	typeref:typename:void
ResizeWindow	HexMergeView.cpp	/^void CHexMergeView::ResizeWindow()$/;"	f	class:CHexMergeView	typeref:typename:void
Resolve	markdown.cpp	/^std::string CMarkdown::Resolve(const EntityMap &map, const std::string& v)$/;"	f	class:CMarkdown	typeref:typename:std::string
RestoreRevisionNumbers	GhostTextBuffer.cpp	/^RestoreRevisionNumbers(int nStartLine, CDWordArray *paSavedRevisionNumbers)$/;"	f	class:CGhostTextBuffer	typeref:typename:void
RestoreTreeState	DirActions.cpp	/^void RestoreTreeState(CDiffContext& ctxt, DirViewTreeState *pTreeState)$/;"	f	typeref:typename:void
RetranslateDialog	Common/LanguageSelect.cpp	/^void CLanguageSelect::RetranslateDialog(HWND h, const TCHAR *name) const$/;"	f	class:CLanguageSelect	typeref:typename:void
ReturnCode	DirActions.h	/^	enum ReturnCode$/;"	g	struct:AllowUpwardDirectory
RevBegin	DirView.h	/^	DirItemIterator RevBegin() const { return DirItemIterator(m_pIList.get(), -1, false, true); }$/;"	f	class:CDirView	typeref:typename:DirItemIterator
RevEnd	DirView.h	/^	DirItemIterator RevEnd() const { return DirItemIterator(); }$/;"	f	class:CDirView	typeref:typename:DirItemIterator
Right	7zCommon.h	/^		Right = 0x20,$/;"	e	enum:DirItemEnumerator::__anond3316a350103
RightCmdFirst	DirView.cpp	/^const UINT RightCmdFirst = MiddleCmdLast + 1;$/;"	v	typeref:typename:const UINT
RightCmdLast	DirView.cpp	/^const UINT RightCmdLast = 0xffff; \/\/ maximum available value$/;"	v	typeref:typename:const UINT
RightLineInMovedBlock	MergeDoc.cpp	/^int CMergeDoc::RightLineInMovedBlock(int nBuffer, int apparentLeftLine)$/;"	f	class:CMergeDoc	typeref:typename:int
Right_element_name	ProjectFile.cpp	/^const char Right_element_name[] = "right";$/;"	v	typeref:typename:const char[]
Right_ro_element_name	ProjectFile.cpp	/^const char Right_ro_element_name[] = "right-readonly";$/;"	v	typeref:typename:const char[]
Root_element_name	ProjectFile.cpp	/^const char Root_element_name[] = "project";$/;"	v	typeref:typename:const char[]
Run	Common/ShellFileOperations.cpp	/^bool ShellFileOperations::Run()$/;"	f	class:ShellFileOperations	typeref:typename:bool
Run	FileActionScript.cpp	/^bool FileActionScript::Run()$/;"	f	class:FileActionScript	typeref:typename:bool
RunFileDiff	DiffWrapper.cpp	/^bool CDiffWrapper::RunFileDiff()$/;"	f	class:CDiffWrapper	typeref:typename:bool
RunOp	FileActionScript.cpp	/^bool FileActionScript::RunOp(ShellFileOperations *oplist, bool & userCancelled)$/;"	f	class:FileActionScript	typeref:typename:bool
RunPlugins	FolderCmp.cpp	/^bool FolderCmp::RunPlugins(PluginsContext * plugCtxt, String &errStr)$/;"	f	class:FolderCmp	typeref:typename:bool
SAME	DiffItem.h	/^		COMPAREFLAGS=0x7000U, NOCMP=0x0000U, SAME=0x1000U, DIFF=0x2000U, CMPERR=0x3000U, CMPABORT=0x40/;"	e	enum:DIFFCODE::__anon902ab4a30103
SAVECLOSING_CHOICE	SaveClosingDlg.h	/^	enum SAVECLOSING_CHOICE$/;"	g	class:SaveClosingDlg
SAVECLOSING_DISCARD	SaveClosingDlg.h	/^		SAVECLOSING_DISCARD,  \/**< Discard changes *\/$/;"	e	enum:SaveClosingDlg::SAVECLOSING_CHOICE
SAVECLOSING_SAVE	SaveClosingDlg.h	/^		SAVECLOSING_SAVE = 0, \/**< Save changes *\/$/;"	e	enum:SaveClosingDlg::SAVECLOSING_CHOICE
SAVE_CANCELLED	MergeDoc.h	/^	SAVE_CANCELLED, \/**< Saving was cancelled *\/  $/;"	e	enum:__anon80996cc10303
SAVE_DONE	MergeDoc.h	/^	SAVE_DONE = 0, \/**< Saving succeeded *\/  $/;"	e	enum:__anon80996cc10303
SAVE_FAILED	MergeDoc.h	/^	SAVE_FAILED, \/**< Saving failed *\/  $/;"	e	enum:__anon80996cc10303
SAVE_NO_FILENAME	MergeDoc.h	/^	SAVE_NO_FILENAME, \/**< File has no filename *\/  $/;"	e	enum:__anon80996cc10303
SAVE_PACK_FAILED	MergeDoc.h	/^	SAVE_PACK_FAILED, \/**< Plugin failed to pack file *\/  $/;"	e	enum:__anon80996cc10303
SCANFLAGS	DiffItem.h	/^		SCANFLAGS=0x100000U, NEEDSCAN=0x100000U,$/;"	e	enum:DIFFCODE::__anon902ab4a30103
SCBS_EDGEALL	Common/sizecbar.h	/^#define SCBS_EDGEALL /;"	d
SCBS_EDGEBOTTOM	Common/sizecbar.h	/^#define SCBS_EDGEBOTTOM /;"	d
SCBS_EDGELEFT	Common/sizecbar.h	/^#define SCBS_EDGELEFT /;"	d
SCBS_EDGERIGHT	Common/sizecbar.h	/^#define SCBS_EDGERIGHT /;"	d
SCBS_EDGETOP	Common/sizecbar.h	/^#define SCBS_EDGETOP /;"	d
SCBS_SHOWEDGES	Common/sizecbar.h	/^#define SCBS_SHOWEDGES /;"	d
SCBS_SIZECHILD	Common/sizecbar.h	/^#define SCBS_SIZECHILD /;"	d
SCRIPT_FAIL	FileActionScript.h	/^	SCRIPT_FAIL = 0,    \/**< The script failed. *\/$/;"	e	enum:CreateScriptReturn
SCRIPT_SUCCESS	FileActionScript.h	/^	SCRIPT_SUCCESS,     \/**< The script succeeded. *\/$/;"	e	enum:CreateScriptReturn
SCRIPT_USERCANCEL	FileActionScript.h	/^	SCRIPT_USERCANCEL,  \/**< The user cancelled the action. *\/$/;"	e	enum:CreateScriptReturn
SCRIPT_USERSKIP	FileActionScript.h	/^	SCRIPT_USERSKIP,    \/**< The user wanted to skip one or more items. *\/$/;"	e	enum:CreateScriptReturn
SCROLLTODIFF	WinIMergeLib.h	/^		REFRESH, SCROLLTODIFF, OPEN$/;"	e	enum:IImgMergeWindow::EVENT_TYPE
SCursorPushed	GhostTextView.h	/^		SCursorPushed() : x(0), y(0), nToFirstReal(0) { }$/;"	f	struct:CGhostTextView::SCursorPushed
SCursorPushed	GhostTextView.h	/^	struct SCursorPushed$/;"	s	class:CGhostTextView
SE	HexMergeView.cpp	/^static HRESULT NTAPI SE(BOOL f)$/;"	f	typeref:typename:HRESULT NTAPI	file:
SECOND	DiffItem.h	/^		SIDEFLAGS=0x700U, FIRST=0x100U, SECOND=0x200U, THIRD=0x400U, BOTH=0x300U, ALL=0x700U,$/;"	e	enum:DIFFCODE::__anon902ab4a30103
SEEK_CUR	diffutils/src/system.h	/^#define SEEK_CUR /;"	d
SEEK_SET	diffutils/src/system.h	/^#define SEEK_SET /;"	d
SELECTIONTYPE	DirActions.h	/^} SELECTIONTYPE;$/;"	t	typeref:enum:__anona878a18b0303
SELECTIONTYPE_LEFT1LEFT2	DirActions.h	/^	SELECTIONTYPE_LEFT1LEFT2,$/;"	e	enum:__anona878a18b0303
SELECTIONTYPE_LEFT1RIGHT2	DirActions.h	/^	SELECTIONTYPE_LEFT1RIGHT2,$/;"	e	enum:__anona878a18b0303
SELECTIONTYPE_LEFT2RIGHT1	DirActions.h	/^	SELECTIONTYPE_LEFT2RIGHT1$/;"	e	enum:__anona878a18b0303
SELECTIONTYPE_NORMAL	DirActions.h	/^	SELECTIONTYPE_NORMAL,$/;"	e	enum:__anona878a18b0303
SELECTIONTYPE_RIGHT1RIGHT2	DirActions.h	/^	SELECTIONTYPE_RIGHT1RIGHT2,$/;"	e	enum:__anona878a18b0303
SETFOCUS	WinIMergeLib.h	/^		SIZE, HSCROLL, VSCROLL, SETFOCUS, KILLFOCUS,$/;"	e	enum:IImgMergeWindow::EVENT_TYPE
SET_DEFAULTS	PropColors.h	/^	typedef enum { SET_DEFAULTS, WRITE_OPTIONS, READ_OPTIONS } OPERATION;$/;"	e	enum:PropMergeColors::__anonf8c04cae0203
SET_DEFAULTS	PropDirColors.h	/^	typedef enum { SET_DEFAULTS, WRITE_OPTIONS, READ_OPTIONS } OPERATION;$/;"	e	enum:PropDirColors::__anon04e0652d0203
SET_DEFAULTS	PropMarkerColors.h	/^	typedef enum { SET_DEFAULTS, READ_OPTIONS, LOAD_COLORS } OPERATION;$/;"	e	enum:PropMarkerColors::__anon05ae34500203
SET_DEFAULTS	PropTextColors.h	/^	typedef enum { SET_DEFAULTS, READ_OPTIONS, LOAD_COLORS } OPERATION;$/;"	e	enum:PropTextColors::__anon432a02130203
SE_Exception	Exceptions.h	/^	explicit SE_Exception(unsigned long n) : nSE(n) {}$/;"	f	class:SE_Exception
SE_Exception	Exceptions.h	/^class SE_Exception$/;"	c
SE_Handler	Exceptions.h	/^	SE_Handler() : fnOld{_set_se_translator(seh_trans_func)} {}$/;"	f	class:SE_Handler
SE_Handler	Exceptions.h	/^class SE_Handler {$/;"	c
SG_NONE	Common/CMoveConstraint.h	/^	enum EGRIP { SG_NONE, SG_NORMAL, SG_PARENTSTATE };$/;"	e	enum:prdlg::CMoveConstraint::EGRIP
SG_NORMAL	Common/CMoveConstraint.h	/^	enum EGRIP { SG_NONE, SG_NORMAL, SG_PARENTSTATE };$/;"	e	enum:prdlg::CMoveConstraint::EGRIP
SG_PARENTSTATE	Common/CMoveConstraint.h	/^	enum EGRIP { SG_NONE, SG_NORMAL, SG_PARENTSTATE };$/;"	e	enum:prdlg::CMoveConstraint::EGRIP
SHARED	SharedFilterDlg.h	/^	enum FilterType : int { SHARED = 0, PRIVATE = 1 };$/;"	e	enum:CSharedFilterDlg::FilterType
SHGetFileInfoThread	Common/SuperComboBox.cpp	/^static DWORD WINAPI SHGetFileInfoThread(LPVOID pParam)$/;"	f	typeref:typename:DWORD WINAPI	file:
SHOWNORMAL	MergeCmdLineInfo.h	/^		SHOWNORMAL = 1,$/;"	e	enum:MergeCmdLineInfo::ShowWindowType
SIDEFLAGS	DiffItem.h	/^		SIDEFLAGS=0x700U, FIRST=0x100U, SECOND=0x200U, THIRD=0x400U, BOTH=0x300U, ALL=0x700U,$/;"	e	enum:DIFFCODE::__anon902ab4a30103
SIDE_LEFT	DirActions.h	/^	SIDE_LEFT = 1,$/;"	e	enum:__anona878a18b0203
SIDE_LEFT	MovedLines.h	/^		SIDE_LEFT,$/;"	e	enum:MovedLines::ML_SIDE
SIDE_MIDDLE	DirActions.h	/^	SIDE_MIDDLE,$/;"	e	enum:__anona878a18b0203
SIDE_RIGHT	DirActions.h	/^	SIDE_RIGHT$/;"	e	enum:__anona878a18b0203
SIDE_RIGHT	MovedLines.h	/^		SIDE_RIGHT,$/;"	e	enum:MovedLines::ML_SIDE
SIDE_TYPE	DirActions.h	/^} SIDE_TYPE;$/;"	t	typeref:enum:__anona878a18b0203
SIZE	WinIMergeLib.h	/^		SIZE, HSCROLL, VSCROLL, SETFOCUS, KILLFOCUS,$/;"	e	enum:IImgMergeWindow::EVENT_TYPE
SKIPPED	DiffItem.h	/^		FILTERFLAGS=0x20000U, INCLUDED=0x00000U, SKIPPED=0x20000U,$/;"	e	enum:DIFFCODE::__anon902ab4a30103
SNAKE_LIMIT	diffutils/src/analyze.c	/^#define SNAKE_LIMIT /;"	d	file:
SPECIAL_ITEM_POS	DirView.h	/^const uintptr_t SPECIAL_ITEM_POS = (uintptr_t)(reinterpret_cast<DIFFITEM *>( - 1L));$/;"	v	typeref:typename:const uintptr_t
STATE_COMPARE	CompareStats.h	/^		STATE_COMPARE, \/**< Comparing collected items *\/$/;"	e	enum:CompareStats::CMP_STATE
STATE_IDLE	CompareStats.h	/^		STATE_IDLE, \/**< No compare running *\/$/;"	e	enum:CompareStats::CMP_STATE
STATE_START	CompareStats.h	/^		STATE_START, \/**< Start folder compare *\/$/;"	e	enum:CompareStats::CMP_STATE
STATUSBAR_UPDATE	DirView.cpp	/^	STATUSBAR_UPDATE = 100$/;"	e	enum:__anonc4a78dd00103	file:
STAT_BLOCKSIZE	diffutils/src/system.h	/^#define STAT_BLOCKSIZE(/;"	d
STDC_HEADERS	diffutils/config.h	/^#define STDC_HEADERS /;"	d
STDERR_FILENO	diffutils/src/system.h	/^#define STDERR_FILENO /;"	d
STDIN_FILENO	diffutils/src/system.h	/^#define STDIN_FILENO /;"	d
STDOUT_FILENO	diffutils/src/system.h	/^#define STDOUT_FILENO /;"	d
SWAPPARAMS_IF	MergeEditFrm.cpp	/^#define SWAPPARAMS_IF(/;"	d	file:
SWAPPARAMS_IF	MergeEditSplitterView.cpp	/^#define SWAPPARAMS_IF(/;"	d	file:
S_ISBLK	diffutils/src/system.h	/^#define S_ISBLK(/;"	d
S_ISCHR	diffutils/src/system.h	/^#define S_ISCHR(/;"	d
S_ISDIR	diffutils/src/system.h	/^#define S_ISDIR(/;"	d
S_ISFIFO	diffutils/src/system.h	/^#define S_ISFIFO(/;"	d
S_ISREG	diffutils/src/system.h	/^#define S_ISREG(/;"	d
S_ISSOCK	diffutils/src/system.h	/^#define S_ISSOCK(/;"	d
S_IXGRP	diffutils/src/system.h	/^#define S_IXGRP /;"	d
S_IXOTH	diffutils/src/system.h	/^#define S_IXOTH /;"	d
S_IXUSR	diffutils/src/system.h	/^#define S_IXUSR /;"	d
SafeUpdatePage	Common/PreferencesDlg.cpp	/^void CPreferencesDlg::SafeUpdatePage(CPropertyPage* pPage, bool bSaveAndValidate)$/;"	f	class:CPreferencesDlg	typeref:typename:void
SanitizeOrder	DirColsDlg.cpp	/^void CDirColsDlg::SanitizeOrder()$/;"	f	class:CDirColsDlg	typeref:typename:void
SanityCheckCodepage	MergeDoc.cpp	/^void CMergeDoc::SanityCheckCodepage(FileLocation & fileinfo)$/;"	f	class:CMergeDoc	typeref:typename:void
SanityCheckDiff	MergeDoc.cpp	/^bool CMergeDoc::SanityCheckDiff(DIFFRANGE dr) const$/;"	f	class:CMergeDoc	typeref:typename:bool
Save	OptionsCustomColors.cpp	/^void Save(COptionsMgr *pOptionsMgr, const COLORREF * colors)$/;"	f	namespace:Options::CustomColors	typeref:typename:void
Save	OptionsDiffColors.cpp	/^void Save(COptionsMgr *pOptionsMgr, const COLORSETTINGS& colors)$/;"	f	namespace:Options::DiffColors	typeref:typename:void
Save	OptionsDiffOptions.cpp	/^void Save(COptionsMgr *pOptionsMgr, const DIFFOPTIONS& options)$/;"	f	namespace:Options::DiffOptions	typeref:typename:void
Save	OptionsDirColors.cpp	/^void Save(COptionsMgr *pOptionsMgr, const DIRCOLORSETTINGS& colors)$/;"	f	namespace:Options::DirColors	typeref:typename:void
Save	OptionsFont.cpp	/^void Save(COptionsMgr *pOptionsMgr, const String& name, const LOGFONT* lf, bool bUseCustom)$/;"	f	namespace:Options::Font	typeref:typename:void
Save	OptionsSyntaxColors.cpp	/^void Save(COptionsMgr *pOptionsMgr, const ::SyntaxColors *pSyntaxColors)$/;"	f	namespace:Options::SyntaxColors	typeref:typename:void
Save	ProjectFile.cpp	/^bool ProjectFile::Save(const String& path) const$/;"	f	class:ProjectFile	typeref:typename:bool
SaveAsFile	Common/multiformatText.h	/^	bool SaveAsFile(String & filename)$/;"	f	class:storageForPlugins	typeref:typename:bool
SaveBuffForDiff	MergeDoc.cpp	/^static void SaveBuffForDiff(CDiffTextBuffer & buf, const String& filepath, int nStartLine, int n/;"	f	typeref:typename:void	file:
SaveClosingDlg	SaveClosingDlg.h	/^class SaveClosingDlg : public CTrDialog$/;"	c
SaveColumnOrders	DirViewColItems.cpp	/^String DirViewColItems::SaveColumnOrders()$/;"	f	class:DirViewColItems	typeref:typename:String
SaveColumnWidths	DirViewColItems.h	/^	String SaveColumnWidths(GetColumnWidthFunc getcolwidth)$/;"	f	class:DirViewColItems	typeref:typename:String
SaveComboboxStates	OpenView.cpp	/^void COpenView::SaveComboboxStates()$/;"	f	class:COpenView	typeref:typename:void
SaveFile	HexMergeView.cpp	/^HRESULT CHexMergeView::SaveFile(LPCTSTR path)$/;"	f	class:CHexMergeView	typeref:typename:HRESULT
SaveFilters	LineFiltersList.cpp	/^void LineFiltersList::SaveFilters()$/;"	f	class:LineFiltersList	typeref:typename:void
SaveMergePath	PropShell.cpp	/^void PropShell::SaveMergePath()$/;"	f	class:PropShell	typeref:typename:void
SaveModified	DirDoc.cpp	/^BOOL CDirDoc::SaveModified() $/;"	f	class:CDirDoc	typeref:typename:BOOL
SaveModified	HexMergeDoc.cpp	/^BOOL CHexMergeDoc::SaveModified()$/;"	f	class:CHexMergeDoc	typeref:typename:BOOL
SaveModified	MergeDoc.cpp	/^BOOL CMergeDoc::SaveModified()$/;"	f	class:CMergeDoc	typeref:typename:BOOL
SaveOption	Common/OptionsMgr.cpp	/^int COptionsMgr::SaveOption(const String& name, unsigned value)$/;"	f	class:COptionsMgr	typeref:typename:int
SaveOption	Common/RegOptionsMgr.cpp	/^int CRegOptionsMgr::SaveOption(const String& name)$/;"	f	class:CRegOptionsMgr	typeref:typename:int
SaveOption	Common/RegOptionsMgr.cpp	/^int CRegOptionsMgr::SaveOption(const String& name, bool value)$/;"	f	class:CRegOptionsMgr	typeref:typename:int
SaveOption	Common/RegOptionsMgr.cpp	/^int CRegOptionsMgr::SaveOption(const String& name, const String& value)$/;"	f	class:CRegOptionsMgr	typeref:typename:int
SaveOption	Common/RegOptionsMgr.cpp	/^int CRegOptionsMgr::SaveOption(const String& name, const TCHAR *value)$/;"	f	class:CRegOptionsMgr	typeref:typename:int
SaveOption	Common/RegOptionsMgr.cpp	/^int CRegOptionsMgr::SaveOption(const String& name, const varprop::VariantValue& value)$/;"	f	class:CRegOptionsMgr	typeref:typename:int
SaveOption	Common/RegOptionsMgr.cpp	/^int CRegOptionsMgr::SaveOption(const String& name, int value)$/;"	f	class:CRegOptionsMgr	typeref:typename:int
SaveOptions	Common/PreferencesDlg.cpp	/^void CPreferencesDlg::SaveOptions()$/;"	f	class:CPreferencesDlg	typeref:typename:void
SaveOptions	ImgMergeFrm.cpp	/^void CImgMergeFrame::SaveOptions()$/;"	f	class:CImgMergeFrame	typeref:typename:void
SavePosition	HexMergeFrm.cpp	/^void CHexMergeFrame::SavePosition()$/;"	f	class:CHexMergeFrame	typeref:typename:void
SavePosition	ImgMergeFrm.cpp	/^void CImgMergeFrame::SavePosition()$/;"	f	class:CImgMergeFrame	typeref:typename:void
SavePosition	MergeEditFrm.cpp	/^void CMergeEditFrame::SavePosition()$/;"	f	class:CMergeEditFrame	typeref:typename:void
SaveProjectFile	Merge.cpp	/^bool CMergeApp::SaveProjectFile(const String& sProject, const ProjectFile &project)$/;"	f	class:CMergeApp	typeref:typename:bool
SaveRegistryToFile	Environment.cpp	/^bool SaveRegistryToFile(const String& sRegFilePath, const String& sRegDir)$/;"	f	namespace:env	typeref:typename:bool
SaveSettings	PatchDlg.cpp	/^void CPatchDlg::SaveSettings()$/;"	f	class:CPatchDlg	typeref:typename:void
SaveSettings	Plugins.cpp	/^void CScriptsOfThread::SaveSettings()$/;"	f	class:CScriptsOfThread	typeref:typename:void
SaveState	Common/SuperComboBox.cpp	/^void CSuperComboBox::SaveState(LPCTSTR szRegSubKey)$/;"	f	class:CSuperComboBox	typeref:typename:void
SaveState	Common/sizecbar.cpp	/^void CSizingControlBar::SaveState(LPCTSTR lpszProfileName)$/;"	f	class:CSizingControlBar	typeref:typename:void
SaveToFile	DiffTextBuffer.cpp	/^int CDiffTextBuffer::SaveToFile (const String& pszFileName,$/;"	f	class:CDiffTextBuffer	typeref:typename:int
SaveTreeState	DirActions.cpp	/^DirViewTreeState *SaveTreeState(const CDiffContext& ctxt)$/;"	f	typeref:typename:DirViewTreeState *
SaveValueToReg	Common/RegOptionsMgr.cpp	/^int CRegOptionsMgr::SaveValueToReg(HKEY hKey, const String& strValueName,$/;"	f	class:CRegOptionsMgr	typeref:typename:int
SaveWindowState	MergeFrameCommon.cpp	/^void CMergeFrameCommon::SaveWindowState()$/;"	f	class:CMergeFrameCommon	typeref:typename:void
Scan	markdown.cpp	/^void CMarkdown::Scan()$/;"	f	class:CMarkdown	typeref:typename:void
ScriptInfo	Plugins.cpp	/^	ScriptInfo(const String & scriptletFilepath, const wchar_t *transformationEvent)$/;"	f	struct:ScriptInfo	file:
ScriptInfo	Plugins.cpp	/^struct ScriptInfo$/;"	s	file:
ScriptletError	Plugins.cpp	/^ScriptletError(const String & scriptletFilepath, const wchar_t *transformationEvent, const TCHAR/;"	f	typeref:typename:void	file:
SearchScriptForDefinedProperties	Plugins.cpp	/^bool SearchScriptForDefinedProperties(IDispatch *piDispatch, const wchar_t *functionName)$/;"	f	namespace:plugin	typeref:typename:bool
SearchScriptForMethodName	Plugins.cpp	/^bool SearchScriptForMethodName(LPDISPATCH piDispatch, const wchar_t *functionName)$/;"	f	namespace:plugin	typeref:typename:bool
SecondSideInMovedBlock	MovedLines.cpp	/^int MovedLines::SecondSideInMovedBlock(unsigned firstSideLine) const$/;"	f	class:MovedLines	typeref:typename:int
Section	OptionsCustomColors.cpp	/^const TCHAR Section[] = _T("Custom Colors");$/;"	v	namespace:Options::CustomColors	typeref:typename:const TCHAR[]
Section	PropTextColors.cpp	/^static const TCHAR Section[] = _T("Custom Colors");$/;"	v	typeref:typename:const TCHAR[]	file:
SelBegin	DirView.h	/^	DirItemIterator SelBegin() const { return DirItemIterator(m_pIList.get(), -1, true); }$/;"	f	class:CDirView	typeref:typename:DirItemIterator
SelEnd	DirView.h	/^	DirItemIterator SelEnd() const { return DirItemIterator(); }$/;"	f	class:CDirView	typeref:typename:DirItemIterator
SelRevBegin	DirView.h	/^	DirItemIterator SelRevBegin() const { return DirItemIterator(m_pIList.get(), -1, true, true); }$/;"	f	class:CDirView	typeref:typename:DirItemIterator
SelRevEnd	DirView.h	/^	DirItemIterator SelRevEnd() const { return DirItemIterator(); }$/;"	f	class:CDirView	typeref:typename:DirItemIterator
SelectArea	MergeEditView.h	/^	void SelectArea(const CPoint & ptStart, const CPoint & ptEnd) { SetSelection(ptStart, ptEnd); }/;"	f	class:CMergeEditView	typeref:typename:void
SelectDiff	MergeEditView.cpp	/^void CMergeEditView::SelectDiff(int nDiff, bool bScroll \/*= true*\/, bool bSelectText \/*= true/;"	f	class:CMergeEditView	typeref:typename:void
SelectFile	FileOrFolderSelect.cpp	/^bool SelectFile(HWND parent, String& path, bool is_open \/*= true*\/,$/;"	f	typeref:typename:bool
SelectFileOrFolder	FileOrFolderSelect.cpp	/^bool SelectFileOrFolder(HWND parent, String& path, LPCTSTR initialPath \/*= nullptr*\/)$/;"	f	typeref:typename:bool
SelectFilter	MainFrm.cpp	/^void CMainFrame::SelectFilter()$/;"	f	class:CMainFrame	typeref:typename:void
SelectFilterByIndex	FileFiltersDlg.cpp	/^void FileFiltersDlg::SelectFilterByIndex(int index)$/;"	f	class:FileFiltersDlg	typeref:typename:void
SelectFolder	FileOrFolderSelect.cpp	/^bool SelectFolder(String& path, LPCTSTR root_path \/*= nullptr*\/, $/;"	f	typeref:typename:bool
SelectItem	DirColsDlg.cpp	/^void CDirColsDlg::SelectItem(int index)$/;"	f	class:CDirColsDlg	typeref:typename:void
SelectNone	MergeEditView.cpp	/^void CMergeEditView::SelectNone()$/;"	f	class:CMergeEditView	typeref:typename:void
Separator	ConflictFileParser.cpp	/^static const TCHAR Separator[] = _T("=======");$/;"	v	typeref:typename:const TCHAR[]	file:
Serialize	MergeDoc.cpp	/^void CMergeDoc::Serialize(CArchive& ar)$/;"	f	class:CMergeDoc	typeref:typename:void
SerializeColor	PropColors.cpp	/^void PropMergeColors::SerializeColor(OPERATION op, CColorButton & btn, const String& optionName)$/;"	f	class:PropMergeColors	typeref:typename:void
SerializeColor	PropDirColors.cpp	/^void PropDirColors::SerializeColor(OPERATION op, CColorButton & btn, const String& optionName)$/;"	f	class:PropDirColors	typeref:typename:void
SerializeColorToFromScreen	PropMarkerColors.cpp	/^void PropMarkerColors::SerializeColorToFromScreen(OPERATION op, CColorButton & btn, int colorInd/;"	f	class:PropMarkerColors	typeref:typename:void
SerializeColorToFromScreen	PropTextColors.cpp	/^void PropTextColors::SerializeColorToFromScreen(OPERATION op, CColorButton & btn, int colorIndex/;"	f	class:PropTextColors	typeref:typename:void
SerializeColors	PropColors.cpp	/^void PropMergeColors::SerializeColors(OPERATION op)$/;"	f	class:PropMergeColors	typeref:typename:void
SerializeColors	PropDirColors.cpp	/^void PropDirColors::SerializeColors(OPERATION op)$/;"	f	class:PropDirColors	typeref:typename:void
SerializeColorsToFromScreen	PropMarkerColors.cpp	/^void PropMarkerColors::SerializeColorsToFromScreen(OPERATION op)$/;"	f	class:PropMarkerColors	typeref:typename:void
SerializeColorsToFromScreen	PropTextColors.cpp	/^void PropTextColors::SerializeColorsToFromScreen(OPERATION op)$/;"	f	class:PropTextColors	typeref:typename:void
Set	Common/OptionsMgr.cpp	/^int COption::Set(const varprop::VariantValue& value, bool allowConversion)$/;"	f	class:COption	typeref:typename:int
Set	Common/OptionsMgr.cpp	/^int COptionsMgr::Set(const String& name, bool value)$/;"	f	class:COptionsMgr	typeref:typename:int
Set	Common/OptionsMgr.cpp	/^int COptionsMgr::Set(const String& name, const String& value)$/;"	f	class:COptionsMgr	typeref:typename:int
Set	Common/OptionsMgr.cpp	/^int COptionsMgr::Set(const String& name, const TCHAR *value)$/;"	f	class:COptionsMgr	typeref:typename:int
Set	Common/OptionsMgr.cpp	/^int COptionsMgr::Set(const String& name, const varprop::VariantValue& value)$/;"	f	class:COptionsMgr	typeref:typename:int
Set	Common/OptionsMgr.cpp	/^int COptionsMgr::Set(const String& name, int value)$/;"	f	class:COptionsMgr	typeref:typename:int
Set	DiffItem.h	/^	void Set(int mask, unsigned result) { diffcode &= (~mask); diffcode |= result; }$/;"	f	struct:DIFFCODE	typeref:typename:void
SetAbortable	CompareEngines/ByteCompare.cpp	/^void ByteCompare::SetAbortable(const IAbortable * piAbortable)$/;"	f	class:CompareEngines::ByteCompare	typeref:typename:void
SetAbortable	DiffContext.h	/^	void SetAbortable(IAbortable * piAbortable) { m_piAbortable = piAbortable; }$/;"	f	class:CDiffContext	typeref:typename:void
SetActive	EditorFilepathBar.cpp	/^void CEditorFilePathBar::SetActive(int pane, bool bActive)$/;"	f	class:CEditorFilePathBar	typeref:typename:void
SetActive	FilepathEdit.cpp	/^void CFilepathEdit::SetActive(bool bActive)$/;"	f	class:CFilepathEdit	typeref:typename:void
SetActivePage	Common/PreferencesDlg.cpp	/^void CPreferencesDlg::SetActivePage(int nPage)$/;"	f	class:CPreferencesDlg	typeref:typename:void
SetActivePage	Common/PropertyPageHost.cpp	/^bool CPropertyPageHost::SetActivePage(CPropertyPage* pPage, bool bAndFocus \/*= true*\/)$/;"	f	class:CPropertyPageHost	typeref:typename:bool
SetActivePage	Common/PropertyPageHost.cpp	/^bool CPropertyPageHost::SetActivePage(int nIndex, bool bAndFocus \/*= true*\/)$/;"	f	class:CPropertyPageHost	typeref:typename:bool
SetActivePane	DirView.cpp	/^void CDirView::SetActivePane(int pane)$/;"	f	class:CDirView	typeref:typename:void
SetActivePane	HexMergeFrm.cpp	/^void CHexMergeFrame::SetActivePane(int nPane)$/;"	f	class:CHexMergeFrame	typeref:typename:void
SetAdditionalOptions	CompareEngines/ByteCompare.cpp	/^void ByteCompare::SetAdditionalOptions(bool stopAfterFirstDiff)$/;"	f	class:CompareEngines::ByteCompare	typeref:typename:void
SetAdditionalOptions	CompareEngines/TimeSizeCompare.cpp	/^void TimeSizeCompare::SetAdditionalOptions(bool ignoreSmallDiff)$/;"	f	class:CompareEngines::TimeSizeCompare	typeref:typename:void
SetAlternativePaths	DiffWrapper.h	/^inline void CDiffWrapper::SetAlternativePaths(const PathContext &altPaths)$/;"	f	class:CDiffWrapper	typeref:typename:void
SetAnsiString	Common/BCMenu.h	/^	void SetAnsiString(LPCSTR szAnsiString)$/;"	f	class:BCMenuData	typeref:typename:void
SetAppendFiles	DiffWrapper.cpp	/^void CDiffWrapper::SetAppendFiles(bool bAppendFiles)$/;"	f	class:CDiffWrapper	typeref:typename:void
SetAt	PathContext.cpp	/^void PathContext::SetAt(int nIndex, const String& newElement)$/;"	f	class:PathContext	typeref:typename:void
SetAutoComplete	Common/SuperComboBox.cpp	/^void CSuperComboBox::SetAutoComplete(INT nSource)$/;"	f	class:CSuperComboBox	typeref:typename:void
SetAutoMaxWidth	Common/MDITabBar.h	/^	void SetAutoMaxWidth(bool bAutoMaxWidth) { m_bAutoMaxWidth = bAutoMaxWidth; }$/;"	f	class:CMDITabBar	typeref:typename:void
SetAutoMerged	MergeDoc.h	/^	void SetAutoMerged(bool bAutoMerged) { m_bAutoMerged = bAutoMerged; }$/;"	f	class:CMergeDoc	typeref:typename:void
SetBackColor	FilepathEdit.cpp	/^void CFilepathEdit::SetBackColor(COLORREF rgb)$/;"	f	class:CFilepathEdit	typeref:typename:void
SetBitmapBackground	Common/BCMenu.cpp	/^void BCMenu::SetBitmapBackground(COLORREF color)$/;"	f	class:BCMenu	typeref:typename:void
SetBom	Common/UniFile.h	/^inline void UniMemFile::SetBom(bool bom)$/;"	f	class:UniMemFile	typeref:typename:void
SetBom	Common/UniFile.h	/^inline void UniStdioFile::SetBom(bool bom)$/;"	f	class:UniStdioFile	typeref:typename:void
SetBool	Common/varprop.cpp	/^void VariantValue::SetBool(bool v)$/;"	f	class:varprop::VariantValue	typeref:typename:void
SetBreakChars	stringdiffs.cpp	/^void SetBreakChars(const TCHAR *breakChars)$/;"	f	namespace:strdiff	typeref:typename:void
SetCodepage	Common/UniFile.h	/^	virtual void SetCodepage(int codepage) override { $/;"	f	class:UniLocalFile	typeref:typename:void
SetCodepage	Common/multiformatText.h	/^	void SetCodepage(int code) { m_codepage = code; };$/;"	f	class:storageForPlugins	typeref:typename:void
SetCodepage	CompareEngines/Wrap_DiffUtils.h	/^	void SetCodepage(int codepage) { m_codepage = codepage; }$/;"	f	class:CompareEngines::DiffUtils	typeref:typename:void
SetCodepage	FileTextEncoding.cpp	/^void FileTextEncoding::SetCodepage(int codepage)$/;"	f	class:FileTextEncoding	typeref:typename:void
SetCodepages	LoadSaveCodepageDlg.h	/^	void SetCodepages(int codepage) { m_nLoadCodepage = m_nSaveCodepage = codepage; }$/;"	f	class:CLoadSaveCodepageDlg	typeref:typename:void
SetColAlignments	DirView.cpp	/^void CDirView::SetColAlignments()$/;"	f	class:CDirView	typeref:typename:void
SetCollectFunction	DiffThread.h	/^	void SetCollectFunction(std::function<void(DiffFuncStruct*)> func) { m_pDiffParm->m_fncCollect /;"	f	class:CDiffThread	typeref:typename:void
SetColor	Common/ColorButton.cpp	/^void CColorButton::SetColor(COLORREF clrFill, bool bInvalidate \/* = true*\/)$/;"	f	class:CColorButton	typeref:typename:void
SetColorScheme	PropColors.cpp	/^void PropMergeColors::SetColorScheme(int scheme)$/;"	f	class:PropMergeColors	typeref:typename:void
SetColumnOrdering	DirViewColItems.cpp	/^void DirViewColItems::SetColumnOrdering(const int colorder[])$/;"	f	class:DirViewColItems	typeref:typename:void
SetColumns	DirCmpReport.cpp	/^void DirCmpReport::SetColumns(int columns)$/;"	f	class:DirCmpReport	typeref:typename:void
SetCompareFiles	DiffWrapper.h	/^inline void CDiffWrapper::SetCompareFiles(const PathContext &originalFile)$/;"	f	class:CDiffWrapper	typeref:typename:void
SetCompareFunction	DiffThread.h	/^	void SetCompareFunction(std::function<void(DiffFuncStruct*)> func) { m_pDiffParm->m_fncCompare /;"	f	class:CDiffThread	typeref:typename:void
SetCompareMethodStatusDisplay	DirFrame.cpp	/^void CDirFrame::SetCompareMethodStatusDisplay(int nCompMethod)$/;"	f	class:CDirFrame	typeref:typename:void
SetCompareOptions	CompareEngines/ByteCompare.cpp	/^bool ByteCompare::SetCompareOptions(const CompareOptions & options)$/;"	f	class:CompareEngines::ByteCompare	typeref:typename:bool
SetCompareOptions	CompareEngines/Wrap_DiffUtils.cpp	/^bool DiffUtils::SetCompareOptions(const CompareOptions & options)$/;"	f	class:CompareEngines::DiffUtils	typeref:typename:bool
SetCompareStat	DirCompProgressBar.h	/^inline void DirCompProgressBar::SetCompareStat(CompareStats * pCompareStats)$/;"	f	class:DirCompProgressBar	typeref:typename:void
SetCompareState	CompareStats.cpp	/^void CompareStats::SetCompareState(CompareStats::CMP_STATE state)$/;"	f	class:CompareStats	typeref:typename:void
SetCompareThreadCount	CompareStats.h	/^	void SetCompareThreadCount(int nCompareThreads)$/;"	f	class:CompareStats	typeref:typename:void
SetConfig	MergeCmdLineInfo.cpp	/^const TCHAR *MergeCmdLineInfo::SetConfig(const TCHAR *q)$/;"	f	class:MergeCmdLineInfo	typeref:typename:const TCHAR *
SetContext	DiffThread.h	/^inline void CDiffThread::SetContext(CDiffContext * pCtx)$/;"	f	class:CDiffThread	typeref:typename:void
SetCopyToClipboard	DirCmpReport.h	/^	void SetCopyToClipboard(bool bCopyToClipbard) { m_bCopyToClipboard = bCopyToClipbard;  }$/;"	f	class:DirCmpReport	typeref:typename:void
SetCreateDiffList	DiffWrapper.cpp	/^void CDiffWrapper::SetCreateDiffList(DiffList *diffList)$/;"	f	class:CDiffWrapper	typeref:typename:void
SetCreatePatchFile	DiffWrapper.cpp	/^void CDiffWrapper::SetCreatePatchFile(const String &filename)$/;"	f	class:CDiffWrapper	typeref:typename:void
SetCurSel	Common/MDITabBar.h	/^	int SetCurSel(int nItem)$/;"	f	class:CMDITabBar	typeref:typename:int
SetCurrentDiff	MergeDoc.cpp	/^void CMergeDoc::SetCurrentDiff(int nDiff)$/;"	f	class:CMergeDoc	typeref:typename:void
SetCurrentProcessExplicitAppUserModelID	JumpList.cpp	/^bool SetCurrentProcessExplicitAppUserModelID(const std::wstring& appid)$/;"	f	namespace:JumpList	typeref:typename:bool
SetCustomFlags1	DiffItemList.cpp	/^void DiffItemList::SetCustomFlags1(DIFFITEM *diffpos, unsigned flag)$/;"	f	class:DiffItemList	typeref:typename:void
SetDataFileAnsi	Common/multiformatText.cpp	/^void storageForPlugins::SetDataFileAnsi(const String& filename, bool bOverwrite \/*= false*\/) $/;"	f	class:storageForPlugins	typeref:typename:void
SetDataFileEncoding	Common/multiformatText.cpp	/^void storageForPlugins::SetDataFileEncoding(const String& filename, FileTextEncoding encoding, b/;"	f	class:storageForPlugins	typeref:typename:void
SetDataFileUnknown	Common/multiformatText.cpp	/^void storageForPlugins::SetDataFileUnknown(const String& filename, bool bOverwrite \/*= false*\//;"	f	class:storageForPlugins	typeref:typename:void
SetDefGrip	Common/CMoveConstraint.h	/^	static void SetDefGrip(EGRIP nDefGrip) { c_defGrip = nDefGrip; }$/;"	f	class:prdlg::CMoveConstraint	typeref:typename:void
SetDefault	Common/OptionsMgr.cpp	/^int COption::SetDefault(const varprop::VariantValue& defaultValue)$/;"	f	class:COption	typeref:typename:int
SetDefaults	OptionsDiffColors.cpp	/^void SetDefaults(COptionsMgr *pOptionsMgr)$/;"	f	namespace:Options::DiffColors	typeref:typename:void
SetDefaults	OptionsDiffOptions.cpp	/^void SetDefaults(COptionsMgr *pOptionsMgr)$/;"	f	namespace:Options::DiffOptions	typeref:typename:void
SetDefaults	OptionsDirColors.cpp	/^void SetDefaults(COptionsMgr *pOptionsMgr)$/;"	f	namespace:Options::DirColors	typeref:typename:void
SetDefaults	OptionsFont.cpp	/^void SetDefaults(COptionsMgr *pOptionsMgr)$/;"	f	namespace:Options::Font	typeref:typename:void
SetDescriptions	DirDoc.cpp	/^void CDirDoc::SetDescriptions(const String strDesc[])$/;"	f	class:CDirDoc	typeref:typename:void
SetDestination	Common/ShellFileOperations.cpp	/^void ShellFileOperations::SetDestination(const String &destination)$/;"	f	class:ShellFileOperations	typeref:typename:void
SetDetectMovedBlocks	DiffWrapper.cpp	/^void CDiffWrapper::SetDetectMovedBlocks(bool bDetectMovedBlocks)$/;"	f	class:CDiffWrapper	typeref:typename:void
SetDetectMovedBlocks	MergeDoc.cpp	/^void CMergeDoc::SetDetectMovedBlocks(bool bDetectMovedBlocks)$/;"	f	class:CMergeDoc	typeref:typename:void
SetDiff	DiffList.cpp	/^bool DiffList::SetDiff(int nDiff, const DIFFRANGE & di)$/;"	f	class:DiffList	typeref:typename:bool
SetDiffCompare	DirActions.cpp	/^void SetDiffCompare(DIFFITEM& di, unsigned diffcode)$/;"	f	typeref:typename:void
SetDiffCounts	DiffItemList.cpp	/^void DiffItemList::SetDiffCounts(DIFFITEM *diffpos, unsigned diffs, unsigned ignored)$/;"	f	class:DiffItemList	typeref:typename:void
SetDiffCounts	DirActions.cpp	/^void SetDiffCounts(DIFFITEM& di, unsigned diffs, unsigned ignored)$/;"	f	typeref:typename:void
SetDiffFuncStruct	DirCmpReport.h	/^	void SetDiffFuncStruct(DiffFuncStruct* myStruct) { m_myStruct = myStruct; }$/;"	f	class:DirCmpReport	typeref:typename:void
SetDiffSide	DirActions.cpp	/^void SetDiffSide(DIFFITEM& di, unsigned diffcode)$/;"	f	typeref:typename:void
SetDiffStatus	DirActions.cpp	/^void SetDiffStatus(DIFFITEM& di, unsigned  diffcode, unsigned mask)$/;"	f	typeref:typename:void
SetDiffStatusCode	DiffItemList.cpp	/^void DiffItemList::SetDiffStatusCode(DIFFITEM *diffpos, unsigned diffcode, unsigned mask)$/;"	f	class:DiffItemList	typeref:typename:void
SetDirDoc	HexMergeDoc.cpp	/^void CHexMergeDoc::SetDirDoc(CDirDoc * pDirDoc)$/;"	f	class:CHexMergeDoc	typeref:typename:void
SetDirDoc	ImgMergeFrm.cpp	/^void CImgMergeFrame::SetDirDoc(CDirDoc * pDirDoc)$/;"	f	class:CImgMergeFrame	typeref:typename:void
SetDirDoc	MergeDoc.cpp	/^void CMergeDoc::SetDirDoc(CDirDoc * pDirDoc)$/;"	f	class:CMergeDoc	typeref:typename:void
SetDirView	DirDoc.cpp	/^void CDirDoc::SetDirView(CDirView * newView)$/;"	f	class:CDirDoc	typeref:typename:void
SetDisplayFilepaths	DiffFileData.cpp	/^void DiffFileData::SetDisplayFilepaths(const String& szTrueFilepath1, const String& szTrueFilepa/;"	f	class:DiffFileData	typeref:typename:void
SetDlgItemFocus	TrDialogs.h	/^	void SetDlgItemFocus(unsigned id)$/;"	f	class:DlgUtils	typeref:typename:void
SetDlgItemText	TrDialogs.h	/^	void SetDlgItemText(unsigned id, const String& text)$/;"	f	class:DlgUtils	typeref:typename:void
SetEditedAfterRescan	MergeDoc.cpp	/^void CMergeDoc::SetEditedAfterRescan(int nBuffer)$/;"	f	class:CMergeDoc	typeref:typename:void
SetFile	DirItem.cpp	/^void DirItem::SetFile(const String &fullPath)$/;"	f	class:DirItem	typeref:typename:void
SetFileCmpReport	DirCmpReport.cpp	/^void DirCmpReport::SetFileCmpReport(IFileCmpReport *pFileCmpReport)$/;"	f	class:DirCmpReport	typeref:typename:void
SetFileControlStates	Common/SuperComboBox.cpp	/^void CSuperComboBox::SetFileControlStates(bool bCanBeEmpty \/*= false*\/, int nMaxItems \/*= -1*/;"	f	class:CSuperComboBox	typeref:typename:void
SetFileData	CompareEngines/ByteCompare.cpp	/^void ByteCompare::SetFileData(int items, file_data *data)$/;"	f	class:CompareEngines::ByteCompare	typeref:typename:void
SetFileData	CompareEngines/Wrap_DiffUtils.cpp	/^void DiffUtils::SetFileData(int items, file_data *data)$/;"	f	class:CompareEngines::DiffUtils	typeref:typename:void
SetFileFilterPath	FileFilterHelper.cpp	/^void FileFilterHelper::SetFileFilterPath(const String& szFileFilterPath)$/;"	f	class:FileFilterHelper	typeref:typename:void
SetFileVersion	FileVersion.h	/^inline void FileVersion::SetFileVersion(unsigned versionMS, unsigned versionLS)$/;"	f	class:FileVersion	typeref:typename:void
SetFileVersionNone	FileVersion.h	/^	void SetFileVersionNone() { m_fileVersionMS = 0xffffffff; m_fileVersionLS = 0xfffffffe; };$/;"	f	class:FileVersion	typeref:typename:void
SetFileWriteTime	DropHandler.cpp	/^	HRESULT SetFileWriteTime(const String& filename, const FILETIME& writetime)$/;"	f	namespace:__anonfdfe2aa90111	typeref:typename:HRESULT
SetFilter	FileFilterHelper.cpp	/^bool FileFilterHelper::SetFilter(const String &filter)$/;"	f	class:FileFilterHelper	typeref:typename:bool
SetFilter	ProjectFile.h	/^inline void ProjectFileItem::SetFilter(const String& sFilter)$/;"	f	class:ProjectFileItem	typeref:typename:void
SetFilterCommentsManager	CompareEngines/Wrap_DiffUtils.cpp	/^void DiffUtils::SetFilterCommentsManager(const FilterCommentsManager *pFilterCommentsManager)$/;"	f	class:CompareEngines::DiffUtils	typeref:typename:void
SetFilterCommentsManager	DiffWrapper.h	/^	void SetFilterCommentsManager(const FilterCommentsManager *pFilterCommentsManager) { m_pFilterC/;"	f	class:CDiffWrapper	typeref:typename:void
SetFilterList	CompareEngines/Wrap_DiffUtils.cpp	/^void DiffUtils::SetFilterList(FilterList * list)$/;"	f	class:CompareEngines::DiffUtils	typeref:typename:void
SetFilterList	DiffWrapper.cpp	/^void CDiffWrapper::SetFilterList(const String& filterStr)$/;"	f	class:CDiffWrapper	typeref:typename:void
SetFilterStatusDisplay	DirFrame.cpp	/^void CDirFrame::SetFilterStatusDisplay(LPCTSTR szFilter)$/;"	f	class:CDirFrame	typeref:typename:void
SetFloat	Common/varprop.cpp	/^void VariantValue::SetFloat(double v)$/;"	f	class:varprop::VariantValue	typeref:typename:void
SetFont	DirView.cpp	/^void CDirView::SetFont(const LOGFONT & lf)$/;"	f	class:CDirView	typeref:typename:void
SetFormerResult	Common/MessageBoxDialog.cpp	/^int CMessageBoxDialog::SetFormerResult(int nResult)$/;"	f	class:CMessageBoxDialog	typeref:typename:int
SetFrameHwnd	DiffViewBar.cpp	/^void CDiffViewBar::SetFrameHwnd(HWND hwndFrame)$/;"	f	class:CDiffViewBar	typeref:typename:void
SetFrameHwnd	LocationBar.cpp	/^void CLocationBar::SetFrameHwnd(HWND hwndFrame)$/;"	f	class:CLocationBar	typeref:typename:void
SetFrameHwnd	LocationView.h	/^inline void CLocationView::SetFrameHwnd(HWND hwndFrame)$/;"	f	class:CLocationView	typeref:typename:void
SetFromDiffOptions	CompareOptions.cpp	/^void CompareOptions::SetFromDiffOptions(const DIFFOPTIONS &options)$/;"	f	class:CompareOptions	typeref:typename:void
SetFromDiffOptions	CompareOptions.cpp	/^void DiffutilsOptions::SetFromDiffOptions(const DIFFOPTIONS & options)$/;"	f	class:DiffutilsOptions	typeref:typename:void
SetGeneratingReport	DirDoc.h	/^	void SetGeneratingReport(bool bGeneratingReport) { m_bGeneratingReport = bGeneratingReport; }$/;"	f	class:CDirDoc	typeref:typename:void
SetIconSize	Common/BCMenu.cpp	/^void BCMenu::SetIconSize (int width, int height)$/;"	f	class:BCMenu	typeref:typename:void
SetImageForPopupFromToolbar	Common/BCMenu.h	/^#define SetImageForPopupFromToolbar /;"	d
SetImageForPopupFromToolbarA	Common/BCMenu.h	/^	bool SetImageForPopupFromToolbarA (const char *strPopUpText, UINT toolbarID, UINT command_id_to/;"	f	class:BCMenu	typeref:typename:bool
SetImageForPopupFromToolbarW	Common/BCMenu.cpp	/^bool BCMenu::SetImageForPopupFromToolbarW (wchar_t *strPopUpText, UINT toolbarID, UINT command_i/;"	f	class:BCMenu	typeref:typename:bool
SetIncludeFileCmpReport	DirCmpReport.h	/^	void SetIncludeFileCmpReport(bool bIncludeFileCmpReport) { m_bIncludeFileCmpReport = bIncludeFi/;"	f	class:DirCmpReport	typeref:typename:void
SetIndicators	Common/LanguageSelect.cpp	/^void CLanguageSelect::SetIndicators(CStatusBar &sb, const UINT *rgid, int n) const$/;"	f	class:CLanguageSelect	typeref:typename:void
SetIndicators	Merge.cpp	/^void CMergeApp::SetIndicators(CStatusBar &sb, const UINT *rgid, int n) const$/;"	f	class:CMergeApp	typeref:typename:void
SetInitialInfoHandler	SelectUnpackerDlg.cpp	/^void CSelectUnpackerDlg::SetInitialInfoHandler(PackingInfo * infoHandler)$/;"	f	class:CSelectUnpackerDlg	typeref:typename:void
SetInt	Common/varprop.cpp	/^void VariantValue::SetInt(int v)$/;"	f	class:varprop::VariantValue	typeref:typename:void
SetIsPropertyPage	Common/CMoveConstraint.h	/^	void SetIsPropertyPage() { m_bPropertyPage = true; SetSizeGrip(SG_NONE); }$/;"	f	class:prdlg::CMoveConstraint	typeref:typename:void
SetIsPropertySheet	Common/CMoveConstraint.h	/^	void SetIsPropertySheet() { m_bPropertySheet = true; }$/;"	f	class:prdlg::CMoveConstraint	typeref:typename:void
SetIsView	Common/CMoveConstraint.h	/^	void SetIsView() { SetSizeGrip(SG_PARENTSTATE); }$/;"	f	class:prdlg::CMoveConstraint	typeref:typename:void
SetItem	Common/MDITabBar.h	/^	BOOL SetItem(int nItem, TCITEM* pTabCtrlItem)$/;"	f	class:CMDITabBar	typeref:typename:BOOL
SetItemViewFlag	DirActions.cpp	/^void SetItemViewFlag(CDiffContext& ctxt, unsigned flag, unsigned mask)$/;"	f	typeref:typename:void
SetItemViewFlag	DirActions.cpp	/^void SetItemViewFlag(DIFFITEM& di, unsigned flag, unsigned mask)$/;"	f	typeref:typename:void
SetLanguage	Common/LanguageSelect.cpp	/^bool CLanguageSelect::SetLanguage(LANGID wLangId, bool bShowError \/*= false*\/)$/;"	f	class:CLanguageSelect	typeref:typename:bool
SetLastCompareResult	Merge.h	/^	void SetLastCompareResult(int nResult) { m_nLastCompareResult = nResult; }$/;"	f	class:CMergeApp	typeref:typename:void
SetLastCompareResult	MergeFrameCommon.cpp	/^void CMergeFrameCommon::SetLastCompareResult(int nResult)$/;"	f	class:CMergeFrameCommon	typeref:typename:void
SetLastWriteTime	HexMergeView.cpp	/^static void NTAPI SetLastWriteTime(HANDLE h, UINT64 ft)$/;"	f	typeref:typename:void NTAPI	file:
SetLeft	PathContext.cpp	/^void PathContext::SetLeft(const String& path, bool bNormalized)$/;"	f	class:PathContext	typeref:typename:void
SetLeft	ProjectFile.cpp	/^void ProjectFileItem::SetLeft(const String& sLeft, const bool * pReadOnly \/*= nullptr*\/)$/;"	f	class:ProjectFileItem	typeref:typename:void
SetLeftRightAffectStrings	LoadSaveCodepageDlg.cpp	/^void CLoadSaveCodepageDlg::SetLeftRightAffectStrings(const String & sAffectsLeft, const String &/;"	f	class:CLoadSaveCodepageDlg	typeref:typename:void
SetLineInfo	MergeStatusBar.cpp	/^void CMergeStatusBar::MergeStatus::SetLineInfo(LPCTSTR szLine, int nColumn,$/;"	f	class:CMergeStatusBar::MergeStatus	typeref:typename:void
SetList	DirCmpReport.cpp	/^void DirCmpReport::SetList(IListCtrl *pList)$/;"	f	class:DirCmpReport	typeref:typename:void
SetList	LineFiltersDlg.cpp	/^void LineFiltersDlg::SetList(LineFiltersList * list)$/;"	f	class:LineFiltersDlg	typeref:typename:void
SetLocationView	MergeDoc.h	/^	void SetLocationView(CLocationView *pLocationView) { m_pLocationView = pLocationView; }$/;"	f	class:CMergeDoc	typeref:typename:void
SetMain	files.h	/^	static void SetMain(DWORD & flr, DWORD newmain) { flr = flr & ~FRESULT_MAIN_MASK; flr = flr | n/;"	f	class:FileLoadResult	typeref:typename:void
SetMainOk	files.h	/^	static void SetMainOk(DWORD & flr) { SetMain(flr, FRESULT_OK); }$/;"	f	class:FileLoadResult	typeref:typename:void
SetMarkedRescan	DirDoc.h	/^	void SetMarkedRescan() {m_bMarkedRescan = true; }$/;"	f	class:CDirDoc	typeref:typename:void
SetMask	FileFilterHelper.cpp	/^void FileFilterHelper::SetMask(const String& strMask)$/;"	f	class:FileFilterHelper	typeref:typename:void
SetMaxSizePixels	Common/CMoveConstraint.cpp	/^CMoveConstraint::SetMaxSizePixels(int nWidth, int nHeight)$/;"	f	class:prdlg::CMoveConstraint	typeref:typename:void
SetMenuText	Common/BCMenu.cpp	/^bool BCMenu::SetMenuText(UINT id, CString string, UINT nFlags\/*= MF_BYPOSITION*\/ )$/;"	f	class:BCMenu	typeref:typename:bool
SetMergeViews	HexMergeDoc.cpp	/^void CHexMergeDoc::SetMergeViews(CHexMergeView *pView[])$/;"	f	class:CHexMergeDoc	typeref:typename:void
SetMergingMode	Merge.cpp	/^void CMergeApp::SetMergingMode(bool bMergingMode)$/;"	f	class:CMergeApp	typeref:typename:void
SetMessage	Common/MessageBoxDialog.cpp	/^inline void CMessageBoxDialog::SetMessage ( LPCTSTR strMessage )$/;"	f	class:CMessageBoxDialog	typeref:typename:void
SetMessage	Common/MessageBoxDialog.cpp	/^inline void CMessageBoxDialog::SetMessage ( UINT nMessageID )$/;"	f	class:CMessageBoxDialog	typeref:typename:void
SetMessageIcon	Common/MessageBoxDialog.cpp	/^inline void CMessageBoxDialog::SetMessageIcon ( HICON hIcon )$/;"	f	class:CMessageBoxDialog	typeref:typename:void
SetMessageIcon	Common/MessageBoxDialog.cpp	/^inline void CMessageBoxDialog::SetMessageIcon ( UINT nIconID )$/;"	f	class:CMessageBoxDialog	typeref:typename:void
SetMiddle	PathContext.cpp	/^void PathContext::SetMiddle(const String& path, bool bNormalized)$/;"	f	class:PathContext	typeref:typename:void
SetMiddle	ProjectFile.cpp	/^void ProjectFileItem::SetMiddle(const String& sMiddle, const bool * pReadOnly \/*= nullptr*\/)$/;"	f	class:ProjectFileItem	typeref:typename:void
SetMinSizePercent	Common/CMoveConstraint.cpp	/^CMoveConstraint::SetMinSizePercent(double fWidth, double fHeight)$/;"	f	class:prdlg::CMoveConstraint	typeref:typename:void
SetMinSizePixels	Common/CMoveConstraint.cpp	/^CMoveConstraint::SetMinSizePixels(int nWidth, int nHeight)$/;"	f	class:prdlg::CMoveConstraint	typeref:typename:void
SetMixedEOL	DiffTextBuffer.h	/^	void SetMixedEOL(bool bMixed) { m_bMixedEOL = bMixed; }$/;"	f	class:CDiffTextBuffer	typeref:typename:void
SetModified	DiffTextBuffer.cpp	/^SetModified(bool bModified \/*= true*\/)	$/;"	f	class:CDiffTextBuffer	typeref:typename:void
SetNeedIdleTimer	Merge.h	/^inline void CMergeApp::SetNeedIdleTimer()$/;"	f	class:CMergeApp	typeref:typename:void
SetOnSetFocusCallback	EditorFilepathBar.h	/^inline void CEditorFilePathBar::SetOnSetFocusCallback(const std::function<void(int)> callbackfun/;"	f	class:CEditorFilePathBar	typeref:typename:void
SetOperation	Common/ShellFileOperations.cpp	/^void ShellFileOperations::SetOperation(UINT operation, FILEOP_FLAGS flags,$/;"	f	class:ShellFileOperations	typeref:typename:void
SetOption	MergeCmdLineInfo.cpp	/^const TCHAR *MergeCmdLineInfo::SetOption(const TCHAR *q, const String& key, const TCHAR *value)$/;"	f	class:MergeCmdLineInfo	typeref:typename:const TCHAR *
SetOptions	DiffWrapper.cpp	/^void CDiffWrapper::SetOptions(const DIFFOPTIONS *options)$/;"	f	class:CDiffWrapper	typeref:typename:void
SetOriginalText	FilepathEdit.cpp	/^void CFilepathEdit::SetOriginalText(const String& sString)$/;"	f	class:CFilepathEdit	typeref:typename:void
SetPackingInfo	Merge7zFormatMergePluginImpl.cpp	/^void Merge7zFormatMergePluginImpl::SetPackingInfo(const PackingInfo* infoUnpacker)$/;"	f	class:Merge7zFormatMergePluginImpl	typeref:typename:void
SetPaneCount	EditorFilepathBar.h	/^inline void CEditorFilePathBar::SetPaneCount(int nPanes)$/;"	f	class:CEditorFilePathBar	typeref:typename:void
SetPaneCount	MergeStatusBar.h	/^	void SetPaneCount(int nPanes) { m_nPanes = nPanes; }$/;"	f	class:CMergeStatusBar	typeref:typename:void
SetParentWindow	FileActionScript.h	/^inline void FileActionScript::SetParentWindow(HWND hWnd)$/;"	f	class:FileActionScript	typeref:typename:void
SetPatchOptions	DiffWrapper.cpp	/^void CDiffWrapper::SetPatchOptions(const PATCHOPTIONS *options)$/;"	f	class:CDiffWrapper	typeref:typename:void
SetPath	PathContext.cpp	/^void PathContext::SetPath(int index, const String& path, bool bNormalized)$/;"	f	class:PathContext	typeref:typename:void
SetPath	PathContext.h	/^inline void PathInfo::SetPath(const String & sPath)$/;"	f	class:PathInfo	typeref:typename:void
SetPath	PathContext.h	/^inline void PathInfo::SetPath(const TCHAR *sPath)$/;"	f	class:PathInfo	typeref:typename:void
SetPaths	DiffWrapper.cpp	/^void CDiffWrapper::SetPaths(const PathContext &tFiles,$/;"	f	class:CDiffWrapper	typeref:typename:void
SetPaths	ProjectFile.h	/^inline void ProjectFileItem::SetPaths(const PathContext& paths, bool bSubfolders)$/;"	f	class:ProjectFileItem	typeref:typename:void
SetPaused	DirCompProgressBar.cpp	/^void DirCompProgressBar::SetPaused(bool paused)$/;"	f	class:DirCompProgressBar	typeref:typename:void
SetPrediffSetting	PluginManager.cpp	/^void PluginManager::SetPrediffSetting(const String& filteredFilenames, PLUGIN_MODE newsetting)$/;"	f	class:PluginManager	typeref:typename:void
SetPrediffSettingAll	PluginManager.cpp	/^void PluginManager::SetPrediffSettingAll(PLUGIN_MODE newsetting)$/;"	f	class:PluginManager	typeref:typename:void
SetPrediffer	DiffWrapper.cpp	/^void CDiffWrapper::SetPrediffer(const PrediffingInfo * prediffer \/*= nullptr*\/)$/;"	f	class:CDiffWrapper	typeref:typename:void
SetPrediffer	MergeDoc.cpp	/^void CMergeDoc::SetPrediffer(const PrediffingInfo * infoPrediffer)$/;"	f	class:CMergeDoc	typeref:typename:void
SetPrediffer	PluginManager.cpp	/^void PluginManager::SetPrediffer(const String& filteredFilenames, const String & prediffer)$/;"	f	class:PluginManager	typeref:typename:void
SetPredifferByMenu	MergeEditView.cpp	/^void CMergeEditView::SetPredifferByMenu(UINT nID )$/;"	f	class:CMergeEditView	typeref:typename:void
SetPredifferByName	MergeEditView.cpp	/^bool CMergeEditView::SetPredifferByName(const CString & prediffer)$/;"	f	class:CMergeEditView	typeref:typename:bool
SetProgPath	Environment.cpp	/^void SetProgPath(const String& path)$/;"	f	namespace:env	typeref:typename:void
SetProgressState	DirCompProgressBar.cpp	/^void DirCompProgressBar::SetProgressState(int comparedItems, int totalItems)$/;"	f	class:DirCompProgressBar	typeref:typename:void
SetReadOnly	DirDoc.h	/^inline void CDirDoc::SetReadOnly(int nIndex, bool bReadOnly)$/;"	f	class:CDirDoc	typeref:typename:void
SetReadOnly	HexMergeView.cpp	/^void CHexMergeView::SetReadOnly(bool bReadOnly)$/;"	f	class:CHexMergeView	typeref:typename:void
SetRegRootKey	Common/RegOptionsMgr.cpp	/^int CRegOptionsMgr::SetRegRootKey(const String& key)$/;"	f	class:CRegOptionsMgr	typeref:typename:int
SetReport	DirDoc.h	/^	void SetReport(DirCmpReport* pReport) { m_pReport.reset(pReport);  }$/;"	f	class:CDirDoc	typeref:typename:void
SetReportFile	DirCmpReport.h	/^	void SetReportFile(const String& sReportFile) { m_sReportFile = sReportFile; }$/;"	f	class:DirCmpReport	typeref:typename:void
SetReportFile	DirDoc.h	/^	void SetReportFile(const String& sReportFile) { m_sReportFile = sReportFile; }$/;"	f	class:CDirDoc	typeref:typename:void
SetReportType	DirCmpReport.h	/^	void SetReportType(REPORT_TYPE nReportType) { m_nReportType = nReportType;  }$/;"	f	class:DirCmpReport	typeref:typename:void
SetRight	PathContext.cpp	/^void PathContext::SetRight(const String& path, bool bNormalized)$/;"	f	class:PathContext	typeref:typename:void
SetRight	ProjectFile.cpp	/^void ProjectFileItem::SetRight(const String& sRight, const bool * pReadOnly \/*= nullptr*\/)$/;"	f	class:ProjectFileItem	typeref:typename:void
SetRootPaths	DirCmpReport.cpp	/^void DirCmpReport::SetRootPaths(const PathContext &paths)$/;"	f	class:DirCmpReport	typeref:typename:void
SetSCBStyle	Common/sizecbar.h	/^    void SetSCBStyle(DWORD dwSCBStyle)$/;"	f	class:CSizingControlBar	typeref:typename:void
SetSavePoint	HexMergeView.cpp	/^void CHexMergeView::SetSavePoint()$/;"	f	class:CHexMergeView	typeref:typename:void
SetScrollScale	Common/CMoveConstraint.cpp	/^CMoveConstraint::SetScrollScale(CFormView * pFormView, double fShrinkWidth, double fShrinkHeight/;"	f	class:prdlg::CMoveConstraint	typeref:typename:void
SetSelected	FileFiltersDlg.cpp	/^void FileFiltersDlg::SetSelected(const String & selected)$/;"	f	class:FileFiltersDlg	typeref:typename:void
SetSerializing	Common/RegOptionsMgr.h	/^	virtual void SetSerializing(bool serializing=true) override { m_serializing = serializing; }$/;"	f	class:CRegOptionsMgr	typeref:typename:void
SetSharedMenu	MergeFrameCommon.h	/^	void SetSharedMenu(HMENU hMenu) { m_hMenuShared = hMenu; };$/;"	f	class:CMergeFrameCommon	typeref:typename:void
SetSide	DiffItem.h	/^	void SetSide(unsigned result) { Set(DIFFCODE::SIDEFLAGS, result); }$/;"	f	struct:DIFFCODE	typeref:typename:void
SetSize	PathContext.h	/^inline void PathContext::SetSize(int nFiles)$/;"	f	class:PathContext	typeref:typename:void
SetSizeGrip	Common/CMoveConstraint.h	/^	void SetSizeGrip(EGRIP nGrip) { m_nGrip = nGrip; }$/;"	f	class:prdlg::CMoveConstraint	typeref:typename:void
SetSortImage	Common/SortHeaderCtrl.cpp	/^int CSortHeaderCtrl::SetSortImage(int nCol, bool bAsc)$/;"	f	class:CSortHeaderCtrl	typeref:typename:int
SetStatus	DirFrame.cpp	/^void CDirFrame::SetStatus(LPCTSTR szStatus)$/;"	f	class:CDirFrame	typeref:typename:void
SetStatus	OpenView.cpp	/^void COpenView::SetStatus(UINT msgID)$/;"	f	class:COpenView	typeref:typename:void
SetStatusInterface	MergeEditView.cpp	/^void CMergeEditView::SetStatusInterface(IMergeEditStatus * piMergeEditStatus)$/;"	f	class:CMergeEditView	typeref:typename:void
SetString	Common/varprop.cpp	/^void VariantValue::SetString(const String& sz)$/;"	f	class:varprop::VariantValue	typeref:typename:void
SetString	Common/varprop.cpp	/^void VariantValue::SetString(const TCHAR *sz)$/;"	f	class:varprop::VariantValue	typeref:typename:void
SetStyle	Common/MessageBoxDialog.cpp	/^inline void CMessageBoxDialog::SetStyle ( UINT nStyle )$/;"	f	class:CMessageBoxDialog	typeref:typename:void
SetSubfolders	ProjectFile.h	/^inline void ProjectFileItem::SetSubfolders(bool bSubfolder)$/;"	f	class:ProjectFileItem	typeref:typename:void
SetSyntaxColors	Common/PreferencesDlg.cpp	/^void CPreferencesDlg::SetSyntaxColors(SyntaxColors *pColors)$/;"	f	class:CPreferencesDlg	typeref:typename:void
SetTempPath	DiffTextBuffer.h	/^inline void CDiffTextBuffer::SetTempPath(const String &path)$/;"	f	class:CDiffTextBuffer	typeref:typename:void
SetTemporaryPath	Environment.cpp	/^void SetTemporaryPath(const String& path)$/;"	f	namespace:env	typeref:typename:void
SetText	EditorFilepathBar.cpp	/^void CEditorFilePathBar::SetText(int pane, const String& sString)$/;"	f	class:CEditorFilePathBar	typeref:typename:void
SetText	EncodingErrorBar.cpp	/^void CEncodingErrorBar::SetText(const String& sText)$/;"	f	class:CEncodingErrorBar	typeref:typename:void
SetTextColor	FilepathEdit.cpp	/^void CFilepathEdit::SetTextColor(COLORREF rgb)$/;"	f	class:CFilepathEdit	typeref:typename:void
SetTextForAutomaticPrediff	DiffWrapper.h	/^inline void CDiffWrapper::SetTextForAutomaticPrediff(const String &text)$/;"	f	class:CDiffWrapper	typeref:typename:void
SetTime	Common/varprop.cpp	/^void VariantValue::SetTime(time_t v)$/;"	f	class:varprop::VariantValue	typeref:typename:void
SetTimeout	Common/MessageBoxDialog.cpp	/^void CMessageBoxDialog::SetTimeout ( UINT nSeconds, bool bDisabled \/*= false*\/)$/;"	f	class:CMessageBoxDialog	typeref:typename:void
SetTip	Common/CMoveConstraint.cpp	/^CMoveConstraint::SetTip(int id, LPCTSTR szTip)$/;"	f	class:prdlg::CMoveConstraint	typeref:typename:void
SetTip	Common/CMoveConstraint.cpp	/^CMoveConstraint::SetTip(int id, int nResourceId)$/;"	f	class:prdlg::CMoveConstraint	typeref:typename:void
SetTitle	Common/MessageBoxDialog.cpp	/^inline void CMessageBoxDialog::SetTitle ( LPCTSTR strTitle )$/;"	f	class:CMessageBoxDialog	typeref:typename:void
SetTitle	Common/MessageBoxDialog.cpp	/^inline void CMessageBoxDialog::SetTitle ( UINT nTitleID )$/;"	f	class:CMessageBoxDialog	typeref:typename:void
SetTitle	DirDoc.cpp	/^void CDirDoc::SetTitle(LPCTSTR lpszTitle)$/;"	f	class:CDirDoc	typeref:typename:void
SetTitle	HexMergeDoc.cpp	/^void CHexMergeDoc::SetTitle(LPCTSTR lpszTitle)$/;"	f	class:CHexMergeDoc	typeref:typename:void
SetTitle	ImgMergeFrm.cpp	/^void CImgMergeFrame::SetTitle(LPCTSTR lpszTitle)$/;"	f	class:CImgMergeFrame	typeref:typename:void
SetTitle	MergeDoc.cpp	/^void CMergeDoc::SetTitle(LPCTSTR lpszTitle)$/;"	f	class:CMergeDoc	typeref:typename:void
SetToDiffUtils	CompareOptions.cpp	/^void DiffutilsOptions::SetToDiffUtils()$/;"	f	class:DiffutilsOptions	typeref:typename:void
SetUnicoding	Common/UniFile.h	/^	virtual void SetUnicoding(ucr::UNICODESET unicoding) override { m_unicoding = unicoding; }$/;"	f	class:UniLocalFile	typeref:typename:void
SetUnicoding	FileTextEncoding.cpp	/^void FileTextEncoding::SetUnicoding(ucr::UNICODESET unicoding)$/;"	f	class:FileTextEncoding	typeref:typename:void
SetUnpacker	MergeDoc.cpp	/^void CMergeDoc::SetUnpacker(const PackingInfo * infoNewHandler)$/;"	f	class:CMergeDoc	typeref:typename:void
SetUnpackerStatus	OpenView.cpp	/^void COpenView::SetUnpackerStatus(UINT msgID)$/;"	f	class:COpenView	typeref:typename:void
SetUserFilterPath	FileFilterHelper.cpp	/^void FileFilterHelper::SetUserFilterPath(const String & filterPath)$/;"	f	class:FileFilterHelper	typeref:typename:void
SetWideString	Common/BCMenu.cpp	/^void BCMenuData::SetWideString(const wchar_t *szWideString)$/;"	f	class:BCMenuData	typeref:typename:void
SetWordWrapping	MergeEditView.cpp	/^void CMergeEditView::SetWordWrapping( bool bWordWrap )$/;"	f	class:CMergeEditView	typeref:typename:void
Settings	heksedit.h	/^	struct Settings$/;"	s	class:IHexEditorWindow
SetupTempPath	Merge.cpp	/^void CMergeApp::SetupTempPath()$/;"	f	class:CMergeApp	typeref:typename:void
ShellFileOperations	Common/ShellFileOperations.cpp	/^ShellFileOperations::ShellFileOperations()$/;"	f	class:ShellFileOperations
ShellFileOperations	Common/ShellFileOperations.h	/^class ShellFileOperations$/;"	c
ShouldAbort	DiffContext.cpp	/^bool CDiffContext::ShouldAbort() const$/;"	f	class:CDiffContext	typeref:typename:bool
ShouldAbort	DiffThread.cpp	/^	virtual bool ShouldAbort() const override { return m_diffthread->ShouldAbort(); }$/;"	f	class:DiffThreadAbortable	typeref:typename:bool	file:
ShouldAbort	DiffThread.cpp	/^bool CDiffThread::ShouldAbort() const$/;"	f	class:CDiffThread	typeref:typename:bool
ShowAutoMergeDoc	MainFrm.cpp	/^bool CMainFrame::ShowAutoMergeDoc(CDirDoc * pDirDoc,$/;"	f	class:CMainFrame	typeref:typename:bool
ShowDialog	PatchTool.cpp	/^bool CPatchTool::ShowDialog(CPatchDlg *pDlgPatch)$/;"	f	class:CPatchTool	typeref:typename:bool
ShowDiff	MergeEditView.cpp	/^void CMergeEditView::ShowDiff(bool bScroll, bool bSelectText)$/;"	f	class:CMergeEditView	typeref:typename:void
ShowHelp	Merge.cpp	/^void CMergeApp::ShowHelp(LPCTSTR helpLocation \/*= nullptr*\/)$/;"	f	class:CMergeApp	typeref:typename:void
ShowHexMergeDoc	MainFrm.cpp	/^bool CMainFrame::ShowHexMergeDoc(CDirDoc * pDirDoc, int nFiles, const FileLocation fileloc[],$/;"	f	class:CMainFrame	typeref:typename:bool
ShowImgMergeDoc	MainFrm.cpp	/^bool CMainFrame::ShowImgMergeDoc(CDirDoc * pDirDoc, int nFiles, const FileLocation fileloc[],$/;"	f	class:CMainFrame	typeref:typename:bool
ShowMergeDoc	MainFrm.cpp	/^bool CMainFrame::ShowMergeDoc(CDirDoc * pDirDoc,$/;"	f	class:CMainFrame	typeref:typename:bool
ShowMessageBox	MergeDoc.cpp	/^int CMergeDoc::ShowMessageBox(const String& sText, unsigned nType, unsigned nIDHelp)$/;"	f	class:CMergeDoc	typeref:typename:int
ShowPluginErrorMessage	Plugins.cpp	/^static void ShowPluginErrorMessage(IDispatch *piScript, LPTSTR description)$/;"	f	typeref:typename:void	file:
ShowRescanError	MergeDoc.cpp	/^void CMergeDoc::ShowRescanError(int nRescanResult, IDENTLEVEL identical)$/;"	f	class:CMergeDoc	typeref:typename:void
ShowShellContextMenu	DirView.cpp	/^void CDirView::ShowShellContextMenu(SIDE_TYPE stype)$/;"	f	class:CDirView	typeref:typename:void
ShowWindowType	MergeCmdLineInfo.h	/^	enum ShowWindowType$/;"	g	class:MergeCmdLineInfo
Showlinediff	MergeDocLineDiffs.cpp	/^void CMergeDoc::Showlinediff(CMergeEditView *pView, bool bReversed)$/;"	f	class:CMergeDoc	typeref:typename:void
SideToIndex	DirActions.h	/^inline int SideToIndex(const CDiffContext& ctxt, SIDE_TYPE stype)$/;"	f	typeref:typename:int
SingleItemEnumerator	7zCommon.cpp	/^SingleItemEnumerator::SingleItemEnumerator(LPCTSTR path, LPCTSTR FullPath, LPCTSTR Name)$/;"	f	class:SingleItemEnumerator
SingleItemEnumerator	7zCommon.h	/^class SingleItemEnumerator : public Merge7z::DirItemEnumerator$/;"	c
Size	Common/PidlContainer.h	/^	size_t Size() const { return m_container.size(); }$/;"	f	class:CPidlContainer	typeref:typename:size_t
SmallTimeDiff	CompareEngines/TimeSizeCompare.h	/^		SmallTimeDiff = 2$/;"	e	enum:CompareEngines::TimeSizeCompare::__anon43e96a4b0103
SmallTimeDiff	StdAfx.h	/^static const UINT SmallTimeDiff = 2;$/;"	v	typeref:typename:const UINT
Sort	DirTravel.cpp	/^static void Sort(DirItemArray * dirs, bool casesensitive)$/;"	f	typeref:typename:void	file:
SortArrayToLogicalOrder	DirColsDlg.cpp	/^void CDirColsDlg::SortArrayToLogicalOrder()$/;"	f	class:CDirColsDlg	typeref:typename:void
SortColumnsAppropriately	DirView.cpp	/^void CDirView::SortColumnsAppropriately()$/;"	f	class:CDirView	typeref:typename:void
SortCompareByCodePage	charsets.c	/^static int SortCompareByCodePage(const void *elem1, const void *elem2)$/;"	f	typeref:typename:int	file:
SplitAt	Common/MyCom.h	/^  CMyComBSTR SplitAt(LPCWSTR pattern)$/;"	f	class:CMyComBSTR	typeref:typename:CMyComBSTR
SplitFilename	paths.cpp	/^void SplitFilename(const String& pathLeft, String* pPath, String* pFile, String* pExt)$/;"	f	namespace:paths	typeref:typename:void
SplitName	Common/RegOptionsMgr.cpp	/^void CRegOptionsMgr::SplitName(const String &strName, String &strPath,$/;"	f	class:CRegOptionsMgr	typeref:typename:void
StartCompare	DirView.cpp	/^void CDirView::StartCompare(CompareStats *pCompareStats)$/;"	f	class:CDirView	typeref:typename:void
StartDrag	Common/sizecbar.cpp	/^void CSCBDockContext::StartDrag(CPoint pt)$/;"	f	class:CSCBDockContext	typeref:typename:void
StartFlashing	MainFrm.cpp	/^void CMainFrame::StartFlashing()$/;"	f	class:CMainFrame	typeref:typename:void
StartMarker	FilterCommentsManager.h	/^	std::string StartMarker;$/;"	m	struct:FilterCommentsSet	typeref:typename:std::string
StartTracking	Common/sizecbar.cpp	/^void CSizingControlBar::StartTracking(UINT nHitTest, CPoint point)$/;"	f	class:CSizingControlBar	typeref:typename:void
StartUpdating	DirCompProgressBar.cpp	/^void DirCompProgressBar::StartUpdating()$/;"	f	class:DirCompProgressBar	typeref:typename:void
Status	heksedit.h	/^	struct Status$/;"	s	class:IHexEditorWindow
StopTracking	Common/sizecbar.cpp	/^void CSizingControlBar::StopTracking()$/;"	f	class:CSizingControlBar	typeref:typename:void
String	Common/UnicodeString.h	/^typedef std_tchar(string) String;$/;"	t
StringComparer	DirTravel.cpp	/^struct StringComparer$/;"	s	file:
StringToBstr	Common/MyCom.h	/^inline HRESULT StringToBstr(LPCOLESTR src, BSTR *bstr)$/;"	f	typeref:typename:HRESULT
SubClassEdit	FilepathEdit.cpp	/^bool CFilepathEdit::SubClassEdit(UINT nID, CWnd* pParent)$/;"	f	class:CFilepathEdit	typeref:typename:bool
SubclassWnd	Common/CMoveConstraint.cpp	/^CMoveConstraint::SubclassWnd()$/;"	f	class:prdlg::CMoveConstraint	typeref:typename:bool
Subfolders_element_name	ProjectFile.cpp	/^const char Subfolders_element_name[] = "subfolders";$/;"	v	typeref:typename:const char[]
Swap	7zCommon.cpp	/^void CTempPathContext::Swap(int idx1, int idx2)$/;"	f	class:CTempPathContext	typeref:typename:void
Swap	CompareStats.cpp	/^void CompareStats::Swap(int idx1, int idx2)$/;"	f	class:CompareStats	typeref:typename:void
Swap	DiffContext.h	/^	void Swap(int idx1, int idx2)$/;"	f	class:CDiffContext	typeref:typename:void
Swap	DiffItem.cpp	/^void DIFFITEM::Swap(int idx1, int idx2)$/;"	f	class:DIFFITEM	typeref:typename:void
Swap	DiffItemList.cpp	/^void DiffItemList::Swap(int idx1, int idx2)$/;"	f	class:DiffItemList	typeref:typename:void
Swap	DiffList.cpp	/^void DiffList::Swap(int index1, int index2)$/;"	f	class:DiffList	typeref:typename:void
Swap	DirDoc.cpp	/^void CDirDoc::Swap(int idx1, int idx2)$/;"	f	class:CDirDoc	typeref:typename:void
Swap	PatchDlg.cpp	/^void CPatchDlg::Swap()$/;"	f	class:CPatchDlg	typeref:typename:void
Swap	PathContext.cpp	/^void PathContext::Swap()$/;"	f	class:PathContext	typeref:typename:void
SwapFiles	MergeDoc.cpp	/^void CMergeDoc::SwapFiles()$/;"	f	class:CMergeDoc	typeref:typename:void
SwapTabs	Common/MDITabBar.cpp	/^void CMDITabBar::SwapTabs(int nIndexA, int nIndexB)$/;"	f	class:CMDITabBar	typeref:typename:void
SynchronizeMenu	Common/BCMenu.cpp	/^void BCMenu::SynchronizeMenu(void)$/;"	f	class:BCMenu	typeref:typename:void
SyntaxColors	OptionsSyntaxColors.cpp	/^namespace Options { namespace SyntaxColors {$/;"	n	namespace:Options	file:
SyntaxColors	OptionsSyntaxColors.h	/^namespace Options { namespace SyntaxColors {$/;"	n	namespace:Options
TAB_WIDTH	diffutils/src/diff.h	/^#define TAB_WIDTH /;"	d
TEST	Test.cpp	/^TEST(CodepageTest, UCS2)$/;"	f
TEST	Test.cpp	/^TEST(CodepageTest, UTF8)$/;"	f
TEST	Test.cpp	/^TEST(CommandLineTest, Desc)$/;"	f
TEST	Test.cpp	/^TEST(CommandLineTest, Desc2)$/;"	f
TEST	Test.cpp	/^TEST(CommandLineTest, Desc3)$/;"	f
TEST	Test.cpp	/^TEST(CommandLineTest, Desc4)$/;"	f
TEST	Test.cpp	/^TEST(FileCompare, FindText)$/;"	f
TEST	Test.cpp	/^TEST(FileCompare, LastLineEOL)$/;"	f
TEST	Test.cpp	/^TEST(FileMenu, New)$/;"	f
TEST	Test.cpp	/^TEST(FileMenu, OpenConflictFile)$/;"	f
TEST	Test.cpp	/^TEST(FileMenu, OpenConflictFile3)$/;"	f
TEST	Test.cpp	/^TEST(FileMenu, OpenProject)$/;"	f
TEST	Test.cpp	/^TEST(FileMenu, OpenProject3)$/;"	f
TEST	Test.cpp	/^TEST(FolderCompare, IgnoreEOL)$/;"	f
TEST	Test.cpp	/^TEST(ImageCompareTest, Open)$/;"	f
TEST	Test.cpp	/^TEST(SyntaxHighlight, Verilog)$/;"	f
TEXT	DiffItem.h	/^		TEXTFLAGS=0x1FU, TEXT=0x1U, BIN=0x2U, BINSIDE1=0x4U, BINSIDE2=0x8U, BINSIDE3=0x10U,$/;"	e	enum:DIFFCODE::__anon902ab4a30103
TEXTFLAGS	DiffItem.h	/^		TEXTFLAGS=0x1FU, TEXT=0x1U, BIN=0x2U, BINSIDE1=0x4U, BINSIDE2=0x8U, BINSIDE3=0x10U,$/;"	e	enum:DIFFCODE::__anon902ab4a30103
TFile	TFile.h	/^	explicit TFile(const String& path) : File(ucr::toUTF8(path)) {}$/;"	f	class:TFile
TFile	TFile.h	/^class TFile : public Poco::File$/;"	c
THIRD	DiffItem.h	/^		SIDEFLAGS=0x700U, FIRST=0x100U, SECOND=0x200U, THIRD=0x400U, BOTH=0x300U, ALL=0x700U,$/;"	e	enum:DIFFCODE::__anon902ab4a30103
THREAD_COMPARING	DiffThread.h	/^		THREAD_COMPARING, \/**< Thread running (comparing). *\/$/;"	e	enum:CDiffThread::ThreadState
THREAD_COMPLETED	DiffThread.h	/^		THREAD_COMPLETED, \/**< Thread has completed its task. *\/$/;"	e	enum:CDiffThread::ThreadState
THREAD_NOTSTARTED	DiffThread.h	/^		THREAD_NOTSTARTED = 0, \/**< Thread not started, idle. *\/$/;"	e	enum:CDiffThread::ThreadState
THREEWAY	DiffItem.h	/^		THREEWAYFLAGS=0x200000U, THREEWAY=0x200000U,$/;"	e	enum:DIFFCODE::__anon902ab4a30103
THREEWAYDIFFTYPE_CONFLICT	DiffList.h	/^	THREEWAYDIFFTYPE_CONFLICT,$/;"	e	enum:__anon966aec100103
THREEWAYDIFFTYPE_LEFTMIDDLE	DiffList.h	/^	THREEWAYDIFFTYPE_LEFTMIDDLE  = 0,$/;"	e	enum:__anon966aec100103
THREEWAYDIFFTYPE_LEFTONLY	DiffList.h	/^	THREEWAYDIFFTYPE_LEFTONLY,$/;"	e	enum:__anon966aec100103
THREEWAYDIFFTYPE_LEFTRIGHT	DiffList.h	/^	THREEWAYDIFFTYPE_LEFTRIGHT,$/;"	e	enum:__anon966aec100103
THREEWAYDIFFTYPE_MIDDLEONLY	DiffList.h	/^	THREEWAYDIFFTYPE_MIDDLEONLY,$/;"	e	enum:__anon966aec100103
THREEWAYDIFFTYPE_MIDDLERIGHT	DiffList.h	/^	THREEWAYDIFFTYPE_MIDDLERIGHT,$/;"	e	enum:__anon966aec100103
THREEWAYDIFFTYPE_RIGHTONLY	DiffList.h	/^	THREEWAYDIFFTYPE_RIGHTONLY,$/;"	e	enum:__anon966aec100103
THREEWAYFLAGS	DiffItem.h	/^		THREEWAYFLAGS=0x200000U, THREEWAY=0x200000U,$/;"	e	enum:DIFFCODE::__anon902ab4a30103
TOOLBAR_IMAGES	MainFrm.h	/^	enum TOOLBAR_IMAGES$/;"	g	class:CMainFrame
TOOLBAR_IMAGES_COUNT	MainFrm.h	/^		TOOLBAR_IMAGES_COUNT$/;"	e	enum:CMainFrame::TOOLBAR_IMAGES
TOOLBAR_IMAGES_DISABLED	MainFrm.h	/^		TOOLBAR_IMAGES_DISABLED,$/;"	e	enum:CMainFrame::TOOLBAR_IMAGES
TOOLBAR_IMAGES_ENABLED	MainFrm.h	/^		TOOLBAR_IMAGES_ENABLED,$/;"	e	enum:CMainFrame::TOOLBAR_IMAGES
TVA_BSTR	Common/lwdisp.h	/^#define TVA_BSTR /;"	d
TViewBarBase	DiffViewBar.h	/^#define TViewBarBase /;"	d
TViewBarBase	LocationBar.h	/^#define TViewBarBase /;"	d
TYPEFLAGS	DiffItem.h	/^		TYPEFLAGS=0x60U, FILE=0x20U, DIR=0x40U,$/;"	e	enum:DIFFCODE::__anon902ab4a30103
TempFile	TempFile.h	/^	TempFile() {}$/;"	f	class:TempFile
TempFile	TempFile.h	/^class TempFile$/;"	c
TempFilePtr	MainFrm.h	/^typedef std::shared_ptr<TempFile> TempFilePtr;$/;"	t	typeref:typename:std::shared_ptr<TempFile>
TempFolderPrefix	Constants.h	/^const TCHAR TempFolderPrefix[] = _T("WinMerge_TEMP_");$/;"	v	typeref:typename:const TCHAR[]
Template	MainFrm.cpp	/^	struct Template : public CMultiDocTemplate$/;"	s	function:GetDocList	file:
TerminateThreadIfRunning	OpenView.cpp	/^void COpenView::TerminateThreadIfRunning()$/;"	f	class:COpenView	typeref:typename:void
Terminiate	StdAfx.h	/^	static void Terminiate()$/;"	f	class:CWinMergeProfile	typeref:typename:void
TestAgainstRegList	FileFilterMgr.cpp	/^bool TestAgainstRegList(const vector<FileFilterElementPtr> *filterList, const String& szTest)$/;"	f	typeref:typename:bool
TestAgainstRegList	Plugins.cpp	/^bool PluginInfo::TestAgainstRegList(const String& szTest) const$/;"	f	class:PluginInfo	typeref:typename:bool
TestAll	TestMain.cpp	/^void TestAll()$/;"	f	namespace:WinMergeTest	typeref:typename:void
TestDirNameAgainstFilter	FileFilterMgr.cpp	/^bool FileFilterMgr::TestDirNameAgainstFilter(const FileFilter * pFilter,$/;"	f	class:FileFilterMgr	typeref:typename:bool
TestFileNameAgainstFilter	FileFilterMgr.cpp	/^bool FileFilterMgr::TestFileNameAgainstFilter(const FileFilter * pFilter,$/;"	f	class:FileFilterMgr	typeref:typename:bool
TextScan	CompareEngines/ByteComparator.cpp	/^static void TextScan(FileTextStats & stats, const char *ptr, const char *end, bool eof,$/;"	f	typeref:typename:void	file:
TheirsEnd	ConflictFileParser.cpp	/^static const TCHAR TheirsEnd[] = _T(">>>>>>> ");$/;"	v	typeref:typename:const TCHAR[]	file:
ThreadEvent	DiffThread.h	/^	enum ThreadEvent$/;"	g	class:CDiffThread
ThreadState	CompareStats.h	/^		ThreadState() : m_nHitCount(0), m_pDiffItem(nullptr) {}$/;"	f	struct:CompareStats::ThreadState
ThreadState	CompareStats.h	/^		ThreadState(const ThreadState& other) : m_nHitCount(other.m_nHitCount.load()), m_pDiffItem(oth/;"	f	struct:CompareStats::ThreadState
ThreadState	CompareStats.h	/^	struct ThreadState$/;"	s	class:CompareStats
ThreadState	DiffThread.h	/^	enum ThreadState$/;"	g	class:CDiffThread
Throw	dllpstub.cpp	/^void DLLPSTUB::Throw(LPCSTR name, HMODULE handle, DWORD dwError, bool bFreeLibrary)$/;"	f	class:DLLPSTUB	typeref:typename:void
ThrowConfirmCopy	DirActions.cpp	/^static void ThrowConfirmCopy(const CDiffContext& ctxt, int origin, int destination, size_t count/;"	f	typeref:typename:void	file:
ThrowConfirmMove	DirActions.cpp	/^static void ThrowConfirmMove(const CDiffContext& ctxt, int origin, int destination, size_t count/;"	f	typeref:typename:void	file:
ThrowConfirmationNeededException	DirActions.cpp	/^static void ThrowConfirmationNeededException(const CDiffContext& ctxt, const String &caption, co/;"	f	typeref:typename:void	file:
TimeSizeCompare	CompareEngines/TimeSizeCompare.cpp	/^TimeSizeCompare::TimeSizeCompare()$/;"	f	class:CompareEngines::TimeSizeCompare
TimeSizeCompare	CompareEngines/TimeSizeCompare.h	/^class TimeSizeCompare$/;"	c	namespace:CompareEngines
TimeString	locality.cpp	/^String TimeString(const int64_t * tim)$/;"	f	namespace:locality	typeref:typename:String
TimeToSignalCompare	DirView.cpp	/^const int TimeToSignalCompare = 3;$/;"	v	typeref:typename:const int
ToString	DirItem.cpp	/^String FileFlags::ToString() const$/;"	f	class:FileFlags	typeref:typename:String
ToUnixPath	paths.cpp	/^String ToUnixPath(const String& path)$/;"	f	namespace:paths	typeref:typename:String
ToWindowsPath	paths.cpp	/^String ToWindowsPath(const String& path)$/;"	f	namespace:paths	typeref:typename:String
Token	markdown.cpp	/^class CMarkdown::Token$/;"	c	class:CMarkdown	file:
TransformationCategories	Plugins.cpp	/^const wchar_t *TransformationCategories[] = $/;"	v	typeref:typename:const wchar_t * []
TranslateDialog	Common/LanguageSelect.cpp	/^void CLanguageSelect::TranslateDialog(HWND h) const$/;"	f	class:CLanguageSelect	typeref:typename:void
TranslateDialog	Merge.cpp	/^void CMergeApp::TranslateDialog(HWND h) const$/;"	f	class:CMergeApp	typeref:typename:void
TranslateMenu	Common/LanguageSelect.cpp	/^void CLanguageSelect::TranslateMenu(HMENU h) const$/;"	f	class:CLanguageSelect	typeref:typename:void
TranslateMenu	Merge.cpp	/^void CMergeApp::TranslateMenu(HMENU h) const$/;"	f	class:CMergeApp	typeref:typename:void
TranslateString	Common/LanguageSelect.cpp	/^bool CLanguageSelect::TranslateString(const std::string& msgid, String& s) const$/;"	f	class:CLanguageSelect	typeref:typename:bool
TranslateString	Common/LanguageSelect.cpp	/^bool CLanguageSelect::TranslateString(const std::wstring& msgid, std::wstring &s) const$/;"	f	class:CLanguageSelect	typeref:typename:bool
TranslateString	Merge.cpp	/^bool CMergeApp::TranslateString(const std::string& str, String& translated_str) const$/;"	f	class:CMergeApp	typeref:typename:bool
TranslationsUrl	Constants.h	/^const TCHAR TranslationsUrl[] = _T("https:\/\/winmerge.org\/translations\/");$/;"	v	typeref:typename:const TCHAR[]
TrimPaths	OpenView.cpp	/^void COpenView::TrimPaths()$/;"	f	class:COpenView	typeref:typename:void
Try	HexMergeDoc.cpp	/^static int Try(HRESULT hr, UINT type)$/;"	f	typeref:typename:int	file:
TrySaveAs	MergeDoc.cpp	/^bool CMergeDoc::TrySaveAs(String &strPath, int &nSaveResult, String & sError,$/;"	f	class:CMergeDoc	typeref:typename:bool
UCS2BE	Common/unicoder.h	/^	UCS2BE,    \/**< UCS-2 \/ UTF-16 big endian. *\/$/;"	e	enum:ucr::UNICODESET
UCS2BE	diffutils/src/io.c	/^  UCS2BE,    \/**< UCS-2 \/ UTF-16 big endian. *\/$/;"	e	enum:UNICODESET	file:
UCS2LE	Common/unicoder.h	/^	UCS2LE,    \/**< UCS-2 \/ UTF-16 little endian. *\/$/;"	e	enum:ucr::UNICODESET
UCS2LE	diffutils/src/io.c	/^  UCS2LE,    \/**< UCS-2 \/ UTF-16 little endian. *\/$/;"	e	enum:UNICODESET	file:
UCS4BE	Common/unicoder.h	/^	UCS4BE,    \/**< UTF-32 big-endian *\/$/;"	e	enum:ucr::UNICODESET
UCS4BE	diffutils/src/io.c	/^  UCS4BE,    \/**< UTF-32 big-endian *\/$/;"	e	enum:UNICODESET	file:
UCS4LE	Common/unicoder.h	/^	UCS4LE,    \/**< UTF-32 little endian *\/$/;"	e	enum:ucr::UNICODESET
UCS4LE	diffutils/src/io.c	/^  UCS4LE,    \/**< UTF-32 little endian *\/$/;"	e	enum:UNICODESET	file:
UIDestination	FileActionScript.h	/^	int UIDestination; \/**< Destination UI-side *\/$/;"	m	struct:FileActionItem	typeref:typename:int
UINT_BIT	diffutils/src/io.c	/^#define UINT_BIT /;"	d	file:
UINT_BIT	stringdiffs.cpp	/^#define UINT_BIT /;"	d	file:
UIOrigin	FileActionScript.h	/^	int UIOrigin; \/**< Original UI-side *\/$/;"	m	struct:FileActionItem	typeref:typename:int
UIResult	FileActionScript.h	/^	int UIResult; \/**< Resulting UI action *\/$/;"	m	struct:FileActionItem	typeref:typename:int
UI_DEL	FileActionScript.h	/^		UI_DEL,        \/**< Remove left item. *\/$/;"	e	enum:FileActionItem::UI_RESULT
UI_DESYNC	FileActionScript.h	/^		UI_DESYNC,     \/**< Make items different. *\/$/;"	e	enum:FileActionItem::UI_RESULT
UI_DONT_CARE	FileActionScript.h	/^		UI_DONT_CARE,  \/**< Ignore the GUI change. *\/$/;"	e	enum:FileActionItem::UI_RESULT
UI_RENAME	FileActionScript.h	/^		UI_RENAME      \/**< Rename item. *\/$/;"	e	enum:FileActionItem::UI_RESULT
UI_RESULT	FileActionScript.h	/^	enum UI_RESULT$/;"	g	struct:FileActionItem
UI_SYNC	FileActionScript.h	/^		UI_SYNC = 1,   \/**< Make items identical (synchronized). *\/$/;"	e	enum:FileActionItem::UI_RESULT
UNCHANGED	diffutils/src/diff.h	/^  UNCHANGED,$/;"	e	enum:line_class
UNICODESET	Common/unicoder.h	/^enum UNICODESET : char$/;"	g	namespace:ucr	typeref:typename:char
UNICODESET	diffutils/src/io.c	/^enum UNICODESET$/;"	g	file:
UNUSED_ARG	Common/lwdisp.h	/^#define UNUSED_ARG(/;"	d
UPDATEITEM_NONE	DirActions.h	/^	UPDATEITEM_NONE,$/;"	e	enum:__anona878a18b0403
UPDATEITEM_REMOVE	DirActions.h	/^	UPDATEITEM_REMOVE$/;"	e	enum:__anona878a18b0403
UPDATEITEM_TYPE	DirActions.h	/^} UPDATEITEM_TYPE;$/;"	t	typeref:enum:__anona878a18b0403
UPDATEITEM_UPDATE	DirActions.h	/^	UPDATEITEM_UPDATE,$/;"	e	enum:__anona878a18b0403
UPDATE_INTERVAL	DirCompProgressBar.cpp	/^static const UINT UPDATE_INTERVAL = 600;$/;"	v	typeref:typename:const UINT	file:
UTF8	Common/unicoder.h	/^	UTF8,      \/**< UTF-8. *\/$/;"	e	enum:ucr::UNICODESET
UTF8	diffutils/src/io.c	/^  UTF8,      \/**< UTF-8. *\/$/;"	e	enum:UNICODESET	file:
Ucs4_to_Utf8	Common/unicoder.cpp	/^int Ucs4_to_Utf8(unsigned unich, unsigned char * utf8)$/;"	f	namespace:ucr	typeref:typename:int
UnSetBitmapBackground	Common/BCMenu.cpp	/^void BCMenu::UnSetBitmapBackground(void)$/;"	f	class:BCMenu	typeref:typename:void
UnSubclassWnd	Common/CMoveConstraint.cpp	/^CMoveConstraint::UnSubclassWnd()$/;"	f	class:prdlg::CMoveConstraint	typeref:typename:bool
Undo	MergeDoc.cpp	/^bool CMergeDoc::Undo()$/;"	f	class:CMergeDoc	typeref:typename:bool
UndoInsert	GhostTextBuffer.cpp	/^UndoInsert(CCrystalTextView * pSource, CPoint & ptCursorPos, const CPoint apparent_ptStartPos, C/;"	f	class:CGhostTextBuffer	typeref:typename:bool
UniError	Common/UniFile.cpp	/^UniFile::UniError::UniError()$/;"	f	class:UniFile::UniError
UniError	Common/UniFile.h	/^	struct UniError$/;"	s	class:UniFile
UniFile	Common/UniFile.h	/^class UniFile$/;"	c
UniLocalFile	Common/UniFile.cpp	/^UniLocalFile::UniLocalFile()$/;"	f	class:UniLocalFile
UniLocalFile	Common/UniFile.h	/^class UniLocalFile : public UniFile$/;"	c
UniMarkdownFile	UniMarkdownFile.cpp	/^UniMarkdownFile::UniMarkdownFile()$/;"	f	class:UniMarkdownFile
UniMarkdownFile	UniMarkdownFile.h	/^class UniMarkdownFile : public UniMemFile$/;"	c
UniMemFile	Common/UniFile.cpp	/^UniMemFile::UniMemFile()$/;"	f	class:UniMemFile
UniMemFile	Common/UniFile.h	/^class UniMemFile : public UniLocalFile$/;"	c
UniStdioFile	Common/UniFile.cpp	/^UniStdioFile::UniStdioFile()$/;"	f	class:UniStdioFile
UniStdioFile	Common/UniFile.h	/^class UniStdioFile : public UniLocalFile$/;"	c
UnloadTheScriptletList	Plugins.cpp	/^static void UnloadTheScriptletList()$/;"	f	typeref:typename:void	file:
Unlock	Plugins.h	/^	bool Unlock()	{ m_nLocks --; return (m_nLocks == 0); };$/;"	f	class:CScriptsOfThread	typeref:typename:bool
Unnamed	Common/MyCom.h	/^	CMyDispParamsUnnamed Unnamed;$/;"	m	union:CMyDispParams	typeref:typename:CMyDispParamsUnnamed
Unpacking	FileTransform.cpp	/^bool Unpacking(PackingInfo *handler, String& filepath, const String& filteredText)$/;"	f	namespace:FileTransform	typeref:typename:bool
Unpacking	FileTransform.cpp	/^bool Unpacking(String & filepath, const PackingInfo * handler, int * handlerSubcode)$/;"	f	namespace:FileTransform	typeref:typename:bool
Unpacking	FileTransform.cpp	/^bool Unpacking(String & filepath, const String& filteredText, PackingInfo * handler, int * handl/;"	f	namespace:FileTransform	typeref:typename:bool
Update	DirItem.cpp	/^bool DirItem::Update(const String &sFilePath)$/;"	f	class:DirItem	typeref:typename:bool
Update	Merge7zFormatMergePluginImpl.cpp	/^Merge7z::Format::Updater *Merge7zFormatMergePluginImpl::Update(HWND, LPCTSTR) { return nullptr; /;"	f	class:Merge7zFormatMergePluginImpl	typeref:typename:Merge7z::Format::Updater *
Update	Merge7zFormatShellImpl.cpp	/^Merge7z::Format::Updater *Merge7zFormatShellImpl::Update(HWND, LPCTSTR) { return nullptr; }$/;"	f	class:Merge7zFormatShellImpl	typeref:typename:Merge7z::Format::Updater *
Update	MergeStatusBar.cpp	/^void CMergeStatusBar::MergeStatus::Update()$/;"	f	class:CMergeStatusBar::MergeStatus	typeref:typename:void
UpdateAfterFileScript	DirView.cpp	/^void CDirView::UpdateAfterFileScript(FileActionScript & actionList)$/;"	f	class:CDirView	typeref:typename:void
UpdateAutoPaneResize	HexMergeFrm.cpp	/^void CHexMergeFrame::UpdateAutoPaneResize()$/;"	f	class:CHexMergeFrame	typeref:typename:void
UpdateAutoPaneResize	ImgMergeFrm.cpp	/^void CImgMergeFrame::UpdateAutoPaneResize()$/;"	f	class:CImgMergeFrame	typeref:typename:void
UpdateAutoPaneResize	MergeEditFrm.cpp	/^void CMergeEditFrame::UpdateAutoPaneResize()$/;"	f	class:CMergeEditFrame	typeref:typename:void
UpdateButtonCaptions	DirSelectFilesDlg.cpp	/^void DirSelectFilesDlg::Impl::UpdateButtonCaptions()$/;"	f	class:DirSelectFilesDlg::Impl	typeref:typename:void
UpdateButtonStates	OpenView.cpp	/^void COpenView::UpdateButtonStates()$/;"	f	class:COpenView	typeref:typename:void
UpdateButtonStatesThread	OpenView.cpp	/^static UINT UpdateButtonStatesThread(LPVOID lpParam)$/;"	f	typeref:typename:UINT	file:
UpdateButtonStatesThreadParams	OpenView.cpp	/^struct UpdateButtonStatesThreadParams$/;"	s	file:
UpdateButtons	PropShell.cpp	/^void PropShell::UpdateButtons()$/;"	f	class:PropShell	typeref:typename:void
UpdateChangedItem	DirDoc.cpp	/^void CDirDoc::UpdateChangedItem(const PathContext &paths,$/;"	f	class:CDirDoc	typeref:typename:void
UpdateCodepageModule	Merge.cpp	/^void CMergeApp::UpdateCodepageModule()$/;"	f	class:CMergeApp	typeref:typename:void
UpdateColumnNames	DirView.cpp	/^void CDirView::UpdateColumnNames()$/;"	f	class:CDirView	typeref:typename:void
UpdateControls	PropArchive.cpp	/^void PropArchive::UpdateControls()$/;"	f	class:PropArchive	typeref:typename:void
UpdateControls	PropCompare.cpp	/^void PropCompare::UpdateControls()$/;"	f	class:PropCompare	typeref:typename:void
UpdateControls	PropCompareFolder.cpp	/^void PropCompareFolder::UpdateControls()$/;"	f	class:PropCompareFolder	typeref:typename:void
UpdateDataFromWindow	LoadSaveCodepageDlg.h	/^	void UpdateDataFromWindow() { UpdateData(TRUE); }$/;"	f	class:CLoadSaveCodepageDlg	typeref:typename:void
UpdateDataFromWindow	PropEditor.h	/^	void UpdateDataFromWindow() { UpdateData(TRUE); }$/;"	f	class:PropEditor	typeref:typename:void
UpdateDataToWindow	LoadSaveCodepageDlg.h	/^	void UpdateDataToWindow() { UpdateData(FALSE); }$/;"	f	class:CLoadSaveCodepageDlg	typeref:typename:void
UpdateDataToWindow	PropEditor.h	/^	void UpdateDataToWindow() { UpdateData(FALSE); }$/;"	f	class:PropEditor	typeref:typename:void
UpdateDefaultCodepage	Merge.cpp	/^void CMergeApp::UpdateDefaultCodepage(int cpDefaultMode, int cpCustomCodepage)$/;"	f	class:CMergeApp	typeref:typename:void
UpdateDiffAfterOperation	DirActions.cpp	/^UPDATEITEM_TYPE UpdateDiffAfterOperation(const FileActionItem & act, CDiffContext& ctxt, DIFFITE/;"	f	typeref:typename:UPDATEITEM_TYPE
UpdateDiffItem	DirScan.cpp	/^static void UpdateDiffItem(DIFFITEM &di, bool & bExists, CDiffContext *pCtxt)$/;"	f	typeref:typename:void	file:
UpdateDiffItem	HexMergeDoc.cpp	/^int CHexMergeDoc::UpdateDiffItem(CDirDoc *pDirDoc)$/;"	f	class:CHexMergeDoc	typeref:typename:int
UpdateDiffItem	HexMergeDoc.cpp	/^static void UpdateDiffItem(int nBuffers, DIFFITEM &di, CDiffContext *pCtxt)$/;"	f	typeref:typename:void	file:
UpdateDiffItem	ImgMergeFrm.cpp	/^int CImgMergeFrame::UpdateDiffItem(CDirDoc *pDirDoc)$/;"	f	class:CImgMergeFrame	typeref:typename:int
UpdateDiffItemStatus	DirView.cpp	/^void CDirView::UpdateDiffItemStatus(UINT nIdx)$/;"	f	class:CDirView	typeref:typename:void
UpdateDocTitle	MainFrm.cpp	/^void CMainFrame::UpdateDocTitle()$/;"	f	class:CMainFrame	typeref:typename:void
UpdateFiltersList	FileFiltersDlg.cpp	/^void FileFiltersDlg::UpdateFiltersList()$/;"	f	class:FileFiltersDlg	typeref:typename:void
UpdateFont	MainFrm.cpp	/^void CMainFrame::UpdateFont(FRAMETYPE frame)$/;"	f	class:CMainFrame	typeref:typename:void
UpdateHeaderActivity	MergeDoc.cpp	/^void CMergeDoc::UpdateHeaderActivity(int pane, bool bActivate)$/;"	f	class:CMergeDoc	typeref:typename:void
UpdateHeaderPath	DirDoc.cpp	/^void CDirDoc::UpdateHeaderPath(int nIndex)$/;"	f	class:CDirDoc	typeref:typename:void
UpdateHeaderPath	HexMergeDoc.cpp	/^void CHexMergeDoc::UpdateHeaderPath(int pane)$/;"	f	class:CHexMergeDoc	typeref:typename:void
UpdateHeaderPath	ImgMergeFrm.cpp	/^void CImgMergeFrame::UpdateHeaderPath(int pane)$/;"	f	class:CImgMergeFrame	typeref:typename:void
UpdateHeaderPath	MergeDoc.cpp	/^void CMergeDoc::UpdateHeaderPath(int pane)$/;"	f	class:CMergeDoc	typeref:typename:void
UpdateHeaderSizes	HexMergeFrm.cpp	/^void CHexMergeFrame::UpdateHeaderSizes()$/;"	f	class:CHexMergeFrame	typeref:typename:void
UpdateHeaderSizes	ImgMergeFrm.cpp	/^void CImgMergeFrame::UpdateHeaderSizes()$/;"	f	class:CImgMergeFrame	typeref:typename:void
UpdateHeaderSizes	MergeEditFrm.cpp	/^void CMergeEditFrame::UpdateHeaderSizes()$/;"	f	class:CMergeEditFrame	typeref:typename:void
UpdateInfoFromDiskHalf	DiffContext.cpp	/^bool CDiffContext::UpdateInfoFromDiskHalf(DIFFITEM &di, int nIndex)$/;"	f	class:CDiffContext	typeref:typename:bool
UpdateLastCompareResult	ImgMergeFrm.cpp	/^void CImgMergeFrame::UpdateLastCompareResult()$/;"	f	class:CImgMergeFrame	typeref:typename:void
UpdateLineDiffControls	PropEditor.cpp	/^void PropEditor::UpdateLineDiffControls()$/;"	f	class:PropEditor	typeref:typename:void
UpdateLocationViewPosition	MergeEditView.cpp	/^void CMergeEditView::UpdateLocationViewPosition(int nTopLine \/*=-1*\/,$/;"	f	class:CMergeEditView	typeref:typename:void
UpdateMenu	Common/BCMenu.cpp	/^void BCMenu::UpdateMenu(CMenu *pmenu)$/;"	f	class:BCMenu	typeref:typename:void
UpdatePagesData	Common/PropertyPageHost.cpp	/^void CPropertyPageHost::UpdatePagesData()$/;"	f	class:CPropertyPageHost	typeref:typename:void
UpdatePrediffersMenu	MainFrm.cpp	/^void CMainFrame::UpdatePrediffersMenu()$/;"	f	class:CMainFrame	typeref:typename:void
UpdateResources	DiffViewBar.cpp	/^void CDiffViewBar::UpdateResources()$/;"	f	class:CDiffViewBar	typeref:typename:void
UpdateResources	DirDoc.cpp	/^void CDirDoc::UpdateResources()$/;"	f	class:CDirDoc	typeref:typename:void
UpdateResources	DirFrame.cpp	/^void CDirFrame::UpdateResources()$/;"	f	class:CDirFrame	typeref:typename:void
UpdateResources	DirView.cpp	/^void CDirView::UpdateResources()$/;"	f	class:CDirView	typeref:typename:void
UpdateResources	HexMergeFrm.cpp	/^void CHexMergeFrame::UpdateResources()$/;"	f	class:CHexMergeFrame	typeref:typename:void
UpdateResources	ImgMergeFrm.cpp	/^void CImgMergeFrame::UpdateResources()$/;"	f	class:CImgMergeFrame	typeref:typename:void
UpdateResources	LocationBar.cpp	/^void CLocationBar::UpdateResources()$/;"	f	class:CLocationBar	typeref:typename:void
UpdateResources	MainFrm.cpp	/^void CMainFrame::UpdateResources()$/;"	f	class:CMainFrame	typeref:typename:void
UpdateResources	MergeDoc.cpp	/^void CMergeDoc::UpdateResources()$/;"	f	class:CMergeDoc	typeref:typename:void
UpdateResources	MergeEditFrm.cpp	/^void CMergeEditFrame::UpdateResources()$/;"	f	class:CMergeEditFrame	typeref:typename:void
UpdateResources	MergeEditView.cpp	/^void CMergeEditView::UpdateResources()$/;"	f	class:CMergeEditView	typeref:typename:void
UpdateResources	MergeStatusBar.cpp	/^void CMergeStatusBar::MergeStatus::UpdateResources()$/;"	f	class:CMergeStatusBar::MergeStatus	typeref:typename:void
UpdateResources	MergeStatusBar.cpp	/^void CMergeStatusBar::UpdateResources()$/;"	f	class:CMergeStatusBar	typeref:typename:void
UpdateResources	OpenDoc.cpp	/^void COpenDoc::UpdateResources()$/;"	f	class:COpenDoc	typeref:typename:void
UpdateResources	OpenFrm.cpp	/^void COpenFrame::UpdateResources()$/;"	f	class:COpenFrame	typeref:typename:void
UpdateResources	OpenView.cpp	/^void COpenView::UpdateResources()$/;"	f	class:COpenView	typeref:typename:void
UpdateSaveGroup	LoadSaveCodepageDlg.cpp	/^void CLoadSaveCodepageDlg::UpdateSaveGroup()$/;"	f	class:CLoadSaveCodepageDlg	typeref:typename:void
UpdateSettings	PatchDlg.cpp	/^void CPatchDlg::UpdateSettings()$/;"	f	class:CPatchDlg	typeref:typename:void
UpdateSiblingScrollPos	MergeEditView.cpp	/^void CMergeEditView::UpdateSiblingScrollPos (bool bHorz)$/;"	f	class:CMergeEditView	typeref:typename:void
UpdateSizes	Common/CMoveConstraint.cpp	/^CMoveConstraint::UpdateSizes()$/;"	f	class:prdlg::CMoveConstraint	typeref:typename:void
UpdateSplitter	HexMergeFrm.cpp	/^void CHexMergeFrame::UpdateSplitter()$/;"	f	class:CHexMergeFrame	typeref:typename:void
UpdateSplitter	ImgMergeFrm.cpp	/^void CImgMergeFrame::UpdateSplitter()$/;"	f	class:CImgMergeFrame	typeref:typename:void
UpdateSplitter	MergeEditFrm.cpp	/^void CMergeEditFrame::UpdateSplitter()$/;"	f	class:CMergeEditFrame	typeref:typename:void
UpdateStatusFromDisk	DiffContext.cpp	/^void CDiffContext::UpdateStatusFromDisk(DIFFITEM *diffpos, int nIndex)$/;"	f	class:CDiffContext	typeref:typename:void
UpdateStatusbar	MergeEditView.cpp	/^void CMergeEditView::UpdateStatusbar()$/;"	f	class:CMergeEditView	typeref:typename:void
UpdateTabs	Common/MDITabBar.cpp	/^void CMDITabBar::UpdateTabs()$/;"	f	class:CMDITabBar	typeref:typename:void
UpdateTextColorButtonState	PropColors.cpp	/^void PropMergeColors::UpdateTextColorButtonState(int checkboxId, CColorButton &btn)$/;"	f	class:PropMergeColors	typeref:typename:void
UpdateTextColorButtonsState	PropColors.cpp	/^void PropMergeColors::UpdateTextColorButtonsState()$/;"	f	class:PropMergeColors	typeref:typename:void
UpdateVersion	DiffContext.cpp	/^void CDiffContext::UpdateVersion(DIFFITEM &di, int nIndex) const$/;"	f	class:CDiffContext	typeref:typename:void
UpdateVisiblePos	LocationView.cpp	/^void CLocationView::UpdateVisiblePos(int nTopLine, int nBottomLine)$/;"	f	class:CLocationView	typeref:typename:void
UseMask	FileFilterHelper.cpp	/^void FileFilterHelper::UseMask(bool bUseMask)$/;"	f	class:FileFilterHelper	typeref:typename:void
UseRecycleBin	FileActionScript.h	/^inline void FileActionScript::UseRecycleBin(bool bUseRecycleBin)$/;"	f	class:FileActionScript	typeref:typename:void
Utf8len_fromCodepoint	Common/unicoder.cpp	/^int Utf8len_fromCodepoint(unsigned ch)$/;"	f	namespace:ucr	typeref:typename:int
Utf8len_fromLeadByte	Common/unicoder.cpp	/^int Utf8len_fromLeadByte(unsigned char ch)$/;"	f	namespace:ucr	typeref:typename:int
Utf8len_of_string	Common/unicoder.h	/^size_t Utf8len_of_string(const C* text, size_t size)$/;"	f	namespace:ucr	typeref:typename:size_t
VC_EXTRALEAN	StdAfx.h	/^#define VC_EXTRALEAN	/;"	d
VISIBILITY	DiffItem.h	/^	VISIBILITY = 0x3U, VISIBLE = 0x1U, HIDDEN = 0x2U, EXPANDED = 0x4U$/;"	e	enum:ViewCustomFlags
VISIBLE	DiffItem.h	/^	VISIBILITY = 0x3U, VISIBLE = 0x1U, HIDDEN = 0x2U, EXPANDED = 0x4U$/;"	e	enum:ViewCustomFlags
VSCROLL	WinIMergeLib.h	/^		SIZE, HSCROLL, VSCROLL, SETFOCUS, KILLFOCUS,$/;"	e	enum:IImgMergeWindow::EVENT_TYPE
VS_VERSION_INFO	Merge2.rc	/^VS_VERSION_INFO VERSIONINFO$/;"	v
VTS_BOOL	Common/lwdisp.h	/^#define VTS_BOOL /;"	d
VTS_BSTR	Common/lwdisp.h	/^	#define VTS_BSTR /;"	d
VTS_CY	Common/lwdisp.h	/^#define VTS_CY /;"	d
VTS_DATE	Common/lwdisp.h	/^#define VTS_DATE /;"	d
VTS_DISPATCH	Common/lwdisp.h	/^#define VTS_DISPATCH /;"	d
VTS_I2	Common/lwdisp.h	/^#define VTS_I2 /;"	d
VTS_I4	Common/lwdisp.h	/^#define VTS_I4 /;"	d
VTS_NONE	Common/lwdisp.h	/^#define VTS_NONE /;"	d
VTS_PBOOL	Common/lwdisp.h	/^#define VTS_PBOOL /;"	d
VTS_PBSTR	Common/lwdisp.h	/^#define VTS_PBSTR /;"	d
VTS_PCY	Common/lwdisp.h	/^#define VTS_PCY /;"	d
VTS_PDATE	Common/lwdisp.h	/^#define VTS_PDATE /;"	d
VTS_PDISPATCH	Common/lwdisp.h	/^#define VTS_PDISPATCH /;"	d
VTS_PI2	Common/lwdisp.h	/^#define VTS_PI2 /;"	d
VTS_PI4	Common/lwdisp.h	/^#define VTS_PI4 /;"	d
VTS_PR4	Common/lwdisp.h	/^#define VTS_PR4 /;"	d
VTS_PR8	Common/lwdisp.h	/^#define VTS_PR8 /;"	d
VTS_PSCODE	Common/lwdisp.h	/^#define VTS_PSCODE /;"	d
VTS_PUNKNOWN	Common/lwdisp.h	/^#define VTS_PUNKNOWN /;"	d
VTS_PVARIANT	Common/lwdisp.h	/^#define VTS_PVARIANT /;"	d
VTS_R4	Common/lwdisp.h	/^#define VTS_R4 /;"	d
VTS_R8	Common/lwdisp.h	/^#define VTS_R8 /;"	d
VTS_SCODE	Common/lwdisp.h	/^#define VTS_SCODE /;"	d
VTS_UI1	Common/lwdisp.h	/^#define VTS_UI1 /;"	d
VTS_UNKNOWN	Common/lwdisp.h	/^#define VTS_UNKNOWN /;"	d
VTS_VARIANT	Common/lwdisp.h	/^#define VTS_VARIANT /;"	d
VTS_WBSTR	Common/lwdisp.h	/^#define VTS_WBSTR /;"	d
VT_BOOL	Common/varprop.h	/^	VT_BOOL,     \/**< Boolean type *\/$/;"	e	enum:varprop::__anon9214d77d0103
VT_BSTRT	Common/lwdisp.h	/^	#define VT_BSTRT /;"	d
VT_FLOAT	Common/varprop.h	/^	VT_FLOAT,    \/**< Floating point type *\/$/;"	e	enum:varprop::__anon9214d77d0103
VT_INT	Common/varprop.h	/^	VT_INT,      \/**< Integer type *\/$/;"	e	enum:varprop::__anon9214d77d0103
VT_NULL	Common/varprop.h	/^	VT_NULL,     \/**< No type *\/$/;"	e	enum:varprop::__anon9214d77d0103
VT_STRING	Common/varprop.h	/^	VT_STRING,   \/**< String type *\/$/;"	e	enum:varprop::__anon9214d77d0103
VT_TIME	Common/varprop.h	/^	VT_TIME      \/**< Time type *\/$/;"	e	enum:varprop::__anon9214d77d0103
VT_TYPE	Common/varprop.h	/^} VT_TYPE;$/;"	t	namespace:varprop	typeref:enum:varprop::__anon9214d77d0103
V_VAR	Common/lwdisp.h	/^#define V_VAR(/;"	d
ValidateArgs	Common/lwdisp.c	/^STDAPI ValidateArgs(VARIANT *argv, UINT argc, LPCCH pvt)$/;"	f	typeref:typename:STDAPI
ValidateInternal	Common/multiformatText.cpp	/^void storageForPlugins::ValidateInternal(bool bNewIsFile, bool bNewIsUnicode)$/;"	f	class:storageForPlugins	typeref:typename:void
ValidateNewBuffer	Common/multiformatText.cpp	/^void storageForPlugins::ValidateNewBuffer()$/;"	f	class:storageForPlugins	typeref:typename:void
ValidateNewFile	Common/multiformatText.cpp	/^void storageForPlugins::ValidateNewFile()$/;"	f	class:storageForPlugins	typeref:typename:void
VariantValue	Common/varprop.cpp	/^VariantValue::VariantValue()$/;"	f	class:varprop::VariantValue
VariantValue	Common/varprop.cpp	/^VariantValue::VariantValue(const VariantValue &value)$/;"	f	class:varprop::VariantValue
VariantValue	Common/varprop.h	/^class VariantValue$/;"	c	namespace:varprop
VersionOf7z	7zCommon.cpp	/^DWORD NTAPI VersionOf7z()$/;"	f	typeref:typename:DWORD NTAPI
ViewCustomFlags	DiffItem.h	/^enum ViewCustomFlags$/;"	g
WEXITSTATUS	diffutils/src/system.h	/^#define WEXITSTATUS(/;"	d
WHITESPACE_COMPARE_ALL	CompareOptions.h	/^	WHITESPACE_COMPARE_ALL = 0,    \/**< no special handling of whitespace *\/$/;"	e	enum:WhitespaceIgnoreChoices
WHITESPACE_IGNORE_ALL	CompareOptions.h	/^	WHITESPACE_IGNORE_ALL,         \/**< ignore whitespace altogether *\/$/;"	e	enum:WhitespaceIgnoreChoices
WHITESPACE_IGNORE_CHANGE	CompareOptions.h	/^	WHITESPACE_IGNORE_CHANGE,      \/**< ignore changes in whitespace *\/$/;"	e	enum:WhitespaceIgnoreChoices
WIFEXITED	diffutils/src/system.h	/^#define WIFEXITED(/;"	d
WINVER	StdAfx.h	/^#  define WINVER /;"	d
WMCMPBUFF	CompareEngines/ByteCompare.cpp	/^static const int WMCMPBUFF = 32 * KILO;$/;"	v	namespace:CompareEngines	typeref:typename:const int	file:
WMGoto	MergeEditView.h	/^	void WMGoto() { OnWMGoto(); };$/;"	f	class:CMergeEditView	typeref:typename:void
WMGotoDlg	WMGotoDlg.h	/^class WMGotoDlg$/;"	c
WMPROFILE	StdAfx.h	/^#define WMPROFILE(/;"	d
WMrunning	TempFile.cpp	/^static bool WMrunning(const vector<int>& processIDs, int iPI)$/;"	f	typeref:typename:bool	file:
WORDDIFF	MergeDoc.h	/^	typedef enum { BYTEDIFF, WORDDIFF } DIFFLEVEL;$/;"	e	enum:CMergeDoc::__anon80996cc10403
WRITE_OPTIONS	PropColors.h	/^	typedef enum { SET_DEFAULTS, WRITE_OPTIONS, READ_OPTIONS } OPERATION;$/;"	e	enum:PropMergeColors::__anonf8c04cae0203
WRITE_OPTIONS	PropDirColors.h	/^	typedef enum { SET_DEFAULTS, WRITE_OPTIONS, READ_OPTIONS } OPERATION;$/;"	e	enum:PropDirColors::__anon04e0652d0203
WVA_TSTR	Common/lwdisp.h	/^#define WVA_TSTR /;"	d
Wait	Test.cpp	/^void Wait(unsigned ms)$/;"	f	typeref:typename:void
WhitespaceIgnoreChoices	CompareOptions.h	/^enum WhitespaceIgnoreChoices$/;"	g
WinMergeDocumentsFolder	Constants.h	/^const TCHAR WinMergeDocumentsFolder[] = _T("WinMerge");$/;"	v	typeref:typename:const TCHAR[]
WinMergeTest	TestMain.cpp	/^namespace WinMergeTest$/;"	n	file:
WinMergeTest	TestMain.h	/^namespace WinMergeTest { void TestAll(); }/;"	n
WinMergeURL	Constants.h	/^const TCHAR WinMergeURL[] = _T("https:\/\/winmerge.org\/");$/;"	v	typeref:typename:const TCHAR[]
WindowProc	Common/CMoveConstraint.cpp	/^CMoveConstraint::WindowProc(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam, LRESULT * plresul/;"	f	class:prdlg::CMoveConstraint	typeref:typename:bool
WindowProc	DirView.cpp	/^LRESULT CDirView::WindowProc(UINT message, WPARAM wParam, LPARAM lParam)$/;"	f	class:CDirView	typeref:typename:LRESULT
WindowProc	MainFrm.h	/^		virtual LRESULT WindowProc(UINT message, WPARAM wParam, LPARAM lParam)$/;"	f	class:CMainFrame::CMDIClient	typeref:typename:LRESULT
WordDiff	MergeDoc.h	/^	WordDiff(const WordDiff & src)$/;"	f	struct:WordDiff
WordDiff	MergeDoc.h	/^	WordDiff(int s1=0, int e1=0, int bl1=0, int el1=0, int s2=0, int e2=0, int bl2=0, int el2=0, in/;"	f	struct:WordDiff
WordDiff	MergeDoc.h	/^struct WordDiff {$/;"	s
WordListCopy	MergeDoc.cpp	/^bool CMergeDoc::WordListCopy(int srcPane, int dstPane, int nDiff, int firstWordDiff, int lastWor/;"	f	class:CMergeDoc	typeref:typename:bool
WorkCompletedNotification	DirScan.cpp	/^	explicit WorkCompletedNotification(DIFFITEM& di): m_di(di) {}$/;"	f	class:WorkCompletedNotification	file:
WorkCompletedNotification	DirScan.cpp	/^class WorkCompletedNotification: public Poco::Notification$/;"	c	file:
WorkNotification	DirScan.cpp	/^	WorkNotification(DIFFITEM& di, NotificationQueue& queueResult): m_di(di), m_queueResult(queueRe/;"	f	class:WorkNotification	file:
WorkNotification	DirScan.cpp	/^class WorkNotification: public Poco::Notification$/;"	c	file:
WriteBom	Common/UniFile.cpp	/^int UniStdioFile::WriteBom()$/;"	f	class:UniStdioFile	typeref:typename:int
WriteBool	Common/RegKey.cpp	/^LONG CRegKeyEx::WriteBool(LPCTSTR pszKey, bool bVal)$/;"	f	class:CRegKeyEx	typeref:typename:LONG
WriteDword	Common/RegKey.cpp	/^LONG CRegKeyEx::WriteDword(LPCTSTR pszKey, DWORD dwVal)$/;"	f	class:CRegKeyEx	typeref:typename:LONG
WriteFloat	Common/RegKey.cpp	/^LONG CRegKeyEx::WriteFloat(LPCTSTR pszKey, float fVal)$/;"	f	class:CRegKeyEx	typeref:typename:LONG
WriteItem	ConfigLog.cpp	/^void CConfigLog::WriteItem(int indent, const String& key, const String &str)$/;"	f	class:CConfigLog	typeref:typename:void
WriteItem	ConfigLog.cpp	/^void CConfigLog::WriteItem(int indent, const String& key, const TCHAR *value \/*= nullptr*\/)$/;"	f	class:CConfigLog	typeref:typename:void
WriteItem	ConfigLog.cpp	/^void CConfigLog::WriteItem(int indent, const String& key, long value)$/;"	f	class:CConfigLog	typeref:typename:void
WriteLocaleSettings	ConfigLog.cpp	/^void CConfigLog::WriteLocaleSettings(unsigned locid, const String& title)$/;"	f	class:CConfigLog	typeref:typename:void
WriteLogFile	ConfigLog.cpp	/^bool CConfigLog::WriteLogFile(String &sError)$/;"	f	class:CConfigLog	typeref:typename:bool
WriteOptions	PropArchive.cpp	/^void PropArchive::WriteOptions()$/;"	f	class:PropArchive	typeref:typename:void
WriteOptions	PropBackups.cpp	/^void PropBackups::WriteOptions()$/;"	f	class:PropBackups	typeref:typename:void
WriteOptions	PropCodepage.cpp	/^void PropCodepage::WriteOptions()$/;"	f	class:PropCodepage	typeref:typename:void
WriteOptions	PropColors.cpp	/^void PropMergeColors::WriteOptions()$/;"	f	class:PropMergeColors	typeref:typename:void
WriteOptions	PropCompare.cpp	/^void PropCompare::WriteOptions()$/;"	f	class:PropCompare	typeref:typename:void
WriteOptions	PropCompareBinary.cpp	/^void PropCompareBinary::WriteOptions()$/;"	f	class:PropCompareBinary	typeref:typename:void
WriteOptions	PropCompareFolder.cpp	/^void PropCompareFolder::WriteOptions()$/;"	f	class:PropCompareFolder	typeref:typename:void
WriteOptions	PropCompareImage.cpp	/^void PropCompareImage::WriteOptions()$/;"	f	class:PropCompareImage	typeref:typename:void
WriteOptions	PropDirColors.cpp	/^void PropDirColors::WriteOptions()$/;"	f	class:PropDirColors	typeref:typename:void
WriteOptions	PropEditor.cpp	/^void PropEditor::WriteOptions()$/;"	f	class:PropEditor	typeref:typename:void
WriteOptions	PropGeneral.cpp	/^void PropGeneral::WriteOptions()$/;"	f	class:PropGeneral	typeref:typename:void
WriteOptions	PropMarkerColors.cpp	/^void PropMarkerColors::WriteOptions()$/;"	f	class:PropMarkerColors	typeref:typename:void
WriteOptions	PropRegistry.cpp	/^void PropRegistry::WriteOptions()$/;"	f	class:PropRegistry	typeref:typename:void
WriteOptions	PropShell.cpp	/^void PropShell::WriteOptions()$/;"	f	class:PropShell	typeref:typename:void
WriteOptions	PropSyntaxColors.cpp	/^void PropSyntaxColors::WriteOptions()$/;"	f	class:PropSyntaxColors	typeref:typename:void
WriteOptions	PropTextColors.cpp	/^void PropTextColors::WriteOptions()$/;"	f	class:PropTextColors	typeref:typename:void
WritePatchFile	DiffWrapper.cpp	/^void CDiffWrapper::WritePatchFile(struct change * script, file_data * inf)$/;"	f	class:CDiffWrapper	typeref:typename:void
WritePatchFileHeader	DiffWrapper.cpp	/^void CDiffWrapper::WritePatchFileHeader(enum output_style tOutput_style, bool bAppendFiles)$/;"	f	class:CDiffWrapper	typeref:typename:void
WritePatchFileTerminator	DiffWrapper.cpp	/^void CDiffWrapper::WritePatchFileTerminator(enum output_style tOutput_style)$/;"	f	class:CDiffWrapper	typeref:typename:void
WritePluginsInLogFile	ConfigLog.cpp	/^void CConfigLog::WritePluginsInLogFile(const wchar_t *transformationEvent)$/;"	f	class:CConfigLog	typeref:typename:void
WriteProfileInt	Merge.cpp	/^BOOL CMergeApp::WriteProfileInt(LPCTSTR lpszSection, LPCTSTR lpszEntry, int nValue)$/;"	f	class:CMergeApp	typeref:typename:BOOL
WriteProfileString	Merge.cpp	/^BOOL CMergeApp::WriteProfileString(LPCTSTR lpszSection, LPCTSTR lpszEntry, LPCTSTR lpszValue)$/;"	f	class:CMergeApp	typeref:typename:BOOL
WriteString	Common/RegKey.cpp	/^LONG CRegKeyEx::WriteString(LPCTSTR pszKey, LPCTSTR pszData)$/;"	f	class:CRegKeyEx	typeref:typename:LONG
WriteString	Common/UniFile.cpp	/^bool UniMemFile::WriteString(const String & line)$/;"	f	class:UniMemFile	typeref:typename:bool
WriteString	Common/UniFile.cpp	/^bool UniStdioFile::WriteString(const String & line)$/;"	f	class:UniStdioFile	typeref:typename:bool
WriteString	DirCmpReport.cpp	/^void DirCmpReport::WriteString(const String& sText)$/;"	f	class:DirCmpReport	typeref:typename:void
WriteStringEntityAware	DirCmpReport.cpp	/^void DirCmpReport::WriteStringEntityAware(const String& sText)$/;"	f	class:DirCmpReport	typeref:typename:void
WriteVersionOf1	ConfigLog.cpp	/^void CConfigLog::WriteVersionOf1(int indent, const String& path)$/;"	f	class:CConfigLog	typeref:typename:void
WriteWinMergeConfig	ConfigLog.cpp	/^void CConfigLog::WriteWinMergeConfig()$/;"	f	class:CConfigLog	typeref:typename:void
XDialogUnitToPixel	Common/MessageBoxDialog.cpp	/^inline int CMessageBoxDialog::XDialogUnitToPixel ( int x )$/;"	f	class:CMessageBoxDialog	typeref:typename:int
YDialogUnitToPixel	Common/MessageBoxDialog.cpp	/^inline int CMessageBoxDialog::YDialogUnitToPixel ( int y )$/;"	f	class:CMessageBoxDialog	typeref:typename:int
YES	MergeApp.h	/^		YES = 1,$/;"	e	enum:AppMsgBox::__anon8063e6ec0103
YES_TO_ALL	MergeApp.h	/^		YES_TO_ALL = 16,$/;"	e	enum:AppMsgBox::__anon8063e6ec0103
Y_OFFSET	LocationView.cpp	/^static const int Y_OFFSET = 5;$/;"	v	typeref:typename:const int	file:
ZoomText	HexMergeView.cpp	/^void CHexMergeView::ZoomText(int amount)$/;"	f	class:CHexMergeView	typeref:typename:void
ZoomText	MergeEditView.cpp	/^void CMergeEditView::ZoomText(short amount)$/;"	f	class:CMergeEditView	typeref:typename:void
_	MergeApp.h	/^#define _(/;"	d
_APS_3D_CONTROLS	resource.h	/^#define _APS_3D_CONTROLS /;"	d
_APS_NEXT_COMMAND_VALUE	resource.h	/^#define _APS_NEXT_COMMAND_VALUE /;"	d
_APS_NEXT_CONTROL_VALUE	resource.h	/^#define _APS_NEXT_CONTROL_VALUE /;"	d
_APS_NEXT_RESOURCE_VALUE	resource.h	/^#define _APS_NEXT_RESOURCE_VALUE /;"	d
_APS_NEXT_SYMED_VALUE	resource.h	/^#define _APS_NEXT_SYMED_VALUE /;"	d
_HEKSEDIT_H_	heksedit.h	/^#define _HEKSEDIT_H_$/;"	d
_MAX_PATH	StdAfx.h	/^#define _MAX_PATH /;"	d
__anon04e0652d0103	PropDirColors.h	/^	enum { IDD = IDD_PROPPAGE_COLORS_DIR };$/;"	g	class:PropDirColors
__anon04e0652d0203	PropDirColors.h	/^	typedef enum { SET_DEFAULTS, WRITE_OPTIONS, READ_OPTIONS } OPERATION;$/;"	g	class:PropDirColors
__anon05ae34500103	PropMarkerColors.h	/^	enum { IDD = IDD_PROPPAGE_COLORS_MARKER };$/;"	g	class:PropMarkerColors
__anon05ae34500203	PropMarkerColors.h	/^	typedef enum { SET_DEFAULTS, READ_OPTIONS, LOAD_COLORS } OPERATION;$/;"	g	class:PropMarkerColors
__anon0ca79a9c0102	MergeDoc.cpp	/^		ForEachView([](auto& pView) { pView->DetachFromBuffer(); });$/;"	f	function:CMergeDoc::Rescan	file:
__anon0ca79a9c0202	MergeDoc.cpp	/^		ForEachView([](auto& pView) {$/;"	f	function:CMergeDoc::Rescan	file:
__anon0ca79a9c0302	MergeDoc.cpp	/^			[&](std::unique_ptr<CDiffTextBuffer>& buf) { return buf->getEncoding() != m_ptBuf[0]->getEnco/;"	f	function:CMergeDoc::Rescan	file:
__anon0ca79a9c0402	MergeDoc.cpp	/^	ForEachView(dstPane, [currentPosDst](auto& pView) {$/;"	f	function:CMergeDoc::CopyMultipleList	file:
__anon0ca79a9c0502	MergeDoc.cpp	/^	ForEachView(dstPane, [currentPosDst](auto& pView) {$/;"	f	function:CMergeDoc::DoAutoMerge	file:
__anon0ca79a9c0602	MergeDoc.cpp	/^			ForEachView(dstPane, [currentPos](auto& pView) { pView->SetCursorPos(currentPos); });$/;"	f	function:CMergeDoc::ListCopy	file:
__anon0ca79a9c0702	MergeDoc.cpp	/^		ForEachView(dstPane, [currentPos](auto& pView) { pView->SetCursorPos(currentPos); });$/;"	f	function:CMergeDoc::WordListCopy	file:
__anon0ca79a9c0802	MergeDoc.cpp	/^	ForEachView([](auto& pView) { pView->PushCursors(); });$/;"	f	function:CMergeDoc::FlushAndRescan	file:
__anon0ca79a9c0902	MergeDoc.cpp	/^	ForEachView([](auto& pView) { pView->PopCursors(); });$/;"	f	function:CMergeDoc::FlushAndRescan	file:
__anon0ca79a9c0a02	MergeDoc.cpp	/^	ForEachView(pActiveView->m_nThisPane, [](auto& pView) {$/;"	f	function:CMergeDoc::FlushAndRescan	file:
__anon0ca79a9c0b02	MergeDoc.cpp	/^		ForEachView([](auto& pView) { pView->SetEnableHideLines(false); });$/;"	f	function:CMergeDoc::HideLines	file:
__anon0ca79a9c0c02	MergeDoc.cpp	/^	ForEachView([](auto& pView) { pView->SetEnableHideLines(true); });$/;"	f	function:CMergeDoc::HideLines	file:
__anon0ca79a9c0d02	MergeDoc.cpp	/^	ForEachView([](auto& pView) { pView->DetachFromBuffer(); });$/;"	f	function:CMergeDoc::OpenDocs	file:
__anon0ca79a9c0e02	MergeDoc.cpp	/^	if (std::find_if(nSuccess, nSuccess + m_nBuffers, [](DWORD d){return !FileLoadResult::IsOk(d);}/;"	f	function:CMergeDoc::OpenDocs	file:
__anon0ca79a9c0f02	MergeDoc.cpp	/^	ForEachView([](auto& pView) {$/;"	f	function:CMergeDoc::OpenDocs	file:
__anon0ca79a9c1002	MergeDoc.cpp	/^			ForEachView(nBuffer, [&](auto& pView) {$/;"	f	function:CMergeDoc::OpenDocs	file:
__anon0ca79a9c1102	MergeDoc.cpp	/^			ForEachView([&bTyped, enuType](auto& pView) {$/;"	f	function:CMergeDoc::OpenDocs	file:
__anon0ca79a9c1202	MergeDoc.cpp	/^			ForEachView(nBuffer, [](auto& pView) { pView->DocumentsLoaded(); });$/;"	f	function:CMergeDoc::OpenDocs	file:
__anon0ca79a9c1302	MergeDoc.cpp	/^	ForEachView([](auto& pView) { pView->RefreshOptions(); });$/;"	f	function:CMergeDoc::RefreshOptions	file:
__anon0ca79a9c1402	MergeDoc.cpp	/^	ForEachView([](auto& pView) { pView->UpdateResources(); });$/;"	f	function:CMergeDoc::UpdateResources	file:
__anon0ca79a9c1502	MergeDoc.cpp	/^	ForEachView([](auto& pView) { pView->UpdateStatusbar(); });$/;"	f	function:CMergeDoc::SwapFiles	file:
__anon0ca79a9c1602	MergeDoc.cpp	/^	ForEachView([](auto& pView) { pView->SetSelectionMargin(true); });$/;"	f	function:CMergeDoc::AddSyncPoint	file:
__anon18ac27200103	DirFrame.cpp	/^{$/;"	g	file:
__anon18ac27200202	DirFrame.cpp	/^	auto pointToPixel = [lpx](int point) { return MulDiv(point, lpx, 72); };$/;"	f	function:BEGIN_MESSAGE_MAP	file:
__anon18e99e050103	MainFrm.h	/^	{$/;"	g	class:CMainFrame
__anon18e99e050203	MainFrm.h	/^	{$/;"	g	class:CMainFrame
__anon1ee6036b0103	Merge.h	/^enum { IDLE_TIMER = 9754 };$/;"	g
__anon229847580103	TestFilterDlg.h	/^	enum { IDD = IDD_TEST_FILTER };$/;"	g	class:CTestFilterDlg
__anon26d5eb5e0103	PropArchive.h	/^	enum { IDD = IDD_PROP_ARCHIVE };$/;"	g	class:PropArchive
__anon27966f210103	EncodingErrorBar.h	/^	enum { IDD = IDD_ENCODINGERROR };$/;"	g	class:CEncodingErrorBar
__anon2ac15aba0103	PropGeneral.h	/^	enum { IDD = IDD_PROPPAGE_GENERAL };$/;"	g	class:PropGeneral
__anon2ad518260102	FileFiltersDlg.cpp	/^	auto pointToPixel = [lpx](int point) { return MulDiv(point, lpx, 72); };$/;"	f	function:FileFiltersDlg::InitList	file:
__anon32f418540103	PropShell.h	/^	enum { IDD = IDD_PROPPAGE_SHELL };$/;"	g	class:PropShell
__anon3d1556530103	LineFiltersDlg.h	/^	enum { IDD = IDD_PROPPAGE_FILTER };$/;"	g	class:LineFiltersDlg
__anon432a02130103	PropTextColors.h	/^	enum { IDD = IDD_PROPPAGE_COLORS_TEXT };$/;"	g	class:PropTextColors
__anon432a02130203	PropTextColors.h	/^	typedef enum { SET_DEFAULTS, READ_OPTIONS, LOAD_COLORS } OPERATION;$/;"	g	class:PropTextColors
__anon432df6840103	CompareStatisticsDlg.h	/^	enum { IDD = IDD_COMPARE_STATISTICS };$/;"	g	class:CompareStatisticsDlg
__anon43e96a4b0103	CompareEngines/TimeSizeCompare.h	/^	enum {$/;"	g	class:CompareEngines::TimeSizeCompare
__anon484f81700103	SaveClosingDlg.h	/^	enum { IDD = IDD_SAVECLOSING };$/;"	g	class:SaveClosingDlg
__anon48cb58da0102	GhostTextBuffer.cpp	/^		auto reverseFindRealLine = [&](int nLine) {$/;"	f	function:CGhostTextBuffer::InsertText	file:
__anon4e613f1f0103	DirSelectFilesDlg.cpp	/^	enum { IDD = IDD_SELECT_FILES_OR_FOLDERS };$/;"	g	class:DirSelectFilesDlg::Impl	file:
__anon50fdc4e20103	DirColsDlg.h	/^	enum { IDD = IDD_DIRCOLS };$/;"	g	class:CDirColsDlg
__anon54fbf6480103	AboutDlg.cpp	/^	enum { IDD = IDD_ABOUTBOX };$/;"	g	class:CAboutDlg::Impl	file:
__anon590338550103	DiffWrapper.h	/^typedef enum {$/;"	g
__anon5d35905b0103	Common/SuperComboBox.h	/^	{$/;"	g	class:CSuperComboBox
__anon5ee5fdc30103	PropCompare.h	/^	enum { IDD = IDD_PROPPAGE_COMPARE };$/;"	g	class:PropCompare
__anon63ae43930103	DirCompProgressBar.h	/^	enum { IDD = IDD_DIRCOMP_PROGRESS };$/;"	g	class:DirCompProgressBar
__anon649c46be0103	markdown.h	/^	{$/;"	g	class:CMarkdown	typeref:typename:unsigned
__anon649c46be0203	markdown.h	/^	{$/;"	g	class:CMarkdown::FileImage	typeref:typename:unsigned
__anon64d15f0d0103	Common/BCMenu.h	/^typedef enum {BCMENU_NONE, BCMENU_HEAD, BCMENU_TAIL, BCMENU_BOTH} BC_Seperator;$/;"	g
__anon6534c5100103	7zCommon.cpp	/^	enum {nMask = LVNI_FOCUSED|LVNI_SELECTED|LVNI_CUT|LVNI_DROPHILITED};$/;"	g	function:DirItemEnumerator::Next	file:
__anon665ff8a20103	PatchDlg.h	/^	enum { IDD = IDD_GENERATE_PATCH };$/;"	g	class:CPatchDlg
__anon6a0e06400102	Common/scbarg.cpp	/^    auto pointToPixel = [lpx](double point) { return static_cast<int>(point * lpx \/ 72); };$/;"	f	function:CSizingControlBarG::NcCalcClient	file:
__anon6a0e06400202	Common/scbarg.cpp	/^    auto pointToPixel = [lpx](double point) { return static_cast<int>(point * lpx \/ 72); };$/;"	f	function:CSizingControlBarG::NcPaintGripper	file:
__anon6a0e06400302	Common/scbarg.cpp	/^    auto pointToPixel = [lpx](double point) { return static_cast<int>(point * lpx \/ 72); };$/;"	f	function:CSizingControlBarG::OnNcHitTest	file:
__anon6a0e06400402	Common/scbarg.cpp	/^    auto pointToPixel = [lpx](double point) { return static_cast<int>(point * lpx \/ 72); };$/;"	f	function:CSCBButton::Paint	file:
__anon6b87a63f0103	PropCompareFolder.h	/^	enum { IDD = IDD_PROPPAGE_COMPARE_FOLDER };$/;"	g	class:PropCompareFolder
__anon6bd204190103	DiffContext.h	/^	{$/;"	g	class:CDiffContext
__anon6fcd00300103	HexMergeFrm.cpp	/^{$/;"	g	file:
__anon6fcd00300202	HexMergeFrm.cpp	/^	auto pointToPixel = [lpx](int point) { return MulDiv(point, lpx, 72); };$/;"	f	function:CHexMergeFrame::CreateHexWndStatusBar	file:
__anon6fcd00300302	HexMergeFrm.cpp	/^	m_wndFilePathBar.SetOnSetFocusCallback([&](int pane) {$/;"	f	function:CHexMergeFrame::OnCreateClient	file:
__anon712e8bb50103	PropRegistry.h	/^	enum { IDD = IDD_PROPPAGE_SYSTEM };$/;"	g	class:PropRegistry
__anon714dbd750103	PropSyntaxColors.h	/^	enum { IDD = IDD_PROPPAGE_COLORS_SYNTAX };$/;"	g	class:PropSyntaxColors
__anon7965432f0103	SharedFilterDlg.h	/^	enum { IDD = IDD_SHARED_FILTER };$/;"	g	class:CSharedFilterDlg
__anon7bdcb1630103	PropEditor.h	/^	enum { IDD = IDD_PROPPAGE_EDITOR };$/;"	g	class:PropEditor
__anon7c25ebec0103	Common/unicoder.h	/^{$/;"	g	namespace:ucr
__anon7c641a4b0102	PluginsListDlg.cpp	/^	auto pointToPixel = [lpx](int point) { return MulDiv(point, lpx, 72); };$/;"	f	function:PluginsListDlg::InitList	file:
__anon7d55ffcb0103	FileFiltersDlg.h	/^	enum { IDD = IDD_FILEFILTERS };$/;"	g	class:FileFiltersDlg
__anon7e274f0b0103	DirReportTypes.h	/^{$/;"	g
__anon8063e6ec0103	MergeApp.h	/^	{$/;"	g	namespace:AppMsgBox
__anon80996cc10103	MergeDoc.h	/^{$/;"	g
__anon80996cc10203	MergeDoc.h	/^{$/;"	g
__anon80996cc10303	MergeDoc.h	/^{$/;"	g
__anon80996cc10403	MergeDoc.h	/^	typedef enum { BYTEDIFF, WORDDIFF } DIFFLEVEL;$/;"	g	class:CMergeDoc
__anon852246680103	OpenView.h	/^	enum { IDD = IDD_OPEN };$/;"	g	class:COpenView
__anon87827efd0102	DirColsDlg.cpp	/^	auto pointToPixel = [lpx](int point) { return MulDiv(point, lpx, 72); };$/;"	f	function:BEGIN_MESSAGE_MAP	file:
__anon8b7c6b0a0103	WMGotoDlg.cpp	/^	enum { IDD = IDD_WMGOTO };$/;"	g	class:WMGotoDlg::Impl	file:
__anon8d10c7270103	stringdiffsi.h	/^{$/;"	g	namespace:strdiff
__anon8d10c7270203	stringdiffsi.h	/^{$/;"	g	namespace:strdiff
__anon8dfd54180103	Constants.h	/^{$/;"	g
__anon902ab4a30103	DiffItem.h	/^	{$/;"	g	struct:DIFFCODE	typeref:typename:unsigned long
__anon9214d77d0103	Common/varprop.h	/^{$/;"	g	namespace:varprop
__anon933cb4300111	DirViewColItems.cpp	/^{$/;"	n	file:
__anon966aec100103	DiffList.h	/^{$/;"	g
__anon966aec100203	DiffList.h	/^	{$/;"	g	class:DiffMap
__anon972dbb060103	PropCompareImage.h	/^	enum { IDD = IDD_PROPPAGE_COMPARE_IMAGE };$/;"	g	class:PropCompareImage
__anon9beca83b0103	paths.h	/^{$/;"	g	namespace:paths
__anon9fdbae860103	CompareEngines/ByteComparator.h	/^	{$/;"	g	class:CompareEngines::ByteComparator
__anona65241020102	Common/scbarcf.cpp	/^    auto pointToPixel = [lpx](double point) { return static_cast<int>(point * lpx \/ 72); };$/;"	f	function:CSizingControlBarCF::NcPaintGripper	file:
__anona7c699680102	ImgMergeFrm.cpp	/^	m_wndFilePathBar.SetOnSetFocusCallback([&](int pane) { m_pImgMergeWindow->SetActivePane(pane); /;"	f	function:CImgMergeFrame::OnCreate	file:
__anona878a18b0103	DirActions.h	/^{$/;"	g
__anona878a18b0203	DirActions.h	/^typedef enum {$/;"	g
__anona878a18b0303	DirActions.h	/^typedef enum {$/;"	g
__anona878a18b0403	DirActions.h	/^typedef enum {$/;"	g
__anonb8bf1a2b0103	SelectUnpackerDlg.h	/^	enum { IDD = IDD_SELECTUNPACKER };$/;"	g	class:CSelectUnpackerDlg
__anonba9c22aa0102	LocationView.cpp	/^	pDoc->ForEachActiveGroupView([&](auto& pView) {$/;"	f	function:CLocationView::CalculateBars	file:
__anonba9c22aa0202	LocationView.cpp	/^	pDoc->ForEachActiveGroupView([&](auto& pView) {$/;"	f	function:CLocationView::DrawVisibleAreaRect	file:
__anonba9c22aa0302	LocationView.cpp	/^			[&](int nSubLineCount) { return nSubLineCount == pDoc->GetView(nGroup, pane++)->GetSubLineCou/;"	f	function:CLocationView::UpdateVisiblePos	file:
__anonbfdb99900102	MergeDocLineDiffs.cpp	/^	if (std::all_of(rc, rc + m_nBuffers, [](auto& rc) { return rc.top == -1; }))$/;"	f	function:CMergeDoc::Showlinediff	file:
__anonc05b76ef0102	PropShell.cpp	/^	auto Is64BitWindows = []() { BOOL f64 = FALSE; return IsWow64Process(GetCurrentProcess(), &f64)/;"	f	function:IsShellExtensionRegistered	file:
__anonc0605a740103	PropCodepage.h	/^	enum { IDD = IDD_PROPPAGE_CODEPAGE };$/;"	g	class:PropCodepage
__anonc156ba0b0102	DirDoc.cpp	/^	pf->GetHeaderInterface()->SetOnSetFocusCallback([&](int pane) {$/;"	f	function:CDirDoc::Rescan	file:
__anonc156ba0b0202	DirDoc.cpp	/^		m_diffThread.SetCollectFunction([&](DiffFuncStruct* myStruct) {$/;"	f	function:CDirDoc::Rescan	file:
__anonc156ba0b0302	DirDoc.cpp	/^		m_diffThread.SetCompareFunction([&](DiffFuncStruct* myStruct) {$/;"	f	function:CDirDoc::Rescan	file:
__anonc156ba0b0402	DirDoc.cpp	/^		m_diffThread.SetCompareFunction([](DiffFuncStruct* myStruct) {$/;"	f	function:CDirDoc::Rescan	file:
__anonc156ba0b0502	DirDoc.cpp	/^		m_diffThread.SetCollectFunction([](DiffFuncStruct* myStruct) {$/;"	f	function:CDirDoc::Rescan	file:
__anonc156ba0b0602	DirDoc.cpp	/^		m_diffThread.SetCompareFunction([](DiffFuncStruct* myStruct) {$/;"	f	function:CDirDoc::Rescan	file:
__anonc44ed5c90103	DirItem.h	/^	enum : uint64_t { FILE_SIZE_NONE = UINT64_MAX };$/;"	g	struct:DirItem	typeref:typename:uint64_t
__anonc4a78dd00103	DirView.cpp	/^enum { $/;"	g	file:
__anonc4a78dd00202	DirView.cpp	/^	const int iconCX = []() {$/;"	f	function:CDirView::OnInitialUpdate	file:
__anonc4a78dd00302	DirView.cpp	/^		[&](const String& path, const String& filename) { shellContextMenu->AddItem(path, filename); }/;"	f	function:CDirView::ListShellContextMenu	file:
__anonc685a11f0102	CompareStatisticsDlg.cpp	/^	const int iconCX = []() {$/;"	f	function:BEGIN_MESSAGE_MAP	file:
__anonc685a11f0208	CompareStatisticsDlg.cpp	/^	static const struct { int ctlID; CompareStats::RESULT resultType; bool isDir; } ctlResultTypeMa/;"	s	function:BEGIN_MESSAGE_MAP	file:
__anonc685a11f0308	CompareStatisticsDlg.cpp	/^	static const struct { int ctlID; int iconID; } ctlIconMap[] =$/;"	s	function:BEGIN_MESSAGE_MAP	file:
__anonc8700d640103	EditorFilepathBar.h	/^	enum { IDD = IDD_EDITOR_HEADERBAR };$/;"	g	class:CEditorFilePathBar
__anonca8434b00103	PluginsListDlg.h	/^	enum { IDD = IDD_PLUGINS_LIST };$/;"	g	class:PluginsListDlg
__anond3316a350103	7zCommon.h	/^	{$/;"	g	class:DirItemEnumerator
__anond569877f0103	MergeStatusBar.cpp	/^{$/;"	g	file:
__anond569877f0202	MergeStatusBar.cpp	/^	auto pointToPixel = [lpx](int point) { return MulDiv(point, lpx, 72); };$/;"	f	function:CMergeStatusBar::Resize	file:
__anond6e6a54d0111	ProjectFile.cpp	/^{$/;"	n	file:
__anond7c430ae0102	LineFiltersDlg.cpp	/^	auto pointToPixel = [lpx](int point) { return MulDiv(point, lpx, 72); };$/;"	f	function:LineFiltersDlg::InitList	file:
__anondc6678d90103	Common/MDITabBar.h	/^	enum {MDITABBAR_MINTITLELENGTH = 8, MDITABBAR_MAXTITLELENGTH = 64};$/;"	g	class:CMDITabBar
__anone1db02f50103	DirView.h	/^typedef enum { eMain, eContext } eMenuType;$/;"	g
__anone38483d70103	DirFilterDlg.h	/^	enum { IDD = IDD_DIR_FILTER };$/;"	g	class:DirFilterDlg
__anone6888ab20108	Common/LanguageSelect.cpp	/^	{$/;"	s	function:CLanguageSelect::RetranslateDialog	file:
__anone6888ab20208	Common/LanguageSelect.cpp	/^	{$/;"	s	function:CLanguageSelect::RetranslateDialog	file:
__anone6888ab20302	Common/LanguageSelect.cpp	/^	{$/;"	f	function:CLanguageSelect::RetranslateDialog	typeref:typename:DLGTEMPLATEEX *	file:
__anone6888ab20402	Common/LanguageSelect.cpp	/^	{$/;"	f	function:CLanguageSelect::RetranslateDialog	file:
__anone6888ab20502	Common/LanguageSelect.cpp	/^	{$/;"	f	function:CLanguageSelect::RetranslateDialog	typeref:typename:const DLGITEMTEMPLATEEX *	file:
__anone6888ab20602	Common/LanguageSelect.cpp	/^	auto findNextDlgItem = [&skip](const DLGITEMTEMPLATEEX *pItem) -> const DLGITEMTEMPLATEEX * {$/;"	f	function:CLanguageSelect::RetranslateDialog	typeref:typename:const DLGITEMTEMPLATEEX *	file:
__anoneb3987a50103	Common/OptionsMgr.h	/^	{$/;"	g	class:COption
__anonec093aee0111	JumpList.cpp	/^{$/;"	n	file:
__anonec423fd90103	LoadSaveCodepageDlg.h	/^	enum { IDD = IDD_LOAD_SAVE_CODEPAGE };$/;"	g	class:CLoadSaveCodepageDlg
__anoneff4f0510102	MergeEditFrm.cpp	/^	m_pMergeDoc->ForEachView([&](auto& pView) {$/;"	f	function:CMergeEditFrame::OnCreateClient	file:
__anoneff4f0510202	MergeEditFrm.cpp	/^	m_wndFilePathBar.SetOnSetFocusCallback([&](int pane) {$/;"	f	function:CMergeEditFrame::OnCreateClient	file:
__anonf04696870102	MergeEditView.cpp	/^	pd->ForEachView (0, [&](auto& pView) { if (pView->m_bDetailView) pView->OnDisplayDiff(nDiff); }/;"	f	function:CMergeEditView::SelectDiff	file:
__anonf04696870202	MergeEditView.cpp	/^			std::for_each(wordDiffs.rbegin(), wordDiffs.rend(), [&](auto& it) {$/;"	f	function:CMergeEditView::OnX2Y	file:
__anonf11e2ca80103	PropCompareBinary.h	/^	enum { IDD = IDD_PROPPAGE_COMPARE_BINARY };$/;"	g	class:PropCompareBinary
__anonf2c8caa50103	PropBackups.h	/^	enum { IDD = IDD_PROPPAGE_BACKUPS };$/;"	g	class:PropBackups
__anonf85915530103	charsets.c	/^enum { no, yes };$/;"	g	file:
__anonf85915530203	charsets.c	/^enum { numCharsetInfo = sizeof charsetInfo \/ sizeof *charsetInfo - 1 };$/;"	g	file:
__anonf8c04cae0103	PropColors.h	/^	enum { IDD = IDD_PROPPAGE_COLORS_WINMERGE };$/;"	g	class:PropMergeColors
__anonf8c04cae0203	PropColors.h	/^	typedef enum { SET_DEFAULTS, WRITE_OPTIONS, READ_OPTIONS } OPERATION;$/;"	g	class:PropMergeColors
__anonf8c04cae0303	PropColors.h	/^	typedef enum { COLORSCHEME_GITHUBBITBUCKET} COLORSCHEME;$/;"	g	class:PropMergeColors
__anonf9c92ce00102	MainFrm.cpp	/^	auto pointToPixel = [lpx](int point) { return MulDiv(point, lpx, 72); };$/;"	f	function:CMainFrame::OnCreate	file:
__anonfa60ca0d0103	DirCmpReportDlg.h	/^	enum { IDD = IDD_DIRCMP_REPORT };$/;"	g	class:DirCmpReportDlg
__anonfb1545770103	ConfirmFolderCopyDlg.h	/^	enum { IDD = IDD_CONFIRM_COPY };$/;"	g	class:ConfirmFolderCopyDlg
__anonfcf7d7710103	Common/MessageBoxDialog.h	/^	enum { IDD = IDD_MESSAGE_BOX };$/;"	g	class:CMessageBoxDialog
__anonfdfe2aa90111	DropHandler.cpp	/^{$/;"	n	file:
_charsetInfo	charsets.c	/^static struct _charsetInfo$/;"	s	file:
_p	Common/MyCom.h	/^  T* _p;$/;"	m	class:CMyComPtr	typeref:typename:T *
_tcscpy_safe	Common/coretools.h	/^T *_tcscpy_safe(T(&dst)[N], const T *src)$/;"	f	typeref:typename:T *
addToMru	MainFrm.cpp	/^void CMainFrame::addToMru(LPCTSTR szItem, LPCTSTR szRegSubKey, UINT nMaxItems)$/;"	f	class:CMainFrame	typeref:typename:void
add_change	diffutils/src/analyze.c	/^add_change (int line0, int line1, int deleted, int inserted, struct change *old)$/;"	f	typeref:struct:change *	file:
ahead	markdown.h	/^	const char *ahead;	\/\/ last char of file$/;"	m	class:CMarkdown	typeref:typename:const char *
alignment	DirViewColItems.h	/^	int alignment; \/**< Column alignment *\/$/;"	m	struct:DirColInfo	typeref:typename:int
alloc_lines	diffutils/src/diff.h	/^    int linbuf_base, buffered_lines, valid_lines, alloc_lines;$/;"	m	struct:file_data	typeref:typename:int
always_text_flag	diffutils/src/diff.h	/^EXTERN int	always_text_flag;$/;"	v	typeref:typename:EXTERN int
analyze_hunk	diffutils/src/util.c	/^analyze_hunk (struct change *hunk, int *first0, int *last0, int *first1, int *last1, int *delete/;"	f	typeref:typename:void
append_equivs	xdiff_gnudiff_compat.cpp	/^static void append_equivs(const xdfile_t& xdf, struct file_data& filevec, std::vector<xrecord_t /;"	f	typeref:typename:void	file:
arg	Common/UnicodeString.h	/^	template <typename T> inline T arg(T value) { return value; }$/;"	f	namespace:strutils::detail	typeref:typename:T
arg	Common/UnicodeString.h	/^	template <typename T> inline T const * arg(std::basic_string<T> const & value) { return value.c/;"	f	namespace:strutils::detail	typeref:typename:T const *
arg1	diffutils/src/util.c	/^  char const *arg1;$/;"	m	struct:msg	typeref:typename:char const *	file:
arg2	diffutils/src/util.c	/^  char const *arg2;$/;"	m	struct:msg	typeref:typename:char const *	file:
arg3	diffutils/src/util.c	/^  char const *arg3;$/;"	m	struct:msg	typeref:typename:char const *	file:
arg4	diffutils/src/util.c	/^  char const *arg4;$/;"	m	struct:msg	typeref:typename:char const *	file:
attributes	DirItem.h	/^	unsigned attributes; \/**< Fileattributes for item *\/$/;"	m	struct:FileFlags	typeref:typename:unsigned
atype	FileActionScript.h	/^	ACT_TYPE atype; \/**< Action's type *\/$/;"	m	struct:FileAction	typeref:typename:ACT_TYPE
automaticPlugin	SelectUnpackerDlg.h	/^	std::unique_ptr<PluginInfo> automaticPlugin;$/;"	m	class:CSelectUnpackerDlg	typeref:typename:std::unique_ptr<PluginInfo>
b	Common/BCMenu.cpp	/^	unsigned char b;$/;"	m	struct:ssBGR	typeref:typename:unsigned char	file:
bAddCommandline	DiffWrapper.h	/^	bool bAddCommandline; \/**< Add diff-style commandline to patch file. *\/$/;"	m	struct:PATCHOPTIONS	typeref:typename:bool
bAutoOffsetLen	heksedit.h	/^		int bAutoOffsetLen; \/**< Determine offset length automatically. *\/$/;"	m	struct:IHexEditorWindow::Settings	typeref:typename:int
bBinaries	DiffWrapper.h	/^	bool bBinaries = false; \/**< Files are binaries *\/$/;"	m	struct:DIFFSTATUS	typeref:typename:bool
bBreak	stringdiffsi.h	/^		int bBreak; \/\/ Is it a isWordBreak 0 = word -1= whitespace -2 = empty 1 = breakWord$/;"	m	struct:strdiff::stringdiffs::word	typeref:typename:int
bCenterCaret	heksedit.h	/^		int bCenterCaret;$/;"	m	struct:IHexEditorWindow::Settings	typeref:typename:int
bFilterCommentsLines	CompareOptions.h	/^	bool bFilterCommentsLines; \/**< Ignore Multiline comments differences -option. *\/$/;"	m	struct:DIFFOPTIONS	typeref:typename:bool
bGDICharset	Common/ExConverter.h	/^    char bGDICharset;$/;"	m	struct:CodePageInfo	typeref:typename:char
bIgnoreBlankLines	CompareOptions.h	/^	bool bIgnoreBlankLines; \/**< Ignore blank lines -option. *\/$/;"	m	struct:DIFFOPTIONS	typeref:typename:bool
bIgnoreCase	CompareOptions.h	/^	bool bIgnoreCase; \/**< Ignore case -option. *\/$/;"	m	struct:DIFFOPTIONS	typeref:typename:bool
bIgnoreEol	CompareOptions.h	/^	bool bIgnoreEol; \/**< Ignore EOL differences -option. *\/$/;"	m	struct:DIFFOPTIONS	typeref:typename:bool
bInMainThread	Plugins.cpp	/^bool CAllThreadsScripts::bInMainThread(CScriptsOfThread * scripts)$/;"	f	class:CAllThreadsScripts	typeref:typename:bool
bInMainThread	Plugins.cpp	/^bool CScriptsOfThread::bInMainThread()$/;"	f	class:CScriptsOfThread	typeref:typename:bool
bIndentHeuristic	CompareOptions.h	/^	bool bIndentHeuristic; \/**< Ident heuristic -option *\/$/;"	m	struct:DIFFOPTIONS	typeref:typename:bool
bMissingNL	DiffWrapper.h	/^	bool bMissingNL[3] {}; \/**< file is missing EOL before EOF *\/$/;"	m	struct:DIFFSTATUS	typeref:typename:bool[3]
bPatchFileFailed	DiffWrapper.h	/^	bool bPatchFileFailed = false; \/**< Creating patch file failed *\/$/;"	m	struct:DIFFSTATUS	typeref:typename:bool
bPushed	Common/scbarg.h	/^    bool    bPushed;$/;"	m	class:CSCBButton	typeref:typename:bool
bRaised	Common/scbarg.h	/^    bool    bRaised;$/;"	m	class:CSCBButton	typeref:typename:bool
bReadOnly	heksedit.h	/^		int bReadOnly; \/**< Is editor in read-only mode? *\/$/;"	m	struct:IHexEditorWindow::Settings	typeref:typename:int
bSaveIni	heksedit.h	/^		int bSaveIni; \/**< Save INI file when required. *\/$/;"	m	struct:IHexEditorWindow::Settings	typeref:typename:int
bSelected	heksedit.h	/^		int const(bSelected);$/;"	m	struct:IHexEditorWindow::Status	typeref:typename:int const ()
bSortAscending	DirView.h	/^		const bool bSortAscending;$/;"	m	class:CDirView::CompareState	typeref:typename:const bool
bTreeMode	DirView.h	/^		const bool bTreeMode;$/;"	m	class:CDirView::CompareState	typeref:typename:const bool
baseCSCBMiniDockFrameWnd	Common/sizecbar.h	/^#define baseCSCBMiniDockFrameWnd /;"	d
baseCSizingControlBar	Common/sizecbar.h	/^#define baseCSizingControlBar /;"	d
baseCSizingControlBarCF	Common/scbarcf.h	/^#define baseCSizingControlBarCF /;"	d
baseCSizingControlBarG	Common/scbarg.h	/^#define baseCSizingControlBarG /;"	d
bdiag	diffutils/src/analyze.c	/^static DECL_TLS int *bdiag;		\/* Vector, indexed by diagonal, containing$/;"	v	typeref:typename:DECL_TLS int *	file:
begin	MergeDoc.h	/^	int begin[3]; \/\/ 0-based, eg, begin[0] is from str1$/;"	m	struct:WordDiff	typeref:typename:int[3]
begin	PathContext.h	/^inline PathContextIterator PathContext::begin() const$/;"	f	class:PathContext	typeref:typename:PathContextIterator
begin	stringdiffs.h	/^	int begin[3]; \/\/ 0-based, eg, begin[0] is from str1$/;"	m	struct:strdiff::wdiff	typeref:typename:int[3]
begin_output	diffutils/src/util.c	/^begin_output ()$/;"	f	typeref:typename:void
beginline	MergeDoc.h	/^	int beginline[3];$/;"	m	struct:WordDiff	typeref:typename:int[3]
binary_file_p	diffutils/src/io.c	/^#define binary_file_p(/;"	d	file:
bitmap	Common/BCMenu.h	/^	CImageList *bitmap;$/;"	m	class:BCMenuData	typeref:typename:CImageList *
bottom_coord	LocationView.h	/^	unsigned bottom_coord; \/**< X-coord of diff block end. *\/$/;"	m	struct:DiffBlock	typeref:typename:unsigned
bottom_line	LocationView.h	/^	unsigned bottom_line; \/**< Last line of the difference. *\/$/;"	m	struct:DiffBlock	typeref:typename:unsigned
briefly_report	diffutils/src/analyze.c	/^briefly_report (int changes, struct file_data const filevec[])$/;"	f	typeref:typename:void	file:
browseFilter	DirCmpReportDlg.cpp	/^	const char *browseFilter; \/**< File-extension filter (resource-string ID) *\/$/;"	m	struct:ReportTypeInfo	typeref:typename:const char *	file:
browseFilter	DirFilterDlg.cpp	/^	int browseFilter; \/**< File-extension filter (resource-string ID) *\/$/;"	m	struct:ReportTypeInfo	typeref:typename:int	file:
buckets	diffutils/src/io.c	/^static DECL_TLS int *buckets;$/;"	v	typeref:typename:DECL_TLS int *	file:
buffer	Common/unicoder.cpp	/^buffer::buffer(size_t initialSize)$/;"	f	class:ucr::buffer
buffer	Common/unicoder.h	/^struct buffer$/;"	s	namespace:ucr
buffer	diffutils/src/diff.h	/^    char HUGE *	    buffer;$/;"	m	struct:file_data	typeref:typename:char HUGE *
buffer_lcm	diffutils/lib/cmpbuf.c	/^buffer_lcm (size_t a, size_t b)$/;"	f	typeref:typename:size_t
buffered_chars	diffutils/src/diff.h	/^    FSIZE	    buffered_chars;$/;"	m	struct:file_data	typeref:typename:FSIZE
buffered_lines	diffutils/src/diff.h	/^    int linbuf_base, buffered_lines, valid_lines, alloc_lines;$/;"	m	struct:file_data	typeref:typename:int
bufsize	diffutils/src/diff.h	/^    FSIZE	    bufsize;$/;"	m	struct:file_data	typeref:typename:FSIZE
build_reverse_script	diffutils/src/analyze.c	/^build_reverse_script (struct file_data const filevec[])$/;"	f	typeref:struct:change *	file:
build_script	diffutils/src/analyze.c	/^build_script (struct file_data const filevec[])$/;"	f	typeref:struct:change *	file:
button	PropColors.cpp	/^		CColorButton *button;$/;"	m	struct:PropMergeColors::SetColorScheme::ColorScheme	typeref:typename:CColorButton *	file:
byteToUnicode	Common/unicoder.cpp	/^unsigned byteToUnicode(unsigned char ch)$/;"	f	namespace:ucr	typeref:typename:unsigned
byteToUnicode	Common/unicoder.cpp	/^unsigned byteToUnicode(unsigned char ch, unsigned codepage)$/;"	f	namespace:ucr	typeref:typename:unsigned
bzero	diffutils/src/system.h	/^#define bzero(/;"	d
cDlgItems	Common/LanguageSelect.cpp	/^		WORD cDlgItems;$/;"	m	struct:CLanguageSelect::RetranslateDialog::__anone6888ab20108	typeref:typename:WORD	file:
c_defGrip	Common/CMoveConstraint.cpp	/^CMoveConstraint::EGRIP CMoveConstraint::c_defGrip = SG_NORMAL;$/;"	m	class:prdlg::CMoveConstraint	typeref:typename:CMoveConstraint::EGRIP
c_defGrip	Common/CMoveConstraint.h	/^	static EGRIP c_defGrip; \/\/ class-wide default sizing grip setting$/;"	m	class:prdlg::CMoveConstraint	typeref:typename:EGRIP
capacity	Common/unicoder.h	/^	size_t capacity; \/**< Buffer's size in bytes. *\/$/;"	m	struct:ucr::buffer	typeref:typename:size_t
caseMatch	stringdiffs.cpp	/^stringdiffs::caseMatch(TCHAR ch1, TCHAR ch2) const$/;"	f	class:strdiff::stringdiffs	typeref:typename:bool
case_sensitive_	stringdiffs.cpp	/^	bool case_sensitive_;$/;"	m	struct:strdiff::Comp02Functor	typeref:typename:bool	file:
cbImage	markdown.h	/^	size_t cbImage;$/;"	m	class:CMarkdown::FileImage	typeref:typename:size_t
cf	Common/MyCom.h	/^	const CLIPFORMAT cf;$/;"	m	class:CMyClipFormat	typeref:typename:const CLIPFORMAT
change	diffutils/src/diff.h	/^struct change$/;"	s
change_letter	diffutils/src/util.c	/^change_letter (int inserts, int deletes)$/;"	f	typeref:typename:int
changed_flag	diffutils/src/diff.h	/^    char	   *changed_flag;$/;"	m	struct:file_data	typeref:typename:char *
characters	ProjectFile.cpp	/^	void characters(const XMLChar ch[], int start, int length)$/;"	f	class:ProjectFileHandler	typeref:typename:void	file:
charset	charsets.c	/^	const char *charset;$/;"	m	struct:_charsetInfo	typeref:typename:const char *	file:
charsetInfo	charsets.c	/^} const charsetInfo[] =$/;"	v	typeref:struct:_charsetInfo const[]
charsets_cleanup	charsets.c	/^void charsets_cleanup(void)$/;"	f	typeref:typename:void
charsets_init	charsets.c	/^void charsets_init(void)$/;"	f	typeref:typename:void
checkFlagsFromReality	GhostTextBuffer.cpp	/^void CGhostTextBuffer::checkFlagsFromReality() const$/;"	f	class:CGhostTextBuffer	typeref:typename:void
children	DiffItem.h	/^	DIFFITEM *children;				\/**< Link to first child of this item *\/$/;"	m	class:DIFFITEM	typeref:typename:DIFFITEM *
cleanup_file_buffers	diffutils/src/analyze.c	/^void cleanup_file_buffers(struct file_data fd[])$/;"	f	typeref:typename:void
clear	Common/UniFile.h	/^		void clear() { ncrs = nlfs = ncrlfs = nzeros = nlosses = 0; }$/;"	f	struct:UniFile::txtstats	typeref:typename:void
clear	FileTextStats.h	/^	void clear() { ncrs = nlfs = ncrlfs = nzeros = 0; }$/;"	f	struct:FileTextStats	typeref:typename:void
clearCookie	Common/ExConverter.cpp	/^	void clearCookie()$/;"	f	class:CExconverterMLang	typeref:typename:void	file:
clrBackground	LocationView.cpp	/^const COLORREF clrBackground = RGB(0xe4, 0xe4, 0xf4);$/;"	v	typeref:typename:const COLORREF
clrDiff	OptionsDiffColors.h	/^	COLORREF	clrDiff;			\/**< Difference color *\/$/;"	m	struct:COLORSETTINGS	typeref:typename:COLORREF
clrDiffDeleted	OptionsDiffColors.h	/^	COLORREF	clrDiffDeleted;		\/**< Difference deleted color *\/$/;"	m	struct:COLORSETTINGS	typeref:typename:COLORREF
clrDiffText	OptionsDiffColors.h	/^	COLORREF	clrDiffText;		\/**< Difference text color *\/$/;"	m	struct:COLORSETTINGS	typeref:typename:COLORREF
clrDirItemDiff	OptionsDirColors.h	/^	COLORREF	clrDirItemDiff;				\/**< Item diff background color *\/$/;"	m	struct:DIRCOLORSETTINGS	typeref:typename:COLORREF
clrDirItemDiffText	OptionsDirColors.h	/^	COLORREF	clrDirItemDiffText;			\/**< Item diff text color *\/$/;"	m	struct:DIRCOLORSETTINGS	typeref:typename:COLORREF
clrDirItemEqual	OptionsDirColors.h	/^	COLORREF	clrDirItemEqual;			\/**< Item equal background color *\/$/;"	m	struct:DIRCOLORSETTINGS	typeref:typename:COLORREF
clrDirItemEqualText	OptionsDirColors.h	/^	COLORREF	clrDirItemEqualText;		\/**< Item equal text color *\/$/;"	m	struct:DIRCOLORSETTINGS	typeref:typename:COLORREF
clrDirItemFiltered	OptionsDirColors.h	/^	COLORREF	clrDirItemFiltered;			\/**< Item filtered background color *\/$/;"	m	struct:DIRCOLORSETTINGS	typeref:typename:COLORREF
clrDirItemFilteredText	OptionsDirColors.h	/^	COLORREF	clrDirItemFilteredText;		\/**< Item filtered text color *\/$/;"	m	struct:DIRCOLORSETTINGS	typeref:typename:COLORREF
clrDirItemNotExistAll	OptionsDirColors.h	/^	COLORREF	clrDirItemNotExistAll;		\/**< Item not-exist-all background color *\/$/;"	m	struct:DIRCOLORSETTINGS	typeref:typename:COLORREF
clrDirItemNotExistAllText	OptionsDirColors.h	/^	COLORREF	clrDirItemNotExistAllText;	\/**< Item not-exist-all text color *\/$/;"	m	struct:DIRCOLORSETTINGS	typeref:typename:COLORREF
clrMoved	OptionsDiffColors.h	/^	COLORREF	clrMoved;			\/**< Moved block color *\/$/;"	m	struct:COLORSETTINGS	typeref:typename:COLORREF
clrMovedDeleted	OptionsDiffColors.h	/^	COLORREF	clrMovedDeleted;	\/**< Moved block deleted color *\/$/;"	m	struct:COLORSETTINGS	typeref:typename:COLORREF
clrMovedText	OptionsDiffColors.h	/^	COLORREF	clrMovedText;		\/**< Moved block text color *\/$/;"	m	struct:COLORSETTINGS	typeref:typename:COLORREF
clrSNP	OptionsDiffColors.h	/^	COLORREF	clrSNP;				\/**< SNP block color *\/$/;"	m	struct:COLORSETTINGS	typeref:typename:COLORREF
clrSNPDeleted	OptionsDiffColors.h	/^	COLORREF	clrSNPDeleted;		\/**< SNP block deleted color *\/$/;"	m	struct:COLORSETTINGS	typeref:typename:COLORREF
clrSNPText	OptionsDiffColors.h	/^	COLORREF	clrSNPText;			\/**< SNP block text color *\/$/;"	m	struct:COLORSETTINGS	typeref:typename:COLORREF
clrSelDiff	OptionsDiffColors.h	/^	COLORREF	clrSelDiff;			\/**< Selected difference color *\/$/;"	m	struct:COLORSETTINGS	typeref:typename:COLORREF
clrSelDiffDeleted	OptionsDiffColors.h	/^	COLORREF	clrSelDiffDeleted;	\/**< Selected difference deleted color *\/$/;"	m	struct:COLORSETTINGS	typeref:typename:COLORREF
clrSelDiffText	OptionsDiffColors.h	/^	COLORREF	clrSelDiffText;		\/**< Selected difference text color *\/$/;"	m	struct:COLORSETTINGS	typeref:typename:COLORREF
clrSelMoved	OptionsDiffColors.h	/^	COLORREF	clrSelMoved;		\/**< Selected moved block color *\/$/;"	m	struct:COLORSETTINGS	typeref:typename:COLORREF
clrSelMovedDeleted	OptionsDiffColors.h	/^	COLORREF	clrSelMovedDeleted;	\/**< Selected moved block deleted color *\/$/;"	m	struct:COLORSETTINGS	typeref:typename:COLORREF
clrSelMovedText	OptionsDiffColors.h	/^	COLORREF	clrSelMovedText;	\/**< Selected moved block text color *\/$/;"	m	struct:COLORSETTINGS	typeref:typename:COLORREF
clrSelSNP	OptionsDiffColors.h	/^	COLORREF	clrSelSNP;			\/**< Selected SNP block color *\/$/;"	m	struct:COLORSETTINGS	typeref:typename:COLORREF
clrSelSNPDeleted	OptionsDiffColors.h	/^	COLORREF	clrSelSNPDeleted;	\/**< Selected SNP block deleted color *\/$/;"	m	struct:COLORSETTINGS	typeref:typename:COLORREF
clrSelSNPText	OptionsDiffColors.h	/^	COLORREF	clrSelSNPText;		\/**< Selected SNP block text color *\/$/;"	m	struct:COLORSETTINGS	typeref:typename:COLORREF
clrSelWordDiff	OptionsDiffColors.h	/^	COLORREF	clrSelWordDiff;		\/**< Selected word difference color *\/$/;"	m	struct:COLORSETTINGS	typeref:typename:COLORREF
clrSelWordDiffDeleted	OptionsDiffColors.h	/^	COLORREF	clrSelWordDiffDeleted;	\/**< Selected word difference deleted color *\/$/;"	m	struct:COLORSETTINGS	typeref:typename:COLORREF
clrSelWordDiffText	OptionsDiffColors.h	/^	COLORREF	clrSelWordDiffText;	\/**< Selected word difference text color *\/$/;"	m	struct:COLORSETTINGS	typeref:typename:COLORREF
clrTrivial	OptionsDiffColors.h	/^	COLORREF	clrTrivial;			\/**< Ignored difference color *\/$/;"	m	struct:COLORSETTINGS	typeref:typename:COLORREF
clrTrivialDeleted	OptionsDiffColors.h	/^	COLORREF	clrTrivialDeleted;	\/**< Ignored difference deleted color *\/$/;"	m	struct:COLORSETTINGS	typeref:typename:COLORREF
clrTrivialText	OptionsDiffColors.h	/^	COLORREF	clrTrivialText;		\/**< Ignored difference text color *\/$/;"	m	struct:COLORSETTINGS	typeref:typename:COLORREF
clrWordDiff	OptionsDiffColors.h	/^	COLORREF	clrWordDiff;		\/**< Word difference color *\/$/;"	m	struct:COLORSETTINGS	typeref:typename:COLORREF
clrWordDiffDeleted	OptionsDiffColors.h	/^	COLORREF	clrWordDiffDeleted;	\/**< Word differenceDeleted color *\/$/;"	m	struct:COLORSETTINGS	typeref:typename:COLORREF
clrWordDiffText	OptionsDiffColors.h	/^	COLORREF	clrWordDiffText;	\/**< Word difference text color *\/$/;"	m	struct:COLORSETTINGS	typeref:typename:COLORREF
cmp64	DirViewColItems.cpp	/^static int cmp64(int64_t i1, int64_t i2)$/;"	f	typeref:typename:int	file:
cmpdiffcode	DirViewColItems.cpp	/^static int cmpdiffcode(unsigned diffcode1, unsigned diffcode2)$/;"	f	typeref:typename:int	file:
cmpfloat	DirViewColItems.cpp	/^static int cmpfloat(double v1, double v2)$/;"	f	typeref:typename:int	file:
cmpu64	DirViewColItems.cpp	/^static int cmpu64(uint64_t i1, uint64_t i2)$/;"	f	typeref:typename:int	file:
codepage	Common/ExConverter.h	/^	int codepage;$/;"	m	struct:CodePageInfo	typeref:typename:int
codepage	charsets.c	/^	unsigned codepage;$/;"	m	struct:_charsetInfo	typeref:typename:unsigned	file:
collate	DirTravel.cpp	/^static inline int collate(const String &str1, const String &str2)$/;"	f	typeref:typename:int	file:
collate_ignore_case	DirTravel.cpp	/^static inline int collate_ignore_case(const String &str1, const String &str2)$/;"	f	typeref:typename:int	file:
collstr	DirTravel.cpp	/^int collstr(const String & s1, const String & s2, bool casesensitive)$/;"	f	typeref:typename:int
color	PropColors.cpp	/^		COLORREF color;$/;"	m	struct:PropMergeColors::SetColorScheme::ColorScheme	typeref:typename:COLORREF	file:
column	DirColsDlg.h	/^		column(const String & colName, const String & dsc, int log, int phy)$/;"	f	struct:CDirColsDlg::column
column	DirColsDlg.h	/^	struct column$/;"	s	class:CDirColsDlg
compare_files	CompareEngines/BinaryCompare.cpp	/^static int compare_files(const String& file1, const String& file2)$/;"	f	namespace:CompareEngines	typeref:typename:int	file:
compare_nocase	Common/UnicodeString.cpp	/^int compare_nocase(const String &str1, const String &str2)$/;"	f	namespace:strutils	typeref:typename:int
compareseq	diffutils/src/analyze.c	/^compareseq (int xoff, int xlim, int yoff, int ylim, int minimal)$/;"	f	typeref:typename:void	file:
concat	diffutils/src/util.c	/^concat (char const *s1, char const *s2, char const *s3)$/;"	f	typeref:typename:char *
const	heksedit.h	/^#define const(/;"	d
const_iterator	PathContext.h	/^	typedef PathContextIterator const_iterator;$/;"	t	class:PathContext	typeref:typename:PathContextIterator
context	DiffThread.h	/^	CDiffContext * context; \/**< Compare context. *\/$/;"	m	struct:DiffFuncStruct	typeref:typename:CDiffContext *
context	FileActionScript.h	/^	int context;$/;"	m	struct:FileActionItem	typeref:typename:int
context	diffutils/src/diff.h	/^EXTERN int      context;$/;"	v	typeref:typename:EXTERN int
convert	Common/ExConverter.cpp	/^	bool convert(int srcCodepage, int dstCodepage, const unsigned char * src, size_t * srcbytes, un/;"	f	class:CExconverterMLang	typeref:typename:bool	file:
convert	Common/unicoder.cpp	/^bool convert(UNICODESET unicoding1, int codepage1, const unsigned char * src, size_t srcbytes, U/;"	f	namespace:ucr	typeref:typename:bool
convert	Common/unicoder.cpp	/^bool convert(int codepage1, const unsigned char * src, int srcbytes, int codepage2, buffer * des/;"	f	namespace:ucr	typeref:typename:bool
convert	Common/unicoder.cpp	/^static void convert(const std::wstring& from, unsigned codepage, std::string& to)$/;"	f	namespace:ucr	typeref:typename:void	file:
convertFromUnicode	Common/ExConverter.cpp	/^	bool convertFromUnicode(int dstCodepage, const wchar_t * src, size_t * srcchars, char * dest, s/;"	f	class:CExconverterMLang	typeref:typename:bool	file:
convertToUnicode	Common/ExConverter.cpp	/^	bool convertToUnicode(int srcCodepage, const char * src, size_t * srcbytes, wchar_t * dest, siz/;"	f	class:CExconverterMLang	typeref:typename:bool	file:
convertTtoUTF8	Common/unicoder.cpp	/^unsigned char *convertTtoUTF8(buffer * buf, const TCHAR *src, int srcbytes\/* = -1*\/)$/;"	f	namespace:ucr	typeref:typename:unsigned char *
convertTtoUTF8	Common/unicoder.cpp	/^unsigned char *convertTtoUTF8(const TCHAR *src, int srcbytes\/* = -1*\/)$/;"	f	namespace:ucr	typeref:typename:unsigned char *
convertUTF8toT	Common/unicoder.cpp	/^TCHAR *convertUTF8toT(buffer * buf, const char *src, int srcbytes\/* = -1*\/)$/;"	f	namespace:ucr	typeref:typename:TCHAR *
convertUTF8toT	Common/unicoder.cpp	/^TCHAR *convertUTF8toT(const char *src, int srcbytes\/* = -1*\/)$/;"	f	namespace:ucr	typeref:typename:TCHAR *
convert_resp	MergeApp.cpp	/^	int convert_resp(int resp)$/;"	f	namespace:AppMsgBox::detail	typeref:typename:int
convert_to_winflags	MergeApp.cpp	/^	int convert_to_winflags(int flags)$/;"	f	namespace:AppMsgBox::detail	typeref:typename:int
copyTo	TFile.h	/^	void copyTo(const String& path) const { File::copyTo(ucr::toUTF8(path)); }$/;"	f	class:TFile	typeref:typename:void
copyright	MergeApp.h	/^	String copyright;$/;"	m	struct:AboutInfo	typeref:typename:String
count	Common/lwdisp.c	/^	int count;$/;"	m	struct:LWDispMap	typeref:typename:int	file:
count	DirActions.h	/^	int count;$/;"	m	struct:Counts	typeref:typename:int
count	MovedBlocks.cpp	/^	size_t count() const { return m_map.size(); }$/;"	f	class:IntSet	typeref:typename:size_t	file:
count	StdAfx.h	/^			int count = 0;$/;"	m	struct:CWinMergeProfile::~CWinMergeProfile::stat	typeref:typename:int
count_crlfs	diffutils/src/diff.h	/^    int count_crlfs, count_crs, count_lfs, count_zeros;$/;"	m	struct:file_data	typeref:typename:int
count_crs	diffutils/src/diff.h	/^    int count_crlfs, count_crs, count_lfs, count_zeros;$/;"	m	struct:file_data	typeref:typename:int
count_lfs	diffutils/src/diff.h	/^    int count_crlfs, count_crs, count_lfs, count_zeros;$/;"	m	struct:file_data	typeref:typename:int
count_zeros	diffutils/src/diff.h	/^    int count_crlfs, count_crs, count_lfs, count_zeros;$/;"	m	struct:file_data	typeref:typename:int
createPrediffersSubmenu	MergeEditView.cpp	/^HMENU CMergeEditView::createPrediffersSubmenu(HMENU hMenu)$/;"	f	class:CMergeEditView	typeref:typename:HMENU
createScriptsSubmenu	MergeEditView.cpp	/^HMENU CMergeEditView::createScriptsSubmenu(HMENU hMenu)$/;"	f	class:CMergeEditView	typeref:typename:HMENU
crlfs	MergeDoc.cpp	/^static LPCTSTR crlfs[] =$/;"	v	typeref:typename:LPCTSTR[]	file:
ctime	DirItem.h	/^	Poco::Timestamp ctime; \/**< time of creation *\/$/;"	m	struct:DirItem	typeref:typename:Poco::Timestamp
ctlID	CompareStatisticsDlg.cpp	/^	static const struct { int ctlID; CompareStats::RESULT resultType; bool isDir; } ctlResultTypeMa/;"	m	struct:BEGIN_MESSAGE_MAP::__anonc685a11f0208	typeref:typename:int	file:
ctlID	CompareStatisticsDlg.cpp	/^	static const struct { int ctlID; int iconID; } ctlIconMap[] =$/;"	m	struct:BEGIN_MESSAGE_MAP::__anonc685a11f0308	typeref:typename:int	file:
curUndo	MergeDoc.h	/^	std::vector<int>::iterator curUndo;$/;"	m	class:CMergeDoc	typeref:typename:std::vector<int>::iterator
curUndoGroup	DiffTextBuffer.cpp	/^bool CDiffTextBuffer::curUndoGroup()$/;"	f	class:CDiffTextBuffer	typeref:typename:bool
current_depth	diffutils/src/util.c	/^static int current_depth;$/;"	v	typeref:typename:int	file:
current_name0	diffutils/src/util.c	/^static char const *current_name0;$/;"	v	typeref:typename:char const *	file:
current_name1	diffutils/src/util.c	/^static char const *current_name1;$/;"	v	typeref:typename:char const *	file:
customFiltersMap	Plugins.cpp	/^static std::unordered_map<String, String> customFiltersMap;$/;"	v	typeref:typename:std::unordered_map<String,String>	file:
customFlags	DiffItem.h	/^	unsigned customFlags;			\/**< ViewCustomFlags flags *\/$/;"	m	class:DIFFITEM	typeref:typename:unsigned
cx	Common/LanguageSelect.cpp	/^		short cx;$/;"	m	struct:CLanguageSelect::RetranslateDialog::__anone6888ab20108	typeref:typename:short	file:
cx	Common/LanguageSelect.cpp	/^		short cx;$/;"	m	struct:CLanguageSelect::RetranslateDialog::__anone6888ab20208	typeref:typename:short	file:
cy	Common/LanguageSelect.cpp	/^		short cy;$/;"	m	struct:CLanguageSelect::RetranslateDialog::__anone6888ab20108	typeref:typename:short	file:
cy	Common/LanguageSelect.cpp	/^		short cy;$/;"	m	struct:CLanguageSelect::RetranslateDialog::__anone6888ab20208	typeref:typename:short	file:
data	DirScan.cpp	/^	DIFFITEM& data() const { return m_di; }$/;"	f	class:WorkCompletedNotification	typeref:typename:DIFFITEM &	file:
data	DirScan.cpp	/^	DIFFITEM& data() const { return m_di; }$/;"	f	class:WorkNotification	typeref:typename:DIFFITEM &	file:
dbegin	DiffList.h	/^	int dbegin = 0;              \/**< Synchronised (ghost lines added) first diff line in file1,2,/;"	m	struct:DIFFRANGE	typeref:typename:int
dblBoxSize	Common/scbarg.h	/^    const double  dblBoxSize = 8.25;$/;"	m	class:CSCBButton	typeref:typename:const double
dealloc	Common/unicoder.cpp	/^void dealloc(void *ptr)$/;"	f	namespace:ucr	typeref:typename:void
debug_script	diffutils/src/util.c	/^debug_script (struct change *sp)$/;"	f	typeref:typename:void
debugoutput	stringdiffs.cpp	/^stringdiffs::debugoutput()$/;"	f	class:strdiff::stringdiffs	typeref:typename:void
defSortUp	DirViewColItems.h	/^	bool defSortUp; \/**< Does column start with ascending sort (most do) *\/$/;"	m	struct:DirColInfo	typeref:typename:bool
default_include	FileFilter.h	/^	bool default_include;	\/**< If true, filter rules are inclusive by default *\/$/;"	m	struct:FileFilter	typeref:typename:bool
deleted	diffutils/src/diff.h	/^  int deleted;			\/* # lines of file 0 changed here.  *\/$/;"	m	struct:change	typeref:typename:int
delta	WinIMergeLib.h	/^		int delta;$/;"	m	struct:IImgMergeWindow::Event	typeref:typename:int
demoGuessEncoding_html	codepage_detect.cpp	/^static unsigned demoGuessEncoding_html(const char *src, size_t len, int defcodepage)$/;"	f	typeref:typename:unsigned	file:
demoGuessEncoding_rc	codepage_detect.cpp	/^static unsigned demoGuessEncoding_rc(const char *src, size_t len, int defcodepage)$/;"	f	typeref:typename:unsigned	file:
demoGuessEncoding_xml	codepage_detect.cpp	/^static unsigned demoGuessEncoding_xml(const char *src, size_t len, int defcodepage)$/;"	f	typeref:typename:unsigned	file:
dend	DiffList.h	/^	int dend = 0;	             \/**< Synchronised (ghost lines added) last diff line in file1,2,3 */;"	m	struct:DIFFRANGE	typeref:typename:int
desc	Common/ExConverter.h	/^	String desc;$/;"	m	struct:CodePageInfo	typeref:typename:String
desc	Common/UniFile.h	/^		String desc; \/\/ valid if apiname empty$/;"	m	struct:UniFile::UniError	typeref:typename:String
desc	DirColsDlg.h	/^		String desc; \/**< Description for column *\/$/;"	m	struct:CDirColsDlg::column	typeref:typename:String
desc	JumpList.h	/^		String desc;$/;"	m	struct:JumpList::Item	typeref:typename:String
desc	diffutils/src/diff.h	/^    int             desc;	\/* File descriptor  *\/$/;"	m	struct:file_data	typeref:typename:int
description	FileFilter.h	/^	String description;	\/**< Filter description text *\/$/;"	m	struct:FileFilter	typeref:typename:String
description	FileFilterHelper.h	/^	String description; 	\/**< Description of filter (shown in UI) *\/$/;"	m	struct:FileFilterInfo	typeref:typename:String
dest	FileActionScript.h	/^	String dest; \/**< Destination action *\/$/;"	m	struct:FileAction	typeref:typename:String
detail	Common/UnicodeString.h	/^namespace detail$/;"	n	namespace:strutils
detail	MergeApp.cpp	/^namespace detail$/;"	n	namespace:AppMsgBox	file:
detectInputCodepage	Common/ExConverter.cpp	/^	int detectInputCodepage(int autodetectType, int defcodepage, const char *data, size_t size)$/;"	f	class:CExconverterMLang	typeref:typename:int	file:
developers	MergeApp.h	/^	String developers;$/;"	m	struct:AboutInfo	typeref:typename:String
diag	diffutils/src/analyze.c	/^diag (int xoff, int xlim, int yoff, int ylim, int minimal, struct partition *part)$/;"	f	typeref:typename:int	file:
diffFileInfo	DiffItem.h	/^	DiffFileInfo diffFileInfo[3];	\/**< Fileinfo for left\/middle\/right file. *\/$/;"	m	class:DIFFITEM	typeref:typename:DiffFileInfo[3]
diffIndex	WinIMergeLib.h	/^		int diffIndex;$/;"	m	struct:IImgMergeWindow::Event	typeref:typename:int
diff_2_files	diffutils/src/analyze.c	/^struct change * diff_2_files (struct file_data filevec[], int depth, int * bin_status,$/;"	f	typeref:struct:change *
diff_2_files_xdiff	xdiff_gnudiff_compat.cpp	/^struct change * diff_2_files_xdiff (struct file_data filevec[], int bMoved_blocks_flag, unsigned/;"	f	typeref:struct:change *
diff_index	LocationView.h	/^	unsigned diff_index; \/**< Index of difference in the original diff list. *\/$/;"	m	struct:DiffBlock	typeref:typename:unsigned
diffcode	DiffItem.h	/^	DIFFCODE diffcode;				\/**< Compare result *\/$/;"	m	class:DIFFITEM	typeref:typename:DIFFCODE
diffcode	DiffItem.h	/^	unsigned diffcode;$/;"	m	struct:DIFFCODE	typeref:typename:unsigned
diffutils_compare_files	CompareEngines/Wrap_DiffUtils.cpp	/^int DiffUtils::diffutils_compare_files()$/;"	f	class:CompareEngines::DiffUtils	typeref:typename:int
dir_file_pathname	diffutils/src/util.c	/^dir_file_pathname (char const *dir, char const *file)$/;"	f	typeref:typename:char *
dir_p	diffutils/src/diff.h	/^    int             dir_p;	\/* nonzero if file is a directory  *\/$/;"	m	struct:file_data	typeref:typename:int
dir_start_file	diffutils/src/diff.h	/^EXTERN char	*dir_start_file;$/;"	v	typeref:typename:EXTERN char *
dirfilters	FileFilter.h	/^	std::vector<FileFilterElementPtr> dirfilters;  \/**< List of rules for directories *\/$/;"	m	struct:FileFilter	typeref:typename:std::vector<FileFilterElementPtr>
dirflag	FileActionScript.h	/^	bool dirflag; \/**< Is it directory? (`true` means directory) *\/$/;"	m	struct:FileAction	typeref:typename:bool
discard_confusing_lines	diffutils/src/analyze.c	/^discard_confusing_lines (struct file_data filevec[])$/;"	f	typeref:typename:void	file:
dispid	Common/MyCom.h	/^	DISPID dispid;$/;"	m	class:CMyDispId	typeref:typename:DISPID
dlbreak	stringdiffsi.h	/^	dlbreak, $/;"	e	enum:strdiff::__anon8d10c7270103
dlg	TrDialogs.h	/^	T *dlg() { return static_cast<T *>(this); }$/;"	f	class:DlgUtils	typeref:typename:T *
dlgVer	Common/LanguageSelect.cpp	/^		WORD dlgVer;$/;"	m	struct:CLanguageSelect::RetranslateDialog::__anone6888ab20108	typeref:typename:WORD	file:
dlinsert	stringdiffsi.h	/^	dlinsert,$/;"	e	enum:strdiff::__anon8d10c7270103
dlspace	stringdiffsi.h	/^	dlspace,$/;"	e	enum:strdiff::__anon8d10c7270103
dlword	stringdiffsi.h	/^	dlword = 0,$/;"	e	enum:strdiff::__anon8d10c7270103
dup2	diffutils/src/system.h	/^#define dup2(/;"	d
dwBuildNumber	dllpstub.h	/^	DWORD dwBuildNumber;					\/\/ Build number$/;"	m	struct:DLLPSTUB	typeref:typename:DWORD
dwItemData	Common/PropertyPageHost.h	/^	DWORD dwItemData;$/;"	m	struct:PAGEITEM	typeref:typename:DWORD
dwMajorVersion	dllpstub.h	/^	DWORD dwMajorVersion;					\/\/ Major version$/;"	m	struct:DLLPSTUB	typeref:typename:DWORD
dwMinorVersion	dllpstub.h	/^	DWORD dwMinorVersion;					\/\/ Minor version$/;"	m	struct:DLLPSTUB	typeref:typename:DWORD
dwPadding	dllpstub.h	/^	DWORD dwPadding;						\/\/ Pad to 64 bit boundary$/;"	m	struct:DLLPSTUB	typeref:typename:DWORD
e	Common/OptionsMgr.h	/^		for (const auto& e : m_optionsMap)$/;"	m	class:COptionsMgr::GetNameList	typeref:typename:const auto &
eContext	DirView.h	/^typedef enum { eMain, eContext } eMenuType;$/;"	e	enum:__anone1db02f50103
eMain	DirView.h	/^typedef enum { eMain, eContext } eMenuType;$/;"	e	enum:__anone1db02f50103
eMenuType	DirView.h	/^typedef enum { eMain, eContext } eMenuType;$/;"	t	typeref:enum:__anone1db02f50103
emptyitem	DiffItem.cpp	/^DIFFITEM DIFFITEM::emptyitem;$/;"	m	class:DIFFITEM	typeref:typename:DIFFITEM
emptyitem	DiffItem.h	/^	static DIFFITEM emptyitem;		\/**< Singleton to represent a DIFFITEM that doesn't have any data /;"	m	class:DIFFITEM	typeref:typename:DIFFITEM
enabled	LineFiltersList.h	/^	bool enabled; \/**< Is filter enabled? *\/$/;"	m	struct:LineFilterItem	typeref:typename:bool
encoding	DiffFileInfo.h	/^	FileTextEncoding encoding; \/**< unicode or codepage info *\/$/;"	m	struct:DiffFileInfo	typeref:typename:FileTextEncoding
encoding	FileLocation.h	/^	FileTextEncoding encoding; \/**< Encoding info for the file. *\/$/;"	m	struct:FileLocation	typeref:typename:FileTextEncoding
end	MergeDoc.h	/^	int end[3]; \/\/ 0-based, eg, end[1] is from str2$/;"	m	struct:WordDiff	typeref:typename:int[3]
end	PathContext.h	/^inline PathContextIterator PathContext::end() const$/;"	f	class:PathContext	typeref:typename:PathContextIterator
end	stringdiffs.h	/^	int end[3]; \/\/ 0-based, eg, end[1] is from str2$/;"	m	struct:strdiff::wdiff	typeref:typename:int[3]
end	stringdiffsi.h	/^		int end;   \/\/ index of last character of word in original string$/;"	m	struct:strdiff::stringdiffs::word	typeref:typename:int
endDocument	ProjectFile.cpp	/^	void endDocument() {}$/;"	f	class:ProjectFileHandler	typeref:typename:void	file:
endElement	ProjectFile.cpp	/^	void endElement(const XMLString& uri, const XMLString& localName, const XMLString& qname)$/;"	f	class:ProjectFileHandler	typeref:typename:void	file:
endPrefixMapping	ProjectFile.cpp	/^	void endPrefixMapping(const XMLString& prefix) {}$/;"	f	class:ProjectFileHandler	typeref:typename:void	file:
endline	MergeDoc.h	/^	int endline[3];$/;"	m	struct:WordDiff	typeref:typename:int[3]
entire_new_file_flag	diffutils/src/diff.h	/^EXTERN int	entire_new_file_flag;$/;"	v	typeref:typename:EXTERN int
enumCodePages	Common/ExConverter.cpp	/^	std::vector<CodePageInfo> enumCodePages()$/;"	f	class:CExconverterMLang	typeref:typename:std::vector<CodePageInfo>	file:
env	Environment.cpp	/^namespace env$/;"	n	file:
env	Environment.h	/^namespace env$/;"	n
equiv_max	diffutils/src/diff.h	/^    int equiv_max;$/;"	m	struct:file_data	typeref:typename:int
equivclass	diffutils/src/io.c	/^struct equivclass$/;"	s	file:
equivs	diffutils/src/diff.h	/^    int		   *equivs;$/;"	m	struct:file_data	typeref:typename:int *
equivs	diffutils/src/io.c	/^static DECL_TLS struct equivclass HUGE *equivs;$/;"	v	typeref:struct:equivclass HUGE *	file:
equivs_alloc	diffutils/src/io.c	/^static DECL_TLS int equivs_alloc;$/;"	v	typeref:typename:DECL_TLS int	file:
equivs_index	diffutils/src/io.c	/^static DECL_TLS int equivs_index;$/;"	v	typeref:typename:DECL_TLS int	file:
error	MergeApp.cpp	/^int error(const String& msg, int type)$/;"	f	namespace:AppMsgBox	typeref:typename:int
error	diffutils/src/util.c	/^error (char const *format, char const *arg, char const *arg1)$/;"	f	typeref:typename:void
eventType	WinIMergeLib.h	/^		EVENT_TYPE eventType;$/;"	m	struct:IImgMergeWindow::Event	typeref:typename:EVENT_TYPE
exStyle	Common/LanguageSelect.cpp	/^		DWORD exStyle;$/;"	m	struct:CLanguageSelect::RetranslateDialog::__anone6888ab20108	typeref:typename:DWORD	file:
exStyle	Common/LanguageSelect.cpp	/^		DWORD exStyle;$/;"	m	struct:CLanguageSelect::RetranslateDialog::__anone6888ab20208	typeref:typename:DWORD	file:
existAll	DiffItem.h	/^	bool existAll() const$/;"	f	struct:DIFFCODE	typeref:typename:bool
exists	DiffItem.h	/^	bool exists(int nIndex) const$/;"	f	struct:DIFFCODE	typeref:typename:bool
existsFirst	DiffItem.h	/^	bool existsFirst() const { return !!(diffcode & DIFFCODE::FIRST); }$/;"	f	struct:DIFFCODE	typeref:typename:bool
existsSecond	DiffItem.h	/^	bool existsSecond() const { return !!(diffcode & DIFFCODE::SECOND); }$/;"	f	struct:DIFFCODE	typeref:typename:bool
existsThird	DiffItem.h	/^	bool existsThird() const { return !!(diffcode & DIFFCODE::THIRD); }$/;"	f	struct:DIFFCODE	typeref:typename:bool
extern	charsets.h	/^#define extern /;"	d
fTimerWaitingForIdle	MergeEditView.h	/^	unsigned fTimerWaitingForIdle;$/;"	m	class:CMergeEditView	typeref:typename:unsigned
f_RegValueEnabled	PropRegistry.cpp	/^static LPCTSTR f_RegValueEnabled = _T("ContextMenuEnabled");$/;"	v	typeref:typename:LPCTSTR	file:
f_RegValueEnabled	PropShell.cpp	/^static LPCTSTR f_RegValueEnabled = _T("ContextMenuEnabled");$/;"	v	typeref:typename:LPCTSTR	file:
f_RegValuePath	PropRegistry.cpp	/^static LPCTSTR f_RegValuePath = _T("Executable");$/;"	v	typeref:typename:LPCTSTR	file:
f_RegValuePath	PropShell.cpp	/^static LPCTSTR f_RegValuePath = _T("Executable");$/;"	v	typeref:typename:LPCTSTR	file:
f_cols	DirViewColItems.cpp	/^static DirColInfo f_cols[] =$/;"	v	typeref:typename:DirColInfo[]	file:
f_cols3	DirViewColItems.cpp	/^static DirColInfo f_cols3[] =$/;"	v	typeref:typename:DirColInfo[]	file:
f_nDefaultCodepage	Common/unicoder.cpp	/^static int f_nDefaultCodepage = GetACP();$/;"	v	namespace:ucr	typeref:typename:int	file:
f_types	DirCmpReportDlg.cpp	/^static ReportTypeInfo f_types[] = {$/;"	v	typeref:typename:ReportTypeInfo[]	file:
f_types	DirFilterDlg.cpp	/^static ReportTypeInfo f_types[] = {$/;"	v	typeref:typename:ReportTypeInfo[]	file:
f_wincp_prefixes	codepage_detect.cpp	/^static const char *f_wincp_prefixes[] =$/;"	v	typeref:typename:const char * []	file:
fatal	diffutils/src/util.c	/^fatal (char const *m)$/;"	f	typeref:typename:void
fdiag	diffutils/src/analyze.c	/^static DECL_TLS int *fdiag;		\/* Vector, indexed by diagonal, containing$/;"	v	typeref:typename:DECL_TLS int *	file:
file	diffutils/src/ifdef.c	/^  struct file_data const *file;$/;"	m	struct:group	typeref:struct:file_data const *	file:
file_data	diffutils/src/diff.h	/^struct file_data {$/;"	s
file_label	diffutils/src/diff.h	/^EXTERN char *file_label[2];$/;"	v	typeref:typename:EXTERN char * [2]
filefilters	FileFilter.h	/^	std::vector<FileFilterElementPtr> filefilters; \/**< List of rules for files *\/$/;"	m	struct:FileFilter	typeref:typename:std::vector<FileFilterElementPtr>
fileinfo	FileFilterHelper.h	/^	DirItem fileinfo;		\/**< For tracking if file has been modified *\/$/;"	m	struct:FileFilterInfo	typeref:typename:DirItem
filename	Common/ShellContextMenu.h	/^		String filename; \/**< file name *\/$/;"	m	struct:CShellContextMenu::FileEntry	typeref:typename:String
filename	DirItem.h	/^	boost::flyweight<String> filename; \/**< filename for this item *\/$/;"	m	struct:DirItem	typeref:typename:boost::flyweight<String>
filepath	FileLocation.h	/^	String filepath; \/**< Full path for the file. *\/$/;"	m	struct:FileLocation	typeref:typename:String
filepathTransformed	FolderCmp.h	/^	PathContext filepathTransformed;$/;"	m	struct:PluginsContext	typeref:typename:PathContext
filepathUnpacked	FolderCmp.h	/^	PathContext filepathUnpacked;$/;"	m	struct:PluginsContext	typeref:typename:PathContext
files	7zCommon.h	/^	PathContext files;$/;"	m	struct:DecompressResult	typeref:typename:PathContext
files	diffutils/src/diff.h	/^EXTERN struct file_data files[2];$/;"	v	typeref:struct:file_data[2]
filetime_to_time_t	diffutils/src/mystat.cpp	/^inline time_t filetime_to_time_t(const FILETIME& ft)$/;"	f	typeref:typename:time_t
filterAsString	FilterList.h	/^	std::string filterAsString; \/** Original regular expression string *\/$/;"	m	struct:filter_item	typeref:typename:std::string
filterStr	LineFiltersList.h	/^	String filterStr; \/**< Filter string *\/$/;"	m	struct:LineFilterItem	typeref:typename:String
filter_item	FilterList.h	/^	filter_item(const std::string &filter, int reOpts) : filterAsString(filter), regexp(filter, reO/;"	f	struct:filter_item
filter_item	FilterList.h	/^struct filter_item$/;"	s
filter_item_ptr	FilterList.h	/^typedef std::shared_ptr<filter_item> filter_item_ptr;$/;"	t	typeref:typename:std::shared_ptr<filter_item>
find	MovedBlocks.cpp	/^	EqGroup * find(int eqcode)$/;"	f	class:CodeToGroupMap	typeref:typename:EqGroup *	file:
findNextLine	Common/multiformatText.cpp	/^inline const T *findNextLine(const T *pstart, const T *pend)$/;"	f	typeref:typename:const T *
findNextLine	Common/multiformatText.cpp	/^static const char *findNextLine(ucr::UNICODESET unicoding, const char *pstart, const char *pend)$/;"	f	typeref:typename:const char *	file:
find_and_hash_each_line	diffutils/src/io.c	/^find_and_hash_each_line (struct file_data *current)$/;"	f	typeref:typename:void	file:
find_change	diffutils/src/util.c	/^find_change (struct change *start)$/;"	f	typeref:struct:change *
find_function_last_match	diffutils/src/context.c	/^static DECL_TLS int find_function_last_match;$/;"	v	typeref:typename:DECL_TLS int	file:
find_function_last_search	diffutils/src/context.c	/^static DECL_TLS int find_function_last_search;$/;"	v	typeref:typename:DECL_TLS int	file:
find_hunk	PatchHTML.cpp	/^find_hunk (struct change *start)$/;"	f	typeref:struct:change *	file:
find_hunk	diffutils/src/context.c	/^find_hunk (struct change *start)$/;"	f	typeref:struct:change *	file:
find_identical_ends	diffutils/src/io.c	/^find_identical_ends (struct file_data filevec[])$/;"	f	typeref:typename:void	file:
find_reverse_change	diffutils/src/util.c	/^find_reverse_change (struct change *start)$/;"	f	typeref:struct:change *
finish_output	diffutils/src/util.c	/^finish_output ()$/;"	f	typeref:typename:void
first	markdown.h	/^	const char *first;	\/\/ first char of current markup (valid after Move)$/;"	m	class:CMarkdown	typeref:typename:const char *
fixedWidthFont	Common/ExConverter.h	/^    String fixedWidthFont;$/;"	m	struct:CodePageInfo	typeref:typename:String
flags	DirItem.h	/^	FileFlags flags; \/**< file attributes *\/$/;"	m	struct:DirItem	typeref:typename:FileFlags
flags	WinIMergeLib.h	/^		unsigned flags;$/;"	m	struct:IImgMergeWindow::Event	typeref:typename:unsigned
fnOld	Exceptions.h	/^	_se_translator_function fnOld;$/;"	m	class:SE_Handler	typeref:typename:_se_translator_function
format	Common/UnicodeString.h	/^inline String format(String const & fmt, Args const & ... args)$/;"	f	namespace:strutils	typeref:typename:String
format	Common/UnicodeString.h	/^inline String format(TCHAR const * const fmt, Args const & ... args)$/;"	f	namespace:strutils	typeref:typename:String
format	diffutils/src/util.c	/^  char const *format;$/;"	m	struct:msg	typeref:typename:char const *	file:
format_arg_list	Common/UnicodeString.cpp	/^String format_arg_list(const TCHAR *fmt, va_list args)$/;"	f	namespace:strutils	typeref:typename:String
format_group	diffutils/src/ifdef.c	/^format_group (register FILE *out, char *format, int endchar, struct group const groups[])$/;"	f	typeref:typename:char *	file:
format_ifdef	diffutils/src/ifdef.c	/^format_ifdef (char *format, int beg0, int end0, int beg1, int end1)$/;"	f	typeref:typename:void	file:
format_string1	Common/UnicodeString.cpp	/^String format_string1(const String& fmt, const String& arg1)$/;"	f	namespace:strutils	typeref:typename:String
format_string2	Common/UnicodeString.cpp	/^String format_string2(const String& fmt, const String& arg1, const String& arg2)$/;"	f	namespace:strutils	typeref:typename:String
format_strings	Common/UnicodeString.cpp	/^String format_strings(const String& fmt, const String *args[], size_t nargs)$/;"	f	namespace:strutils	typeref:typename:String
format_varg	Common/UnicodeString.cpp	/^String format_varg(const TCHAR *fmt, ...)$/;"	f	namespace:strutils	typeref:typename:String
freq	StdAfx.h	/^	LARGE_INTEGER freq;$/;"	m	class:CWinMergeProfile	typeref:typename:LARGE_INTEGER
from	diffutils/src/ifdef.c	/^  int from, upto; \/* start and limit lines for this group of lines *\/$/;"	m	struct:group	typeref:typename:int	file:
fullpath	FileFilter.h	/^	String fullpath;		\/**< Full path to filter file *\/$/;"	m	struct:FileFilter	typeref:typename:String
fullpath	FileFilterHelper.h	/^	String fullpath;		\/**< Full path to filter file *\/$/;"	m	struct:FileFilterInfo	typeref:typename:String
funcname	StdAfx.h	/^	TCHAR funcname[256];$/;"	m	class:CWinMergeProfile	typeref:typename:TCHAR[256]
fwrite_textify	diffutils/src/util.c	/^fwrite_textify( const void *buffer, size_t size, size_t count, FILE *stream )$/;"	f	typeref:typename:size_t	file:
g	Common/BCMenu.cpp	/^	unsigned char g;$/;"	m	struct:ssBGR	typeref:typename:unsigned char	file:
g_PredifferMode	FileTransform.cpp	/^PLUGIN_MODE g_PredifferMode = PLUGIN_MANUAL;$/;"	v	namespace:FileTransform	typeref:typename:PLUGIN_MODE
g_UnpackerMode	FileTransform.cpp	/^PLUGIN_MODE g_UnpackerMode = PLUGIN_MANUAL;$/;"	v	namespace:FileTransform	typeref:typename:PLUGIN_MODE
g_appid	JumpList.cpp	/^std::wstring g_appid;$/;"	v	namespace:__anonec093aee0111	typeref:typename:std::wstring
g_autoregister	Merge7zFormatMergePluginImpl.cpp	/^static Merge7zFormatRegister g_autoregister(&Merge7zFormatMergePluginImpl::GuessFormat);$/;"	v	typeref:typename:Merge7zFormatRegister	file:
g_autoregister	Merge7zFormatShellImpl.cpp	/^static Merge7zFormatRegister g_autoregister(&Merge7zFormatShellImpl::GuessFormat);$/;"	v	typeref:typename:Merge7zFormatRegister	file:
g_exe_path	JumpList.cpp	/^wchar_t g_exe_path[260];$/;"	v	namespace:__anonec093aee0111	typeref:typename:wchar_t[260]
g_mutex	Merge7zFormatMergePluginImpl.cpp	/^static Poco::FastMutex g_mutex;$/;"	v	typeref:typename:Poco::FastMutex	file:
g_ncols	DirViewColItems.cpp	/^const int g_ncols = static_cast<int>(std::size(f_cols));$/;"	v	typeref:typename:const int
g_ncols3	DirViewColItems.cpp	/^const int g_ncols3 = static_cast<int>(std::size(f_cols3));$/;"	v	typeref:typename:const int
g_pluginformat_list	Merge7zFormatMergePluginImpl.cpp	/^static std::list<std::unique_ptr<Merge7zFormatMergePluginImpl> > g_pluginformat_list;$/;"	v	typeref:typename:std::list<std::unique_ptr<Merge7zFormatMergePluginImpl>>	file:
g_shellformat	Merge7zFormatShellImpl.cpp	/^static Merge7zFormatShellImpl g_shellformat;$/;"	v	typeref:typename:Merge7zFormatShellImpl	file:
getBomSize	Common/unicoder.cpp	/^int getBomSize(UNICODESET unicoding)$/;"	f	namespace:ucr	typeref:typename:int
getCodePageInfo	Common/ExConverter.cpp	/^	bool getCodePageInfo(int codepage, CodePageInfo *pCodePageInfo)$/;"	f	class:CExconverterMLang	typeref:typename:bool	file:
getCodepage	DiffTextBuffer.h	/^	int getCodepage() const { return m_encoding.m_codepage; }$/;"	f	class:CDiffTextBuffer	typeref:typename:int
getCodepageDescription	Common/ExConverter.cpp	/^	bool getCodepageDescription(int codepage, String& sDescription)$/;"	f	class:CExconverterMLang	typeref:typename:bool	file:
getCodepageFromCharsetName	Common/ExConverter.cpp	/^	bool getCodepageFromCharsetName(const String& sCharsetName, int& codepage)$/;"	f	class:CExconverterMLang	typeref:typename:bool	file:
getDefaultCodepage	Common/unicoder.cpp	/^int getDefaultCodepage()$/;"	f	namespace:ucr	typeref:typename:int
getEncoding	DiffTextBuffer.h	/^	const FileTextEncoding & getEncoding() const { return m_encoding; }$/;"	f	class:CDiffTextBuffer	typeref:typename:const FileTextEncoding &
getFilepath	DiffItem.cpp	/^String DIFFITEM::getFilepath(int nIndex, const String &sRoot) const$/;"	f	class:DIFFITEM	typeref:typename:String
getGripRect	Common/CMoveConstraint.cpp	/^static RECT getGripRect(HWND hwnd)$/;"	f	namespace:prdlg	typeref:typename:RECT	file:
getHasBom	DiffTextBuffer.h	/^	bool getHasBom() const { return m_encoding.m_bom; }$/;"	f	class:CDiffTextBuffer	typeref:typename:bool
getInstance	Common/ExConverter.cpp	/^IExconverter *Exconverter::getInstance()$/;"	f	class:Exconverter	typeref:typename:IExconverter *
getInternalEncoding	Common/unicoder.cpp	/^void getInternalEncoding(UNICODESET * unicoding, int * codepage)$/;"	f	namespace:ucr	typeref:typename:void
getLocaleUint	locality.cpp	/^static unsigned getLocaleUint(int lctype, int defval)$/;"	f	namespace:locality	typeref:typename:unsigned	file:
getProjectRoot	Test.cpp	/^String getProjectRoot()$/;"	f	typeref:typename:String
getSeMessage	Exceptions.h	/^	const TCHAR *getSeMessage()$/;"	f	class:SE_Exception	typeref:typename:const TCHAR *
getSeNumber	Exceptions.h	/^	unsigned long getSeNumber() { return nSE; }$/;"	f	class:SE_Exception	typeref:typename:unsigned long
getSingle	MovedBlocks.cpp	/^	int getSingle() const { return m_map.begin()->first; }$/;"	f	class:IntSet	typeref:typename:int	file:
getUnicoding	DiffTextBuffer.h	/^	ucr::UNICODESET getUnicoding() const { return m_encoding.m_unicoding; }$/;"	f	class:CDiffTextBuffer	typeref:typename:ucr::UNICODESET
get_interface	PropCompareBinary.cpp	/^	IHexEditorWindow *get_interface()$/;"	f	class:Heksedit	typeref:typename:IHexEditorWindow *	file:
get_unicode_char	Common/unicoder.cpp	/^unsigned get_unicode_char(unsigned char * ptr, UNICODESET codeset, int codepage)$/;"	f	namespace:ucr	typeref:typename:unsigned
get_unicode_signature	diffutils/src/io.c	/^static enum UNICODESET get_unicode_signature(struct file_data *current, int *pBomsize)$/;"	f	typeref:enum:UNICODESET	file:
getfnc	DirViewColItems.h	/^	ColGetFncPtrType getfnc; \/**< Handler giving display string *\/$/;"	m	struct:DirColInfo	typeref:typename:ColGetFncPtrType
global_offset	Common/BCMenu.h	/^	INT_PTR xoffset,global_offset;$/;"	m	class:BCMenuData	typeref:typename:INT_PTR
group	diffutils/src/ifdef.c	/^struct group$/;"	s	file:
group_format	diffutils/src/diff.h	/^EXTERN char *group_format[CHANGED + 1];$/;"	v	typeref:typename:EXTERN char * []
groups_letter_value	diffutils/src/ifdef.c	/^groups_letter_value (struct group const g[], int letter)$/;"	f	typeref:typename:int	file:
hash	diffutils/src/io.c	/^  unsigned hash;	\/* Hash of lines in this class.  *\/$/;"	m	struct:equivclass	typeref:typename:unsigned	file:
hash	stringdiffsi.h	/^		int hash;$/;"	m	struct:strdiff::stringdiffs::word	typeref:typename:int
height	WinIMergeLib.h	/^		int height;$/;"	m	struct:IImgMergeWindow::Event	typeref:typename:int
helpID	Common/LanguageSelect.cpp	/^		DWORD helpID;$/;"	m	struct:CLanguageSelect::RetranslateDialog::__anone6888ab20108	typeref:typename:DWORD	file:
helpID	Common/LanguageSelect.cpp	/^		DWORD helpID;$/;"	m	struct:CLanguageSelect::RetranslateDialog::__anone6888ab20208	typeref:typename:DWORD	file:
heuristic	diffutils/src/diff.h	/^EXTERN int	heuristic;$/;"	v	typeref:typename:EXTERN int
hi_minimal	diffutils/src/analyze.c	/^  int hi_minimal;	\/* Likewise for high half.  *\/$/;"	m	struct:partition	typeref:typename:int	file:
hicolor_bitmaps	Common/BCMenu.cpp	/^bool BCMenu::hicolor_bitmaps=false;$/;"	m	class:BCMenu	typeref:typename:bool
hicolor_bitmaps	Common/BCMenu.h	/^	static bool hicolor_bitmaps;$/;"	m	class:BCMenu	typeref:typename:bool
horizon_lines	diffutils/src/diff.h	/^EXTERN int      horizon_lines;$/;"	v	typeref:typename:EXTERN int
hrInitialize	Plugins.h	/^	HRESULT hrInitialize;$/;"	m	class:CScriptsOfThread	typeref:typename:HRESULT
htmlUTags	markdown.cpp	/^static const char htmlUTags[] = $/;"	v	typeref:typename:const char[]	file:
hunk_func	xdiff_gnudiff_compat.cpp	/^static int hunk_func(long start_a, long count_a, long start_b, long count_b, void *cb_data)$/;"	f	typeref:typename:int	file:
iAutomaticBPL	heksedit.h	/^		int iAutomaticBPL; \/**< Add max amount of bytes that fit to view. *\/$/;"	m	struct:IHexEditorWindow::Settings	typeref:typename:int
iBinaryMode	heksedit.h	/^		BYTE_ENDIAN iBinaryMode; \/**< Binary mode, little\/big endian. *\/$/;"	m	struct:IHexEditorWindow::Settings	typeref:typename:BYTE_ENDIAN
iBkColorValue	heksedit.h	/^		COLORREF iTextColorValue, iBkColorValue, iSepColorValue;$/;"	m	struct:IHexEditorWindow::Colors	typeref:typename:COLORREF
iBmkColor	heksedit.h	/^		COLORREF iBmkColor;$/;"	m	struct:IHexEditorWindow::Colors	typeref:typename:COLORREF
iBytesPerLine	heksedit.h	/^		int iBytesPerLine; \/**< How many bytes in one line in hex view. *\/$/;"	m	struct:IHexEditorWindow::Settings	typeref:typename:int
iCharacterSet	heksedit.h	/^		int iCharacterSet; \/**< Use OEM or ANSI character set? *\/$/;"	m	struct:IHexEditorWindow::Settings	typeref:typename:int
iCurByte	heksedit.h	/^		int const(iCurByte);$/;"	m	struct:IHexEditorWindow::Status	typeref:typename:int const ()
iCurNibble	heksedit.h	/^		int const(iCurNibble);$/;"	m	struct:IHexEditorWindow::Status	typeref:typename:int const ()
iDiffBkColorValue	heksedit.h	/^		COLORREF iDiffBkColorValue, iDiffTextColorValue, iSelDiffBkColorValue, iSelDiffTextColorValue;$/;"	m	struct:IHexEditorWindow::Colors	typeref:typename:COLORREF
iDiffTextColorValue	heksedit.h	/^		COLORREF iDiffBkColorValue, iDiffTextColorValue, iSelDiffBkColorValue, iSelDiffTextColorValue;$/;"	m	struct:IHexEditorWindow::Colors	typeref:typename:COLORREF
iEndOfSelection	heksedit.h	/^		int const(iEndOfSelection);$/;"	m	struct:IHexEditorWindow::Status	typeref:typename:int const ()
iEnteringMode	heksedit.h	/^		int const(iEnteringMode);$/;"	m	struct:IHexEditorWindow::Status	typeref:typename:int const ()
iFileChanged	heksedit.h	/^		int iFileChanged;$/;"	m	struct:IHexEditorWindow::Status	typeref:typename:int
iFontSize	heksedit.h	/^		int iFontSize;$/;"	m	struct:IHexEditorWindow::Settings	typeref:typename:int
iFontZoom	heksedit.h	/^		int iFontZoom;$/;"	m	struct:IHexEditorWindow::Settings	typeref:typename:int
iHscrollMax	heksedit.h	/^		int const(iHscrollMax);$/;"	m	struct:IHexEditorWindow::Status	typeref:typename:int const ()
iHscrollPos	heksedit.h	/^		int const(iHscrollPos);$/;"	m	struct:IHexEditorWindow::Status	typeref:typename:int const ()
iMaxOffsetLen	heksedit.h	/^		int iMaxOffsetLen; \/**< Maximum numbers used in offset. *\/$/;"	m	struct:IHexEditorWindow::Settings	typeref:typename:int
iMinOffsetLen	heksedit.h	/^		int iMinOffsetLen; \/**< Minimum numbers used in offset. *\/$/;"	m	struct:IHexEditorWindow::Settings	typeref:typename:int
iSelBkColorValue	heksedit.h	/^		COLORREF iSelBkColorValue, iSelTextColorValue;$/;"	m	struct:IHexEditorWindow::Colors	typeref:typename:COLORREF
iSelDiffBkColorValue	heksedit.h	/^		COLORREF iDiffBkColorValue, iDiffTextColorValue, iSelDiffBkColorValue, iSelDiffTextColorValue;$/;"	m	struct:IHexEditorWindow::Colors	typeref:typename:COLORREF
iSelDiffTextColorValue	heksedit.h	/^		COLORREF iDiffBkColorValue, iDiffTextColorValue, iSelDiffBkColorValue, iSelDiffTextColorValue;$/;"	m	struct:IHexEditorWindow::Colors	typeref:typename:COLORREF
iSelTextColorValue	heksedit.h	/^		COLORREF iSelBkColorValue, iSelTextColorValue;$/;"	m	struct:IHexEditorWindow::Colors	typeref:typename:COLORREF
iSepColorValue	heksedit.h	/^		COLORREF iTextColorValue, iBkColorValue, iSepColorValue;$/;"	m	struct:IHexEditorWindow::Colors	typeref:typename:COLORREF
iStartOfSelection	heksedit.h	/^		int const(iStartOfSelection);$/;"	m	struct:IHexEditorWindow::Status	typeref:typename:int const ()
iTextColorValue	heksedit.h	/^		COLORREF iTextColorValue, iBkColorValue, iSepColorValue;$/;"	m	struct:IHexEditorWindow::Colors	typeref:typename:COLORREF
iVscrollMax	heksedit.h	/^		int const(iVscrollMax);$/;"	m	struct:IHexEditorWindow::Status	typeref:typename:int const ()
iVscrollPos	heksedit.h	/^		int const(iVscrollPos);$/;"	m	struct:IHexEditorWindow::Status	typeref:typename:int const ()
iconID	CompareStatisticsDlg.cpp	/^	static const struct { int ctlID; int iconID; } ctlIconMap[] =$/;"	m	struct:BEGIN_MESSAGE_MAP::__anonc685a11f0308	typeref:typename:int	file:
iconResID	MainFrm.h	/^		int iconResID;    \/**< Icon's resource ID. *\/$/;"	m	struct:CMainFrame::MENUITEM_ICON	typeref:typename:int
id	Common/LanguageSelect.cpp	/^		DWORD id;$/;"	m	struct:CLanguageSelect::RetranslateDialog::__anone6888ab20208	typeref:typename:DWORD	file:
id	Common/LanguageSelect.cpp	/^		LANGID id;$/;"	m	struct:LangFileInfo::rg	typeref:typename:LANGID	file:
id	Common/LanguageSelect.cpp	/^	LANGID id; \/**< Language ID. *\/$/;"	m	class:LangFileInfo	typeref:typename:LANGID	file:
id	charsets.c	/^	unsigned id;$/;"	m	struct:_charsetInfo	typeref:typename:unsigned	file:
idDesc	DirViewColItems.h	/^	const char *idDesc; \/**< Description, ID of string resource *\/$/;"	m	struct:DirColInfo	typeref:typename:const char *
idDisplay	DirCmpReportDlg.cpp	/^	const char *idDisplay; \/**< Resource-string ID (shown in file-selection dialog) *\/$/;"	m	struct:ReportTypeInfo	typeref:typename:const char *	file:
idDisplay	DirFilterDlg.cpp	/^	int idDisplay; \/**< Resource-string ID (shown in file-selection dialog) *\/$/;"	m	struct:ReportTypeInfo	typeref:typename:int	file:
idName	DirViewColItems.h	/^	const char *idName; \/**< Displayed name, ID of string resource *\/$/;"	m	struct:DirColInfo	typeref:typename:const char *
idNameContext	DirViewColItems.h	/^	const char *idNameContext; $/;"	m	struct:DirColInfo	typeref:typename:const char *
ignorableWhitespace	ProjectFile.cpp	/^	void ignorableWhitespace(const XMLChar ch[], int start, int length)	{}$/;"	f	class:ProjectFileHandler	typeref:typename:void	file:
ignore	diffutils/src/diff.h	/^  char ignore;			\/* Flag used in context.c *\/$/;"	m	struct:change	typeref:typename:char
ignore_all_space_flag	diffutils/src/diff.h	/^EXTERN int      ignore_all_space_flag;$/;"	v	typeref:typename:EXTERN int
ignore_blank_lines_flag	diffutils/src/diff.h	/^EXTERN int      ignore_blank_lines_flag;$/;"	v	typeref:typename:EXTERN int
ignore_case_flag	diffutils/src/diff.h	/^EXTERN int      ignore_case_flag;$/;"	v	typeref:typename:EXTERN int
ignore_eol_diff	diffutils/src/diff.h	/^EXTERN int      ignore_eol_diff;$/;"	v	typeref:typename:EXTERN int
ignore_some_changes	diffutils/src/diff.h	/^EXTERN int      ignore_some_changes;$/;"	v	typeref:typename:EXTERN int
ignore_space_change_flag	diffutils/src/diff.h	/^EXTERN int      ignore_space_change_flag;$/;"	v	typeref:typename:EXTERN int
includeDir	FileFilterHelper.cpp	/^bool FileFilterHelper::includeDir(const String& szDirName) const$/;"	f	class:FileFilterHelper	typeref:typename:bool
includeDir	FileFilterHelper.h	/^	bool includeDir(const String& szDirName1, const String& szDirName2) const$/;"	f	class:IDiffFilter	typeref:typename:bool
includeDir	FileFilterHelper.h	/^	bool includeDir(const String& szDirName1, const String& szDirName2, const String& szDirName3) c/;"	f	class:IDiffFilter	typeref:typename:bool
includeFile	FileFilterHelper.cpp	/^bool FileFilterHelper::includeFile(const String& szFileName) const$/;"	f	class:FileFilterHelper	typeref:typename:bool
includeFile	FileFilterHelper.h	/^	bool includeFile(const String& szFileName1, const String& szFileName2) const$/;"	f	class:IDiffFilter	typeref:typename:bool
includeFile	FileFilterHelper.h	/^	bool includeFile(const String& szFileName1, const String& szFileName2, const String& szFileName/;"	f	class:IDiffFilter	typeref:typename:bool
index1	charsets.c	/^static struct _charsetInfo const **index1;$/;"	v	typeref:struct:_charsetInfo const **	file:
index2	charsets.c	/^static struct _charsetInfo const **index2;$/;"	v	typeref:struct:_charsetInfo const **	file:
index3	charsets.c	/^static struct _charsetInfo const **index3;$/;"	v	typeref:struct:_charsetInfo const **	file:
indicators	DirFrame.cpp	/^static UINT indicators[] =$/;"	v	typeref:typename:UINT[]	file:
indicatorsBottom	MergeStatusBar.cpp	/^static UINT indicatorsBottom[] =$/;"	v	typeref:typename:UINT[]	file:
inf10_	DiffWrapper.cpp	/^	const file_data *inf10_;$/;"	m	struct:Comp02Functor	typeref:typename:const file_data *	file:
inf12_	DiffWrapper.cpp	/^	const file_data *inf12_;$/;"	m	struct:Comp02Functor	typeref:typename:const file_data *	file:
infoPrediffer	FolderCmp.h	/^	PrediffingInfo * infoPrediffer;$/;"	m	struct:PluginsContext	typeref:typename:PrediffingInfo *
infoUnpacker	FolderCmp.h	/^	PackingInfo * infoUnpacker;$/;"	m	struct:PluginsContext	typeref:typename:PackingInfo *
information	MergeApp.cpp	/^int information(const String& msg, int type)$/;"	f	namespace:AppMsgBox	typeref:typename:int
inhibit	diffutils/src/analyze.c	/^DECL_TLS int inhibit;$/;"	v	typeref:typename:DECL_TLS int
initialize	Common/ExConverter.cpp	/^	bool initialize()$/;"	f	class:CExconverterMLang	typeref:typename:bool	file:
inserted	diffutils/src/diff.h	/^  int inserted;			\/* # lines of file 1 changed here.  *\/$/;"	m	struct:change	typeref:typename:int
invokeA	Common/lwdisp.c	/^HRESULT invokeA(LPDISPATCH pi, VARIANT *ret, DISPID id, LPCCH op, VARIANT *argv)$/;"	f	typeref:typename:HRESULT
invokeV	Common/lwdisp.c	/^STDAPI invokeV(LPDISPATCH pi, VARIANT *ret, DISPID id, LPCCH op, VARIANT *argv)$/;"	f	typeref:typename:STDAPI
invokeW	Common/lwdisp.c	/^HRESULT invokeW(LPDISPATCH pi, VARIANT *ret, LPCOLESTR silent, LPCCH op, VARIANT *argv)$/;"	f	typeref:typename:HRESULT
isBin	DiffItem.h	/^	bool isBin() const { return (diffcode & DIFFCODE::BIN) != 0; }$/;"	f	struct:DIFFCODE	typeref:typename:bool
isDir	CompareStatisticsDlg.cpp	/^	static const struct { int ctlID; CompareStats::RESULT resultType; bool isDir; } ctlResultTypeMa/;"	m	struct:BEGIN_MESSAGE_MAP::__anonc685a11f0208	typeref:typename:bool	file:
isDirectory	DiffItem.h	/^	bool isDirectory() const { return Check(diffcode, DIFFCODE::TYPEFLAGS, DIFFCODE::DIR); }$/;"	f	struct:DIFFCODE	typeref:typename:bool
isEmpty	DiffItem.h	/^	inline bool isEmpty() const { return this == GetEmptyItem(); \/* to invoke "emptiness" checking/;"	f	class:DIFFITEM	typeref:typename:bool
isMissingFirstOnly	DiffItem.h	/^	bool isMissingFirstOnly() const { return CheckSide(diffcode, DIFFCODE::SECOND | DIFFCODE::THIRD/;"	f	struct:DIFFCODE	typeref:typename:bool
isMissingSecondOnly	DiffItem.h	/^	bool isMissingSecondOnly() const { return CheckSide(diffcode, DIFFCODE::FIRST | DIFFCODE::THIRD/;"	f	struct:DIFFCODE	typeref:typename:bool
isMissingThirdOnly	DiffItem.h	/^	bool isMissingThirdOnly() const { return CheckSide(diffcode, DIFFCODE::FIRST | DIFFCODE::SECOND/;"	f	struct:DIFFCODE	typeref:typename:bool
isPerfectMatch	MovedBlocks.cpp	/^	bool isPerfectMatch() const { return m_lines0.count()==1 && m_lines1.count()==1; }$/;"	f	struct:EqGroup	typeref:typename:bool	file:
isPresent	MovedBlocks.cpp	/^	bool isPresent(int val) const { return m_map.find(val) != m_map.end(); }$/;"	f	class:IntSet	typeref:typename:bool	file:
isResultAbort	DiffItem.h	/^	bool isResultAbort() const { return isResultAbort(diffcode); }$/;"	f	struct:DIFFCODE	typeref:typename:bool
isResultAbort	DiffItem.h	/^	static bool isResultAbort(unsigned code) { return CheckCompare(code, DIFFCODE::CMPABORT); }$/;"	f	struct:DIFFCODE	typeref:typename:bool
isResultDiff	DiffItem.h	/^	bool isResultDiff() const { return (CheckCompare(diffcode, DIFFCODE::DIFF) && !isResultFiltered/;"	f	struct:DIFFCODE	typeref:typename:bool
isResultError	DiffItem.h	/^	bool isResultError() const { return isResultError(diffcode); }$/;"	f	struct:DIFFCODE	typeref:typename:bool
isResultError	DiffItem.h	/^	static bool isResultError(unsigned code) { return CheckCompare(code, DIFFCODE::CMPERR); }$/;"	f	struct:DIFFCODE	typeref:typename:bool
isResultFiltered	DiffItem.h	/^	bool isResultFiltered() const { return CheckFilter(diffcode, DIFFCODE::SKIPPED); }$/;"	f	struct:DIFFCODE	typeref:typename:bool
isResultSame	DiffItem.h	/^	bool isResultSame() const { return CheckCompare(diffcode, DIFFCODE::SAME); }$/;"	f	struct:DIFFCODE	typeref:typename:bool
isSafeWhitespace	stringdiffs.cpp	/^isSafeWhitespace(TCHAR ch)$/;"	f	namespace:strdiff	typeref:typename:bool	file:
isScanNeeded	DiffItem.h	/^	bool isScanNeeded() const { return ((diffcode & DIFFCODE::SCANFLAGS) == DIFFCODE::NEEDSCAN); }$/;"	f	struct:DIFFCODE	typeref:typename:bool
isSideAll	DiffItem.h	/^	bool isSideAll() const { return CheckSide(diffcode, DIFFCODE::ALL); }$/;"	f	struct:DIFFCODE	typeref:typename:bool
isSideBoth	DiffItem.h	/^	bool isSideBoth() const { return CheckSide(diffcode, DIFFCODE::BOTH); }$/;"	f	struct:DIFFCODE	typeref:typename:bool
isSideFirstOnly	DiffItem.h	/^	bool isSideFirstOnly() const { return CheckSide(diffcode, DIFFCODE::FIRST); }$/;"	f	struct:DIFFCODE	typeref:typename:bool
isSideOnly	DiffItem.h	/^	bool isSideOnly(int nIndex) const$/;"	f	struct:DIFFCODE	typeref:typename:bool
isSideSecondOnly	DiffItem.h	/^	bool isSideSecondOnly() const { return CheckSide(diffcode, DIFFCODE::SECOND); }$/;"	f	struct:DIFFCODE	typeref:typename:bool
isSideThirdOnly	DiffItem.h	/^	bool isSideThirdOnly() const { return CheckSide(diffcode, DIFFCODE::THIRD); }$/;"	f	struct:DIFFCODE	typeref:typename:bool
isText	DiffItem.h	/^	bool isText() const { return Check(diffcode, DIFFCODE::TEXTFLAGS, DIFFCODE::TEXT); }$/;"	f	struct:DIFFCODE	typeref:typename:bool
isValidCodepage	Common/ExConverter.cpp	/^	bool isValidCodepage(int codepage)$/;"	f	class:CExconverterMLang	typeref:typename:bool	file:
isWordBreak	stringdiffs.cpp	/^isWordBreak(int breakType, const TCHAR *str, int index)$/;"	f	namespace:strdiff	typeref:typename:bool	file:
is_missing_newline	xdiff_gnudiff_compat.cpp	/^static int is_missing_newline(const mmfile_t& mmfile)$/;"	f	typeref:typename:int	file:
iseolch	Common/coretools.cpp	/^static bool iseolch(char ch)$/;"	f	typeref:typename:bool	file:
iseolch	CompareEngines/ByteComparator.cpp	/^static inline bool iseolch(TCHAR ch)$/;"	f	typeref:typename:bool	file:
iseolch	diffutils/src/util.c	/^int iseolch (char ch)$/;"	f	typeref:typename:int
iswsch	CompareEngines/ByteComparator.cpp	/^static inline bool iswsch(TCHAR ch)$/;"	f	typeref:typename:bool	file:
join	Common/UnicodeString.h	/^String join(const InputIterator& begin, const InputIterator& end, const String& delim)$/;"	f	namespace:strutils	typeref:typename:String
join	Common/UnicodeString.h	/^String join(const InputIterator& begin, const InputIterator& end, const String& delim, Formatter/;"	f	namespace:strutils	typeref:typename:String
keycode	WinIMergeLib.h	/^		int keycode;$/;"	m	struct:IImgMergeWindow::Event	typeref:typename:int
lang	Common/LanguageSelect.cpp	/^		const char *lang;$/;"	m	struct:LangFileInfo::rg	typeref:typename:const char *	file:
launchProgram	Environment.cpp	/^static bool launchProgram(const String& sCmd, WORD wShowWindow)$/;"	f	namespace:env	typeref:typename:bool	file:
length	diffutils/src/io.c	/^  size_t length;	\/* The length of that line.  *\/$/;"	m	struct:equivclass	typeref:typename:size_t	file:
length	stringdiffsi.h	/^		int length() const { return end+1-start; }$/;"	f	struct:strdiff::stringdiffs::word	typeref:typename:int
length_varies	diffutils/src/diff.h	/^EXTERN int      length_varies;$/;"	v	typeref:typename:EXTERN int
level	StdAfx.cpp	/^int CWinMergeProfile::level = 0;$/;"	m	class:CWinMergeProfile	typeref:typename:int
level	StdAfx.h	/^	static int level;$/;"	m	class:CWinMergeProfile	typeref:typename:int
lfile	PatchTool.h	/^	String lfile; \/**< Left file *\/$/;"	m	struct:PATCHFILES	typeref:typename:String
li	StdAfx.h	/^	LARGE_INTEGER li[2];$/;"	m	class:CWinMergeProfile	typeref:typename:LARGE_INTEGER[2]
linbuf	diffutils/src/diff.h	/^    char const HUGE **linbuf;$/;"	m	struct:file_data	typeref:typename:char const HUGE **
linbuf_base	diffutils/src/diff.h	/^    int linbuf_base, buffered_lines, valid_lines, alloc_lines;$/;"	m	struct:file_data	typeref:typename:int
line	diffutils/src/io.c	/^  char const HUGE *line;	\/* A line that fits this class. *\/$/;"	m	struct:equivclass	typeref:typename:char const HUGE *	file:
line0	diffutils/src/diff.h	/^  int line0;			\/* Line number of 1st deleted line.  *\/$/;"	m	struct:change	typeref:typename:int
line1	diffutils/src/diff.h	/^  int line1;			\/* Line number of 1st inserted line.  *\/$/;"	m	struct:change	typeref:typename:int
line_class	diffutils/src/diff.h	/^enum line_class {$/;"	g
line_cmp	diffutils/src/util.c	/^line_cmp (char const *s1, size_t len1, char const *s2, size_t len2)$/;"	f	typeref:typename:int
line_end_char	diffutils/src/diff.h	/^EXTERN char     line_end_char;$/;"	v	typeref:typename:EXTERN char
line_format	diffutils/src/diff.h	/^EXTERN char *line_format[UNCHANGED + 1];$/;"	v	typeref:typename:EXTERN char * []
linelen	Common/coretools.cpp	/^size_t linelen(const char *string, size_t maxlen)$/;"	f	typeref:typename:size_t
link	diffutils/src/diff.h	/^  struct change *link;		\/* Previous or next edit command  *\/$/;"	m	struct:change	typeref:struct:change *
lo_minimal	diffutils/src/analyze.c	/^  int lo_minimal;	\/* Nonzero if low half will be analyzed minimally.  *\/$/;"	m	struct:partition	typeref:typename:int	file:
locality	locality.cpp	/^namespace locality {$/;"	n	file:
locality	locality.h	/^namespace locality {$/;"	n
log_col	DirColsDlg.h	/^		int log_col; \/**< Logical (shown) order number *\/$/;"	m	struct:CDirColsDlg::column	typeref:typename:int
lower	markdown.cpp	/^	const char *lower;$/;"	m	class:CMarkdown::Token	typeref:typename:const char *	file:
lower	markdown.h	/^	const char *lower;	\/\/ beginning of enclosed text (valid after Move)$/;"	m	class:CMarkdown	typeref:typename:const char *
lpVtbl	Common/lwdisp.h	/^	const struct LWDispVtbl *lpVtbl;$/;"	m	struct:LWDispatch	typeref:typename:const struct LWDispVtbl *
ltime	PatchTool.h	/^	time_t ltime; \/**< Left time *\/$/;"	m	struct:PATCHFILES	typeref:typename:time_t
m_AffectsLeftBtn	LoadSaveCodepageDlg.h	/^	CButton m_AffectsLeftBtn;$/;"	m	class:CLoadSaveCodepageDlg	typeref:typename:CButton
m_AffectsMiddleBtn	LoadSaveCodepageDlg.h	/^	CButton m_AffectsMiddleBtn;$/;"	m	class:CLoadSaveCodepageDlg	typeref:typename:CButton
m_AffectsRightBtn	LoadSaveCodepageDlg.h	/^	CButton m_AffectsRightBtn;$/;"	m	class:CLoadSaveCodepageDlg	typeref:typename:CButton
m_AllImages	Common/BCMenu.cpp	/^CImageList BCMenu::m_AllImages;$/;"	m	class:BCMenu	typeref:typename:CImageList
m_AllImages	Common/BCMenu.h	/^	static CImageList m_AllImages;$/;"	m	class:BCMenu	typeref:typename:CImageList
m_AllImagesID	Common/BCMenu.cpp	/^CArray<int,int&> BCMenu::m_AllImagesID;$/;"	m	class:BCMenu	typeref:typename:CArray<int,int &>
m_AllImagesID	Common/BCMenu.h	/^	static CArray<int,int&> m_AllImagesID;$/;"	m	class:BCMenu	typeref:typename:CArray<int,int &>
m_AllSubMenus	Common/BCMenu.cpp	/^CTypedPtrArray<CPtrArray, HMENU> BCMenu::m_AllSubMenus;  \/\/ Stores list of all sub-menus$/;"	m	class:BCMenu	typeref:typename:CTypedPtrArray<CPtrArray,HMENU>
m_AllSubMenus	Common/BCMenu.h	/^	static CTypedPtrArray<CPtrArray, HMENU>  m_AllSubMenus;$/;"	m	class:BCMenu	typeref:typename:CTypedPtrArray<CPtrArray,HMENU>
m_ConstraintList	Common/CMoveConstraint.h	/^	ConstraintList m_ConstraintList;$/;"	m	class:prdlg::CMoveConstraint	typeref:typename:ConstraintList
m_CurrentPredifferID	MergeEditView.h	/^	int m_CurrentPredifferID;$/;"	m	class:CMergeEditView	typeref:typename:int
m_Edit	EditorFilepathBar.h	/^	CFilepathEdit m_Edit[3]; \/**< Edit controls. *\/$/;"	m	class:CEditorFilePathBar	typeref:typename:CFilepathEdit[3]
m_FileLocation	DiffFileData.h	/^	FileLocation m_FileLocation[3];$/;"	m	struct:DiffFileData	typeref:typename:FileLocation[3]
m_Files	MergeCmdLineInfo.h	/^	PathContext m_Files; \/**< Files (or directories) to compare. *\/$/;"	m	class:MergeCmdLineInfo	typeref:typename:PathContext
m_FilterCommentsSetByFileType	FilterCommentsManager.h	/^	std::map<String, FilterCommentsSet> m_FilterCommentsSetByFileType;$/;"	m	class:FilterCommentsManager	typeref:typename:std::map<String,FilterCommentsSet>
m_Filters	FileFiltersDlg.h	/^	std::vector<FileFilterInfo> m_Filters;$/;"	m	class:FileFiltersDlg	typeref:typename:std::vector<FileFilterInfo>
m_FixedFileInfo	Common/VersionInfo.h	/^	VS_FIXEDFILEINFO m_FixedFileInfo; \/**< Fixed file information *\/$/;"	m	class:CVersionInfo	typeref:typename:VS_FIXEDFILEINFO
m_IniFileName	FilterCommentsManager.h	/^	String m_IniFileName;$/;"	m	class:FilterCommentsManager	typeref:typename:String
m_LastRescan	MergeDoc.h	/^	COleDateTime m_LastRescan; \/**< Time of last rescan (for delaying) *\/ $/;"	m	class:CMergeDoc	typeref:typename:COleDateTime
m_MenuIcons	MainFrm.cpp	/^const CMainFrame::MENUITEM_ICON CMainFrame::m_MenuIcons[] = {$/;"	m	class:CMainFrame	typeref:typename:const CMainFrame::MENUITEM_ICON[]
m_MenuIcons	MainFrm.h	/^	static const MENUITEM_ICON m_MenuIcons[];$/;"	m	class:CMainFrame	typeref:typename:const MENUITEM_ICON[]
m_MenuList	Common/BCMenu.h	/^	CTypedPtrArray<CPtrArray, BCMenuData*> m_MenuList;  \/\/ Stores list of menu items $/;"	m	class:BCMenu	typeref:typename:CTypedPtrArray<CPtrArray,BCMenuData * >
m_MergeDocs	DirDoc.h	/^	MergeDocPtrList m_MergeDocs; \/**< List of file compares opened from this compare *\/$/;"	m	class:CDirDoc	typeref:typename:MergeDocPtrList
m_Options	MergeCmdLineInfo.h	/^	std::map<String, String> m_Options;$/;"	m	class:MergeCmdLineInfo	typeref:typename:std::map<String,String>
m_PluginName	FileTransform.h	/^	String		m_PluginName;$/;"	m	class:PluginForFile	typeref:typename:String
m_PluginOrPredifferMode	FileTransform.h	/^	PLUGIN_MODE	m_PluginOrPredifferMode;$/;"	m	class:PluginForFile	typeref:typename:PLUGIN_MODE
m_RO	DirActions.h	/^	const bool *m_RO;$/;"	m	struct:DirActions	typeref:typename:const bool *
m_RealityBlocks	GhostTextBuffer.h	/^	std::vector<RealityBlock> m_RealityBlocks; \/**< Mapping of real and apparent lines. *\/$/;"	m	class:CGhostTextBuffer	typeref:typename:std::vector<RealityBlock>
m_SubMenus	Common/BCMenu.h	/^	CTypedPtrArray<CPtrArray, HMENU>  m_SubMenus;  \/\/ Stores list of sub-menus $/;"	m	class:BCMenu	typeref:typename:CTypedPtrArray<CPtrArray,HMENU>
m_ToolbarImages	MainFrm.h	/^	CImageList m_ToolbarImages[TOOLBAR_IMAGES_COUNT]; \/**< Images for toolbar *\/$/;"	m	class:CMainFrame	typeref:typename:CImageList[]
m_UnpackerPlugins	SelectUnpackerDlg.h	/^	CPtrArray  m_UnpackerPlugins;$/;"	m	class:CSelectUnpackerDlg	typeref:typename:CPtrArray
m_aAvailableThreads	Plugins.cpp	/^std::vector<CScriptsOfThread *> CAllThreadsScripts::m_aAvailableThreads;$/;"	m	class:CAllThreadsScripts	typeref:typename:std::vector<CScriptsOfThread * >
m_aAvailableThreads	Plugins.h	/^	static std::vector<CScriptsOfThread *> m_aAvailableThreads;$/;"	m	class:CAllThreadsScripts	typeref:typename:std::vector<CScriptsOfThread * >
m_aAvailableThreadsLock	Plugins.cpp	/^FastMutex m_aAvailableThreadsLock;$/;"	v	typeref:typename:FastMutex
m_aButtons	Common/MessageBoxDialog.h	/^    std::vector<MSGBOXBTN> m_aButtons;$/;"	m	class:CMessageBoxDialog	typeref:typename:std::vector<MSGBOXBTN>
m_aPages	Common/PropertyPageHost.h	/^	CArray<PAGEITEM, PAGEITEM&> m_aPages;$/;"	m	class:CPropertyPageHost	typeref:typename:CArray<PAGEITEM,PAGEITEM &>
m_aPluginsByEvent	Plugins.h	/^	std::vector<PluginArrayPtr> m_aPluginsByEvent;$/;"	m	class:CScriptsOfThread	typeref:typename:std::vector<PluginArrayPtr>
m_actions	FileActionScript.h	/^	std::vector<FileActionItem> m_actions; \/**< List of all actions for this script. *\/$/;"	m	class:FileActionScript	typeref:typename:std::vector<FileActionItem>
m_alternativePaths	DiffWrapper.h	/^	PathContext m_alternativePaths; \/**< file's alternative path (may be relative). *\/$/;"	m	class:CDiffWrapper	typeref:typename:PathContext
m_appendFile	PatchDlg.h	/^	bool m_appendFile;$/;"	m	class:CPatchDlg	typeref:typename:bool
m_array	Common/multiformatText.h	/^	VARIANT m_array;$/;"	m	class:storageForPlugins	typeref:typename:VARIANT
m_arrowWidth	Common/BCMenu.cpp	/^int BCMenu::m_arrowWidth = 0;$/;"	m	class:BCMenu	typeref:typename:int
m_arrowWidth	Common/BCMenu.h	/^	static int m_arrowWidth;$/;"	m	class:BCMenu	typeref:typename:int
m_bAborting	DiffThread.h	/^	bool m_bAborting; \/**< Is compare aborting? *\/$/;"	m	class:CDiffThread	typeref:typename:bool
m_bActivated	MergeFrameCommon.h	/^	bool m_bActivated;$/;"	m	class:CMergeFrameCommon	typeref:typename:bool
m_bActive	Common/scbarcf.h	/^    bool    m_bActive; \/\/ a child has focus$/;"	m	class:CSizingControlBarCF	typeref:typename:bool
m_bActive	FilepathEdit.h	/^	bool m_bActive; \/**< Is the control active-looking? *\/$/;"	m	class:CFilepathEdit	typeref:typename:bool
m_bAddCmdLine	DiffWrapper.h	/^	bool m_bAddCmdLine; \/**< Do we add commandline to patch file? *\/$/;"	m	class:CDiffWrapper	typeref:typename:bool
m_bAffectsLeft	LoadSaveCodepageDlg.h	/^	bool    m_bAffectsLeft;$/;"	m	class:CLoadSaveCodepageDlg	typeref:typename:bool
m_bAffectsMiddle	LoadSaveCodepageDlg.h	/^	bool    m_bAffectsMiddle;$/;"	m	class:CLoadSaveCodepageDlg	typeref:typename:bool
m_bAffectsRight	LoadSaveCodepageDlg.h	/^	bool    m_bAffectsRight;$/;"	m	class:CLoadSaveCodepageDlg	typeref:typename:bool
m_bAllowMixedEol	PropEditor.h	/^	bool    m_bAllowMixedEol;$/;"	m	class:PropEditor	typeref:typename:bool
m_bAppendBak	PropBackups.h	/^	bool m_bAppendBak;$/;"	m	class:PropBackups	typeref:typename:bool
m_bAppendFiles	DiffWrapper.h	/^	bool m_bAppendFiles; \/**< Do we append to existing patch file? *\/$/;"	m	class:CDiffWrapper	typeref:typename:bool
m_bAppendTime	PropBackups.h	/^	bool m_bAppendTime;$/;"	m	class:PropBackups	typeref:typename:bool
m_bAskForLeft	SaveClosingDlg.h	/^	bool m_bAskForLeft; \/**< Is left file modified? *\/$/;"	m	class:SaveClosingDlg	typeref:typename:bool
m_bAskForMiddle	SaveClosingDlg.h	/^	bool m_bAskForMiddle; \/**< Is middle file modified? *\/$/;"	m	class:SaveClosingDlg	typeref:typename:bool
m_bAskForRight	SaveClosingDlg.h	/^	bool m_bAskForRight; \/**< Is right file modified? *\/$/;"	m	class:SaveClosingDlg	typeref:typename:bool
m_bAskMultiWindowClose	PropGeneral.h	/^	bool  m_bAskMultiWindowClose;$/;"	m	class:PropGeneral	typeref:typename:bool
m_bAutoComplete	Common/SuperComboBox.h	/^	bool m_bAutoComplete;$/;"	m	class:CSuperComboBox	typeref:typename:bool
m_bAutoCompleteReady	OpenView.h	/^	std::array<bool, 3> m_bAutoCompleteReady;$/;"	m	class:COpenView	typeref:typename:std::array<bool,3>
m_bAutoMaxWidth	Common/MDITabBar.h	/^	bool  m_bAutoMaxWidth;$/;"	m	class:CMDITabBar	typeref:typename:bool
m_bAutoMerged	ImgMergeFrm.h	/^	bool m_bAutoMerged;$/;"	m	class:CImgMergeFrame	typeref:typename:bool
m_bAutoMerged	MergeDoc.h	/^	bool m_bAutoMerged;$/;"	m	class:CMergeDoc	typeref:typename:bool
m_bAutoResizePanes	Common/SplitterWndEx.h	/^	bool m_bAutoResizePanes;$/;"	m	class:CSplitterWndEx	typeref:typename:bool
m_bAutomatic	Plugins.h	/^	bool        m_bAutomatic;$/;"	m	class:PluginInfo	typeref:typename:bool
m_bAutomaticRescan	MergeEditView.h	/^	bool m_bAutomaticRescan;$/;"	m	class:CMergeEditView	typeref:typename:bool
m_bAutomaticRescan	PropEditor.h	/^	bool    m_bAutomaticRescan;$/;"	m	class:PropEditor	typeref:typename:bool
m_bBarLocked	Common/SplitterWndEx.h	/^	bool m_bBarLocked;$/;"	m	class:CSplitterWndEx	typeref:typename:bool
m_bBreakOnWords	PropEditor.h	/^	bool    m_bBreakOnWords;$/;"	m	class:PropEditor	typeref:typename:bool
m_bCanBeEmpty	Common/SuperComboBox.h	/^	bool m_bCanBeEmpty;$/;"	m	class:CSuperComboBox	typeref:typename:bool
m_bCloseButtonDown	Common/MDITabBar.h	/^	bool m_bCloseButtonDown;$/;"	m	class:CMDITabBar	typeref:typename:bool
m_bCloseHandle	Common/RegOptionsMgr.h	/^	bool m_bCloseHandle;$/;"	m	class:CRegOptionsMgr	typeref:typename:bool
m_bCloseWindowWithEsc	PropGeneral.h	/^	bool  m_bCloseWindowWithEsc;$/;"	m	class:PropGeneral	typeref:typename:bool
m_bCloseWithOK	PropGeneral.h	/^	bool  m_bCloseWithOK;$/;"	m	class:PropGeneral	typeref:typename:bool
m_bComboBoxEx	Common/SuperComboBox.h	/^	bool m_bComboBoxEx;$/;"	m	class:CSuperComboBox	typeref:typename:bool
m_bCompareDone	CompareStats.h	/^	bool m_bCompareDone; \/**< Have we finished last compare? *\/$/;"	m	class:CompareStats	typeref:typename:bool
m_bCompareReady	DirCompProgressBar.h	/^	bool m_bCompareReady; \/**< Compare ready, waiting for closing? *\/$/;"	m	class:DirCompProgressBar	typeref:typename:bool
m_bConstrainNonChildren	Common/CMoveConstraint.h	/^	bool m_bConstrainNonChildren;$/;"	m	class:prdlg::CMoveConstraint	typeref:typename:bool
m_bContextAdded	PropShell.h	/^	bool m_bContextAdded;$/;"	m	class:PropShell	typeref:typename:bool
m_bContextAdvanced	PropShell.h	/^	bool m_bContextAdvanced;$/;"	m	class:PropShell	typeref:typename:bool
m_bCopyToClipboard	DirCmpReport.h	/^	bool m_bCopyToClipboard; \/**< Do we copy report to clipboard? *\/$/;"	m	class:DirCmpReport	typeref:typename:bool
m_bCopyToClipboard	DirCmpReportDlg.h	/^	bool m_bCopyToClipboard; \/**< Do we copy report to clipboard? *\/$/;"	m	class:DirCmpReportDlg	typeref:typename:bool
m_bCopyToClipboard	DirFilterDlg.h	/^	BOOL m_bCopyToClipboard; \/**< Do we copy report to clipboard? *\/$/;"	m	class:DirFilterDlg	typeref:typename:BOOL
m_bCreateForFileCmp	PropBackups.h	/^	bool m_bCreateForFileCmp;$/;"	m	class:PropBackups	typeref:typename:bool
m_bCreateForFolderCmp	PropBackups.h	/^	bool m_bCreateForFolderCmp;$/;"	m	class:PropBackups	typeref:typename:bool
m_bCreatePatchFile	DiffWrapper.h	/^	bool m_bCreatePatchFile; \/**< Do we create a patch file? *\/$/;"	m	class:CDiffWrapper	typeref:typename:bool
m_bCurrentIsFile	Common/multiformatText.h	/^	bool m_bCurrentIsFile;$/;"	m	class:storageForPlugins	typeref:typename:bool
m_bCurrentIsUnicode	Common/multiformatText.h	/^	bool m_bCurrentIsUnicode;$/;"	m	class:storageForPlugins	typeref:typename:bool
m_bCurrentLineIsDiff	MergeEditView.h	/^	bool m_bCurrentLineIsDiff; \/**< `true` if cursor is in diff line *\/$/;"	m	class:CMergeEditView	typeref:typename:bool
m_bCustomColors	PropTextColors.h	/^	bool            m_bCustomColors;$/;"	m	class:PropTextColors	typeref:typename:bool
m_bDetailView	MergeEditSplitterView.h	/^	bool m_bDetailView;$/;"	m	class:CMergeEditSplitterView	typeref:typename:bool
m_bDetailView	MergeEditView.h	/^	bool m_bDetailView;$/;"	m	class:CMergeEditView	typeref:typename:bool
m_bDetectCodepage	PropCodepage.h	/^	bool	m_bDetectCodepage;$/;"	m	class:PropCodepage	typeref:typename:bool
m_bDetectCodepage2	PropCodepage.h	/^	bool	m_bDetectCodepage2;$/;"	m	class:PropCodepage	typeref:typename:bool
m_bDiff	MergeStatusBar.h	/^	bool m_bDiff[4];$/;"	m	class:CMergeStatusBar	typeref:typename:bool[4]
m_bDisableCancel	SaveClosingDlg.h	/^	bool m_bDisableCancel; \/**< Should we disable Cancel-button? *\/$/;"	m	class:SaveClosingDlg	typeref:typename:bool
m_bDisallowMixedEOL	FileTransform.h	/^	bool		m_bDisallowMixedEOL;$/;"	m	class:PackingInfo	typeref:typename:bool
m_bDllVersion	Common/VersionInfo.h	/^	bool m_bDllVersion; \/**< Dll file version is being queried *\/$/;"	m	class:CVersionInfo	typeref:typename:bool
m_bDoComplete	Common/SuperComboBox.h	/^	bool m_bDoComplete;$/;"	m	class:CSuperComboBox	typeref:typename:bool
m_bDragShowContent	Common/sizecbar.h	/^    bool    m_bDragShowContent = false;$/;"	m	class:CSizingControlBar	typeref:typename:bool
m_bDrawn	LocationView.h	/^	bool m_bDrawn; \/\/*< Is already drawn in location pane? *\/$/;"	m	class:CLocationView	typeref:typename:bool
m_bEditAfterRescan	MergeDoc.h	/^	bool m_bEditAfterRescan[3]; \/**< Left\/middle\/right doc edited after rescanning *\/$/;"	m	class:CMergeDoc	typeref:typename:bool[3]
m_bEnableRescan	MergeDoc.h	/^	bool m_bEnableRescan; \/**< Automatic rescan enabled\/disabled *\/$/;"	m	class:CMergeDoc	typeref:typename:bool
m_bEnableSaveCodepage	LoadSaveCodepageDlg.h	/^	bool m_bEnableSaveCodepage;$/;"	m	class:CLoadSaveCodepageDlg	typeref:typename:bool
m_bEnableSupport	PropArchive.h	/^	bool m_bEnableSupport;$/;"	m	class:PropArchive	typeref:typename:bool
m_bError	Common/multiformatText.h	/^	bool m_bError;$/;"	m	class:storageForPlugins	typeref:typename:bool
m_bEscCloses	DirView.h	/^	bool m_bEscCloses; \/**< Cached value for option for ESC closing window *\/$/;"	m	class:CDirView	typeref:typename:bool
m_bEscShutdown	Merge.h	/^	bool m_bEscShutdown; \/**< If commandline switch -e given ESC closes appliction *\/$/;"	m	class:CMergeApp	typeref:typename:bool
m_bEscShutdown	MergeCmdLineInfo.h	/^	bool m_bEscShutdown; \/**< Pressing ESC will close the application *\/$/;"	m	class:MergeCmdLineInfo	typeref:typename:bool
m_bExitIfNoDiff	Merge.h	/^	MergeCmdLineInfo::ExitNoDiff m_bExitIfNoDiff; \/**< Exit if files are identical? *\/$/;"	m	class:CMergeApp	typeref:typename:MergeCmdLineInfo::ExitNoDiff
m_bExitIfNoDiff	MergeCmdLineInfo.h	/^	ExitNoDiff m_bExitIfNoDiff; \/**< Exit if files are identical. *\/$/;"	m	class:MergeCmdLineInfo	typeref:typename:ExitNoDiff
m_bExpandSubdirs	DirView.h	/^	bool m_bExpandSubdirs;$/;"	m	class:CDirView	typeref:typename:bool
m_bExpandSubdirs	PropCompareFolder.h	/^	bool    m_bExpandSubdirs;$/;"	m	class:PropCompareFolder	typeref:typename:bool
m_bExtendedFileNames	Common/SuperComboBox.h	/^	bool m_bExtendedFileNames;$/;"	m	class:CSuperComboBox	typeref:typename:bool
m_bFilterCommentsLines	PropCompare.h	/^	bool    m_bFilterCommentsLines;$/;"	m	class:PropCompare	typeref:typename:bool
m_bFirstTime	MainFrm.h	/^	bool m_bFirstTime; \/**< If first time frame activated, get  pos from reg *\/$/;"	m	class:CMainFrame	typeref:typename:bool
m_bGeneratingReport	DirDoc.h	/^	bool m_bGeneratingReport;$/;"	m	class:CDirDoc	typeref:typename:bool
m_bHasBom	MergeStatusBar.h	/^		bool m_bHasBom;$/;"	m	class:CMergeStatusBar::MergeStatus	typeref:typename:bool
m_bHasCopyOperations	FileActionScript.h	/^	bool m_bHasCopyOperations; \/**< flag if we've put anything into m_pCopyOperations *\/$/;"	m	class:FileActionScript	typeref:typename:bool
m_bHasDelOperations	FileActionScript.h	/^	bool m_bHasDelOperations; \/**< flag if we've put anything into m_pDelOperations *\/$/;"	m	class:FileActionScript	typeref:typename:bool
m_bHasFilter	ProjectFile.h	/^	bool m_bHasFilter; \/**< Has filter? *\/$/;"	m	class:ProjectFileItem	typeref:typename:bool
m_bHasImageList	Common/SuperComboBox.h	/^	bool m_bHasImageList;$/;"	m	class:CSuperComboBox	typeref:typename:bool
m_bHasLeft	ProjectFile.h	/^	bool m_bHasLeft; \/**< Has left path? *\/$/;"	m	class:ProjectFileItem	typeref:typename:bool
m_bHasMiddle	ProjectFile.h	/^	bool m_bHasMiddle; \/**< Has middle path? *\/$/;"	m	class:ProjectFileItem	typeref:typename:bool
m_bHasMoveOperations	FileActionScript.h	/^	bool m_bHasMoveOperations; \/**< flag if we've put anything into m_pMoveOperations *\/$/;"	m	class:FileActionScript	typeref:typename:bool
m_bHasRenameOperations	FileActionScript.h	/^	bool m_bHasRenameOperations; \/**< flag if we've put anything into m_pRenameOperations *\/$/;"	m	class:FileActionScript	typeref:typename:bool
m_bHasRight	ProjectFile.h	/^	bool m_bHasRight; \/**< Has right path? *\/$/;"	m	class:ProjectFileItem	typeref:typename:bool
m_bHasSubfolders	ProjectFile.h	/^	bool m_bHasSubfolders; \/**< Has subfolders? *\/$/;"	m	class:ProjectFileItem	typeref:typename:bool
m_bHasSyncPoints	MergeDoc.h	/^	bool m_bHasSyncPoints;$/;"	m	class:CMergeDoc	typeref:typename:bool
m_bHideBorders	Common/SplitterWndEx.h	/^	bool m_bHideBorders;$/;"	m	class:CSplitterWndEx	typeref:typename:bool
m_bHiliteSyntax	PropEditor.h	/^	bool    m_bHiliteSyntax;$/;"	m	class:PropEditor	typeref:typename:bool
m_bIgnoreBlankLines	CompareOptions.h	/^	bool m_bIgnoreBlankLines; \/**< Ignore blank lines (both sides) *\/$/;"	m	class:CompareOptions	typeref:typename:bool
m_bIgnoreBlankLines	PropCompare.h	/^	bool    m_bIgnoreBlankLines;$/;"	m	class:PropCompare	typeref:typename:bool
m_bIgnoreCase	CompareOptions.h	/^	bool m_bIgnoreCase; \/**< Ignore case differences? *\/$/;"	m	class:CompareOptions	typeref:typename:bool
m_bIgnoreCase	PropCompare.h	/^	bool    m_bIgnoreCase;$/;"	m	class:PropCompare	typeref:typename:bool
m_bIgnoreCodepage	DiffContext.h	/^	bool m_bIgnoreCodepage;$/;"	m	class:CDiffContext	typeref:typename:bool
m_bIgnoreCodepage	PropCompare.h	/^	bool    m_bIgnoreCodepage;$/;"	m	class:PropCompare	typeref:typename:bool
m_bIgnoreEOLDifference	CompareOptions.h	/^	bool m_bIgnoreEOLDifference; \/**< Ignore EOL style differences? *\/$/;"	m	class:CompareOptions	typeref:typename:bool
m_bIgnoreEol	PropCompare.h	/^	bool    m_bIgnoreEol;$/;"	m	class:PropCompare	typeref:typename:bool
m_bIgnoreRegExp	LineFiltersDlg.h	/^	bool	m_bIgnoreRegExp;$/;"	m	class:LineFiltersDlg	typeref:typename:bool
m_bIgnoreReparsePoints	DiffContext.h	/^	bool m_bIgnoreReparsePoints;$/;"	m	class:CDiffContext	typeref:typename:bool
m_bIgnoreReparsePoints	PropCompareFolder.h	/^	bool    m_bIgnoreReparsePoints;$/;"	m	class:PropCompareFolder	typeref:typename:bool
m_bIgnoreSmallTimeDiff	DiffContext.h	/^	bool m_bIgnoreSmallTimeDiff; \/**< Ignore small timedifferences when comparing by date *\/$/;"	m	class:CDiffContext	typeref:typename:bool
m_bIgnoreSmallTimeDiff	PropCompareFolder.h	/^	bool    m_bIgnoreSmallTimeDiff;$/;"	m	class:PropCompareFolder	typeref:typename:bool
m_bInEditchange	Common/SuperComboBox.h	/^	bool m_bInEditchange;$/;"	m	class:CSuperComboBox	typeref:typename:bool
m_bInSelchange	Common/MDITabBar.h	/^	bool m_bInSelchange;$/;"	m	class:CMDITabBar	typeref:typename:bool
m_bIncludeFileCmpReport	DirCmpReport.h	/^	bool m_bIncludeFileCmpReport; \/**< Do we include file compare report in folder compare report?/;"	m	class:DirCmpReport	typeref:typename:bool
m_bIncludeFileCmpReport	DirCmpReportDlg.h	/^	bool m_bIncludeFileCmpReport; \/**< Do we include file compare report in folder compare report?/;"	m	class:DirCmpReportDlg	typeref:typename:bool
m_bIncludeSubdirs	PropCompareFolder.h	/^	bool    m_bIncludeSubdirs;$/;"	m	class:PropCompareFolder	typeref:typename:bool
m_bIncludeUniqFolders	PropCompareFolder.h	/^	bool    m_bIncludeUniqFolders;$/;"	m	class:PropCompareFolder	typeref:typename:bool
m_bIndentHeuristic	CompareOptions.h	/^	bool m_bIndentHeuristic; \/**< Indent heuristic *\/$/;"	m	class:CompareOptions	typeref:typename:bool
m_bIndentHeuristic	PropCompare.h	/^	bool    m_bIndentHeuristic;$/;"	m	class:PropCompare	typeref:typename:bool
m_bKeepSize	Common/sizecbar.h	/^    bool    m_bKeepSize = false;$/;"	m	class:CSizingControlBar	typeref:typename:bool
m_bLeftReadOnly	ProjectFile.h	/^	bool m_bLeftReadOnly; \/**< Is left path opened as read-only *\/$/;"	m	class:ProjectFileItem	typeref:typename:bool
m_bLoadSaveSameCodepage	LoadSaveCodepageDlg.h	/^	bool    m_bLoadSaveSameCodepage;$/;"	m	class:CLoadSaveCodepageDlg	typeref:typename:bool
m_bMarkedRescan	DirDoc.h	/^	bool m_bMarkedRescan; \/**< If `true` next rescan scans only marked items *\/$/;"	m	class:CDirDoc	typeref:typename:bool
m_bMatchSimilarLines	PropCompare.h	/^	bool    m_bMatchSimilarLines;$/;"	m	class:PropCompare	typeref:typename:bool
m_bMemDC	Common/memdc.h	/^	bool		m_bMemDC;		\/\/ `true` if CDC really is a Memory DC.$/;"	m	class:CMyMemDC	typeref:typename:bool
m_bMergingMode	Merge.h	/^	bool m_bMergingMode; \/**< Merging or Edit mode *\/$/;"	m	class:CMergeApp	typeref:typename:bool
m_bMiddleReadOnly	ProjectFile.h	/^	bool m_bMiddleReadOnly; \/**< Is middle path opened as read-only *\/$/;"	m	class:ProjectFileItem	typeref:typename:bool
m_bMixedEOL	DiffTextBuffer.h	/^	bool m_bMixedEOL; \/**< EOL style of this buffer is mixed? *\/$/;"	m	class:CDiffTextBuffer	typeref:typename:bool
m_bMixedEol	MergeDoc.h	/^	bool m_bMixedEol; \/**< Does this document have mixed EOL style? *\/$/;"	m	class:CMergeDoc	typeref:typename:bool
m_bMouseTracking	Common/MDITabBar.h	/^	bool m_bMouseTracking;$/;"	m	class:CMDITabBar	typeref:typename:bool
m_bMove	UniMarkdownFile.h	/^	bool m_bMove;$/;"	m	class:UniMarkdownFile	typeref:typename:bool
m_bMovedBlocks	PropCompare.h	/^	bool    m_bMovedBlocks;$/;"	m	class:PropCompare	typeref:typename:bool
m_bMustUninitOLE	Common/SuperComboBox.h	/^	bool m_bMustUninitOLE;$/;"	m	class:CSuperComboBox	typeref:typename:bool
m_bNeedIdleTimer	Merge.h	/^	bool m_bNeedIdleTimer;$/;"	m	class:CMergeApp	typeref:typename:bool
m_bNeedSearchFirstDiffItem	DirView.h	/^	bool m_bNeedSearchFirstDiffItem;$/;"	m	class:CDirView	typeref:typename:bool
m_bNeedSearchLastDiffItem	DirView.h	/^	bool m_bNeedSearchLastDiffItem;$/;"	m	class:CDirView	typeref:typename:bool
m_bNoExtensionCheck	SelectUnpackerDlg.h	/^	bool	m_bNoExtensionCheck;$/;"	m	class:CSelectUnpackerDlg	typeref:typename:bool
m_bNoPrefs	MergeCmdLineInfo.h	/^	bool m_bNoPrefs; \/**< Do not load or remember options (preferences) *\/   $/;"	m	class:MergeCmdLineInfo	typeref:typename:bool
m_bNonInteractive	Merge.h	/^	bool m_bNonInteractive;$/;"	m	class:CMergeApp	typeref:typename:bool
m_bNonInteractive	MergeCmdLineInfo.h	/^	bool m_bNonInteractive; \/**< Suppress user's notifications. *\/$/;"	m	class:MergeCmdLineInfo	typeref:typename:bool
m_bOneToOneMapping	Common/ShellFileOperations.h	/^	bool m_bOneToOneMapping; \/**< Same amount of sources and destinations? *\/$/;"	m	class:ShellFileOperations	typeref:typename:bool
m_bOpenToEditor	PatchTool.h	/^	bool m_bOpenToEditor; \/**< Is patch file opened to external editor? *\/$/;"	m	class:CPatchTool	typeref:typename:bool
m_bOriginalFetched	Common/CMoveConstraint.h	/^	bool m_bOriginalFetched;$/;"	m	class:prdlg::CMoveConstraint	typeref:typename:bool
m_bOriginalIsUnicode	Common/multiformatText.h	/^	bool m_bOriginalIsUnicode;$/;"	m	class:storageForPlugins	typeref:typename:bool
m_bOutputUTF8	DirCmpReport.h	/^	bool m_bOutputUTF8;$/;"	m	class:DirCmpReport	typeref:typename:bool
m_bOverwriteSourceFile	Common/multiformatText.h	/^	bool m_bOverwriteSourceFile;	$/;"	m	class:storageForPlugins	typeref:typename:bool
m_bParentSizing	Common/sizecbar.h	/^    bool    m_bParentSizing = false;$/;"	m	class:CSizingControlBar	typeref:typename:bool
m_bPathsAreTemp	DiffWrapper.h	/^	bool m_bPathsAreTemp; \/**< Are compared paths temporary? *\/$/;"	m	class:CDiffWrapper	typeref:typename:bool
m_bPaused	DiffThread.h	/^	bool m_bPaused; \/**< Is compare paused? *\/$/;"	m	class:CDiffThread	typeref:typename:bool
m_bPersistent	Common/CMoveConstraint.h	/^	bool m_bPersistent; \/\/ whether to save position to registry$/;"	m	class:prdlg::CMoveConstraint	typeref:typename:bool
m_bPluginsEnabled	DiffContext.h	/^	bool m_bPluginsEnabled; \/**< Are plugins enabled? *\/$/;"	m	class:CDiffContext	typeref:typename:bool
m_bPluginsEnabled	DiffWrapper.h	/^	bool m_bPluginsEnabled; \/**< Are plugins enabled? *\/$/;"	m	class:CDiffWrapper	typeref:typename:bool
m_bPreserveFiletime	PropGeneral.h	/^	bool  m_bPreserveFiletime;$/;"	m	class:PropGeneral	typeref:typename:bool
m_bPrev	MergeDoc.cpp	/^	bool m_bPrev;$/;"	m	class:RescanSuppress	typeref:typename:bool	file:
m_bProbeType	PropArchive.h	/^	bool m_bProbeType;$/;"	m	class:PropArchive	typeref:typename:bool
m_bPropertyPage	Common/CMoveConstraint.h	/^	bool m_bPropertyPage;$/;"	m	class:prdlg::CMoveConstraint	typeref:typename:bool
m_bPropertySheet	Common/CMoveConstraint.h	/^	bool m_bPropertySheet;$/;"	m	class:prdlg::CMoveConstraint	typeref:typename:bool
m_bRO	DirDoc.h	/^	bool m_bRO[3]; \/**< Is left\/middle\/right side read-only *\/$/;"	m	class:CDirDoc	typeref:typename:bool[3]
m_bRO	ImgMergeFrm.h	/^	bool m_bRO[3];$/;"	m	class:CImgMergeFrame	typeref:typename:bool[3]
m_bReadOnly	OpenView.h	/^	bool m_bReadOnly[3];$/;"	m	class:COpenView	typeref:typename:bool[3]
m_bRecalculateBlocks	LocationView.h	/^	bool m_bRecalculateBlocks; \/\/*< Recalculate diff blocks in next repaint.$/;"	m	class:CLocationView	typeref:typename:bool
m_bRecurse	MergeCmdLineInfo.h	/^	bool m_bRecurse; \/**< Include sub folder in directories compare. *\/$/;"	m	class:MergeCmdLineInfo	typeref:typename:bool
m_bRecurse	OpenDoc.h	/^	bool	m_bRecurse;$/;"	m	class:COpenDoc	typeref:typename:bool
m_bRecurse	OpenView.h	/^	bool	m_bRecurse;$/;"	m	class:COpenView	typeref:typename:bool
m_bRecursive	DiffContext.h	/^	bool m_bRecursive; \/**< Do we include subfolders to compare? *\/$/;"	m	class:CDiffContext	typeref:typename:bool
m_bReset	DirColsDlg.h	/^	bool m_bReset;$/;"	m	class:CDirColsDlg	typeref:typename:bool
m_bResizePanes	Common/SplitterWndEx.h	/^	bool m_bResizePanes;$/;"	m	class:CSplitterWndEx	typeref:typename:bool
m_bRightReadOnly	ProjectFile.h	/^	bool m_bRightReadOnly; \/**< Is right path opened as read-only *\/$/;"	m	class:ProjectFileItem	typeref:typename:bool
m_bScroll	PropGeneral.h	/^	bool  m_bScroll;$/;"	m	class:PropGeneral	typeref:typename:bool
m_bShowErrors	MainFrm.h	/^	bool m_bShowErrors; \/**< Show folder compare error items? *\/$/;"	m	class:CMainFrame	typeref:typename:bool
m_bShowSelectFolderOnStartup	PropGeneral.h	/^	bool  m_bShowSelectFolderOnStartup;$/;"	m	class:PropGeneral	typeref:typename:bool
m_bShowUsage	MergeCmdLineInfo.h	/^	bool m_bShowUsage; \/**< Show a brief reminder to command line arguments. *\/$/;"	m	class:MergeCmdLineInfo	typeref:typename:bool
m_bSingleInstance	MergeCmdLineInfo.h	/^	bool m_bSingleInstance; \/**< Allow only one instance of WinMerge executable. *\/$/;"	m	class:MergeCmdLineInfo	typeref:typename:bool
m_bSingleInstance	PropGeneral.h	/^	bool  m_bSingleInstance;$/;"	m	class:PropGeneral	typeref:typename:bool
m_bSortAsc	Common/SortHeaderCtrl.h	/^	bool	m_bSortAsc;$/;"	m	class:CSortHeaderCtrl	typeref:typename:bool
m_bStopAfterFirst	PropCompareFolder.h	/^	bool    m_bStopAfterFirst;$/;"	m	class:PropCompareFolder	typeref:typename:bool
m_bStopAfterFirstDiff	CompareOptions.h	/^	bool m_bStopAfterFirstDiff; \/**< Optimize compare by stopping after first difference? *\/$/;"	m	class:QuickCompareOptions	typeref:typename:bool
m_bStopAfterFirstDiff	DiffContext.h	/^	bool m_bStopAfterFirstDiff;$/;"	m	class:CDiffContext	typeref:typename:bool
m_bSubclassed	Common/CMoveConstraint.h	/^	bool m_bSubclassed;$/;"	m	class:prdlg::CMoveConstraint	typeref:typename:bool
m_bSuppress	MergeDoc.cpp	/^	bool m_bSuppress;$/;"	m	class:RescanSuppress	typeref:typename:bool	file:
m_bTimeoutDisabled	Common/MessageBoxDialog.h	/^	bool		m_bTimeoutDisabled;	\/\/ Flag whether the timeout is disabled.$/;"	m	class:CMessageBoxDialog	typeref:typename:bool
m_bTracking	Common/sizecbar.h	/^    bool    m_bTracking = false;$/;"	m	class:CSizingControlBar	typeref:typename:bool
m_bTreeMode	DirView.h	/^	bool m_bTreeMode; \/**< `true` if tree mode is on*\/$/;"	m	class:CDirView	typeref:typename:bool
m_bUnicode	Common/UniFile.h	/^	bool m_bUnicode; \/**< Is the file unicode file? *\/$/;"	m	class:UniLocalFile	typeref:typename:bool
m_bUnicodingChecked	Common/UniFile.h	/^	bool m_bUnicodingChecked; \/**< Has unicoding been checked for the file? *\/$/;"	m	class:UniLocalFile	typeref:typename:bool
m_bUseColors	DirView.h	/^	bool m_bUseColors;$/;"	m	class:CDirView	typeref:typename:bool
m_bUseColors	PropDirColors.h	/^	bool            m_bUseColors;$/;"	m	class:PropDirColors	typeref:typename:bool
m_bUseDiffList	DiffWrapper.h	/^	bool m_bUseDiffList; \/**< Are results returned in difflist? *\/$/;"	m	class:CDiffWrapper	typeref:typename:bool
m_bUseMask	FileFilterHelper.h	/^	bool m_bUseMask;   \/*< If `true` file mask is used, filter otherwise *\/$/;"	m	class:FileFilterHelper	typeref:typename:bool
m_bUseRecycleBin	FileActionScript.h	/^	bool m_bUseRecycleBin; \/**< Use recycle bin for script actions? *\/$/;"	m	class:FileActionScript	typeref:typename:bool
m_bUseRecycleBin	PropRegistry.h	/^	bool    m_bUseRecycleBin;$/;"	m	class:PropRegistry	typeref:typename:bool
m_bUserCancelEdit	DirView.h	/^	bool m_bUserCancelEdit; \/**< `true` if the user cancels rename *\/$/;"	m	class:CDirView	typeref:typename:bool
m_bVerifyPaths	PropGeneral.h	/^	bool  m_bVerifyPaths;$/;"	m	class:PropGeneral	typeref:typename:bool
m_bVersionFound	Common/VersionInfo.h	/^	bool m_bVersionFound; \/**< Was version info found from file? *\/$/;"	m	class:CVersionInfo	typeref:typename:bool
m_bVersionOnly	Common/VersionInfo.h	/^	bool m_bVersionOnly; \/**< Ask version numbers only *\/$/;"	m	class:CVersionInfo	typeref:typename:bool
m_bViewLineDifferences	PropEditor.h	/^	bool    m_bViewLineDifferences;$/;"	m	class:PropEditor	typeref:typename:bool
m_bWalkUniques	DiffContext.h	/^	bool m_bWalkUniques;$/;"	m	class:CDiffContext	typeref:typename:bool
m_bWithFile	FileTransform.h	/^	bool		m_bWithFile;$/;"	m	class:PluginForFile	typeref:typename:bool
m_bWithFileFlags	SelectUnpackerDlg.h	/^	std::vector<bool> m_bWithFileFlags;$/;"	m	class:CSelectUnpackerDlg	typeref:typename:std::vector<bool>
m_bar	LocationView.h	/^	CRect m_bar[3]; \/\/*< Left\/middle\/riggt bar *\/$/;"	m	class:CLocationView	typeref:typename:CRect[3]
m_base	Common/UniFile.h	/^	unsigned char *m_base; \/\/ points to base of mapping$/;"	m	class:UniMemFile	typeref:typename:unsigned char *
m_base	MergeStatusBar.h	/^		int m_base; \/**< 0 for left, 1 for right *\/$/;"	m	class:CMergeStatusBar::MergeStatus	typeref:typename:int
m_biHide	Common/scbarg.h	/^    CSCBButton m_biHide;$/;"	m	class:CSizingControlBarG	typeref:typename:CSCBButton
m_bitmap	Common/memdc.h	/^	CBitmap		m_bitmap;		\/\/ Offscreen bitmap$/;"	m	class:CMyMemDC	typeref:typename:CBitmap
m_bitmapBackground	Common/BCMenu.h	/^	COLORREF m_bitmapBackground;$/;"	m	class:BCMenu	typeref:typename:COLORREF
m_bitmapBackgroundFlag	Common/BCMenu.h	/^	bool m_bitmapBackgroundFlag;$/;"	m	class:BCMenu	typeref:typename:bool
m_bol0	CompareEngines/ByteComparator.h	/^	bool m_bol0; \/**< 0-side is at beginning of line (!ignore_eol_differences & ignore_blank_lines/;"	m	class:CompareEngines::ByteComparator	typeref:typename:bool
m_bol1	CompareEngines/ByteComparator.h	/^	bool m_bol1; \/**< 1-side is at beginning of line (!ignore_eol_differences & ignore_blank_lines/;"	m	class:CompareEngines::ByteComparator	typeref:typename:bool
m_bom	Common/UniFile.h	/^	bool m_bom; \/**< Did the file have a BOM when reading? *\/$/;"	m	class:UniLocalFile	typeref:typename:bool
m_bom	FileTextEncoding.h	/^	bool m_bom; \/**< Unicode byte marker *\/$/;"	m	struct:FileTextEncoding	typeref:typename:bool
m_brBackGnd	FilepathEdit.h	/^	CBrush m_brBackGnd; \/**< Background brush for the control. *\/$/;"	m	class:CFilepathEdit	typeref:typename:CBrush
m_breakChars	PropEditor.h	/^	String m_breakChars;$/;"	m	class:PropEditor	typeref:typename:String
m_breakType	stringdiffsi.h	/^	int m_breakType;$/;"	m	class:strdiff::stringdiffs	typeref:typename:int
m_bstr	Common/multiformatText.h	/^	BSTR m_bstr;$/;"	m	class:storageForPlugins	typeref:typename:BSTR
m_btnMarginBackground	PropTextColors.h	/^	CColorButton    m_btnMarginBackground;$/;"	m	class:PropTextColors	typeref:typename:CColorButton
m_btnMarkerColors	PropMarkerColors.h	/^	CColorButton    m_btnMarkerColors[4];$/;"	m	class:PropMarkerColors	typeref:typename:CColorButton[4]
m_btnRegularBackground	PropTextColors.h	/^	CColorButton    m_btnRegularBackground;$/;"	m	class:PropTextColors	typeref:typename:CColorButton
m_btnRegularText	PropTextColors.h	/^	CColorButton    m_btnRegularText;$/;"	m	class:PropTextColors	typeref:typename:CColorButton
m_btnSelectionBackground	PropTextColors.h	/^	CColorButton    m_btnSelectionBackground;$/;"	m	class:PropTextColors	typeref:typename:CColorButton
m_btnSelectionText	PropTextColors.h	/^	CColorButton    m_btnSelectionText;$/;"	m	class:PropTextColors	typeref:typename:CColorButton
m_btnWhitespaceBackground	PropTextColors.h	/^	CColorButton    m_btnWhitespaceBackground;$/;"	m	class:PropTextColors	typeref:typename:CColorButton
m_bvalue	Common/varprop.h	/^	bool m_bvalue;    \/**< Boolean value of the variant. *\/$/;"	m	class:varprop::VariantValue	typeref:typename:bool
m_cCustColors	PropColors.h	/^	std::array<COLORREF, CustomColorsAmount> m_cCustColors;$/;"	m	class:PropMergeColors	typeref:typename:std::array<COLORREF,CustomColorsAmount>
m_cCustColors	PropDirColors.h	/^	std::array<COLORREF, CustomDirColorsAmount> m_cCustColors;$/;"	m	class:PropDirColors	typeref:typename:std::array<COLORREF,CustomDirColorsAmount>
m_cCustColors	PropMarkerColors.h	/^	std::array<COLORREF, 16> m_cCustColors;$/;"	m	class:PropMarkerColors	typeref:typename:std::array<COLORREF,16>
m_cCustColors	PropSyntaxColors.h	/^	std::array<COLORREF, 16> m_cCustColors;$/;"	m	class:PropSyntaxColors	typeref:typename:std::array<COLORREF,16>
m_cCustColors	PropTextColors.h	/^	std::array<COLORREF, 16> m_cCustColors;$/;"	m	class:PropTextColors	typeref:typename:std::array<COLORREF,16>
m_cCustomCodepageValue	PropCodepage.h	/^	String	m_cCustomCodepageValue;$/;"	m	class:PropCodepage	typeref:typename:String
m_cDiff	PropColors.h	/^	CColorButton	m_cDiff;$/;"	m	class:PropMergeColors	typeref:typename:CColorButton
m_cDiffDeleted	PropColors.h	/^	CColorButton	m_cDiffDeleted;$/;"	m	class:PropMergeColors	typeref:typename:CColorButton
m_cDiffText	PropColors.h	/^	CColorButton	m_cDiffText;$/;"	m	class:PropMergeColors	typeref:typename:CColorButton
m_cDirItemDiff	PropDirColors.h	/^	CColorButton	m_cDirItemDiff;$/;"	m	class:PropDirColors	typeref:typename:CColorButton
m_cDirItemDiffText	PropDirColors.h	/^	CColorButton	m_cDirItemDiffText;$/;"	m	class:PropDirColors	typeref:typename:CColorButton
m_cDirItemEqual	PropDirColors.h	/^	CColorButton	m_cDirItemEqual;$/;"	m	class:PropDirColors	typeref:typename:CColorButton
m_cDirItemEqualText	PropDirColors.h	/^	CColorButton	m_cDirItemEqualText;$/;"	m	class:PropDirColors	typeref:typename:CColorButton
m_cDirItemFiltered	PropDirColors.h	/^	CColorButton	m_cDirItemFiltered;$/;"	m	class:PropDirColors	typeref:typename:CColorButton
m_cDirItemFilteredText	PropDirColors.h	/^	CColorButton	m_cDirItemFilteredText;$/;"	m	class:PropDirColors	typeref:typename:CColorButton
m_cDirItemNotExistAll	PropDirColors.h	/^	CColorButton	m_cDirItemNotExistAll;$/;"	m	class:PropDirColors	typeref:typename:CColorButton
m_cDirItemNotExistAllText	PropDirColors.h	/^	CColorButton	m_cDirItemNotExistAllText;$/;"	m	class:PropDirColors	typeref:typename:CColorButton
m_cMoved	PropColors.h	/^	CColorButton	m_cMoved;$/;"	m	class:PropMergeColors	typeref:typename:CColorButton
m_cMovedDeleted	PropColors.h	/^	CColorButton	m_cMovedDeleted;$/;"	m	class:PropMergeColors	typeref:typename:CColorButton
m_cMovedText	PropColors.h	/^	CColorButton	m_cMovedText;$/;"	m	class:PropMergeColors	typeref:typename:CColorButton
m_cRef	DropHandler.h	/^	LONG m_cRef;$/;"	m	class:DropHandler	typeref:typename:LONG
m_cSNP	PropColors.h	/^	CColorButton	m_cSNP;$/;"	m	class:PropMergeColors	typeref:typename:CColorButton
m_cSNPDeleted	PropColors.h	/^	CColorButton	m_cSNPDeleted;$/;"	m	class:PropMergeColors	typeref:typename:CColorButton
m_cSNPText	PropColors.h	/^	CColorButton	m_cSNPText;$/;"	m	class:PropMergeColors	typeref:typename:CColorButton
m_cSelDiff	PropColors.h	/^	CColorButton	m_cSelDiff;$/;"	m	class:PropMergeColors	typeref:typename:CColorButton
m_cSelDiffDeleted	PropColors.h	/^	CColorButton	m_cSelDiffDeleted;$/;"	m	class:PropMergeColors	typeref:typename:CColorButton
m_cSelDiffText	PropColors.h	/^	CColorButton	m_cSelDiffText;$/;"	m	class:PropMergeColors	typeref:typename:CColorButton
m_cSelMoved	PropColors.h	/^	CColorButton	m_cSelMoved;$/;"	m	class:PropMergeColors	typeref:typename:CColorButton
m_cSelMovedDeleted	PropColors.h	/^	CColorButton	m_cSelMovedDeleted;$/;"	m	class:PropMergeColors	typeref:typename:CColorButton
m_cSelMovedText	PropColors.h	/^	CColorButton	m_cSelMovedText;$/;"	m	class:PropMergeColors	typeref:typename:CColorButton
m_cSelSNP	PropColors.h	/^	CColorButton	m_cSelSNP;$/;"	m	class:PropMergeColors	typeref:typename:CColorButton
m_cSelSNPDeleted	PropColors.h	/^	CColorButton	m_cSelSNPDeleted;$/;"	m	class:PropMergeColors	typeref:typename:CColorButton
m_cSelSNPText	PropColors.h	/^	CColorButton	m_cSelSNPText;$/;"	m	class:PropMergeColors	typeref:typename:CColorButton
m_cSelWordDiff	PropColors.h	/^	CColorButton	m_cSelWordDiff;$/;"	m	class:PropMergeColors	typeref:typename:CColorButton
m_cSelWordDiffDeleted	PropColors.h	/^	CColorButton	m_cSelWordDiffDeleted;$/;"	m	class:PropMergeColors	typeref:typename:CColorButton
m_cSelWordDiffText	PropColors.h	/^	CColorButton	m_cSelWordDiffText;$/;"	m	class:PropMergeColors	typeref:typename:CColorButton
m_cTrivial	PropColors.h	/^	CColorButton	m_cTrivial;$/;"	m	class:PropMergeColors	typeref:typename:CColorButton
m_cTrivialDeleted	PropColors.h	/^	CColorButton	m_cTrivialDeleted;$/;"	m	class:PropMergeColors	typeref:typename:CColorButton
m_cTrivialText	PropColors.h	/^	CColorButton	m_cTrivialText;$/;"	m	class:PropMergeColors	typeref:typename:CColorButton
m_cWordDiff	PropColors.h	/^	CColorButton	m_cWordDiff;$/;"	m	class:PropMergeColors	typeref:typename:CColorButton
m_cWordDiffDeleted	PropColors.h	/^	CColorButton	m_cWordDiffDeleted;$/;"	m	class:PropMergeColors	typeref:typename:CColorButton
m_cWordDiffText	PropColors.h	/^	CColorButton	m_cWordDiffText;$/;"	m	class:PropMergeColors	typeref:typename:CColorButton
m_cacheWordDiffs	MergeDoc.h	/^	std::map<int, std::vector<WordDiff> > m_cacheWordDiffs;$/;"	m	class:CMergeDoc	typeref:typename:std::map<int,std::vector<WordDiff>>
m_cachedColors	DirView.h	/^	DIRCOLORSETTINGS m_cachedColors; \/**< Cached color settings *\/$/;"	m	class:CDirView	typeref:typename:DIRCOLORSETTINGS
m_cachedColors	MergeEditView.h	/^	COLORSETTINGS m_cachedColors; \/**< Cached color settings *\/$/;"	m	class:CMergeEditView	typeref:typename:COLORSETTINGS
m_cachedColors	MergeStatusBar.h	/^	COLORSETTINGS m_cachedColors;$/;"	m	class:CMergeStatusBar	typeref:typename:COLORSETTINGS
m_callback	DropHandler.h	/^	std::function<void(const std::vector<String>&)> m_callback;$/;"	m	class:DropHandler	typeref:typename:std::function<void (const std::vector<String> &)>
m_callbackfunc	EditorFilepathBar.h	/^	std::function<void(int)> m_callbackfunc;$/;"	m	class:CEditorFilePathBar	typeref:typename:std::function<void (int)>
m_caption	ConfirmFolderCopyDlg.h	/^	String m_caption;$/;"	m	class:ConfirmFolderCopyDlg	typeref:typename:String
m_caption	DirActions.h	/^	String m_caption;$/;"	m	struct:ConfirmationNeededException	typeref:typename:String
m_caseSensitive	PatchDlg.h	/^	bool m_caseSensitive;$/;"	m	class:CPatchDlg	typeref:typename:bool
m_case_sensitive	stringdiffsi.h	/^	bool m_case_sensitive;$/;"	m	class:strdiff::stringdiffs	typeref:typename:bool
m_cboUnpackerName	SelectUnpackerDlg.h	/^	CComboBox	m_cboUnpackerName;$/;"	m	class:CSelectUnpackerDlg	typeref:typename:CComboBox
m_charsize	Common/UniFile.h	/^	int m_charsize; \/\/ 2 for UCS-2, else 1$/;"	m	class:UniLocalFile	typeref:typename:int
m_checkBgWidth	Common/BCMenu.cpp	/^int BCMenu::m_checkBgWidth = 0;$/;"	m	class:BCMenu	typeref:typename:int
m_checkBgWidth	Common/BCMenu.h	/^	static int m_checkBgWidth;$/;"	m	class:BCMenu	typeref:typename:int
m_clrFill	Common/ColorButton.h	/^	COLORREF m_clrFill;$/;"	m	class:CColorButton	typeref:typename:COLORREF
m_clrMainInstructionFont	Common/MessageBoxDialog.h	/^	COLORREF    m_clrMainInstructionFont;$/;"	m	class:CMessageBoxDialog	typeref:typename:COLORREF
m_cmdFirst	Common/ShellContextMenu.h	/^	const UINT m_cmdFirst; \/**< minimum value for a menu item identifier *\/$/;"	m	class:CShellContextMenu	typeref:typename:const UINT
m_cmdLast	Common/ShellContextMenu.h	/^	const UINT m_cmdLast; \/**< maximum value for a menu item identifier *\/$/;"	m	class:CShellContextMenu	typeref:typename:const UINT
m_codepage	Common/UniFile.h	/^	int m_codepage; \/\/ only valid if m_unicoding==ucr::NONE;$/;"	m	class:UniLocalFile	typeref:typename:int
m_codepage	Common/multiformatText.h	/^	int m_codepage;$/;"	m	class:storageForPlugins	typeref:typename:int
m_codepage	CompareEngines/Wrap_DiffUtils.h	/^	int m_codepage; \/**< Codepage used in line filter *\/$/;"	m	class:CompareEngines::DiffUtils	typeref:typename:int
m_codepage	FileTextEncoding.h	/^	int m_codepage; \/**< 8bit codepage, if applicable, -1 is unknown or N\/A *\/$/;"	m	struct:FileTextEncoding	typeref:typename:int
m_colRegKeys	DirCmpReport.h	/^	std::vector<String> m_colRegKeys; \/**< Key names for currently displayed columns *\/$/;"	m	class:DirCmpReport	typeref:typename:std::vector<String>
m_colorButtons	PropSyntaxColors.h	/^	std::array<CColorButton, COLORINDEX_LAST + 1> m_colorButtons;$/;"	m	class:PropSyntaxColors	typeref:typename:std::array<CColorButton,COLORINDEX_LAST+1>
m_colorder	DirViewColItems.h	/^	std::vector<int> m_colorder; \/**< colorder[logical#]=physical# *\/$/;"	m	class:DirViewColItems	typeref:typename:std::vector<int>
m_cols	DirColsDlg.h	/^	ColumnArray m_cols; \/**< Column list. *\/$/;"	m	class:CDirColsDlg	typeref:typename:ColumnArray
m_comboAutodetectType	PropCodepage.h	/^	CComboBox m_comboAutodetectType;$/;"	m	class:PropCodepage	typeref:typename:CComboBox
m_comboContext	PatchDlg.h	/^	CSuperComboBox m_comboContext;$/;"	m	class:CPatchDlg	typeref:typename:CSuperComboBox
m_comboCustomCodepageValue	PropCodepage.h	/^	CComboBox m_comboCustomCodepageValue;$/;"	m	class:PropCodepage	typeref:typename:CComboBox
m_comboStyle	PatchDlg.h	/^	CComboBox m_comboStyle;$/;"	m	class:CPatchDlg	typeref:typename:CComboBox
m_compareMethod	PropCompareFolder.h	/^	int     m_compareMethod;$/;"	m	class:PropCompareFolder	typeref:typename:int
m_compareStart	DirView.h	/^	clock_t m_compareStart; \/**< Starting process time of the compare *\/$/;"	m	class:CDirView	typeref:typename:clock_t
m_constraint	ConfirmFolderCopyDlg.h	/^	prdlg::CMoveConstraint m_constraint; \/\/*< Resizes dialog controls when dialog resized *\/$/;"	m	class:ConfirmFolderCopyDlg	typeref:typename:prdlg::CMoveConstraint
m_constraint	OpenView.h	/^	prdlg::CMoveConstraint m_constraint;$/;"	m	class:COpenView	typeref:typename:prdlg::CMoveConstraint
m_constraint	SaveClosingDlg.h	/^	prdlg::CMoveConstraint m_constraint; \/**< Resizes dialog controls when dialog resized *\/$/;"	m	class:SaveClosingDlg	typeref:typename:prdlg::CMoveConstraint
m_container	Common/PidlContainer.h	/^	PidlContainer m_container; \/**< stores items *\/$/;"	m	class:CPidlContainer	typeref:typename:PidlContainer
m_contextLines	CompareOptions.h	/^	int m_contextLines; \/**< Number of context lines (for patch files) *\/$/;"	m	class:DiffutilsOptions	typeref:typename:int
m_contextLines	PatchDlg.h	/^	int m_contextLines; \/**< How many context lines are added. *\/$/;"	m	class:CPatchDlg	typeref:typename:int
m_counts	CompareStats.h	/^	std::array<std::atomic_int, RESULT_COUNT> m_counts; \/**< Table storing result counts *\/$/;"	m	class:CompareStats	typeref:typename:std::array<std::atomic_int,RESULT_COUNT>
m_cr0	CompareEngines/ByteComparator.h	/^	bool m_cr0; \/**< 0-side has a CR at end of buffer (might be split CR\/LF) *\/$/;"	m	class:CompareEngines::ByteComparator	typeref:typename:bool
m_cr1	CompareEngines/ByteComparator.h	/^	bool m_cr1; \/**< 1-side has a CR at end of buffer (might be split CR\/LF) *\/$/;"	m	class:CompareEngines::ByteComparator	typeref:typename:bool
m_crBackGnd	FilepathEdit.h	/^	COLORREF m_crBackGnd; \/**< Control's background color. *\/$/;"	m	class:CFilepathEdit	typeref:typename:COLORREF
m_crText	FilepathEdit.h	/^	COLORREF m_crText; \/**< Control's text color. *\/$/;"	m	class:CFilepathEdit	typeref:typename:COLORREF
m_ctlExt	OpenView.h	/^	CSuperComboBox	m_ctlExt;$/;"	m	class:COpenView	typeref:typename:CSuperComboBox
m_ctlFile1	PatchDlg.h	/^	CSuperComboBox m_ctlFile1;$/;"	m	class:CPatchDlg	typeref:typename:CSuperComboBox
m_ctlFile2	PatchDlg.h	/^	CSuperComboBox m_ctlFile2;$/;"	m	class:CPatchDlg	typeref:typename:CSuperComboBox
m_ctlLangList	PropGeneral.h	/^	CComboBox	m_ctlLangList;$/;"	m	class:PropGeneral	typeref:typename:CComboBox
m_ctlPath	OpenView.h	/^	CSuperComboBox	m_ctlPath[3];$/;"	m	class:COpenView	typeref:typename:CSuperComboBox[3]
m_ctlReportFile	DirCmpReportDlg.h	/^	CSuperComboBox m_ctlReportFile; \/**< Report filename control *\/$/;"	m	class:DirCmpReportDlg	typeref:typename:CSuperComboBox
m_ctlReportFile	DirFilterDlg.h	/^	CSuperComboBox m_ctlReportFile; \/**< Report filename control *\/$/;"	m	class:DirFilterDlg	typeref:typename:CSuperComboBox
m_ctlResult	PatchDlg.h	/^	CSuperComboBox m_ctlResult;$/;"	m	class:CPatchDlg	typeref:typename:CSuperComboBox
m_ctlSortHeader	DirView.h	/^	CSortHeaderCtrl m_ctlSortHeader;$/;"	m	class:CDirView	typeref:typename:CSortHeaderCtrl
m_ctlStyle	DirCmpReportDlg.h	/^	CComboBox m_ctlStyle; \/**< Report type control *\/$/;"	m	class:DirCmpReportDlg	typeref:typename:CComboBox
m_ctlStyle	DirFilterDlg.h	/^	CComboBox m_ctlStyle; \/**< Report type control *\/$/;"	m	class:DirFilterDlg	typeref:typename:CComboBox
m_ctxt	DirActions.h	/^	const CDiffContext& m_ctxt;$/;"	m	struct:DirActions	typeref:typename:const CDiffContext &
m_curFolderPrefix	7zCommon.h	/^	std::list<String>::iterator m_curFolderPrefix;$/;"	m	class:DirItemEnumerator	typeref:typename:std::list<String>::iterator
m_cur_method	DirActions.h	/^	method_type m_cur_method;$/;"	m	struct:DirActions	typeref:typename:method_type
m_cur_method2	DirActions.h	/^	method_type2 m_cur_method2;$/;"	m	struct:DirActions	typeref:typename:method_type2
m_current	Common/UniFile.h	/^	unsigned char *m_current; \/\/ current location in file$/;"	m	class:UniMemFile	typeref:typename:unsigned char *
m_currentFilter	FileFilterHelper.h	/^	FileFilter * m_currentFilter;     \/*< Currently selected filefilter *\/$/;"	m	class:FileFilterHelper	typeref:typename:FileFilter *
m_currentSize	LocationView.h	/^	CSize m_currentSize; \/\/*< Current size of the panel.$/;"	m	class:CLocationView	typeref:typename:CSize
m_cxEdge	Common/sizecbar.h	/^    int     m_cxEdge = 5;$/;"	m	class:CSizingControlBar	typeref:typename:int
m_data	Common/UniFile.h	/^	int64_t m_data; \/\/ offset after any initial BOM$/;"	m	class:UniStdioFile	typeref:typename:int64_t
m_data	Common/UniFile.h	/^	unsigned char *m_data; \/\/ similar to m_base, but after BOM if any$/;"	m	class:UniMemFile	typeref:typename:unsigned char *
m_dblGripper	Common/scbarg.h	/^    const double m_dblGripper = 9.0;$/;"	m	class:CSizingControlBarG	typeref:typename:const double
m_defCols	DirColsDlg.h	/^	ColumnArray m_defCols; \/**< Default columns. *\/$/;"	m	class:CDirColsDlg	typeref:typename:ColumnArray
m_depth	UniMarkdownFile.h	/^	int m_depth;$/;"	m	class:UniMarkdownFile	typeref:typename:int
m_description	Plugins.h	/^	String      m_description;$/;"	m	class:PluginInfo	typeref:typename:String
m_destBase	FileActionScript.h	/^	String m_destBase; \/**< Base destination path for some operations *\/$/;"	m	class:FileActionScript	typeref:typename:String
m_destinations	Common/ShellFileOperations.h	/^	std::vector<String> m_destinations; \/**< Destination paths. *\/$/;"	m	class:ShellFileOperations	typeref:typename:std::vector<String>
m_di	DirScan.cpp	/^	DIFFITEM& m_di;$/;"	m	class:WorkCompletedNotification	typeref:typename:DIFFITEM &	file:
m_di	DirScan.cpp	/^	DIFFITEM& m_di;$/;"	m	class:WorkNotification	typeref:typename:DIFFITEM &	file:
m_diffAlgorithm	CompareOptions.h	/^	enum DiffAlgorithm m_diffAlgorithm; \/** Diff algorithm *\/$/;"	m	class:CompareOptions	typeref:enum:DiffAlgorithm
m_diffAlgorithm	PatchDlg.h	/^	enum DiffAlgorithm m_diffAlgorithm;$/;"	m	class:CPatchDlg	typeref:enum:DiffAlgorithm
m_diffBlocks	LocationView.h	/^	std::vector<DiffBlock> m_diffBlocks; \/\/*< List of pre-calculated diff blocks.$/;"	m	class:CLocationView	typeref:typename:std::vector<DiffBlock>
m_diffFileData	FolderCmp.h	/^	DiffFileData m_diffFileData;$/;"	m	class:FolderCmp	typeref:typename:DiffFileData
m_diffList	MergeDoc.h	/^	DiffList m_diffList;$/;"	m	class:CMergeDoc	typeref:typename:DiffList
m_diffThread	DirDoc.h	/^	CDiffThread m_diffThread;$/;"	m	class:CDirDoc	typeref:typename:CDiffThread
m_diffWrapper	MergeDoc.h	/^	CDiffWrapper m_diffWrapper;$/;"	m	class:CMergeDoc	typeref:typename:CDiffWrapper
m_diffWrapper	PatchTool.h	/^	CDiffWrapper m_diffWrapper; \/**< DiffWrapper instance we use to create patch. *\/$/;"	m	class:CPatchTool	typeref:typename:CDiffWrapper
m_diffs	DiffList.h	/^	std::vector<DiffRangeInfo> m_diffs; \/**< Difference list. *\/$/;"	m	class:DiffList	typeref:typename:std::vector<DiffRangeInfo>
m_diffthread	DiffThread.cpp	/^	CDiffThread * m_diffthread;$/;"	m	class:DiffThreadAbortable	typeref:typename:CDiffThread *	file:
m_dirfilter	DirView.h	/^	DirViewFilterSettings m_dirfilter;$/;"	m	class:CDirView	typeref:typename:DirViewFilterSettings
m_disabled	Plugins.h	/^	bool        m_disabled;$/;"	m	class:PluginInfo	typeref:typename:bool
m_dispFlags	MergeStatusBar.h	/^	unsigned m_dispFlags[4];$/;"	m	class:CMergeStatusBar	typeref:typename:unsigned[4]
m_dispcols	DirViewColItems.h	/^	int m_dispcols;$/;"	m	class:DirViewColItems	typeref:typename:int
m_displayMovedBlocks	LocationView.h	/^	int m_displayMovedBlocks; \/\/*< Setting for displaying moved blocks *\/$/;"	m	class:CLocationView	typeref:typename:int
m_doc	MergeDoc.cpp	/^	CMergeDoc & m_doc;$/;"	m	class:RescanSuppress	typeref:typename:CMergeDoc &	file:
m_dvi	Common/VersionInfo.h	/^	DLLVERSIONINFO m_dvi;$/;"	m	class:CVersionInfo	typeref:typename:DLLVERSIONINFO
m_dwFlags	OpenDoc.h	/^	std::array<DWORD, 3> m_dwFlags;$/;"	m	class:COpenDoc	typeref:typename:std::array<DWORD,3>
m_dwFlags	OpenView.h	/^	std::array<DWORD, 3> m_dwFlags;$/;"	m	class:COpenView	typeref:typename:std::array<DWORD,3>
m_dwLeftFlags	MergeCmdLineInfo.h	/^	unsigned m_dwLeftFlags; \/**< Left side file's behavior options. *\/$/;"	m	class:MergeCmdLineInfo	typeref:typename:unsigned
m_dwMiddleFlags	MergeCmdLineInfo.h	/^	unsigned m_dwMiddleFlags; \/**< Middle side file's behavior options. *\/$/;"	m	class:MergeCmdLineInfo	typeref:typename:unsigned
m_dwRightFlags	MergeCmdLineInfo.h	/^	unsigned m_dwRightFlags; \/**< Right side file's behavior options. *\/$/;"	m	class:MergeCmdLineInfo	typeref:typename:unsigned
m_dwSCBStyle	Common/sizecbar.h	/^    DWORD   m_dwSCBStyle = 0;$/;"	m	class:CSizingControlBar	typeref:typename:DWORD
m_emptyValue	Common/OptionsMgr.cpp	/^varprop::VariantValue COptionsMgr::m_emptyValue;$/;"	m	class:COptionsMgr	typeref:typename:varprop::VariantValue
m_emptyValue	Common/OptionsMgr.h	/^	static varprop::VariantValue m_emptyValue;$/;"	m	class:COptionsMgr	typeref:typename:varprop::VariantValue
m_encoding	DiffTextBuffer.h	/^	FileTextEncoding m_encoding;$/;"	m	class:CDiffTextBuffer	typeref:typename:FileTextEncoding
m_eol0	CompareEngines/ByteComparator.h	/^	bool m_eol0; \/**< 0-side has an eol *\/$/;"	m	class:CompareEngines::ByteComparator	typeref:typename:bool
m_eol1	CompareEngines/ByteComparator.h	/^	bool m_eol1; \/**< 1-side has an eol *\/$/;"	m	class:CompareEngines::ByteComparator	typeref:typename:bool
m_exconv_list	Common/ExConverter.cpp	/^static std::list<std::unique_ptr<IExconverter> > m_exconv_list;$/;"	v	typeref:typename:std::list<std::unique_ptr<IExconverter>>	file:
m_fAboveY	Common/CMoveConstraint.h	/^		double m_fAboveY;$/;"	m	struct:prdlg::CMoveConstraint::Constraint	typeref:typename:double
m_fExpandX	Common/CMoveConstraint.h	/^		double m_fExpandX;$/;"	m	struct:prdlg::CMoveConstraint::Constraint	typeref:typename:double
m_fExpandY	Common/CMoveConstraint.h	/^		double m_fExpandY;$/;"	m	struct:prdlg::CMoveConstraint::Constraint	typeref:typename:double
m_fLeftX	Common/CMoveConstraint.h	/^		double m_fLeftX;$/;"	m	struct:prdlg::CMoveConstraint::Constraint	typeref:typename:double
m_fShrinkHeight	Common/CMoveConstraint.h	/^	double m_fShrinkHeight;$/;"	m	class:prdlg::CMoveConstraint	typeref:typename:double
m_fShrinkWidth	Common/CMoveConstraint.h	/^	double m_fShrinkWidth;$/;"	m	class:prdlg::CMoveConstraint	typeref:typename:double
m_file1	PatchDlg.h	/^	String	m_file1;$/;"	m	class:CPatchDlg	typeref:typename:String
m_file2	PatchDlg.h	/^	String	m_file2;$/;"	m	class:CPatchDlg	typeref:typename:String
m_fileFilterMgr	FileFilterHelper.h	/^	std::unique_ptr<FileFilterMgr> m_fileFilterMgr;  \/*< Associated FileFilterMgr *\/$/;"	m	class:FileFilterHelper	typeref:typename:std::unique_ptr<FileFilterMgr>
m_fileInfo	HexMergeView.h	/^	DiffFileInfo m_fileInfo;$/;"	m	class:CHexMergeView	typeref:typename:DiffFileInfo
m_fileInfo	ImgMergeFrm.h	/^	DiffFileInfo m_fileInfo[3];$/;"	m	class:CImgMergeFrame	typeref:typename:DiffFileInfo[3]
m_fileList	PatchDlg.h	/^	std::vector<PATCHFILES> m_fileList; \/**< Source files to create patch from *\/$/;"	m	class:CPatchDlg	typeref:typename:std::vector<PATCHFILES>
m_fileList	PatchTool.h	/^    std::vector<PATCHFILES> m_fileList; \/**< List of files to patch. *\/$/;"	m	class:CPatchTool	typeref:typename:std::vector<PATCHFILES>
m_filePaths	HexMergeDoc.h	/^	PathContext m_filePaths; \/**< Filepaths for this document *\/$/;"	m	class:CHexMergeDoc	typeref:typename:PathContext
m_filePaths	ImgMergeFrm.h	/^	PathContext m_filePaths;$/;"	m	class:CImgMergeFrame	typeref:typename:PathContext
m_filePaths	MergeDoc.h	/^	PathContext m_filePaths; \/**< Filepaths for this document *\/$/;"	m	class:CMergeDoc	typeref:typename:PathContext
m_fileResult	PatchDlg.h	/^	String	m_fileResult;$/;"	m	class:CPatchDlg	typeref:typename:String
m_fileVersionLS	FileVersion.h	/^	unsigned m_fileVersionLS; \/\/*< File version least significant dword. *\/$/;"	m	class:FileVersion	typeref:typename:unsigned
m_fileVersionMS	FileVersion.h	/^	unsigned m_fileVersionMS; \/\/*< File version most significant dword. *\/$/;"	m	class:FileVersion	typeref:typename:unsigned
m_filename	Common/UniFile.h	/^	String m_filename;$/;"	m	class:UniLocalFile	typeref:typename:String
m_filename	Common/multiformatText.h	/^	String m_filename;$/;"	m	class:storageForPlugins	typeref:typename:String
m_filepath	Common/UniFile.h	/^	String m_filepath;$/;"	m	class:UniLocalFile	typeref:typename:String
m_filepath	Plugins.h	/^	String      m_filepath;$/;"	m	class:PluginInfo	typeref:typename:String
m_files	Common/ShellContextMenu.h	/^	FilenamesContainer m_files; \/**< List of files to show context menu for *\/$/;"	m	class:CShellContextMenu	typeref:typename:FilenamesContainer
m_files	DiffWrapper.h	/^	PathContext m_files; \/**< Full path to diff'ed file. *\/$/;"	m	class:CDiffWrapper	typeref:typename:PathContext
m_files	OpenDoc.h	/^	PathContext m_files;$/;"	m	class:COpenDoc	typeref:typename:PathContext
m_files	OpenView.h	/^	PathContext m_files;$/;"	m	class:COpenView	typeref:typename:PathContext
m_filesize	Common/UniFile.h	/^	int64_t m_filesize;$/;"	m	class:UniLocalFile	typeref:typename:int64_t
m_filter	ProjectFile.h	/^	String m_filter; \/**< Filter name or mask *\/$/;"	m	class:ProjectFileItem	typeref:typename:String
m_filterCommentsLines	CompareOptions.h	/^	bool m_filterCommentsLines;\/**< Ignore Multiline comments differences.*\/$/;"	m	class:DiffutilsOptions	typeref:typename:bool
m_filteredFilenames	SelectUnpackerDlg.h	/^	String m_filteredFilenames;$/;"	m	class:CSelectUnpackerDlg	typeref:typename:String
m_filters	FileFilterMgr.h	/^	std::vector<FileFilterPtr> m_filters; \/*< List of filters loaded *\/$/;"	m	class:FileFilterMgr	typeref:typename:std::vector<FileFilterPtr>
m_filters	Plugins.h	/^	std::vector<FileFilterElementPtr> m_filters;$/;"	m	class:PluginInfo	typeref:typename:std::vector<FileFilterElementPtr>
m_filtersList	LineFiltersDlg.h	/^	CListCtrl m_filtersList; \/**< List control having filter strings *\/$/;"	m	class:LineFiltersDlg	typeref:typename:CListCtrl
m_filtersText	Plugins.h	/^	String      m_filtersText;$/;"	m	class:PluginInfo	typeref:typename:String
m_filtersTextDefault	Plugins.h	/^	String      m_filtersTextDefault;$/;"	m	class:PluginInfo	typeref:typename:String
m_firstDiffItem	DirView.h	/^	int m_firstDiffItem;$/;"	m	class:CDirView	typeref:typename:int
m_firstSignificant	DiffList.h	/^	int m_firstSignificant; \/**< Index of first significant diff in m_diffs *\/$/;"	m	class:DiffList	typeref:typename:int
m_firstSignificantConflict	DiffList.h	/^	int m_firstSignificantConflict;$/;"	m	class:DiffList	typeref:typename:int
m_firstSignificantLeftMiddle	DiffList.h	/^	int m_firstSignificantLeftMiddle;$/;"	m	class:DiffList	typeref:typename:int
m_firstSignificantLeftOnly	DiffList.h	/^	int m_firstSignificantLeftOnly;$/;"	m	class:DiffList	typeref:typename:int
m_firstSignificantLeftRight	DiffList.h	/^	int m_firstSignificantLeftRight;$/;"	m	class:DiffList	typeref:typename:int
m_firstSignificantMiddleOnly	DiffList.h	/^	int m_firstSignificantMiddleOnly;$/;"	m	class:DiffList	typeref:typename:int
m_firstSignificantMiddleRight	DiffList.h	/^	int m_firstSignificantMiddleRight;$/;"	m	class:DiffList	typeref:typename:int
m_firstSignificantRightOnly	DiffList.h	/^	int m_firstSignificantRightOnly;$/;"	m	class:DiffList	typeref:typename:int
m_flags	Common/ShellFileOperations.h	/^	FILEOP_FLAGS m_flags; \/**< Flags for the operation. *\/$/;"	m	class:ShellFileOperations	typeref:typename:FILEOP_FLAGS
m_fncCollect	DiffThread.h	/^	std::function<void (DiffFuncStruct*)> m_fncCollect;$/;"	m	struct:DiffFuncStruct	typeref:typename:std::function<void (DiffFuncStruct *)>
m_fncCompare	DiffThread.h	/^	std::function<void (DiffFuncStruct*)> m_fncCompare;$/;"	m	struct:DiffFuncStruct	typeref:typename:std::function<void (DiffFuncStruct *)>
m_font	AboutDlg.cpp	/^	CFont m_font;$/;"	m	class:CAboutDlg::Impl	typeref:typename:CFont	file:
m_font	Common/MDITabBar.h	/^	CFont m_font;$/;"	m	class:CMDITabBar	typeref:typename:CFont
m_font	Common/MessageBoxDialog.h	/^	CFont       m_font;$/;"	m	class:CMessageBoxDialog	typeref:typename:CFont
m_font	DirView.h	/^	CFont m_font; \/**< User-selected font *\/$/;"	m	class:CDirView	typeref:typename:CFont
m_font	EditorFilepathBar.h	/^	CFont m_font; \/**< Font for editcontrols *\/$/;"	m	class:CEditorFilePathBar	typeref:typename:CFont
m_fontGUI	Merge.h	/^	CFont m_fontGUI;$/;"	m	class:CMergeApp	typeref:typename:CFont
m_fontMainInstruction	Common/MessageBoxDialog.h	/^	CFont       m_fontMainInstruction;$/;"	m	class:CMessageBoxDialog	typeref:typename:CFont
m_fontSwapButton	OpenView.h	/^	CFont m_fontSwapButton;$/;"	m	class:COpenView	typeref:typename:CFont
m_fp	Common/UniFile.h	/^	FILE * m_fp;$/;"	m	class:UniStdioFile	typeref:typename:FILE *
m_fromPath	ConfirmFolderCopyDlg.h	/^	String m_fromPath;$/;"	m	class:ConfirmFolderCopyDlg	typeref:typename:String
m_fromPath	DirActions.h	/^	String m_fromPath;$/;"	m	struct:ConfirmationNeededException	typeref:typename:String
m_fromText	ConfirmFolderCopyDlg.h	/^	String m_fromText;$/;"	m	class:ConfirmFolderCopyDlg	typeref:typename:String
m_fromText	DirActions.h	/^	String m_fromText;$/;"	m	struct:ConfirmationNeededException	typeref:typename:String
m_function	Common/ShellFileOperations.h	/^	UINT m_function; \/**< Operation used, copy, move, rename or delete. *\/$/;"	m	class:ShellFileOperations	typeref:typename:UINT
m_fvalue	Common/varprop.h	/^	double m_fvalue;  \/**< Floating point value of the variant. *\/$/;"	m	class:varprop::VariantValue	typeref:typename:double
m_gutterWidth	Common/BCMenu.cpp	/^int BCMenu::m_gutterWidth = 0;$/;"	m	class:BCMenu	typeref:typename:int
m_gutterWidth	Common/BCMenu.h	/^	static int m_gutterWidth;$/;"	m	class:BCMenu	typeref:typename:int
m_hCurrentMenu	DirView.h	/^	HMENU m_hCurrentMenu; \/**< Current shell context menu (either left or right) *\/$/;"	m	class:CDirView	typeref:typename:HMENU
m_hCursorNo	OpenView.h	/^	HCURSOR const m_hCursorNo;$/;"	m	class:COpenView	typeref:typename:HCURSOR const
m_hDifferent	MergeFrameCommon.h	/^	HICON m_hDifferent;$/;"	m	class:CMergeFrameCommon	typeref:typename:HICON
m_hIcon	Common/MessageBoxDialog.h	/^	HICON		m_hIcon;			\/\/ Icon to be displayed in the dialog.$/;"	m	class:CMessageBoxDialog	typeref:typename:HICON
m_hIconRotate	OpenView.h	/^	HICON const m_hIconRotate;$/;"	m	class:COpenView	typeref:typename:HICON const
m_hIdentical	MergeFrameCommon.h	/^	HICON m_hIdentical;$/;"	m	class:CMergeFrameCommon	typeref:typename:HICON
m_hKey	Common/RegKey.h	/^	HKEY m_hKey; \/**< Open key (HKLM, HKCU, etc). *\/$/;"	m	class:CRegKeyEx	typeref:typename:HKEY
m_hKeys	Common/RegOptionsMgr.h	/^	std::map<String, HKEY> m_hKeys;$/;"	m	class:CRegOptionsMgr	typeref:typename:std::map<String,HKEY>
m_hLibCharGuess	Common/ExConverter.cpp	/^	HMODULE m_hLibCharGuess;$/;"	m	class:CExconverterMLang	typeref:typename:HMODULE	file:
m_hLibMLang	Common/ExConverter.cpp	/^	HMODULE m_hLibMLang;$/;"	m	class:CExconverterMLang	typeref:typename:HMODULE	file:
m_hMapping	Common/UniFile.h	/^	Poco::SharedMemory *m_hMapping;$/;"	m	class:UniMemFile	typeref:typename:Poco::SharedMemory *
m_hParentWindow	FileActionScript.h	/^	HWND m_hParentWindow; \/**< Parent window for showing messages *\/$/;"	m	class:FileActionScript	typeref:typename:HWND
m_hShellContextMenu	Common/ShellContextMenu.h	/^	HMENU m_hShellContextMenu; \/**< HMENU handle of shell context menu for group of files *\/$/;"	m	class:CShellContextMenu	typeref:typename:HMENU
m_hTheme	Common/BCMenu.cpp	/^HTHEME BCMenu::m_hTheme = nullptr;$/;"	m	class:BCMenu	typeref:typename:HTHEME
m_hTheme	Common/BCMenu.h	/^	static HTHEME m_hTheme;$/;"	m	class:BCMenu	typeref:typename:HTHEME
m_hWnd	OpenView.cpp	/^	HWND m_hWnd;$/;"	m	struct:UpdateButtonStatesThreadParams	typeref:typename:HWND	file:
m_himlSystem	Common/SuperComboBox.cpp	/^HIMAGELIST CSuperComboBox::m_himlSystem = nullptr;$/;"	m	class:CSuperComboBox	typeref:typename:HIMAGELIST
m_himlSystem	Common/SuperComboBox.h	/^	static HIMAGELIST m_himlSystem;$/;"	m	class:CSuperComboBox	typeref:typename:HIMAGELIST
m_htEdge	Common/sizecbar.h	/^    UINT    m_htEdge = 0;$/;"	m	class:CSizingControlBar	typeref:typename:UINT
m_hwndChild	Common/CMoveConstraint.h	/^		HWND m_hwndChild;$/;"	m	struct:prdlg::CMoveConstraint::Constraint	typeref:typename:HWND
m_hwndDlg	Common/CMoveConstraint.h	/^	HWND m_hwndDlg; \/\/ parent of controls - could be FormView or PropertyPage or whatever as well$/;"	m	class:prdlg::CMoveConstraint	typeref:typename:HWND
m_hwndFrame	DiffViewBar.h	/^	HWND m_hwndFrame; \/\/*< Frame window handle *\/$/;"	m	class:CDiffViewBar	typeref:typename:HWND
m_hwndFrame	LocationBar.h	/^	HWND m_hwndFrame; \/\/*< Frame window handle *\/$/;"	m	class:CLocationBar	typeref:typename:HWND
m_hwndFrame	LocationView.h	/^	HWND m_hwndFrame; \/\/*< Frame window handle *\/$/;"	m	class:CLocationView	typeref:typename:HWND
m_hwndListCtrl	IListCtrlImpl.h	/^	HWND m_hwndListCtrl;$/;"	m	class:IListCtrlImpl	typeref:typename:HWND
m_hwndParent	Common/CMoveConstraint.h	/^		HWND m_hwndParent; \/\/ normally is the dialog$/;"	m	struct:prdlg::CMoveConstraint::Constraint	typeref:typename:HWND
m_iGuessEncodingType	DiffContext.h	/^	int m_iGuessEncodingType;$/;"	m	class:CDiffContext	typeref:typename:int
m_iconX	Common/BCMenu.cpp	/^int BCMenu::m_iconX = 16;$/;"	m	class:BCMenu	typeref:typename:int
m_iconX	Common/BCMenu.h	/^	static int m_iconX;$/;"	m	class:BCMenu	typeref:typename:int
m_iconY	Common/BCMenu.cpp	/^int BCMenu::m_iconY = 15;$/;"	m	class:BCMenu	typeref:typename:int
m_iconY	Common/BCMenu.h	/^	static int m_iconY;$/;"	m	class:BCMenu	typeref:typename:int
m_id	DirScan.cpp	/^	int m_id;$/;"	m	class:DiffWorker	typeref:typename:int	file:
m_ignoreBlanks	PatchDlg.h	/^	bool m_ignoreBlanks;$/;"	m	class:CPatchDlg	typeref:typename:bool
m_ignoreEOLDifference	PatchDlg.h	/^	bool m_ignoreEOLDifference;$/;"	m	class:CPatchDlg	typeref:typename:bool
m_ignoreSmallDiff	CompareEngines/TimeSizeCompare.h	/^	bool m_ignoreSmallDiff;$/;"	m	class:CompareEngines::TimeSizeCompare	typeref:typename:bool
m_ignoreWhitespace	CompareOptions.h	/^	enum WhitespaceIgnoreChoices m_ignoreWhitespace; \/**< Ignore whitespace characters *\/$/;"	m	class:CompareOptions	typeref:enum:WhitespaceIgnoreChoices
m_ignore_all_space	CompareEngines/ByteComparator.h	/^	bool m_ignore_all_space; \/**< Ignore all whitespace changes *\/$/;"	m	class:CompareEngines::ByteComparator	typeref:typename:bool
m_ignore_blank_lines	CompareEngines/ByteComparator.h	/^	bool m_ignore_blank_lines; \/**< Ignore blank lines *\/$/;"	m	class:CompareEngines::ByteComparator	typeref:typename:bool
m_ignore_case	CompareEngines/ByteComparator.h	/^	bool m_ignore_case; \/**< Ignore character case *\/$/;"	m	class:CompareEngines::ByteComparator	typeref:typename:bool
m_ignore_eol_diff	CompareEngines/ByteComparator.h	/^	bool m_ignore_eol_diff; \/**< Ignore differences in EOL bytes *\/$/;"	m	class:CompareEngines::ByteComparator	typeref:typename:bool
m_ignore_space_change	CompareEngines/ByteComparator.h	/^	bool m_ignore_space_change; \/**< Ignore change in whitespace char count *\/$/;"	m	class:CompareEngines::ByteComparator	typeref:typename:bool
m_image	AboutDlg.cpp	/^	ATL::CImage m_image;$/;"	m	class:CAboutDlg::Impl	typeref:typename:ATL::CImage	file:
m_image	OpenView.h	/^	ATL::CImage m_image; \/**< Image loader\/viewer for logo image *\/$/;"	m	class:COpenView	typeref:typename:ATL::CImage
m_imageList	DirView.h	/^	CImageList m_imageList;$/;"	m	class:CDirView	typeref:typename:CImageList
m_imageState	DirView.h	/^	CImageList m_imageState;$/;"	m	class:CDirView	typeref:typename:CImageList
m_includeCmdLine	PatchDlg.h	/^	bool m_includeCmdLine;$/;"	m	class:CPatchDlg	typeref:typename:bool
m_indentHeuristic	PatchDlg.h	/^	bool m_indentHeuristic;$/;"	m	class:CPatchDlg	typeref:typename:bool
m_index	7zCommon.h	/^	int m_index;$/;"	m	class:DirItemEnumerator	typeref:typename:int
m_inf	CompareEngines/ByteCompare.h	/^	file_data * m_inf; \/**< Compared files data (for diffutils). *\/$/;"	m	class:CompareEngines::ByteCompare	typeref:typename:file_data *
m_inf	CompareEngines/Wrap_DiffUtils.h	/^	file_data * m_inf; \/**< Compared files data (for diffutils). *\/$/;"	m	class:CompareEngines::DiffUtils	typeref:typename:file_data *
m_inf	DiffFileData.h	/^	file_data * m_inf;$/;"	m	struct:DiffFileData	typeref:typename:file_data *
m_info	AboutDlg.h	/^	AboutInfo m_info;$/;"	m	class:CAboutDlg	typeref:typename:AboutInfo
m_infoHandler	OpenDoc.h	/^	PackingInfo m_infoHandler;$/;"	m	class:COpenDoc	typeref:typename:PackingInfo
m_infoHandler	OpenView.h	/^	PackingInfo m_infoHandler;$/;"	m	class:COpenView	typeref:typename:PackingInfo
m_infoPrediffer	DiffWrapper.h	/^	std::unique_ptr<PrediffingInfo> m_infoPrediffer;$/;"	m	class:CDiffWrapper	typeref:typename:std::unique_ptr<PrediffingInfo>
m_infoPrediffer	PluginManager.h	/^	PrediffingInfo m_infoPrediffer;$/;"	m	struct:PluginFileInfo	typeref:typename:PrediffingInfo
m_infoUnpacker	Merge7zFormatMergePluginImpl.h	/^	PackingInfo m_infoUnpacker;$/;"	m	struct:Merge7zFormatMergePluginImpl	typeref:typename:PackingInfo
m_infoUnpacker	PluginManager.h	/^	PackingInfo m_infoUnpacker;$/;"	m	struct:PluginFileInfo	typeref:typename:PackingInfo
m_invcolorder	DirViewColItems.h	/^	std::vector<int> m_invcolorder; \/**< invcolorder[physical]=logical# *\/$/;"	m	class:DirViewColItems	typeref:typename:std::vector<int>
m_isCanceled	Common/ShellFileOperations.h	/^	bool m_isCanceled; \/**< Did user cancel the operation? *\/$/;"	m	class:ShellFileOperations	typeref:typename:bool
m_items	LineFiltersList.h	/^	std::vector<LineFilterItemPtr> m_items; \/**< List for linefilter items *\/$/;"	m	class:LineFiltersList	typeref:typename:std::vector<LineFilterItemPtr>
m_items	ProjectFile.h	/^	std::list<ProjectFileItem> m_items;$/;"	m	class:ProjectFile	typeref:typename:std::list<ProjectFileItem>
m_ivalue	Common/varprop.h	/^	int m_ivalue;     \/**< Integer value of the variant. *\/$/;"	m	class:varprop::VariantValue	typeref:typename:int
m_langs	PropGeneral.h	/^	std::vector<std::pair<LANGID, String>> m_langs;$/;"	m	class:PropGeneral	typeref:typename:std::vector<std::pair<LANGID,String>>
m_lastCopyFolder	DirView.h	/^	String m_lastCopyFolder; \/**< Last Copy To -target folder. *\/$/;"	m	class:CDirView	typeref:typename:String
m_lastDiffItem	DirView.h	/^	int m_lastDiffItem;$/;"	m	class:CDirView	typeref:typename:int
m_lastError	Common/UniFile.h	/^	UniError m_lastError;$/;"	m	class:UniLocalFile	typeref:typename:UniError
m_lastMatchExpression	FilterList.h	/^	const std::string *m_lastMatchExpression;$/;"	m	class:FilterList	typeref:typename:const std::string *
m_lastSignificant	DiffList.h	/^	int m_lastSignificant; \/**< Index of last significant diff in m_diffs *\/$/;"	m	class:DiffList	typeref:typename:int
m_lastSignificantConflict	DiffList.h	/^	int m_lastSignificantConflict;$/;"	m	class:DiffList	typeref:typename:int
m_lastSignificantLeftMiddle	DiffList.h	/^	int m_lastSignificantLeftMiddle;$/;"	m	class:DiffList	typeref:typename:int
m_lastSignificantLeftOnly	DiffList.h	/^	int m_lastSignificantLeftOnly;$/;"	m	class:DiffList	typeref:typename:int
m_lastSignificantLeftRight	DiffList.h	/^	int m_lastSignificantLeftRight;$/;"	m	class:DiffList	typeref:typename:int
m_lastSignificantMiddleOnly	DiffList.h	/^	int m_lastSignificantMiddleOnly;$/;"	m	class:DiffList	typeref:typename:int
m_lastSignificantMiddleRight	DiffList.h	/^	int m_lastSignificantMiddleRight;$/;"	m	class:DiffList	typeref:typename:int
m_lastSignificantRightOnly	DiffList.h	/^	int m_lastSignificantRightOnly;$/;"	m	class:DiffList	typeref:typename:int
m_leftSave	SaveClosingDlg.h	/^	int m_leftSave; \/**< User's choice for left-side save. *\/$/;"	m	class:SaveClosingDlg	typeref:typename:int
m_lfDiff	MainFrm.h	/^	LOGFONT m_lfDiff; \/**< MergeView user-selected font *\/$/;"	m	class:CMainFrame	typeref:typename:LOGFONT
m_lfDir	MainFrm.h	/^	LOGFONT m_lfDir; \/**< DirView user-selected font *\/$/;"	m	class:CMainFrame	typeref:typename:LOGFONT
m_lineBegin	MergeEditView.h	/^	int m_lineBegin;$/;"	m	class:CMergeEditView	typeref:typename:int
m_lineEnd	MergeEditView.h	/^	int m_lineEnd; $/;"	m	class:CMergeEditView	typeref:typename:int
m_lineInPix	LocationView.h	/^	double m_lineInPix; \/\/*< How many lines is one pixel?$/;"	m	class:CLocationView	typeref:typename:double
m_lineno	Common/UniFile.h	/^	int m_lineno; \/\/ current 0-based line of m_current$/;"	m	class:UniLocalFile	typeref:typename:int
m_lines0	MovedBlocks.cpp	/^	IntSet m_lines0; \/\/ equivalent lines on side#0$/;"	m	struct:EqGroup	typeref:typename:IntSet	file:
m_lines1	MovedBlocks.cpp	/^	IntSet m_lines1; \/\/ equivalent lines on side#1$/;"	m	struct:EqGroup	typeref:typename:IntSet	file:
m_list	FilterList.h	/^	std::vector <filter_item_ptr> m_list;$/;"	m	class:FilterList	typeref:typename:std::vector<filter_item_ptr>
m_list	PluginsListDlg.h	/^	CListCtrl m_list; \/**< A list control for plugins. *\/	$/;"	m	class:PluginsListDlg	typeref:typename:CListCtrl
m_listColumns	DirColsDlg.h	/^	CListCtrl m_listColumns;$/;"	m	class:CDirColsDlg	typeref:typename:CListCtrl
m_listFilters	FileFiltersDlg.h	/^	CListCtrl m_listFilters;$/;"	m	class:FileFiltersDlg	typeref:typename:CListCtrl
m_listeners	DiffThread.h	/^	Poco::BasicEvent<int> m_listeners; \/**< Event listeners *\/$/;"	m	struct:DiffFuncStruct	typeref:typename:Poco::BasicEvent<int>
m_loadmenu	Common/BCMenu.h	/^	bool m_loadmenu;$/;"	m	class:BCMenu	typeref:typename:bool
m_lpDispatch	Plugins.h	/^	LPDISPATCH  m_lpDispatch;$/;"	m	class:PluginInfo	typeref:typename:LPDISPATCH
m_mainThreadScripts	Merge.h	/^	CAssureScriptsForThread * m_mainThreadScripts;$/;"	m	class:CMergeApp	typeref:typename:CAssureScriptsForThread *
m_map	DiffList.h	/^	std::vector<int> m_map;$/;"	m	class:DiffMap	typeref:typename:std::vector<int>
m_map	IntToIntMap.h	/^	std::map<int, int> m_map;$/;"	m	class:IntToIntMap	typeref:typename:std::map<int,int>
m_map	MovedBlocks.cpp	/^	std::map<int, EqGroup *> m_map;$/;"	m	class:CodeToGroupMap	typeref:typename:std::map<int,EqGroup * >	file:
m_map	MovedBlocks.cpp	/^	std::map<int, int> m_map;$/;"	m	class:IntSet	typeref:typename:std::map<int,int>	file:
m_mapPP2HTI	Common/PreferencesDlg.h	/^	CMapPtrToPtr m_mapPP2HTI;$/;"	m	class:CPreferencesDlg	typeref:typename:CMapPtrToPtr
m_map_msgid_to_msgstr	Common/LanguageSelect.h	/^	std::map<std::wstring, std::wstring> m_map_msgid_to_msgstr;$/;"	m	class:CLanguageSelect	typeref:typename:std::map<std::wstring,std::wstring>
m_marginCheck	Common/BCMenu.cpp	/^MARGINS BCMenu::m_marginCheck = { 0 };$/;"	m	class:BCMenu	typeref:typename:MARGINS
m_marginCheck	Common/BCMenu.h	/^	static MARGINS m_marginCheck;$/;"	m	class:BCMenu	typeref:typename:MARGINS
m_marginSeparator	Common/BCMenu.cpp	/^MARGINS BCMenu::m_marginSeparator = { 0 };$/;"	m	class:BCMenu	typeref:typename:MARGINS
m_marginSeparator	Common/BCMenu.h	/^	static MARGINS m_marginSeparator;$/;"	m	class:BCMenu	typeref:typename:MARGINS
m_matchblock	stringdiffsi.h	/^	bool m_matchblock;$/;"	m	class:strdiff::stringdiffs	typeref:typename:bool
m_middleSave	SaveClosingDlg.h	/^	int m_middleSave; \/**< User's choice for middle-side save. *\/$/;"	m	class:SaveClosingDlg	typeref:typename:int
m_mlangcookie	Common/ExConverter.cpp	/^	DWORD m_mlangcookie;$/;"	m	class:CExconverterMLang	typeref:typename:DWORD	file:
m_moved0	MovedLines.h	/^	MovedLinesMap m_moved0; \/**< Moved lines map for first side *\/$/;"	m	class:MovedLines	typeref:typename:MovedLinesMap
m_moved1	MovedLines.h	/^	MovedLinesMap m_moved1; \/**< Moved lines map for second side *\/$/;"	m	class:MovedLines	typeref:typename:MovedLinesMap
m_movedLines	LocationView.h	/^	MOVEDLINE_LIST m_movedLines; \/\/*< List of moved block connecting lines *\/$/;"	m	class:CLocationView	typeref:typename:MOVEDLINE_LIST
m_msg	DirActions.h	/^	String m_msg;$/;"	m	struct:ContentsChangedException	typeref:typename:String
m_mutex	Common/ExConverter.cpp	/^static Poco::FastMutex m_mutex;$/;"	v	typeref:typename:Poco::FastMutex	file:
m_mutex	DiffContext.h	/^	Poco::FastMutex m_mutex;$/;"	m	class:CDiffContext	typeref:typename:Poco::FastMutex
m_mutex	PluginManager.h	/^	Poco::FastMutex m_mutex;$/;"	m	class:PluginManager	typeref:typename:Poco::FastMutex
m_myStruct	DirCmpReport.h	/^	DiffFuncStruct* m_myStruct;$/;"	m	class:DirCmpReport	typeref:typename:DiffFuncStruct *
m_nActiveOperations	Merge.h	/^	LONG m_nActiveOperations; \/**< Active operations count. *\/$/;"	m	class:CMergeApp	typeref:typename:LONG
m_nActivePane	DirView.h	/^	int m_nActivePane;$/;"	m	class:CDirView	typeref:typename:int
m_nActivePane	ImgMergeFrm.h	/^	int m_nActivePane;$/;"	m	class:CImgMergeFrame	typeref:typename:int
m_nAutoCompleteSource	PropGeneral.h	/^	int   m_nAutoCompleteSource;$/;"	m	class:PropGeneral	typeref:typename:int
m_nAutodetectType	PropCodepage.h	/^	int		m_nAutodetectType;$/;"	m	class:PropCodepage	typeref:typename:int
m_nBackupFolder	PropBackups.h	/^	int m_nBackupFolder;$/;"	m	class:PropBackups	typeref:typename:int
m_nBinaryCompareLimit	DiffContext.h	/^	int m_nBinaryCompareLimit;$/;"	m	class:CDiffContext	typeref:typename:int
m_nBinaryCompareLimit	PropCompareFolder.h	/^	unsigned m_nBinaryCompareLimit;$/;"	m	class:PropCompareFolder	typeref:typename:unsigned
m_nBolds	PropSyntaxColors.h	/^	std::array<int, COLORINDEX_LAST + 1> m_nBolds;$/;"	m	class:PropSyntaxColors	typeref:typename:std::array<int,COLORINDEX_LAST+1>
m_nBomSize	Common/multiformatText.h	/^	int m_nBomSize;$/;"	m	class:storageForPlugins	typeref:typename:int
m_nBreakType	PropEditor.h	/^	int     m_nBreakType;$/;"	m	class:PropEditor	typeref:typename:int
m_nBufferType	HexMergeDoc.h	/^	BUFFERTYPE m_nBufferType[3];$/;"	m	class:CHexMergeDoc	typeref:typename:BUFFERTYPE[3]
m_nBufferType	ImgMergeFrm.h	/^	BUFFERTYPE m_nBufferType[3];$/;"	m	class:CImgMergeFrame	typeref:typename:BUFFERTYPE[3]
m_nBufferType	MergeDoc.h	/^	BUFFERTYPE m_nBufferType[3];$/;"	m	class:CMergeDoc	typeref:typename:BUFFERTYPE[3]
m_nBuffers	HexMergeDoc.h	/^	int m_nBuffers;$/;"	m	class:CHexMergeDoc	typeref:typename:int
m_nBuffers	MergeDoc.h	/^	int m_nBuffers;$/;"	m	class:CMergeDoc	typeref:typename:int
m_nBuffersTemp	HexMergeDoc.cpp	/^int CHexMergeDoc::m_nBuffersTemp = 2;$/;"	m	class:CHexMergeDoc	typeref:typename:int
m_nBuffersTemp	HexMergeDoc.h	/^	static int m_nBuffersTemp;$/;"	m	class:CHexMergeDoc	typeref:typename:int
m_nBuffersTemp	MergeDoc.cpp	/^int CMergeDoc::m_nBuffersTemp = 2;$/;"	m	class:CMergeDoc	typeref:typename:int
m_nBuffersTemp	MergeDoc.h	/^	static int m_nBuffersTemp;$/;"	m	class:CMergeDoc	typeref:typename:int
m_nChanged	Common/multiformatText.h	/^	int m_nChanged;$/;"	m	class:storageForPlugins	typeref:typename:int
m_nChangedValid	Common/multiformatText.h	/^	int m_nChangedValid;$/;"	m	class:storageForPlugins	typeref:typename:int
m_nChar	MergeStatusBar.h	/^		int m_nChar; \/**< Current char *\/$/;"	m	class:CMergeStatusBar::MergeStatus	typeref:typename:int
m_nChars	MergeStatusBar.h	/^		int m_nChars; \/**< Amount of chars in line *\/$/;"	m	class:CMergeStatusBar::MergeStatus	typeref:typename:int
m_nCmdShow	MergeCmdLineInfo.h	/^	ShowWindowType m_nCmdShow; \/**< Initial state of the application's window. *\/$/;"	m	class:MergeCmdLineInfo	typeref:typename:ShowWindowType
m_nCodepage	MergeCmdLineInfo.h	/^	int  m_nCodepage;  \/**< Codepage. *\/$/;"	m	class:MergeCmdLineInfo	typeref:typename:int
m_nCodepage	MergeStatusBar.h	/^		int m_nCodepage;$/;"	m	class:CMergeStatusBar::MergeStatus	typeref:typename:int
m_nCodepageSystem	PropCodepage.h	/^	int		m_nCodepageSystem;$/;"	m	class:PropCodepage	typeref:typename:int
m_nColumn	MergeStatusBar.h	/^		int m_nColumn; \/**< Current column, tab-expanded *\/$/;"	m	class:CMergeStatusBar::MergeStatus	typeref:typename:int
m_nColumns	DirCmpReport.h	/^	int m_nColumns; \/**< Columns in UI *\/$/;"	m	class:DirCmpReport	typeref:typename:int
m_nColumns	MergeStatusBar.h	/^		int m_nColumns; \/**< Amount of columns, tab-expanded *\/$/;"	m	class:CMergeStatusBar::MergeStatus	typeref:typename:int
m_nCompMethod	DiffContext.h	/^	int m_nCompMethod;$/;"	m	class:CDiffContext	typeref:typename:int
m_nCompareThreads	PropCompareFolder.h	/^	int     m_nCompareThreads;$/;"	m	class:PropCompareFolder	typeref:typename:int
m_nComparedItems	CompareStats.h	/^	std::atomic_int m_nComparedItems; \/**< Compared items so far *\/$/;"	m	class:CompareStats	typeref:typename:std::atomic_int
m_nCurDiff	MergeDoc.h	/^	int m_nCurDiff; \/**< Selected diff, 0-based index, -1 if no diff selected *\/$/;"	m	class:CMergeDoc	typeref:typename:int
m_nCustomCodepageValue	PropCodepage.h	/^	int		m_nCustomCodepageValue;$/;"	m	class:PropCodepage	typeref:typename:int
m_nDefaultButton	Common/MessageBoxDialog.h	/^	int			m_nDefaultButton;	\/\/ ID of the default button.$/;"	m	class:CMessageBoxDialog	typeref:typename:int
m_nDelayed	Common/CMoveConstraint.h	/^	int m_nDelayed; \/\/ CWnds without HWND$/;"	m	class:prdlg::CMoveConstraint	typeref:typename:int
m_nDiffAlgorithm	PropCompare.h	/^	int     m_nDiffAlgorithm;$/;"	m	class:PropCompare	typeref:typename:int
m_nDiffContext	MergeDoc.h	/^	int m_nDiffContext;$/;"	m	class:CMergeDoc	typeref:typename:int
m_nDiffs	DiffWrapper.h	/^	int m_nDiffs; \/**< Difference count *\/$/;"	m	class:CDiffWrapper	typeref:typename:int
m_nDirs	CompareStats.h	/^	int m_nDirs; \/**< number of directories to compare *\/$/;"	m	class:CompareStats	typeref:typename:int
m_nDirs	DirDoc.h	/^	int m_nDirs;$/;"	m	class:CDirDoc	typeref:typename:int
m_nDirs	DirViewColItems.h	/^	int m_nDirs;$/;"	m	class:DirViewColItems	typeref:typename:int
m_nDirsTemp	DirDoc.cpp	/^int CDirDoc::m_nDirsTemp = 2;$/;"	m	class:CDirDoc	typeref:typename:int
m_nDirsTemp	DirDoc.h	/^	static int m_nDirsTemp;$/;"	m	class:CDirDoc	typeref:typename:int
m_nDockBarID	Common/sizecbar.h	/^    UINT    m_nDockBarID = 0;$/;"	m	class:CSizingControlBar	typeref:typename:UINT
m_nDraggingTabItemIndex	Common/MDITabBar.h	/^	int   m_nDraggingTabItemIndex;$/;"	m	class:CMDITabBar	typeref:typename:int
m_nEscapeButton	Common/MessageBoxDialog.h	/^	int			m_nEscapeButton;	\/\/ ID of the escape button.$/;"	m	class:CMessageBoxDialog	typeref:typename:int
m_nFile	WMGotoDlg.h	/^	int m_nFile;         \/**< Target file number. *\/$/;"	m	class:WMGotoDlg	typeref:typename:int
m_nFiles	LoadSaveCodepageDlg.h	/^	int m_nFiles;$/;"	m	class:CLoadSaveCodepageDlg	typeref:typename:int
m_nFiles	PathContext.h	/^	int m_nFiles;$/;"	m	class:PathContext	typeref:typename:int
m_nFlags	7zCommon.h	/^	int m_nFlags;$/;"	m	class:DirItemEnumerator	typeref:typename:int
m_nFreeFunctions	Plugins.h	/^	int         m_nFreeFunctions;$/;"	m	class:PluginInfo	typeref:typename:int
m_nGotoWhat	WMGotoDlg.h	/^	int m_nGotoWhat;     \/**< Goto line or difference? *\/$/;"	m	class:WMGotoDlg	typeref:typename:int
m_nGrip	Common/CMoveConstraint.h	/^	EGRIP m_nGrip;$/;"	m	class:prdlg::CMoveConstraint	typeref:typename:EGRIP
m_nGroups	MergeDoc.h	/^	int m_nGroups;$/;"	m	class:CMergeDoc	typeref:typename:int
m_nHelp	Common/MessageBoxDialog.h	/^	UINT		m_nHelp;			\/\/ Help context of the message box.$/;"	m	class:CMessageBoxDialog	typeref:typename:UINT
m_nHiddenItems	DirView.h	/^	UINT m_nHiddenItems; \/**< Count of items we have hidden *\/$/;"	m	class:CDirView	typeref:typename:UINT
m_nHitCount	CompareStats.h	/^		std::atomic_int m_nHitCount;$/;"	m	struct:CompareStats::ThreadState	typeref:typename:std::atomic_int
m_nIgnoreWhite	PropCompare.h	/^	int     m_nIgnoreWhite;$/;"	m	class:PropCompare	typeref:typename:int
m_nIndex	7zCommon.h	/^	int m_nIndex;$/;"	m	class:DirItemEnumerator	typeref:typename:int
m_nLastCompareResult	Merge.h	/^	int m_nLastCompareResult;$/;"	m	class:CMergeApp	typeref:typename:int
m_nLastSplitPos	MergeFrameCommon.h	/^	int m_nLastSplitPos[2];$/;"	m	class:CMergeFrameCommon	typeref:typename:int[2]
m_nLoadCodepage	LoadSaveCodepageDlg.h	/^	int m_nLoadCodepage;$/;"	m	class:CLoadSaveCodepageDlg	typeref:typename:int
m_nLocks	Plugins.h	/^	unsigned m_nLocks;$/;"	m	class:CScriptsOfThread	typeref:typename:unsigned
m_nMaxItems	Common/SuperComboBox.h	/^	int m_nMaxItems;$/;"	m	class:CSuperComboBox	typeref:typename:int
m_nMaxX	Common/CMoveConstraint.h	/^	int m_nMaxX;$/;"	m	class:prdlg::CMoveConstraint	typeref:typename:int
m_nMaxY	Common/CMoveConstraint.h	/^	int m_nMaxY;$/;"	m	class:prdlg::CMoveConstraint	typeref:typename:int
m_nMinX	Common/CMoveConstraint.h	/^	int m_nMinX;$/;"	m	class:prdlg::CMoveConstraint	typeref:typename:int
m_nMinY	Common/CMoveConstraint.h	/^	int m_nMinY;$/;"	m	class:prdlg::CMoveConstraint	typeref:typename:int
m_nOrigScrollX	Common/CMoveConstraint.h	/^	int m_nOrigScrollX;$/;"	m	class:prdlg::CMoveConstraint	typeref:typename:int
m_nOrigScrollY	Common/CMoveConstraint.h	/^	int m_nOrigScrollY;$/;"	m	class:prdlg::CMoveConstraint	typeref:typename:int
m_nOrigX	Common/CMoveConstraint.h	/^	int m_nOrigX;$/;"	m	class:prdlg::CMoveConstraint	typeref:typename:int
m_nOrigY	Common/CMoveConstraint.h	/^	int m_nOrigY;$/;"	m	class:prdlg::CMoveConstraint	typeref:typename:int
m_nPanes	EditorFilepathBar.h	/^	int m_nPanes;$/;"	m	class:CEditorFilePathBar	typeref:typename:int
m_nPanes	MergeStatusBar.h	/^	int m_nPanes;$/;"	m	class:CMergeStatusBar	typeref:typename:int
m_nQuickCompareLimit	DiffContext.h	/^	int m_nQuickCompareLimit;$/;"	m	class:CDiffContext	typeref:typename:int
m_nQuickCompareLimit	PropCompareFolder.h	/^	unsigned m_nQuickCompareLimit;$/;"	m	class:PropCompareFolder	typeref:typename:unsigned
m_nRedrawTimer	MainFrm.h	/^		static UINT_PTR const m_nRedrawTimer = 1612;$/;"	m	class:CMainFrame::CMDIClient	typeref:typename:UINT_PTR const
m_nRenderingMode	PropEditor.h	/^	int     m_nRenderingMode;$/;"	m	class:PropEditor	typeref:typename:int
m_nReportType	DirCmpReport.h	/^	REPORT_TYPE m_nReportType; \/**< Report type integer *\/$/;"	m	class:DirCmpReport	typeref:typename:REPORT_TYPE
m_nReportType	DirCmpReportDlg.h	/^	REPORT_TYPE m_nReportType; \/**< Report type integer *\/$/;"	m	class:DirCmpReportDlg	typeref:typename:REPORT_TYPE
m_nReportType	DirFilterDlg.h	/^	REPORT_TYPE m_nReportType; \/**< Report type integer *\/$/;"	m	class:DirFilterDlg	typeref:typename:REPORT_TYPE
m_nResourceId	Common/CMoveConstraint.h	/^	struct tip { CString m_sText; int m_nResourceId; tip() : m_nResourceId(0) { } };$/;"	m	struct:prdlg::CMoveConstraint::tip	typeref:typename:int
m_nSaveCodepage	LoadSaveCodepageDlg.h	/^	int m_nSaveCodepage;$/;"	m	class:CLoadSaveCodepageDlg	typeref:typename:int
m_nSelIndex	Common/PropertyPageHost.h	/^	int m_nSelIndex;$/;"	m	class:CPropertyPageHost	typeref:typename:int
m_nSortCol	Common/SortHeaderCtrl.h	/^	int 	m_nSortCol;$/;"	m	class:CSortHeaderCtrl	typeref:typename:int
m_nStyle	Common/MessageBoxDialog.h	/^	UINT		m_nStyle;			\/\/ Style of the message box.$/;"	m	class:CMessageBoxDialog	typeref:typename:UINT
m_nSubLineCount	LocationView.h	/^	int m_nSubLineCount[3]; \/\/*< Cached subline count *\/$/;"	m	class:CLocationView	typeref:typename:int[3]
m_nTabSize	PropEditor.h	/^	unsigned m_nTabSize;$/;"	m	class:PropEditor	typeref:typename:unsigned
m_nTabType	PropEditor.h	/^	int	    m_nTabType;$/;"	m	class:PropEditor	typeref:typename:int
m_nThisGroup	MergeEditSplitterView.h	/^	int m_nThisGroup;$/;"	m	class:CMergeEditSplitterView	typeref:typename:int
m_nThisGroup	MergeEditView.h	/^	int m_nThisGroup;$/;"	m	class:CMergeEditView	typeref:typename:int
m_nThisPane	DiffTextBuffer.h	/^	int m_nThisPane; \/**< Left\/Right side *\/$/;"	m	class:CDiffTextBuffer	typeref:typename:int
m_nThisPane	HexMergeView.h	/^	int m_nThisPane;$/;"	m	class:CHexMergeView	typeref:typename:int
m_nThisPane	MergeEditView.h	/^	int m_nThisPane;$/;"	m	class:CMergeEditView	typeref:typename:int
m_nThreadId	Plugins.h	/^	unsigned long m_nThreadId;$/;"	m	class:CScriptsOfThread	typeref:typename:unsigned long
m_nTimeoutSeconds	Common/MessageBoxDialog.h	/^	UINT		m_nTimeoutSeconds;	\/\/ Seconds for a timeout.$/;"	m	class:CMessageBoxDialog	typeref:typename:UINT
m_nTimeoutTimer	Common/MessageBoxDialog.h	/^	UINT_PTR	m_nTimeoutTimer;	\/\/ Timer for the timeout.$/;"	m	class:CMessageBoxDialog	typeref:typename:UINT_PTR
m_nTopSubLinePushed	GhostTextView.h	/^	int m_nTopSubLinePushed;$/;"	m	class:CGhostTextView	typeref:typename:int
m_nTotalItems	CompareStats.h	/^	std::atomic_int m_nTotalItems; \/**< Total items found to compare *\/$/;"	m	class:CompareStats	typeref:typename:std::atomic_int
m_nTrackEdgeOfs	Common/sizecbar.h	/^    int     m_nTrackEdgeOfs = 0;$/;"	m	class:CSizingControlBar	typeref:typename:int
m_nTrackPosMax	Common/sizecbar.h	/^    int     m_nTrackPosMax = 0;$/;"	m	class:CSizingControlBar	typeref:typename:int
m_nTrackPosMin	Common/sizecbar.h	/^    int     m_nTrackPosMin = 0;$/;"	m	class:CSizingControlBar	typeref:typename:int
m_nTrackPosOld	Common/sizecbar.h	/^    int     m_nTrackPosOld = 0;$/;"	m	class:CSizingControlBar	typeref:typename:int
m_nTrivialDiffs	MergeDoc.h	/^	UINT m_nTrivialDiffs; \/**< Amount of trivial (ignored) diffs *\/$/;"	m	class:CMergeDoc	typeref:typename:UINT
m_name	Plugins.h	/^	String      m_name; \/\/ usually filename, except for special cases (like auto or no)$/;"	m	class:PluginInfo	typeref:typename:String
m_ndiffs	CompareEngines/Wrap_DiffUtils.h	/^	int m_ndiffs; \/**< Real diffs found. *\/$/;"	m	class:CompareEngines::DiffUtils	typeref:typename:int
m_ndiffs	FolderCmp.h	/^	int m_ndiffs;$/;"	m	class:FolderCmp	typeref:typename:int
m_ntrivialdiffs	CompareEngines/Wrap_DiffUtils.h	/^	int m_ntrivialdiffs; \/**< Ignored diffs found. *\/$/;"	m	class:CompareEngines::DiffUtils	typeref:typename:int
m_ntrivialdiffs	FolderCmp.h	/^	int m_ntrivialdiffs;$/;"	m	class:FolderCmp	typeref:typename:int
m_numcols	DirViewColItems.h	/^	int m_numcols;$/;"	m	class:DirViewColItems	typeref:typename:int
m_oldBitmap	Common/memdc.h	/^	CBitmap*	m_oldBitmap;	\/\/ bitmap originally found in CMemDC$/;"	m	class:CMyMemDC	typeref:typename:CBitmap *
m_oldPackingInfo	Merge7zFormatMergePluginImpl.h	/^	PackingInfo m_oldPackingInfo;$/;"	m	struct:Merge7zFormatMergePluginScope	typeref:typename:PackingInfo
m_oldWndProc	Common/CMoveConstraint.h	/^	WNDPROC m_oldWndProc;$/;"	m	class:prdlg::CMoveConstraint	typeref:typename:WNDPROC
m_onclick_contributers	AboutDlg.h	/^	Poco::BasicEvent<int> m_onclick_contributers;$/;"	m	class:CAboutDlg	typeref:typename:Poco::BasicEvent<int>
m_openToEditor	PatchDlg.h	/^	bool m_openToEditor;$/;"	m	class:CPatchDlg	typeref:typename:bool
m_options	DiffWrapper.h	/^	DiffutilsOptions m_options;$/;"	m	class:CDiffWrapper	typeref:typename:DiffutilsOptions
m_optionsMap	Common/OptionsMgr.h	/^	OptionsMap m_optionsMap; \/**< Map where options are stored. *\/$/;"	m	class:COptionsMgr	typeref:typename:OptionsMap
m_originalFile	DiffWrapper.h	/^	PathContext m_originalFile; \/**< file's original (NON-TEMP) path. *\/$/;"	m	class:CDiffWrapper	typeref:typename:PathContext
m_outputStyle	CompareOptions.h	/^	enum DiffOutputType m_outputStyle; \/**< Output style (for patch files) *\/$/;"	m	class:DiffutilsOptions	typeref:enum:DiffOutputType
m_outputStyle	PatchDlg.h	/^	enum output_style m_outputStyle; \/**< Patch style (context, unified etc.) *\/$/;"	m	class:CPatchDlg	typeref:enum:output_style
m_p	AboutDlg.cpp	/^	CAboutDlg *m_p;$/;"	m	class:CAboutDlg::Impl	typeref:typename:CAboutDlg *	file:
m_p	DirSelectFilesDlg.cpp	/^	DirSelectFilesDlg *m_p;$/;"	m	class:DirSelectFilesDlg::Impl	typeref:typename:DirSelectFilesDlg *	file:
m_p	WMGotoDlg.cpp	/^	WMGotoDlg *m_p;$/;"	m	class:WMGotoDlg::Impl	typeref:typename:WMGotoDlg *	file:
m_pAbortgate	DiffThread.h	/^	DiffThreadAbortable * m_pAbortgate; \/**< Interface for aborting compare. *\/$/;"	m	struct:DiffFuncStruct	typeref:typename:DiffThreadAbortable *
m_pAbortgate	DiffThread.h	/^	std::unique_ptr<DiffThreadAbortable> m_pAbortgate;$/;"	m	class:CDiffThread	typeref:typename:std::unique_ptr<DiffThreadAbortable>
m_pBinaryCompare	FolderCmp.h	/^	std::unique_ptr<CompareEngines::BinaryCompare> m_pBinaryCompare;$/;"	m	class:FolderCmp	typeref:typename:std::unique_ptr<CompareEngines::BinaryCompare>
m_pByteCompare	FolderCmp.h	/^	std::unique_ptr<CompareEngines::ByteCompare> m_pByteCompare;$/;"	m	class:FolderCmp	typeref:typename:std::unique_ptr<CompareEngines::ByteCompare>
m_pCmpProgressBar	DirView.h	/^	std::unique_ptr<DirCompProgressBar> m_pCmpProgressBar;$/;"	m	class:CDirView	typeref:typename:std::unique_ptr<DirCompProgressBar>
m_pColItems	DirView.h	/^	std::unique_ptr<DirViewColItems> m_pColItems;$/;"	m	class:CDirView	typeref:typename:std::unique_ptr<DirViewColItems>
m_pCompareStats	CompareStatisticsDlg.h	/^	const CompareStats * m_pCompareStats; \/**< Compare statistics structure. *\/$/;"	m	class:CompareStatisticsDlg	typeref:typename:const CompareStats *
m_pCompareStats	DiffContext.h	/^	CompareStats *m_pCompareStats; \/**< Pointer to compare statistics *\/$/;"	m	class:CDiffContext	typeref:typename:CompareStats *
m_pCompareStats	DirCompProgressBar.h	/^	CompareStats *m_pCompareStats; \/**< Pointer to comparestats *\/$/;"	m	class:DirCompProgressBar	typeref:typename:CompareStats *
m_pCompareStats	DirDoc.h	/^	std::unique_ptr<CompareStats> m_pCompareStats; \/**< Compare statistics *\/$/;"	m	class:CDirDoc	typeref:typename:std::unique_ptr<CompareStats>
m_pContentCompareOptions	DiffContext.h	/^	std::unique_ptr<CompareOptions> m_pContentCompareOptions; \/**< Per compare method compare opti/;"	m	class:CDiffContext	typeref:typename:std::unique_ptr<CompareOptions>
m_pCopyOperations	FileActionScript.h	/^	std::unique_ptr<ShellFileOperations> m_pCopyOperations; \/**< Copy operations. *\/$/;"	m	class:FileActionScript	typeref:typename:std::unique_ptr<ShellFileOperations>
m_pCtxt	DirDoc.h	/^	std::unique_ptr<CDiffContext> m_pCtxt; \/**< Pointer to diff-data *\/$/;"	m	class:CDirDoc	typeref:typename:std::unique_ptr<CDiffContext>
m_pCtxt	DirScan.cpp	/^	CDiffContext *m_pCtxt;$/;"	m	class:DiffWorker	typeref:typename:CDiffContext *	file:
m_pCtxt	FolderCmp.h	/^	CDiffContext *const m_pCtxt;$/;"	m	class:FolderCmp	typeref:typename:CDiffContext * const
m_pDC	Common/memdc.h	/^	CDC*		m_pDC;			\/\/ Saves CDC passed in constructor$/;"	m	class:CMyMemDC	typeref:typename:CDC *
m_pDelOperations	FileActionScript.h	/^	std::unique_ptr<ShellFileOperations> m_pDelOperations; \/**< Delete operations. *\/$/;"	m	class:FileActionScript	typeref:typename:std::unique_ptr<ShellFileOperations>
m_pDiffContext	DiffThread.h	/^	CDiffContext * m_pDiffContext; \/**< Compare context storing results. *\/$/;"	m	class:CDiffThread	typeref:typename:CDiffContext *
m_pDiffItem	CompareStats.h	/^		const DIFFITEM *m_pDiffItem;$/;"	m	struct:CompareStats::ThreadState	typeref:typename:const DIFFITEM *
m_pDiffList	DiffWrapper.h	/^	DiffList *m_pDiffList; \/**< Pointer to external DiffList *\/$/;"	m	class:CDiffWrapper	typeref:typename:DiffList *
m_pDiffParm	DiffThread.h	/^	std::unique_ptr<DiffFuncStruct> m_pDiffParm; \/**< Structure for sending data to threads. *\/$/;"	m	class:CDiffThread	typeref:typename:std::unique_ptr<DiffFuncStruct>
m_pDiffTemplate	Merge.h	/^	CMultiDocTemplate* m_pDiffTemplate;$/;"	m	class:CMergeApp	typeref:typename:CMultiDocTemplate *
m_pDiffUtilsEngine	FolderCmp.h	/^	std::unique_ptr<CompareEngines::DiffUtils> m_pDiffUtilsEngine;$/;"	m	class:FolderCmp	typeref:typename:std::unique_ptr<CompareEngines::DiffUtils>
m_pDiffWrapper	CompareEngines/Wrap_DiffUtils.h	/^	std::unique_ptr<CDiffWrapper> m_pDiffWrapper;$/;"	m	class:CompareEngines::DiffUtils	typeref:typename:std::unique_ptr<CDiffWrapper>
m_pDiffs	stringdiffsi.h	/^	std::vector<wdiff> * m_pDiffs;$/;"	m	class:strdiff::stringdiffs	typeref:typename:std::vector<wdiff> *
m_pDirDoc	HexMergeDoc.h	/^	CDirDoc * m_pDirDoc;$/;"	m	class:CHexMergeDoc	typeref:typename:CDirDoc *
m_pDirDoc	ImgMergeFrm.h	/^	CDirDoc *m_pDirDoc;$/;"	m	class:CImgMergeFrame	typeref:typename:CDirDoc *
m_pDirDoc	MergeDoc.h	/^	CDirDoc * m_pDirDoc;$/;"	m	class:CMergeDoc	typeref:typename:CDirDoc *
m_pDirTemplate	Merge.h	/^	CMultiDocTemplate* m_pDirTemplate;$/;"	m	class:CMergeApp	typeref:typename:CMultiDocTemplate *
m_pDirView	DirDoc.h	/^	CDirView *m_pDirView; \/**< Pointer to GUI *\/$/;"	m	class:CDirDoc	typeref:typename:CDirView *
m_pDirView	DirView.cpp	/^	CDirView *m_pDirView;$/;"	m	struct:FileCmpReport	typeref:typename:CDirView *	file:
m_pDropHandler	Common/SuperComboBox.h	/^	DropHandler *m_pDropHandler;$/;"	m	class:CSuperComboBox	typeref:typename:DropHandler *
m_pDropHandler	MainFrm.h	/^	DropHandler *m_pDropHandler;$/;"	m	class:CMainFrame	typeref:typename:DropHandler *
m_pDropHandler	OpenView.h	/^	DropHandler *m_pDropHandler;$/;"	m	class:COpenView	typeref:typename:DropHandler *
m_pEncodingErrorBar	MergeDoc.h	/^	std::unique_ptr<CEncodingErrorBar> m_pEncodingErrorBar;$/;"	m	class:CMergeDoc	typeref:typename:std::unique_ptr<CEncodingErrorBar>
m_pFile	DirCmpReport.h	/^	CFile *m_pFile; \/**< File to write report to *\/$/;"	m	class:DirCmpReport	typeref:typename:CFile *
m_pFileCmpReport	DirCmpReport.h	/^	std::unique_ptr<IFileCmpReport> m_pFileCmpReport;$/;"	m	class:DirCmpReport	typeref:typename:std::unique_ptr<IFileCmpReport>
m_pFileFilter	TestFilterDlg.h	/^	FileFilter * m_pFileFilter; \/**< Selected file filter. *\/$/;"	m	class:CTestFilterDlg	typeref:typename:FileFilter *
m_pFileFilterMgr	TestFilterDlg.h	/^	FileFilterMgr * m_pFileFilterMgr; \/**< File filter manager. *\/$/;"	m	class:CTestFilterDlg	typeref:typename:FileFilterMgr *
m_pFilterCommentsManager	DiffContext.h	/^	FilterCommentsManager *m_pFilterCommentsManager;$/;"	m	class:CDiffContext	typeref:typename:FilterCommentsManager *
m_pFilterCommentsManager	DiffWrapper.h	/^	const FilterCommentsManager* m_pFilterCommentsManager; \/**< Comments filtering manager *\/$/;"	m	class:CDiffWrapper	typeref:typename:const FilterCommentsManager *
m_pFilterCommentsManager	Merge.h	/^	std::unique_ptr<FilterCommentsManager> m_pFilterCommentsManager;$/;"	m	class:CMergeApp	typeref:typename:std::unique_ptr<FilterCommentsManager>
m_pFilterList	CompareEngines/Wrap_DiffUtils.h	/^	FilterList * m_pFilterList; \/**< Filter list for line filters. *\/$/;"	m	class:CompareEngines::DiffUtils	typeref:typename:FilterList *
m_pFilterList	DiffContext.h	/^	std::unique_ptr<FilterList> m_pFilterList; \/**< Filter list for line filters *\/$/;"	m	class:CDiffContext	typeref:typename:std::unique_ptr<FilterList>
m_pFilterList	DiffWrapper.h	/^	std::unique_ptr<FilterList> m_pFilterList; \/**< List of linefilters. *\/$/;"	m	class:CDiffWrapper	typeref:typename:std::unique_ptr<FilterList>
m_pFormView	Common/CMoveConstraint.h	/^	CFormView * m_pFormView;$/;"	m	class:prdlg::CMoveConstraint	typeref:typename:CFormView *
m_pGhostTextBuffer	GhostTextView.h	/^	CGhostTextBuffer * m_pGhostTextBuffer;$/;"	m	class:CGhostTextView	typeref:typename:CGhostTextBuffer *
m_pGlobalFileFilter	Merge.h	/^	std::unique_ptr<FileFilterHelper> m_pGlobalFileFilter;$/;"	m	class:CMergeApp	typeref:typename:std::unique_ptr<FileFilterHelper>
m_pHexMergeTemplate	Merge.h	/^	CMultiDocTemplate* m_pHexMergeTemplate;$/;"	m	class:CMergeApp	typeref:typename:CMultiDocTemplate *
m_pIList	DirView.h	/^	std::unique_ptr<IListCtrl> m_pIList;$/;"	m	class:CDirView	typeref:typename:std::unique_ptr<IListCtrl>
m_pImgMergeWindow	ImgMergeFrm.h	/^	IImgMergeWindow *m_pImgMergeWindow;$/;"	m	class:CImgMergeFrame	typeref:typename:IImgMergeWindow *
m_pImgToolWindow	ImgMergeFrm.h	/^	IImgToolWindow *m_pImgToolWindow;$/;"	m	class:CImgMergeFrame	typeref:typename:IImgToolWindow *
m_pInfoUnpacker	MergeDoc.h	/^	std::unique_ptr<PackingInfo> m_pInfoUnpacker;$/;"	m	class:CMergeDoc	typeref:typename:std::unique_ptr<PackingInfo>
m_pLangDlg	Merge.h	/^	std::unique_ptr<CLanguageSelect> m_pLangDlg;$/;"	m	class:CMergeApp	typeref:typename:std::unique_ptr<CLanguageSelect>
m_pLineFilters	Merge.h	/^	std::unique_ptr<LineFiltersList> m_pLineFilters; \/**< List of linefilters *\/$/;"	m	class:CMergeApp	typeref:typename:std::unique_ptr<LineFiltersList>
m_pList	DirCmpReport.h	/^	std::unique_ptr<IListCtrl> m_pList; \/**< Pointer to UI-list *\/$/;"	m	class:DirCmpReport	typeref:typename:std::unique_ptr<IListCtrl>
m_pList	DirItemIterator.h	/^	IListCtrl *m_pList;$/;"	m	class:DirItemIterator	typeref:typename:IListCtrl *
m_pList	DirItemIterator.h	/^	IListCtrl *m_pList;$/;"	m	class:DirItemWithIndexIterator	typeref:typename:IListCtrl *
m_pList	DirView.h	/^	CListCtrl *m_pList;$/;"	m	class:CDirView	typeref:typename:CListCtrl *
m_pList	LineFiltersDlg.h	/^	LineFiltersList * m_pList; \/**< Helper list for getting\/setting filters. *\/$/;"	m	class:LineFiltersDlg	typeref:typename:LineFiltersList *
m_pLoadLanguagesThread	PropGeneral.h	/^	CWinThread *m_pLoadLanguagesThread;$/;"	m	class:PropGeneral	typeref:typename:CWinThread *
m_pLocationView	MergeDoc.h	/^	CLocationView * m_pLocationView; \/**< Pointer to locationview *\/$/;"	m	class:CMergeDoc	typeref:typename:CLocationView *
m_pMainFrame	Common/MDITabBar.h	/^	CMDIFrameWnd *m_pMainFrame;$/;"	m	class:CMDITabBar	typeref:typename:CMDIFrameWnd *
m_pMarkdown	UniMarkdownFile.h	/^	std::unique_ptr<CMarkdown> m_pMarkdown;$/;"	m	class:UniMarkdownFile	typeref:typename:std::unique_ptr<CMarkdown>
m_pMarkers	Merge.h	/^	std::unique_ptr<CCrystalTextMarkers> m_pMarkers; \/**< Marker container *\/$/;"	m	class:CMergeApp	typeref:typename:std::unique_ptr<CCrystalTextMarkers>
m_pMaskFilter	FileFilterHelper.h	/^	std::unique_ptr<FilterList> m_pMaskFilter;       \/*< Filter for filemasks (*.cpp) *\/$/;"	m	class:FileFilterHelper	typeref:typename:std::unique_ptr<FilterList>
m_pMenus	MainFrm.h	/^	std::unique_ptr<BCMenu> m_pMenus[MENU_COUNT]; \/**< Menus for different views *\/$/;"	m	class:CMainFrame	typeref:typename:std::unique_ptr<BCMenu>[]
m_pMergeDoc	HexMergeFrm.h	/^	CHexMergeDoc * m_pMergeDoc;$/;"	m	class:CHexMergeFrame	typeref:typename:CHexMergeDoc *
m_pMergeDoc	MergeEditFrm.h	/^	CMergeDoc * m_pMergeDoc;$/;"	m	class:CMergeEditFrame	typeref:typename:CMergeDoc *
m_pMoveOperations	FileActionScript.h	/^	std::unique_ptr<ShellFileOperations> m_pMoveOperations; \/**< Move operations. *\/$/;"	m	class:FileActionScript	typeref:typename:std::unique_ptr<ShellFileOperations>
m_pMovedLines	DiffWrapper.h	/^	std::unique_ptr<MovedLines> m_pMovedLines[3];$/;"	m	class:CDiffWrapper	typeref:typename:std::unique_ptr<MovedLines>[3]
m_pOpenTemplate	Merge.h	/^	CMultiDocTemplate* m_pOpenTemplate;$/;"	m	class:CMergeApp	typeref:typename:CMultiDocTemplate *
m_pOptions	CompareEngines/ByteCompare.h	/^	std::unique_ptr<QuickCompareOptions> m_pOptions; \/**< Compare options for diffutils. *\/$/;"	m	class:CompareEngines::ByteCompare	typeref:typename:std::unique_ptr<QuickCompareOptions>
m_pOptions	CompareEngines/Wrap_DiffUtils.h	/^	std::unique_ptr<DiffutilsOptions> m_pOptions; \/**< Compare options for diffutils. *\/$/;"	m	class:CompareEngines::DiffUtils	typeref:typename:std::unique_ptr<DiffutilsOptions>
m_pOptions	DiffContext.h	/^	std::unique_ptr<DIFFOPTIONS> m_pOptions; \/**< Generalized compare options. *\/$/;"	m	class:CDiffContext	typeref:typename:std::unique_ptr<DIFFOPTIONS>
m_pOptions	Merge.h	/^	std::unique_ptr<COptionsMgr> m_pOptions;$/;"	m	class:CMergeApp	typeref:typename:std::unique_ptr<COptionsMgr>
m_pOptionsMgr	Common/PreferencesDlg.h	/^	COptionsMgr *m_pOptionsMgr;$/;"	m	class:CPreferencesDlg	typeref:typename:COptionsMgr *
m_pOptionsMgr	LineFiltersList.h	/^	COptionsMgr * m_pOptionsMgr; \/**< Options-manager for storage *\/$/;"	m	class:LineFiltersList	typeref:typename:COptionsMgr *
m_pOptionsMgr	OptionsPanel.h	/^	COptionsMgr * m_pOptionsMgr; \/**< Options-manager for storage *\/$/;"	m	class:OptionsPanel	typeref:typename:COptionsMgr *
m_pOwnerDoc	DiffTextBuffer.h	/^	CMergeDoc * m_pOwnerDoc; \/**< Merge document owning this buffer. *\/$/;"	m	class:CDiffTextBuffer	typeref:typename:CMergeDoc *
m_pParent	7zCommon.h	/^	CTempPathContext *m_pParent;$/;"	m	class:CTempPathContext	typeref:typename:CTempPathContext *
m_pPathContext	PathContext.h	/^	const PathContext *m_pPathContext;$/;"	m	class:PathContextIterator	typeref:typename:const PathContext *
m_pPlugin	SelectUnpackerDlg.h	/^	PluginInfo * m_pPlugin;$/;"	m	class:CSelectUnpackerDlg	typeref:typename:PluginInfo *
m_pPreferredMenu	Common/ShellContextMenu.h	/^	LPCONTEXTMENU m_pPreferredMenu; \/**< Shell context menu for group of files. $/;"	m	class:CShellContextMenu	typeref:typename:LPCONTEXTMENU
m_pProject	ProjectFile.cpp	/^	std::list<ProjectFileItem> *m_pProject = nullptr;$/;"	m	class:ProjectFileHandler	typeref:typename:std::list<ProjectFileItem> *	file:
m_pQuickCompareOptions	DiffContext.h	/^	std::unique_ptr<CompareOptions> m_pQuickCompareOptions;   \/**< Per compare method compare opti/;"	m	class:CDiffContext	typeref:typename:std::unique_ptr<CompareOptions>
m_pRenameOperations	FileActionScript.h	/^	std::unique_ptr<ShellFileOperations> m_pRenameOperations; \/**< Rename operations. *\/$/;"	m	class:FileActionScript	typeref:typename:std::unique_ptr<ShellFileOperations>
m_pReport	DirDoc.h	/^	std::unique_ptr<DirCmpReport> m_pReport;$/;"	m	class:CDirDoc	typeref:typename:std::unique_ptr<DirCmpReport>
m_pRescanFileInfo	MergeDoc.h	/^	std::unique_ptr<DiffFileInfo> m_pRescanFileInfo[3];$/;"	m	class:CMergeDoc	typeref:typename:std::unique_ptr<DiffFileInfo>[3]
m_pRoot	DiffItemList.h	/^	DIFFITEM* m_pRoot; \/**< Root of list of diffitems; initially `nullptr`. *\/$/;"	m	class:DiffItemList	typeref:typename:DIFFITEM *
m_pSaveFileInfo	MergeDoc.h	/^	std::unique_ptr<DiffFileInfo> m_pSaveFileInfo[3];$/;"	m	class:CMergeDoc	typeref:typename:std::unique_ptr<DiffFileInfo>[3]
m_pSavedBackgroundBitmap	LocationView.h	/^	std::unique_ptr<CBitmap> m_pSavedBackgroundBitmap; \/\/*< Saved background *\/$/;"	m	class:CLocationView	typeref:typename:std::unique_ptr<CBitmap>
m_pSavedTreeState	DirView.h	/^	std::unique_ptr<DirViewTreeState> m_pSavedTreeState;$/;"	m	class:CDirView	typeref:typename:std::unique_ptr<DirViewTreeState>
m_pSharedMemory	markdown.h	/^	Poco::SharedMemory *m_pSharedMemory;$/;"	m	class:CMarkdown::FileImage	typeref:typename:Poco::SharedMemory *
m_pShellContextMenu2	Common/ShellContextMenu.h	/^	IContextMenu2Ptr m_pShellContextMenu2; \/**< IContextMenu2 interface of current preferred conte/;"	m	class:CShellContextMenu	typeref:typename:IContextMenu2Ptr
m_pShellContextMenu3	Common/ShellContextMenu.h	/^	IContextMenu3Ptr m_pShellContextMenu3; \/**< IContextMenu3 interface of current preferred conte/;"	m	class:CShellContextMenu	typeref:typename:IContextMenu3Ptr
m_pShellContextMenuLeft	DirView.h	/^	std::unique_ptr<CShellContextMenu> m_pShellContextMenuLeft; \/**< Shell context menu for group /;"	m	class:CDirView	typeref:typename:std::unique_ptr<CShellContextMenu>
m_pShellContextMenuMiddle	DirView.h	/^	std::unique_ptr<CShellContextMenu> m_pShellContextMenuMiddle; \/**< Shell context menu for grou/;"	m	class:CDirView	typeref:typename:std::unique_ptr<CShellContextMenu>
m_pShellContextMenuRight	DirView.h	/^	std::unique_ptr<CShellContextMenu> m_pShellContextMenuRight; \/**< Shell context menu for group/;"	m	class:CDirView	typeref:typename:std::unique_ptr<CShellContextMenu>
m_pSyntaxColors	Common/PreferencesDlg.h	/^	SyntaxColors *m_pSyntaxColors;$/;"	m	class:CPreferencesDlg	typeref:typename:SyntaxColors *
m_pSyntaxColors	Merge.h	/^	std::unique_ptr<SyntaxColors> m_pSyntaxColors; \/**< Syntax color container *\/$/;"	m	class:CMergeApp	typeref:typename:std::unique_ptr<SyntaxColors>
m_pTaskbarList	DirCompProgressBar.h	/^	ITaskbarList3 *m_pTaskbarList;$/;"	m	class:DirCompProgressBar	typeref:typename:ITaskbarList3 *
m_pTempColors	PropMarkerColors.h	/^	SyntaxColors *m_pTempColors;$/;"	m	class:PropMarkerColors	typeref:typename:SyntaxColors *
m_pTempColors	PropSyntaxColors.h	/^	SyntaxColors *m_pTempColors;$/;"	m	class:PropSyntaxColors	typeref:typename:SyntaxColors *
m_pTempColors	PropTextColors.h	/^	SyntaxColors *m_pTempColors;$/;"	m	class:PropTextColors	typeref:typename:SyntaxColors *
m_pTempPathContext	DirDoc.h	/^	CTempPathContext *m_pTempPathContext;$/;"	m	class:CDirDoc	typeref:typename:CTempPathContext *
m_pTimeSizeCompare	FolderCmp.h	/^	std::unique_ptr<CompareEngines::TimeSizeCompare> m_pTimeSizeCompare;$/;"	m	class:FolderCmp	typeref:typename:std::unique_ptr<CompareEngines::TimeSizeCompare>
m_pUpdateButtonStatusThread	OpenView.h	/^	CWinThread *m_pUpdateButtonStatusThread;$/;"	m	class:COpenView	typeref:typename:CWinThread *
m_pVffInfo	Common/VersionInfo.h	/^	std::unique_ptr<BYTE[]> m_pVffInfo; \/**< Pointer to version information block *\/$/;"	m	class:CVersionInfo	typeref:typename:std::unique_ptr<BYTE[]>
m_pView	7zCommon.h	/^	CDirView *m_pView;$/;"	m	class:DirItemEnumerator	typeref:typename:CDirView *
m_pView	HexMergeDoc.h	/^	CHexMergeView * m_pView[3]; \/**< Pointer to left\/right view *\/$/;"	m	class:CHexMergeDoc	typeref:typename:CHexMergeView * [3]
m_pView	MergeDoc.h	/^	CMergeEditView * m_pView[3][3]; \/**< Pointer to left\/middle\/right view *\/$/;"	m	class:CMergeDoc	typeref:typename:CMergeEditView * [3][3]
m_pWnd	Common/CMoveConstraint.h	/^		CWnd * m_pWnd;$/;"	m	struct:prdlg::CMoveConstraint::Constraint	typeref:typename:CWnd *
m_pWndStatusBar	MergeStatusBar.h	/^		CMergeStatusBar* m_pWndStatusBar;$/;"	m	class:CMergeStatusBar::MergeStatus	typeref:typename:CMergeStatusBar *
m_pageArchive	Common/PreferencesDlg.h	/^	PropArchive m_pageArchive;$/;"	m	class:CPreferencesDlg	typeref:typename:PropArchive
m_pageBackups	Common/PreferencesDlg.h	/^	PropBackups m_pageBackups;$/;"	m	class:CPreferencesDlg	typeref:typename:PropBackups
m_pageCodepage	Common/PreferencesDlg.h	/^	PropCodepage m_pageCodepage;$/;"	m	class:CPreferencesDlg	typeref:typename:PropCodepage
m_pageCompare	Common/PreferencesDlg.h	/^	PropCompare m_pageCompare;$/;"	m	class:CPreferencesDlg	typeref:typename:PropCompare
m_pageCompareBinary	Common/PreferencesDlg.h	/^	PropCompareBinary m_pageCompareBinary;$/;"	m	class:CPreferencesDlg	typeref:typename:PropCompareBinary
m_pageCompareFolder	Common/PreferencesDlg.h	/^	PropCompareFolder m_pageCompareFolder;$/;"	m	class:CPreferencesDlg	typeref:typename:PropCompareFolder
m_pageCompareImage	Common/PreferencesDlg.h	/^	PropCompareImage m_pageCompareImage;$/;"	m	class:CPreferencesDlg	typeref:typename:PropCompareImage
m_pageDirColors	Common/PreferencesDlg.h	/^	PropDirColors m_pageDirColors;$/;"	m	class:CPreferencesDlg	typeref:typename:PropDirColors
m_pageEditor	Common/PreferencesDlg.h	/^	PropEditor m_pageEditor;$/;"	m	class:CPreferencesDlg	typeref:typename:PropEditor
m_pageGeneral	Common/PreferencesDlg.h	/^	PropGeneral m_pageGeneral;$/;"	m	class:CPreferencesDlg	typeref:typename:PropGeneral
m_pageMarkerColors	Common/PreferencesDlg.h	/^	PropMarkerColors m_pageMarkerColors;$/;"	m	class:CPreferencesDlg	typeref:typename:PropMarkerColors
m_pageMergeColors	Common/PreferencesDlg.h	/^	PropMergeColors m_pageMergeColors;$/;"	m	class:CPreferencesDlg	typeref:typename:PropMergeColors
m_pageShell	Common/PreferencesDlg.h	/^	PropShell m_pageShell;$/;"	m	class:CPreferencesDlg	typeref:typename:PropShell
m_pageSyntaxColors	Common/PreferencesDlg.h	/^	PropSyntaxColors m_pageSyntaxColors;$/;"	m	class:CPreferencesDlg	typeref:typename:PropSyntaxColors
m_pageSystem	Common/PreferencesDlg.h	/^	PropRegistry m_pageSystem;$/;"	m	class:CPreferencesDlg	typeref:typename:PropRegistry
m_pageTextColors	Common/PreferencesDlg.h	/^	PropTextColors m_pageTextColors;$/;"	m	class:CPreferencesDlg	typeref:typename:PropTextColors
m_parentWindow	Common/ShellFileOperations.h	/^	HWND m_parentWindow; \/**< Parent window getting notifications. *\/$/;"	m	class:ShellFileOperations	typeref:typename:HWND
m_path	PathContext.h	/^	PathInfo m_path[3]; \/**< First, second, third path (left path at start) *\/$/;"	m	class:PathContext	typeref:typename:PathInfo[3]
m_path	TempFile.h	/^	String m_path; \/**< Temporary file path. *\/$/;"	m	class:TempFile	typeref:typename:String
m_paths	DiffContext.h	/^	PathContext m_paths; \/**< (root) paths for this context *\/$/;"	m	class:CDiffContext	typeref:typename:PathContext
m_paths	OpenView.cpp	/^	PathContext m_paths;$/;"	m	struct:UpdateButtonStatesThreadParams	typeref:typename:PathContext	file:
m_paths	ProjectFile.h	/^	PathContext m_paths;$/;"	m	class:ProjectFileItem	typeref:typename:PathContext
m_pdi	DirItemIterator.h	/^	const DIFFITEM *m_pdi;$/;"	m	class:DirItemIterator	typeref:typename:const DIFFITEM *
m_pdi	DirSelectFilesDlg.h	/^	std::array<DIFFITEM *, 3> m_pdi;$/;"	m	class:DirSelectFilesDlg	typeref:typename:std::array<DIFFITEM *,3>
m_pexconv	Common/ExConverter.cpp	/^static __thread IExconverter *m_pexconv = nullptr;$/;"	v	typeref:typename:__thread IExconverter *	file:
m_pfile	ConfigLog.h	/^	std::unique_ptr<UniStdioFile> m_pfile;$/;"	m	class:CConfigLog	typeref:typename:std::unique_ptr<UniStdioFile>
m_pfnCharGuessDone	Common/ExConverter.cpp	/^	int (*m_pfnCharGuessDone)(void);$/;"	m	class:CExconverterMLang	typeref:typename:int (*)(void)	file:
m_pfnCharGuessInit	Common/ExConverter.cpp	/^	int (*m_pfnCharGuessInit)(void);$/;"	m	class:CExconverterMLang	typeref:typename:int (*)(void)	file:
m_pfnGuessChardet	Common/ExConverter.cpp	/^	const char* (*m_pfnGuessChardet)(const char *str);$/;"	m	class:CExconverterMLang	typeref:typename:const char * (*)(const char * str)	file:
m_piAbortable	CompareEngines/ByteCompare.h	/^	IAbortable * m_piAbortable;$/;"	m	class:CompareEngines::ByteCompare	typeref:typename:IAbortable *
m_piAbortable	DiffContext.h	/^	IAbortable *m_piAbortable; \/**< Interface for aborting the compare. *\/$/;"	m	class:CDiffContext	typeref:typename:IAbortable *
m_piFilterGlobal	DiffContext.h	/^	IDiffFilter * m_piFilterGlobal; \/**< Interface for file filtering. *\/$/;"	m	class:CDiffContext	typeref:typename:IDiffFilter *
m_piMergeEditStatus	MergeEditView.h	/^	IMergeEditStatus * m_piMergeEditStatus; \/**< interface to status bar *\/$/;"	m	class:CMergeEditView	typeref:typename:IMergeEditStatus *
m_piPluginInfos	DiffContext.h	/^	IPluginInfos * m_piPluginInfos;$/;"	m	class:CDiffContext	typeref:typename:IPluginInfos *
m_pif	HexMergeView.h	/^	IHexEditorWindow *m_pif;$/;"	m	class:CHexMergeView	typeref:typename:IHexEditorWindow *
m_pimpl	AboutDlg.h	/^	std::unique_ptr<Impl> m_pimpl;$/;"	m	class:CAboutDlg	typeref:typename:std::unique_ptr<Impl>
m_pimpl	DirSelectFilesDlg.h	/^	std::unique_ptr<Impl> m_pimpl;$/;"	m	class:DirSelectFilesDlg	typeref:typename:std::unique_ptr<Impl>
m_pimpl	WMGotoDlg.h	/^	std::unique_ptr<Impl> m_pimpl;$/;"	m	class:WMGotoDlg	typeref:typename:std::unique_ptr<Impl>
m_pixInLines	LocationView.h	/^	double m_pixInLines; \/\/*< How many pixels is one line in bars *\/$/;"	m	class:CLocationView	typeref:typename:double
m_plugin	Merge7zFormatMergePluginImpl.h	/^	PluginInfo *m_plugin;$/;"	m	struct:Merge7zFormatMergePluginImpl	typeref:typename:PluginInfo *
m_pluginSettings	PluginManager.h	/^	PluginFileInfoMap m_pluginSettings;$/;"	m	class:PluginManager	typeref:typename:PluginFileInfoMap
m_pluginman	DirDoc.h	/^	PluginManager m_pluginman;$/;"	m	class:CDirDoc	typeref:typename:PluginManager
m_pmlang	Common/ExConverter.cpp	/^	IMultiLanguage2 *m_pmlang;$/;"	m	class:CExconverterMLang	typeref:typename:IMultiLanguage2 *	file:
m_pphost	Common/PreferencesDlg.h	/^	CPropertyPageHost m_pphost;$/;"	m	class:CPreferencesDlg	typeref:typename:CPropertyPageHost
m_prevState	DirCompProgressBar.h	/^	CompareStats::CMP_STATE m_prevState; \/**< Previous state for compare (to track changes) *\/$/;"	m	class:DirCompProgressBar	typeref:typename:CompareStats::CMP_STATE
m_ptAnchorPushed	GhostTextView.h	/^	SCursorPushed m_ptAnchorPushed;$/;"	m	class:CGhostTextView	typeref:typename:SCursorPushed
m_ptBuf	MergeDoc.h	/^	std::unique_ptr<CDiffTextBuffer> m_ptBuf[3]; \/**< Left\/Middle\/Right side text buffer *\/$/;"	m	class:CMergeDoc	typeref:typename:std::unique_ptr<CDiffTextBuffer>[3]
m_ptCursorPosPushed	GhostTextView.h	/^	SCursorPushed m_ptCursorPosPushed;$/;"	m	class:CGhostTextView	typeref:typename:SCursorPushed
m_ptDraggedTextBeginPushed	GhostTextView.h	/^	SCursorPushed m_ptDraggedTextBeginPushed, m_ptDraggedTextEndPushed;$/;"	m	class:CGhostTextView	typeref:typename:SCursorPushed
m_ptDraggedTextEndPushed	GhostTextView.h	/^	SCursorPushed m_ptDraggedTextBeginPushed, m_ptDraggedTextEndPushed;$/;"	m	class:CGhostTextView	typeref:typename:SCursorPushed
m_ptLastChangePushed	GhostTextView.h	/^	SCursorPushed m_ptLastChangePushed;$/;"	m	class:CGhostTextView	typeref:typename:SCursorPushed
m_ptLastMousePos	FileFiltersDlg.h	/^	CPoint m_ptLastMousePos;$/;"	m	class:FileFiltersDlg	typeref:typename:CPoint
m_ptSavedCaretPosPushed	GhostTextView.h	/^	SCursorPushed m_ptSavedCaretPosPushed;$/;"	m	class:CGhostTextView	typeref:typename:SCursorPushed
m_ptSavedSelEndPushed	GhostTextView.h	/^	SCursorPushed m_ptSavedSelStartPushed, m_ptSavedSelEndPushed;$/;"	m	class:CGhostTextView	typeref:typename:SCursorPushed
m_ptSavedSelStartPushed	GhostTextView.h	/^	SCursorPushed m_ptSavedSelStartPushed, m_ptSavedSelEndPushed;$/;"	m	class:CGhostTextView	typeref:typename:SCursorPushed
m_ptSelEndPushed	GhostTextView.h	/^	SCursorPushed m_ptSelStartPushed, m_ptSelEndPushed;$/;"	m	class:CGhostTextView	typeref:typename:SCursorPushed
m_ptSelStartPushed	GhostTextView.h	/^	SCursorPushed m_ptSelStartPushed, m_ptSelEndPushed;$/;"	m	class:CGhostTextView	typeref:typename:SCursorPushed
m_pufile	FileTransform.h	/^	UniFile*	m_pufile;$/;"	m	class:PackingInfo	typeref:typename:UniFile *
m_pwndDetailMergeEditSplitterView	MergeEditFrm.h	/^	CMergeEditSplitterView *m_pwndDetailMergeEditSplitterView;$/;"	m	class:CMergeEditFrame	typeref:typename:CMergeEditSplitterView *
m_question	ConfirmFolderCopyDlg.h	/^	String m_question;$/;"	m	class:ConfirmFolderCopyDlg	typeref:typename:String
m_question	DirActions.h	/^	String m_question;$/;"	m	struct:ConfirmationNeededException	typeref:typename:String
m_queue	DirScan.cpp	/^	NotificationQueue& m_queue;$/;"	m	class:DiffWorker	typeref:typename:NotificationQueue &	file:
m_queueResult	DirScan.cpp	/^	NotificationQueue& m_queueResult;$/;"	m	class:WorkNotification	typeref:typename:NotificationQueue &	file:
m_rcCurrentCloseButtom	Common/MDITabBar.h	/^	CRect m_rcCurrentCloseButtom;$/;"	m	class:CMDITabBar	typeref:typename:CRect
m_rect	Common/memdc.h	/^	CRect		m_rect;			\/\/ Rectangle of drawing area.$/;"	m	class:CMyMemDC	typeref:typename:CRect
m_rectChildOriginal	Common/CMoveConstraint.h	/^		CRect m_rectChildOriginal;$/;"	m	struct:prdlg::CMoveConstraint::Constraint	typeref:typename:CRect
m_rectDlgOriginal	Common/CMoveConstraint.h	/^	CRect m_rectDlgOriginal;$/;"	m	class:prdlg::CMoveConstraint	typeref:typename:CRect
m_registryRoot	Common/RegOptionsMgr.h	/^	String m_registryRoot; \/**< Registry path where to store options. *\/$/;"	m	class:CRegOptionsMgr	typeref:typename:String
m_reverse	DirItemIterator.h	/^	bool m_reverse;$/;"	m	class:DirItemIterator	typeref:typename:bool
m_reverse	DirItemIterator.h	/^	bool m_reverse;$/;"	m	class:DirItemWithIndexIterator	typeref:typename:bool
m_rgFolderPrefix	7zCommon.h	/^	std::list<String> m_rgFolderPrefix;$/;"	m	class:DirItemEnumerator	typeref:typename:std::list<String>
m_rgImpliedFolders	7zCommon.h	/^	std::map<String, void *> m_rgImpliedFolders[3];$/;"	m	class:DirItemEnumerator	typeref:typename:std::map<String,void * >[3]
m_rgThreadState	CompareStats.h	/^	std::vector<ThreadState> m_rgThreadState;$/;"	m	class:CompareStats	typeref:typename:std::vector<ThreadState>
m_rightSave	SaveClosingDlg.h	/^	int m_rightSave; \/**< User's choice for righ-side save. *\/$/;"	m	class:SaveClosingDlg	typeref:typename:int
m_rootPaths	DirCmpReport.h	/^	PathContext m_rootPaths; \/**< Root paths, printed to report *\/$/;"	m	class:DirCmpReport	typeref:typename:PathContext
m_sAffectsLeftString	LoadSaveCodepageDlg.h	/^	String m_sAffectsLeftString;$/;"	m	class:CLoadSaveCodepageDlg	typeref:typename:String
m_sAffectsMiddleString	LoadSaveCodepageDlg.h	/^	String m_sAffectsMiddleString;$/;"	m	class:CLoadSaveCodepageDlg	typeref:typename:String
m_sAffectsRightString	LoadSaveCodepageDlg.h	/^	String m_sAffectsRightString;$/;"	m	class:CLoadSaveCodepageDlg	typeref:typename:String
m_sButton	Common/MessageBoxDialog.h	/^	CSize		m_sButton;			\/\/ Variable for the size of a button.$/;"	m	class:CMessageBoxDialog	typeref:typename:CSize
m_sCheckbox	Common/MessageBoxDialog.h	/^	CSize		m_sCheckbox;		\/\/ Variable for the size of the checkbox.$/;"	m	class:CMessageBoxDialog	typeref:typename:CSize
m_sCodepageName	MergeStatusBar.h	/^		String m_sCodepageName;$/;"	m	class:CMergeStatusBar::MergeStatus	typeref:typename:String
m_sDialogUnit	Common/MessageBoxDialog.h	/^	CSize		m_sDialogUnit;		\/\/ Variable for the size of a dialog unit.$/;"	m	class:CMessageBoxDialog	typeref:typename:CSize
m_sDisplayFilepath	DiffFileData.h	/^	String m_sDisplayFilepath[2];$/;"	m	struct:DiffFileData	typeref:typename:String[2]
m_sEol	MergeStatusBar.h	/^		String m_sEol;$/;"	m	class:CMergeStatusBar::MergeStatus	typeref:typename:String
m_sEolDisplay	MergeStatusBar.h	/^		String m_sEolDisplay;$/;"	m	class:CMergeStatusBar::MergeStatus	typeref:typename:String
m_sErrorMessages	MergeCmdLineInfo.h	/^	std::vector<String> m_sErrorMessages;$/;"	m	class:MergeCmdLineInfo	typeref:typename:std::vector<String>
m_sFileFilter	MergeCmdLineInfo.h	/^	String m_sFileFilter; \/**< File filter mask. *\/$/;"	m	class:MergeCmdLineInfo	typeref:typename:String
m_sFileFilterPath	FileFilterHelper.h	/^	String m_sFileFilterPath;        \/*< Path to current filter *\/$/;"	m	class:FileFilterHelper	typeref:typename:String
m_sFileFilterPath	FileFiltersDlg.h	/^	String m_sFileFilterPath;$/;"	m	class:FileFiltersDlg	typeref:typename:String
m_sFileName	ConfigLog.h	/^	String m_sFileName;$/;"	m	class:CConfigLog	typeref:typename:String
m_sFilePatterns	PropCompareBinary.h	/^	String m_sFilePatterns;$/;"	m	class:PropCompareBinary	typeref:typename:String
m_sFilePatterns	PropCompareImage.h	/^	String m_sFilePatterns;$/;"	m	class:PropCompareImage	typeref:typename:String
m_sFontFace	Common/scbarcf.h	/^    CString m_sFontFace;$/;"	m	class:CSizingControlBarCF	typeref:typename:CString
m_sFullStateText	Common/SuperComboBox.h	/^	std::vector<CString> m_sFullStateText;$/;"	m	class:CSuperComboBox	typeref:typename:std::vector<CString>
m_sGlobalFilterPath	FileFilterHelper.h	/^	String m_sGlobalFilterPath;    \/*< Path for shared filters *\/$/;"	m	class:FileFilterHelper	typeref:typename:String
m_sGlobalFolder	PropBackups.h	/^	String m_sGlobalFolder;$/;"	m	class:PropBackups	typeref:typename:String
m_sIcon	Common/MessageBoxDialog.h	/^	CSize		m_sIcon;			\/\/ Variable for the size of the icon.$/;"	m	class:CMessageBoxDialog	typeref:typename:CSize
m_sLeftDesc	MergeCmdLineInfo.h	/^	String m_sLeftDesc; \/**< Left side file's description. *\/$/;"	m	class:MergeCmdLineInfo	typeref:typename:String
m_sLeftFile	SaveClosingDlg.h	/^	String m_sLeftFile; \/**< Path to left-file to save. *\/$/;"	m	class:SaveClosingDlg	typeref:typename:String
m_sLine	MergeStatusBar.h	/^		String m_sLine;$/;"	m	class:CMergeStatusBar::MergeStatus	typeref:typename:String
m_sMask	FileFilterHelper.h	/^	String m_sMask;   \/*< File mask (if defined) "*.cpp *.h" etc *\/$/;"	m	class:FileFilterHelper	typeref:typename:String
m_sMessage	Common/MessageBoxDialog.h	/^	CSize		m_sMessage;			\/\/ Variable for the size of the message.$/;"	m	class:CMessageBoxDialog	typeref:typename:CSize
m_sMiddleDesc	MergeCmdLineInfo.h	/^	String m_sMiddleDesc; \/**< Middle side file's description. *\/$/;"	m	class:MergeCmdLineInfo	typeref:typename:String
m_sMiddleFile	SaveClosingDlg.h	/^	String m_sMiddleFile; \/**< Path to middle-file to save. *\/$/;"	m	class:SaveClosingDlg	typeref:typename:String
m_sOriginalText	FilepathEdit.h	/^	String m_sOriginalText; \/**< Full path that was given to control *\/$/;"	m	class:CFilepathEdit	typeref:typename:String
m_sOutputpath	MergeCmdLineInfo.h	/^	String m_sOutputpath;$/;"	m	class:MergeCmdLineInfo	typeref:typename:String
m_sPatchFile	DiffWrapper.h	/^	String m_sPatchFile; \/**< Full path to created patch file. *\/$/;"	m	class:CDiffWrapper	typeref:typename:String
m_sPatchFile	PatchTool.h	/^	String m_sPatchFile; \/**< Patch file path and filename. *\/$/;"	m	class:CPatchTool	typeref:typename:String
m_sPath	Common/RegKey.h	/^	String m_sPath; \/**< Path to actual key to open. *\/$/;"	m	class:CRegKeyEx	typeref:typename:String
m_sPath	PathContext.h	/^	String m_sPath;  \/**< Directory \/ file path *\/$/;"	m	class:PathInfo	typeref:typename:String
m_sPreDiffer	MergeCmdLineInfo.h	/^	String m_sPreDiffer; \/**< Pre-differ name. *\/$/;"	m	class:MergeCmdLineInfo	typeref:typename:String
m_sRegistrySubkey	Common/CMoveConstraint.h	/^	CString m_sRegistrySubkey; \/\/ defaults to _T("LastWindowPos")$/;"	m	class:prdlg::CMoveConstraint	typeref:typename:CString
m_sRegistryValueName	Common/CMoveConstraint.h	/^	CString m_sRegistryValueName; \/\/ should be name of window$/;"	m	class:prdlg::CMoveConstraint	typeref:typename:CString
m_sReportFile	DirCmpReport.h	/^	String m_sReportFile;$/;"	m	class:DirCmpReport	typeref:typename:String
m_sReportFile	DirCmpReportDlg.h	/^	String m_sReportFile; \/**< Report filename string *\/$/;"	m	class:DirCmpReportDlg	typeref:typename:String
m_sReportFile	DirDoc.h	/^	String m_sReportFile;$/;"	m	class:CDirDoc	typeref:typename:String
m_sReportFile	DirFilterDlg.h	/^	CString m_sReportFile; \/**< Report filename string *\/$/;"	m	class:DirFilterDlg	typeref:typename:CString
m_sReportFile	MergeCmdLineInfo.h	/^	String m_sReportFile;$/;"	m	class:MergeCmdLineInfo	typeref:typename:String
m_sRightDesc	MergeCmdLineInfo.h	/^	String m_sRightDesc; \/**< Right side file's description. *\/$/;"	m	class:MergeCmdLineInfo	typeref:typename:String
m_sRightFile	SaveClosingDlg.h	/^	String m_sRightFile; \/**< Path to right-side file to save. *\/$/;"	m	class:SaveClosingDlg	typeref:typename:String
m_sSeparator	DirCmpReport.h	/^	String m_sSeparator; \/**< Column separator for report *\/$/;"	m	class:DirCmpReport	typeref:typename:String
m_sText	Common/CMoveConstraint.h	/^	struct tip { CString m_sText; int m_nResourceId; tip() : m_nResourceId(0) { } };$/;"	m	struct:prdlg::CMoveConstraint::tip	typeref:typename:CString
m_sTitle	DirCmpReport.h	/^	String m_sTitle; \/**< Report title, built from root paths *\/$/;"	m	class:DirCmpReport	typeref:typename:String
m_sToFindPrediffer	DiffWrapper.h	/^	String m_sToFindPrediffer;$/;"	m	class:CDiffWrapper	typeref:typename:String
m_sToolTipString	FilepathEdit.h	/^	String m_sToolTipString; \/**< buffer for return data from GetUpdatedTipText *\/$/;"	m	class:CFilepathEdit	typeref:typename:String
m_sUserSelFilterPath	FileFilterHelper.h	/^	String m_sUserSelFilterPath;     \/*< Path for user's private filters *\/$/;"	m	class:FileFilterHelper	typeref:typename:String
m_scriptletFilepath	Plugins.cpp	/^	const String & m_scriptletFilepath;$/;"	m	struct:ScriptInfo	typeref:typename:const String &	file:
m_sel	DirItemIterator.h	/^	int m_sel;$/;"	m	class:DirItemIterator	typeref:typename:int
m_sel	DirItemIterator.h	/^	int m_sel;$/;"	m	class:DirItemWithIndexIterator	typeref:typename:int
m_sel	PathContext.h	/^	int m_sel;$/;"	m	class:PathContextIterator	typeref:typename:int
m_selected	DirItemIterator.h	/^	bool m_selected;$/;"	m	class:DirItemIterator	typeref:typename:bool
m_selected	DirItemIterator.h	/^	bool m_selected;$/;"	m	class:DirItemWithIndexIterator	typeref:typename:bool
m_selectedButtons	DirSelectFilesDlg.h	/^	std::vector<int> m_selectedButtons;$/;"	m	class:DirSelectFilesDlg	typeref:typename:std::vector<int>
m_selectedFiles	DirSelectFilesDlg.h	/^	PathContext m_selectedFiles;$/;"	m	class:DirSelectFilesDlg	typeref:typename:PathContext
m_selectedType	SharedFilterDlg.h	/^	FilterType m_selectedType;$/;"	m	class:CSharedFilterDlg	typeref:typename:FilterType
m_serializing	Common/RegOptionsMgr.h	/^	bool m_serializing;$/;"	m	class:CRegOptionsMgr	typeref:typename:bool
m_sizeCheck	Common/BCMenu.cpp	/^SIZE BCMenu::m_sizeCheck = { 0 };$/;"	m	class:BCMenu	typeref:typename:SIZE
m_sizeCheck	Common/BCMenu.h	/^	static SIZE m_sizeCheck;$/;"	m	class:BCMenu	typeref:typename:SIZE
m_sizeOrig	OpenView.h	/^	CSize m_sizeOrig;$/;"	m	class:COpenView	typeref:typename:CSize
m_sizeSeparator	Common/BCMenu.cpp	/^SIZE BCMenu::m_sizeSeparator = { 0 };$/;"	m	class:BCMenu	typeref:typename:SIZE
m_sizeSeparator	Common/BCMenu.h	/^	static SIZE m_sizeSeparator;$/;"	m	class:BCMenu	typeref:typename:SIZE
m_sources	Common/ShellFileOperations.h	/^	std::vector<String> m_sources; \/**< Source paths. *\/$/;"	m	class:ShellFileOperations	typeref:typename:std::vector<String>
m_stack	ProjectFile.cpp	/^	std::stack<std::string> m_stack;$/;"	m	class:ProjectFileHandler	typeref:typename:std::stack<std::string>	file:
m_state	CompareStats.h	/^	CMP_STATE m_state; \/**< State for compare (idle, collect, compare,..) *\/$/;"	m	class:CompareStats	typeref:typename:CMP_STATE
m_status	DiffWrapper.h	/^	DIFFSTATUS m_status; \/**< Status of last compare *\/$/;"	m	class:CDiffWrapper	typeref:typename:DIFFSTATUS
m_status	MergeStatusBar.h	/^	MergeStatus m_status[3];$/;"	m	class:CMergeStatusBar	typeref:typename:MergeStatus[3]
m_statusFetched	Common/UniFile.h	/^	int m_statusFetched; \/\/ 0 not fetched, -1 error, +1 success$/;"	m	class:UniLocalFile	typeref:typename:int
m_stcIcon	Common/MessageBoxDialog.h	/^	CStatic		m_stcIcon;			\/\/ Static control for the icon.$/;"	m	class:CMessageBoxDialog	typeref:typename:CStatic
m_stcMessage	Common/MessageBoxDialog.h	/^	CStatic		m_stcMessage;		\/\/ Static control for the message.$/;"	m	class:CMessageBoxDialog	typeref:typename:CStatic
m_str	Common/MyCom.h	/^  BSTR m_str;$/;"	m	class:CMyComBSTR	typeref:typename:BSTR
m_str1	stringdiffsi.h	/^	const String & m_str1;$/;"	m	class:strdiff::stringdiffs	typeref:typename:const String &
m_str2	stringdiffsi.h	/^	const String & m_str2;$/;"	m	class:strdiff::stringdiffs	typeref:typename:const String &
m_strBothFilenames	MergeDoc.h	/^	String m_strBothFilenames;$/;"	m	class:CMergeDoc	typeref:typename:String
m_strBrowsePath	OpenView.h	/^	String m_strBrowsePath[3]; \/**< Left\/middle\/right path from browse dialog. *\/$/;"	m	class:COpenView	typeref:typename:String[3]
m_strCodepage	Common/VersionInfo.h	/^	String m_strCodepage;$/;"	m	class:CVersionInfo	typeref:typename:String
m_strComments	Common/VersionInfo.h	/^	String m_strComments;$/;"	m	class:CVersionInfo	typeref:typename:String
m_strCompanyName	Common/VersionInfo.h	/^	String m_strCompanyName;$/;"	m	class:CVersionInfo	typeref:typename:String
m_strDesc	DirDoc.h	/^	String m_strDesc[3]; \/**< Left\/middle\/right side desription text *\/$/;"	m	class:CDirDoc	typeref:typename:String[3]
m_strDesc	HexMergeDoc.h	/^	String m_strDesc[3]; \/**< Left\/right side description text *\/$/;"	m	class:CHexMergeDoc	typeref:typename:String[3]
m_strDesc	ImgMergeFrm.h	/^	String m_strDesc[3];$/;"	m	class:CImgMergeFrame	typeref:typename:String[3]
m_strDesc	MergeDoc.h	/^	String m_strDesc[3]; \/**< Left\/Middle\/Right side description text *\/$/;"	m	class:CMergeDoc	typeref:typename:String[3]
m_strDescription	SelectUnpackerDlg.h	/^	String	m_strDescription;$/;"	m	class:CSelectUnpackerDlg	typeref:typename:String
m_strDisplayRoot	7zCommon.h	/^	String m_strDisplayRoot[3];$/;"	m	class:CTempPathContext	typeref:typename:String[3]
m_strEditorPath	PropRegistry.h	/^	String  m_strEditorPath;$/;"	m	class:PropRegistry	typeref:typename:String
m_strExt	OpenDoc.h	/^	String	m_strExt;$/;"	m	class:COpenDoc	typeref:typename:String
m_strExt	OpenView.h	/^	String	m_strExt;$/;"	m	class:COpenView	typeref:typename:String
m_strExtensions	SelectUnpackerDlg.h	/^	String	m_strExtensions;$/;"	m	class:CSelectUnpackerDlg	typeref:typename:String
m_strFileDescription	Common/VersionInfo.h	/^	String m_strFileDescription;$/;"	m	class:CVersionInfo	typeref:typename:String
m_strFileName	Common/VersionInfo.h	/^	String m_strFileName;$/;"	m	class:CVersionInfo	typeref:typename:String
m_strFileVersion	Common/VersionInfo.h	/^	String m_strFileVersion;$/;"	m	class:CVersionInfo	typeref:typename:String
m_strFolderPrefix	7zCommon.h	/^	String m_strFolderPrefix;$/;"	m	class:DirItemEnumerator	typeref:typename:String
m_strInternalName	Common/VersionInfo.h	/^	String m_strInternalName; $/;"	m	class:CVersionInfo	typeref:typename:String
m_strLanguage	Common/VersionInfo.h	/^	String m_strLanguage;$/;"	m	class:CVersionInfo	typeref:typename:String
m_strLegalCopyright	Common/VersionInfo.h	/^	String m_strLegalCopyright; $/;"	m	class:CVersionInfo	typeref:typename:String
m_strMessage	Common/MessageBoxDialog.h	/^	String		m_strMessage;		\/\/ Message to be displayed.$/;"	m	class:CMessageBoxDialog	typeref:typename:String
m_strName	Common/OptionsMgr.h	/^	String m_strName; \/**< Option's name. *\/$/;"	m	class:COption	typeref:typename:String
m_strOriginalFilename	Common/VersionInfo.h	/^	String m_strOriginalFilename; $/;"	m	class:CVersionInfo	typeref:typename:String
m_strParam	WMGotoDlg.h	/^	String m_strParam;   \/**< Line\/difference number. *\/$/;"	m	class:WMGotoDlg	typeref:typename:String
m_strPath	OpenView.h	/^	String m_strPath[3];$/;"	m	class:COpenView	typeref:typename:String[3]
m_strPluginName	SelectUnpackerDlg.h	/^	String m_strPluginName;$/;"	m	class:CSelectUnpackerDlg	typeref:typename:String
m_strPrivateBuild	Common/VersionInfo.h	/^	String m_strPrivateBuild;$/;"	m	class:CVersionInfo	typeref:typename:String
m_strProductName	Common/VersionInfo.h	/^	String m_strProductName; $/;"	m	class:CVersionInfo	typeref:typename:String
m_strProductVersion	Common/VersionInfo.h	/^	String m_strProductVersion; $/;"	m	class:CVersionInfo	typeref:typename:String
m_strRegistryKey	Common/MessageBoxDialog.h	/^	CString		m_strRegistryKey;	\/\/ Entry for storing the result in the$/;"	m	class:CMessageBoxDialog	typeref:typename:CString
m_strRoot	7zCommon.h	/^	String m_strRoot[3];$/;"	m	class:CTempPathContext	typeref:typename:String[3]
m_strSaveAsPath	Merge.h	/^	String m_strSaveAsPath; \/**< "3rd path" where output saved if given *\/$/;"	m	class:CMergeApp	typeref:typename:String
m_strSpecialBuild	Common/VersionInfo.h	/^	String m_strSpecialBuild;$/;"	m	class:CVersionInfo	typeref:typename:String
m_strTempPath	DiffTextBuffer.h	/^	String m_strTempPath; \/**< Temporary files folder. *\/$/;"	m	class:CDiffTextBuffer	typeref:typename:String
m_strTitle	Common/MessageBoxDialog.h	/^	String		m_strTitle;			\/\/ Title to be used.$/;"	m	class:CMessageBoxDialog	typeref:typename:String
m_strUnpacker	OpenDoc.h	/^	String	m_strUnpacker;$/;"	m	class:COpenDoc	typeref:typename:String
m_strUnpacker	OpenView.h	/^	String	m_strUnpacker;$/;"	m	class:COpenView	typeref:typename:String
m_strUserFilterPath	PropRegistry.h	/^	String  m_strUserFilterPath;$/;"	m	class:PropRegistry	typeref:typename:String
m_subcode	FileTransform.h	/^	int			m_subcode;$/;"	m	class:PackingInfo	typeref:typename:int
m_subfolders	ProjectFile.h	/^	int m_subfolders; \/**< Are subfolders included (recursive scan) *\/$/;"	m	class:ProjectFileItem	typeref:typename:int
m_svalue	Common/varprop.h	/^	String m_svalue;  \/**< String value of the variant. *\/$/;"	m	class:varprop::VariantValue	typeref:typename:String
m_szFloat	Common/sizecbar.h	/^    CSize   m_szFloat = CSize(120, 200);$/;"	m	class:CSizingControlBar	typeref:typename:CSize
m_szHorz	Common/sizecbar.h	/^    CSize   m_szHorz = CSize(120, 200);$/;"	m	class:CSizingControlBar	typeref:typename:CSize
m_szMenuText	Common/BCMenu.h	/^	wchar_t *m_szMenuText;$/;"	m	class:BCMenuData	typeref:typename:wchar_t *
m_szMinFloat	Common/sizecbar.h	/^    CSize   m_szMinFloat = CSize(37, 32);$/;"	m	class:CSizingControlBar	typeref:typename:CSize
m_szMinHorz	Common/sizecbar.h	/^    CSize   m_szMinHorz = CSize(33, 32);$/;"	m	class:CSizingControlBar	typeref:typename:CSize
m_szMinVert	Common/sizecbar.h	/^    CSize   m_szMinVert = CSize(33, 32);$/;"	m	class:CSizingControlBar	typeref:typename:CSize
m_szVert	Common/sizecbar.h	/^    CSize   m_szVert = CSize(120, 200);$/;"	m	class:CSizingControlBar	typeref:typename:CSize
m_tcPages	Common/PreferencesDlg.h	/^	CTreeCtrl m_tcPages;$/;"	m	class:CPreferencesDlg	typeref:typename:CTreeCtrl
m_tempFilenameDst	Common/multiformatText.h	/^	String m_tempFilenameDst;$/;"	m	class:storageForPlugins	typeref:typename:String
m_tempFiles	MainFrm.h	/^	std::vector<TempFilePtr> m_tempFiles; \/**< List of possibly needed temp files. *\/$/;"	m	class:CMainFrame	typeref:typename:std::vector<TempFilePtr>
m_tempFiles	MergeDoc.h	/^	TempFile m_tempFiles[3]; \/**< Temp files for compared files *\/$/;"	m	class:CMergeDoc	typeref:typename:TempFile[3]
m_tempFolder	PropRegistry.h	/^	String  m_tempFolder;$/;"	m	class:PropRegistry	typeref:typename:String
m_tempFolderType	PropRegistry.h	/^	int     m_tempFolderType;$/;"	m	class:PropRegistry	typeref:typename:int
m_textBorder	Common/BCMenu.cpp	/^int BCMenu::m_textBorder = 0;$/;"	m	class:BCMenu	typeref:typename:int
m_textBorder	Common/BCMenu.h	/^	static int m_textBorder;$/;"	m	class:BCMenu	typeref:typename:int
m_textStats	CompareEngines/ByteCompare.h	/^	FileTextStats m_textStats[2];$/;"	m	class:CompareEngines::ByteCompare	typeref:typename:FileTextStats[2]
m_textStats	DiffFileData.h	/^	FileTextStats m_textStats[3];$/;"	m	struct:DiffFileData	typeref:typename:FileTextStats[3]
m_textStats	DiffFileInfo.h	/^	FileTextStats m_textStats; \/**< EOL, zero-byte etc counts *\/$/;"	m	struct:DiffFileInfo	typeref:typename:FileTextStats
m_textType	FileTransform.h	/^	String		m_textType;$/;"	m	class:PackingInfo	typeref:typename:String
m_threads	DiffThread.h	/^	Poco::Thread m_threads[2]; \/**< Compare threads. *\/$/;"	m	class:CDiffThread	typeref:typename:Poco::Thread[2]
m_tips	Common/CMoveConstraint.h	/^	CMap<UINT_PTR, UINT_PTR, tip, tip&> m_tips;$/;"	m	class:prdlg::CMoveConstraint	typeref:typename:CMap<UINT_PTR,UINT_PTR,tip,tip &>
m_toPath	ConfirmFolderCopyDlg.h	/^	String m_toPath;$/;"	m	class:ConfirmFolderCopyDlg	typeref:typename:String
m_toPath	DirActions.h	/^	String m_toPath;$/;"	m	struct:ConfirmationNeededException	typeref:typename:String
m_toText	ConfirmFolderCopyDlg.h	/^	String m_toText;$/;"	m	class:ConfirmFolderCopyDlg	typeref:typename:String
m_toText	DirActions.h	/^	String m_toText;$/;"	m	struct:ConfirmationNeededException	typeref:typename:String
m_tooltips	Common/MessageBoxDialog.h	/^	CToolTipCtrl	m_tooltips;$/;"	m	class:CMessageBoxDialog	typeref:typename:CToolTipCtrl
m_tooltips	PropRegistry.h	/^	CToolTipCtrl m_tooltips;$/;"	m	class:PropRegistry	typeref:typename:CToolTipCtrl
m_transformationEvent	Plugins.cpp	/^	const wchar_t *m_transformationEvent;$/;"	m	struct:ScriptInfo	typeref:typename:const wchar_t *	file:
m_transparent	UniMarkdownFile.h	/^	unsigned char *m_transparent;$/;"	m	class:UniMarkdownFile	typeref:typename:unsigned char *
m_tvalue	Common/varprop.h	/^	time_t m_tvalue;  \/**< Time value of the variant. *\/$/;"	m	class:varprop::VariantValue	typeref:typename:time_t
m_txtstats	Common/UniFile.h	/^	txtstats m_txtstats;$/;"	m	class:UniLocalFile	typeref:typename:txtstats
m_ucrbuff	Common/UniFile.h	/^	ucr::buffer m_ucrbuff;$/;"	m	class:UniStdioFile	typeref:typename:ucr::buffer
m_unicoding	Common/UniFile.h	/^	ucr::UNICODESET m_unicoding;$/;"	m	class:UniLocalFile	typeref:typename:ucr::UNICODESET
m_unicoding	FileTextEncoding.h	/^	ucr::UNICODESET m_unicoding; \/**< Unicode encoding. *\/$/;"	m	struct:FileTextEncoding	typeref:typename:ucr::UNICODESET
m_unpackerSubcode	DiffTextBuffer.h	/^	int m_unpackerSubcode; \/**< Plugin information. *\/$/;"	m	class:CDiffTextBuffer	typeref:typename:int
m_used	DiffFileData.h	/^	bool m_used; \/\/ whether m_inf has real data$/;"	m	struct:DiffFileData	typeref:typename:bool
m_value	Common/OptionsMgr.h	/^	varprop::VariantValue m_value; \/**< Option's current value. *\/$/;"	m	class:COption	typeref:typename:varprop::VariantValue
m_valueDef	Common/OptionsMgr.h	/^	varprop::VariantValue m_valueDef; \/**< Option's default value. *\/$/;"	m	class:COption	typeref:typename:varprop::VariantValue
m_visibleBottom	LocationView.h	/^	int m_visibleBottom; \/\/*< Bottom visible line for visible area indicator *\/$/;"	m	class:CLocationView	typeref:typename:int
m_visibleTop	LocationView.h	/^	int m_visibleTop; \/\/*< Top visible line for visible area indicator *\/$/;"	m	class:CLocationView	typeref:typename:int
m_vtype	Common/varprop.h	/^	VT_TYPE m_vtype;  \/**< Type of the variant. *\/$/;"	m	class:varprop::VariantValue	typeref:typename:VT_TYPE
m_wCurLanguage	Common/LanguageSelect.h	/^	LANGID m_wCurLanguage;$/;"	m	class:CLanguageSelect	typeref:typename:LANGID
m_wLanguage	Common/VersionInfo.h	/^	WORD m_wLanguage; \/**< Language-ID to use (if given) *\/$/;"	m	class:CVersionInfo	typeref:typename:WORD
m_wdiffs	stringdiffsi.h	/^	std::vector<wdiff> m_wdiffs;$/;"	m	class:strdiff::stringdiffs	typeref:typename:std::vector<wdiff>
m_whitespace	stringdiffsi.h	/^	int m_whitespace;$/;"	m	class:strdiff::stringdiffs	typeref:typename:int
m_whitespaceCompare	PatchDlg.h	/^	int m_whitespaceCompare;$/;"	m	class:CPatchDlg	typeref:typename:int
m_wndDetailBar	MergeEditFrm.h	/^	CDiffViewBar m_wndDetailBar;$/;"	m	class:CMergeEditFrame	typeref:typename:CDiffViewBar
m_wndFilePathBar	DirFrame.h	/^	CEditorFilePathBar m_wndFilePathBar;$/;"	m	class:CDirFrame	typeref:typename:CEditorFilePathBar
m_wndFilePathBar	HexMergeFrm.h	/^	CEditorFilePathBar m_wndFilePathBar;$/;"	m	class:CHexMergeFrame	typeref:typename:CEditorFilePathBar
m_wndFilePathBar	ImgMergeFrm.h	/^	CEditorFilePathBar m_wndFilePathBar;$/;"	m	class:CImgMergeFrame	typeref:typename:CEditorFilePathBar
m_wndFilePathBar	MergeEditFrm.h	/^	CEditorFilePathBar m_wndFilePathBar;$/;"	m	class:CMergeEditFrame	typeref:typename:CEditorFilePathBar
m_wndLocationBar	ImgMergeFrm.h	/^	CLocationBar m_wndLocationBar;$/;"	m	class:CImgMergeFrame	typeref:typename:CLocationBar
m_wndLocationBar	MergeEditFrm.h	/^	CLocationBar m_wndLocationBar;$/;"	m	class:CMergeEditFrame	typeref:typename:CLocationBar
m_wndMDIClient	MainFrm.h	/^	} m_wndMDIClient;$/;"	m	class:CMainFrame	typeref:class:CMainFrame::CMDIClient
m_wndReBar	MainFrm.h	/^	CReBar m_wndReBar;$/;"	m	class:CMainFrame	typeref:typename:CReBar
m_wndSplitter	HexMergeFrm.h	/^	CSplitterWndEx m_wndSplitter;$/;"	m	class:CHexMergeFrame	typeref:typename:CSplitterWndEx
m_wndSplitter	MergeEditFrm.h	/^	CSplitterWndEx m_wndSplitter;$/;"	m	class:CMergeEditFrame	typeref:typename:CSplitterWndEx
m_wndSplitter	MergeEditSplitterView.h	/^	CSplitterWndEx m_wndSplitter;$/;"	m	class:CMergeEditSplitterView	typeref:typename:CSplitterWndEx
m_wndStatusBar	DirFrame.h	/^	CStatusBar  m_wndStatusBar;$/;"	m	class:CDirFrame	typeref:typename:CStatusBar
m_wndStatusBar	HexMergeFrm.h	/^	CStatusBar m_wndStatusBar[3];$/;"	m	class:CHexMergeFrame	typeref:typename:CStatusBar[3]
m_wndStatusBar	ImgMergeFrm.h	/^	CStatusBar m_wndStatusBar[3];$/;"	m	class:CImgMergeFrame	typeref:typename:CStatusBar[3]
m_wndStatusBar	MainFrm.h	/^	CStatusBar  m_wndStatusBar;$/;"	m	class:CMainFrame	typeref:typename:CStatusBar
m_wndStatusBar	MergeEditFrm.h	/^	CMergeStatusBar m_wndStatusBar;$/;"	m	class:CMergeEditFrame	typeref:typename:CMergeStatusBar
m_wndTabBar	MainFrm.h	/^	CMDITabBar m_wndTabBar;$/;"	m	class:CMainFrame	typeref:typename:CMDITabBar
m_wndToolBar	MainFrm.h	/^	CToolBar m_wndToolBar;$/;"	m	class:CMainFrame	typeref:typename:CToolBar
m_words1	stringdiffsi.h	/^	std::vector<word> m_words1;$/;"	m	class:strdiff::stringdiffs	typeref:typename:std::vector<word>
m_words2	stringdiffsi.h	/^	std::vector<word> m_words2;$/;"	m	class:strdiff::stringdiffs	typeref:typename:std::vector<word>
m_wsflag	CompareEngines/ByteComparator.h	/^	bool m_wsflag; \/**< ignore_space_change & in a whitespace area *\/$/;"	m	class:CompareEngines::ByteComparator	typeref:typename:bool
make_xdl_flags	xdiff_gnudiff_compat.cpp	/^unsigned long make_xdl_flags(const DiffutilsOptions& options)$/;"	f	typeref:typename:unsigned long
makelower	Common/UnicodeString.cpp	/^String makelower(const String &str)$/;"	f	namespace:strutils	typeref:typename:String
maketchar	Common/unicoder.cpp	/^void maketchar(String & ch, unsigned unich, bool & lossy)$/;"	f	namespace:ucr	typeref:typename:void
maketchar	Common/unicoder.cpp	/^void maketchar(String & ch, unsigned unich, bool & lossy, unsigned codepage)$/;"	f	namespace:ucr	typeref:typename:void
maketstring	Common/unicoder.cpp	/^bool maketstring(String & str, const char* lpd, size_t len, int codepage, bool * lossy)$/;"	f	namespace:ucr	typeref:typename:bool
maketstring	UniMarkdownFile.cpp	/^String UniMarkdownFile::maketstring(const char *lpd, size_t len)$/;"	f	class:UniMarkdownFile	typeref:typename:String
makeupper	Common/UnicodeString.cpp	/^String makeupper(const String &str)$/;"	f	namespace:strutils	typeref:typename:String
map	Common/lwdisp.h	/^	const struct LWDispMap *map;$/;"	m	struct:LWDispatch	typeref:typename:const struct LWDispMap *
map	StdAfx.cpp	/^CMapStringToPtr CWinMergeProfile::map;$/;"	m	class:CWinMergeProfile	typeref:typename:CMapStringToPtr
map	StdAfx.h	/^	static CMapStringToPtr map;$/;"	m	class:CWinMergeProfile	typeref:typename:CMapStringToPtr
markChildrenForRescan	DirScan.cpp	/^static int markChildrenForRescan(CDiffContext *pCtxt, DIFFITEM *parentdiffpos)$/;"	f	typeref:typename:int	file:
mark_ignorable	PatchHTML.cpp	/^mark_ignorable (struct change *script)$/;"	f	typeref:typename:void	file:
mark_ignorable	diffutils/src/context.c	/^mark_ignorable (struct change *script)$/;"	f	typeref:typename:void	file:
match0	diffutils/src/diff.h	/^  int match0;                   \/* side0 matching line for line 1 *\/ \/* WinMerge moved block /;"	m	struct:change	typeref:typename:int
match1	diffutils/src/diff.h	/^  int match1;                   \/* side1 matching line for line 0 *\/ \/* WinMerge moved block /;"	m	struct:change	typeref:typename:int
matchchar	stringdiffs.cpp	/^matchchar(const TCHAR *ch1, const TCHAR *ch2, size_t len, bool casitive)$/;"	f	namespace:strdiff	typeref:typename:bool	file:
max	diffutils/src/system.h	/^#define max(/;"	d
memchr	diffutils/src/util.c	/^memchr (s, c, n)$/;"	f
memcmp	diffutils/src/system.h	/^#define memcmp(/;"	d
memcmp	markdown.h	/^	int (*const memcmp)(const void *, const void *, size_t);$/;"	m	class:CMarkdown	typeref:typename:int (* const)(const void *,const void *,size_t)
memcpy	diffutils/src/system.h	/^#define memcpy(/;"	d
menu	ImgMergeFrm.h	/^	static CMenu menu;$/;"	m	class:CImgMergeFrame	typeref:typename:CMenu
menuIconNormal	Common/BCMenu.h	/^	int menuIconNormal;$/;"	m	class:BCMenuData	typeref:typename:int
menuitemID	MainFrm.h	/^		int menuitemID;   \/**< Menu item's ID. *\/$/;"	m	struct:CMainFrame::MENUITEM_ICON	typeref:typename:int
menusToApply	MainFrm.h	/^		int menusToApply; \/**< For which menus to apply. *\/$/;"	m	struct:CMainFrame::MENUITEM_ICON	typeref:typename:int
message	diffutils/src/util.c	/^message (char const *format, char const *arg1, char const *arg2)$/;"	f	typeref:typename:void
message5	diffutils/src/util.c	/^message5 (char const *format, char const *arg1, char const *arg2, char const *arg3, char const */;"	f	typeref:typename:void
method_type	DirActions.h	/^	typedef FileActionScript *(DirActions::*method_type)(FileActionScript *, const std::pair<int, c/;"	t	struct:DirActions	typeref:typename:FileActionScript * (DirActions::*)(FileActionScript *,const std::pair<int,const DIFFITEM * > & it)const
method_type2	DirActions.h	/^	typedef bool (DirActions::*method_type2)(const DIFFITEM& di) const;$/;"	t	struct:DirActions	typeref:typename:bool (DirActions::*)(const DIFFITEM & di)const
min	diffutils/src/system.h	/^#define min(/;"	d
missing_newline	diffutils/src/diff.h	/^    int		    missing_newline;$/;"	m	struct:file_data	typeref:typename:int
moveTo	TFile.h	/^	void moveTo(const String& path) { File::moveTo(ucr::toUTF8(path)); }$/;"	f	class:TFile	typeref:typename:void
moved_block_analysis	MovedBlocks.cpp	/^extern "C" void moved_block_analysis(struct change ** pscript, struct file_data fd[])$/;"	f	typeref:typename:void
moved_blocks_flag	diffutils/src/diff.h	/^EXTERN int moved_blocks_flag;$/;"	v	typeref:typename:EXTERN int
msg	diffutils/src/util.c	/^struct msg$/;"	s	file:
msg_chain	diffutils/src/util.c	/^static struct msg *msg_chain;$/;"	v	typeref:struct:msg *	file:
msg_chain_end	diffutils/src/util.c	/^static struct msg **msg_chain_end = &msg_chain;$/;"	v	typeref:struct:msg **	file:
mtime	DirItem.h	/^	Poco::Timestamp mtime; \/**< time of last modify *\/$/;"	m	struct:DirItem	typeref:typename:Poco::Timestamp
mycpyt2a	Common/lwdisp.c	/^static void mycpyt2a(LPCTSTR tsz, char * adest, size_t limit)$/;"	f	typeref:typename:void	file:
mycpyt2w	Common/lwdisp.c	/^static void mycpyt2w(LPCTSTR tsz, wchar_t * wdest, size_t limit)$/;"	f	typeref:typename:void	file:
myfstat	diffutils/src/mystat.cpp	/^extern "C" int myfstat(int fd, struct _stat64 *buf)$/;"	f	typeref:typename:int
mywstat	diffutils/src/mystat.cpp	/^extern "C" int mywstat(const wchar_t *filename, struct _stat64 *buf)$/;"	f	typeref:typename:int
nByteOrder	markdown.h	/^	int nByteOrder;$/;"	m	class:CMarkdown::FileImage	typeref:typename:int
nColumnsPerPane	MergeStatusBar.cpp	/^const int nColumnsPerPane = PANE_PANE1_INFO - PANE_PANE0_INFO;$/;"	v	typeref:typename:const int
nContext	DiffWrapper.h	/^	int nContext; \/**< Number of context lines. *\/$/;"	m	struct:PATCHOPTIONS	typeref:typename:int
nCount	GhostTextBuffer.h	/^		int nCount; \/**< Lines in the block. *\/$/;"	m	struct:CGhostTextBuffer::RealityBlock	typeref:typename:int
nDiffAlgorithm	CompareOptions.h	/^	int nDiffAlgorithm; \/**< Diff algorithm -option. *\/$/;"	m	struct:DIFFOPTIONS	typeref:typename:int
nFlags	Common/BCMenu.h	/^	UINT nFlags,syncflag;$/;"	m	class:BCMenuData	typeref:typename:UINT
nID	Common/BCMenu.h	/^	UINT_PTR nID;$/;"	m	class:BCMenuData	typeref:typename:UINT_PTR
nID	Common/MessageBoxDialog.h	/^		UINT	nID;				\/\/ ID of a dialog button.$/;"	m	struct:CMessageBoxDialog::tagMSGBOXBTN	typeref:typename:UINT
nIgnoreWhitespace	CompareOptions.h	/^	int nIgnoreWhitespace; \/**< Ignore whitespace -option. *\/$/;"	m	struct:DIFFOPTIONS	typeref:typename:int
nMask	7zCommon.cpp	/^	enum {nMask = LVNI_FOCUSED|LVNI_SELECTED|LVNI_CUT|LVNI_DROPHILITED};$/;"	e	enum:DirItemEnumerator::Next::__anon6534c5100103	file:
nSE	Exceptions.h	/^	unsigned long nSE;$/;"	m	class:SE_Exception	typeref:typename:unsigned long
nStartApparent	GhostTextBuffer.h	/^		int nStartApparent; \/**< Start line of apparent block. *\/$/;"	m	struct:CGhostTextBuffer::RealityBlock	typeref:typename:int
nStartReal	GhostTextBuffer.h	/^		int nStartReal; \/**< Start line of real block. *\/$/;"	m	struct:CGhostTextBuffer::RealityBlock	typeref:typename:int
nThreadState	DiffThread.h	/^	int nThreadState; \/**< Thread state. *\/$/;"	m	struct:DiffFuncStruct	typeref:typename:int
nTitle	Common/MessageBoxDialog.h	/^		UINT	nTitle;				\/\/ ID of the title string resource.$/;"	m	struct:CMessageBoxDialog::tagMSGBOXBTN	typeref:typename:UINT
nToFirstReal	GhostTextView.h	/^		int nToFirstReal;$/;"	m	struct:CGhostTextView::SCursorPushed	typeref:typename:int
nTransformationEvents	Plugins.h	/^	int nTransformationEvents;$/;"	m	class:CScriptsOfThread	typeref:typename:int
nType	Common/MessageBoxDialog.cpp	/^	UINT nType;$/;"	m	struct:ModelessMesssageBoxParam	typeref:typename:UINT	file:
name	DirColsDlg.h	/^		String name; \/**< Column name *\/$/;"	m	struct:CDirColsDlg::column	typeref:typename:String
name	FileFilter.h	/^	String name;			\/**< Filter name (shown in UI) *\/$/;"	m	struct:FileFilter	typeref:typename:String
name	FileFilterHelper.h	/^	String name; 			\/**< Name of filter *\/$/;"	m	struct:FileFilterInfo	typeref:typename:String
name	diffutils/src/diff.h	/^    char const      *name;	\/* File name  *\/$/;"	m	struct:file_data	typeref:typename:char const *
nameList	Common/OptionsMgr.h	/^		Container<String> nameList;$/;"	m	class:COptionsMgr::GetNameList	typeref:typename:Container<String>
nbuckets	diffutils/src/io.c	/^static DECL_TLS int nbuckets;$/;"	v	typeref:typename:DECL_TLS int	file:
ncrlfs	Common/UniFile.h	/^		int ncrlfs;$/;"	m	struct:UniFile::txtstats	typeref:typename:int
ncrlfs	FileTextStats.h	/^	__int64 ncrlfs; \/**< Count of DOS (CR+LF-bytes) EOLs. *\/$/;"	m	struct:FileTextStats	typeref:typename:__int64
ncrs	Common/UniFile.h	/^		int ncrs;$/;"	m	struct:UniFile::txtstats	typeref:typename:int
ncrs	FileTextStats.h	/^	__int64 ncrs; \/**< Count of MAC (CR-byte) EOLs. *\/$/;"	m	struct:FileTextStats	typeref:typename:__int64
need_free_buffers	diffutils/src/analyze.c	/^DECL_TLS int need_free_buffers=0;$/;"	v	typeref:typename:DECL_TLS int
new	7zCommon.cpp	/^#define new /;"	d	file:
new	Common/BCMenu.cpp	/^#define new /;"	d	file:
new	Common/Bitmap.cpp	/^#define new /;"	d	file:
new	Common/CMoveConstraint.cpp	/^#define new /;"	d	file:
new	Common/ColorButton.cpp	/^#define new /;"	d	file:
new	Common/DebugNew.h	/^#define new /;"	d
new	Common/LanguageSelect.cpp	/^#define new /;"	d	file:
new	Common/MDITabBar.cpp	/^#define new /;"	d	file:
new	Common/MessageBoxDialog.cpp	/^#define new /;"	d	file:
new	Common/PreferencesDlg.cpp	/^#define new /;"	d	file:
new	Common/PropertyPageHost.cpp	/^#define new /;"	d	file:
new	Common/ShellContextMenu.cpp	/^#define new /;"	d	file:
new	Common/SplitterWndEx.cpp	/^#define new /;"	d	file:
new	Common/SuperComboBox.cpp	/^#define new /;"	d	file:
new	Common/scbarg.cpp	/^#define new /;"	d	file:
new	Common/sizecbar.cpp	/^#define new /;"	d	file:
new	CompareStatisticsDlg.cpp	/^#define new /;"	d	file:
new	ConfirmFolderCopyDlg.cpp	/^#define new /;"	d	file:
new	DiffTextBuffer.cpp	/^#define new /;"	d	file:
new	DiffViewBar.cpp	/^#define new /;"	d	file:
new	DirColsDlg.cpp	/^#define new /;"	d	file:
new	DirCompProgressBar.cpp	/^#define new /;"	d	file:
new	DirDoc.cpp	/^#define new /;"	d	file:
new	DirFrame.cpp	/^#define new /;"	d	file:
new	DirSelectFilesDlg.cpp	/^#define new /;"	d	file:
new	DirView.cpp	/^#define new /;"	d	file:
new	EditorFilepathBar.cpp	/^#define new /;"	d	file:
new	EncodingErrorBar.cpp	/^#define new /;"	d	file:
new	FileFiltersDlg.cpp	/^#define new /;"	d	file:
new	FilepathEdit.cpp	/^#define new /;"	d	file:
new	GhostTextBuffer.cpp	/^#define new /;"	d	file:
new	GhostTextView.cpp	/^#define new /;"	d	file:
new	HexMergeDoc.cpp	/^#define new /;"	d	file:
new	HexMergeFrm.cpp	/^#define new /;"	d	file:
new	HexMergeView.cpp	/^#define new /;"	d	file:
new	ImgMergeFrm.cpp	/^#define new /;"	d	file:
new	LineFiltersDlg.cpp	/^#define new /;"	d	file:
new	LoadSaveCodepageDlg.cpp	/^#define new /;"	d	file:
new	LocationBar.cpp	/^#define new /;"	d	file:
new	LocationView.cpp	/^#define new /;"	d	file:
new	MainFrm.cpp	/^#define new /;"	d	file:
new	Merge.cpp	/^#define new /;"	d	file:
new	MergeDoc.cpp	/^#define new /;"	d	file:
new	MergeDocDiffSync.cpp	/^#define new /;"	d	file:
new	MergeDocEncoding.cpp	/^#define new /;"	d	file:
new	MergeDocLineDiffs.cpp	/^#define new /;"	d	file:
new	MergeEditFrm.cpp	/^#define new /;"	d	file:
new	MergeEditSplitterView.cpp	/^#define new /;"	d	file:
new	MergeEditView.cpp	/^#define new /;"	d	file:
new	MergeStatusBar.cpp	/^#define new /;"	d	file:
new	OpenFrm.cpp	/^#define new /;"	d	file:
new	OpenView.cpp	/^#define new /;"	d	file:
new	PatchDlg.cpp	/^#define new /;"	d	file:
new	PatchTool.cpp	/^#define new /;"	d	file:
new	PropArchive.cpp	/^#define new /;"	d	file:
new	PropBackups.cpp	/^#define new /;"	d	file:
new	PropCodepage.cpp	/^#define new /;"	d	file:
new	PropColors.cpp	/^#define new /;"	d	file:
new	PropCompare.cpp	/^#define new /;"	d	file:
new	PropCompareBinary.cpp	/^#define new /;"	d	file:
new	PropCompareFolder.cpp	/^#define new /;"	d	file:
new	PropCompareImage.cpp	/^#define new /;"	d	file:
new	PropDirColors.cpp	/^#define new /;"	d	file:
new	PropEditor.cpp	/^#define new /;"	d	file:
new	PropGeneral.cpp	/^#define new /;"	d	file:
new	PropMarkerColors.cpp	/^#define new /;"	d	file:
new	PropRegistry.cpp	/^#define new /;"	d	file:
new	PropShell.cpp	/^#define new /;"	d	file:
new	PropSyntaxColors.cpp	/^#define new /;"	d	file:
new	PropTextColors.cpp	/^#define new /;"	d	file:
new	SaveClosingDlg.cpp	/^#define new /;"	d	file:
new	SelectUnpackerDlg.cpp	/^#define new /;"	d	file:
new	SharedFilterDlg.cpp	/^#define new /;"	d	file:
new	TestFilterDlg.cpp	/^#define new /;"	d	file:
new	WMGotoDlg.cpp	/^#define new /;"	d	file:
next	DiffList.h	/^	ptrdiff_t next; \/**< link (array index) for doubly-linked chain of non-trivial DIFFRANGEs *\/$/;"	m	struct:DiffRangeInfo	typeref:typename:ptrdiff_t
next	diffutils/src/io.c	/^  int next;	\/* Next item in this bucket. *\/$/;"	m	struct:equivclass	typeref:typename:int	file:
next	diffutils/src/util.c	/^  struct msg *next;$/;"	m	struct:msg	typeref:struct:msg *	file:
next0	diffutils/src/side.c	/^static DECL_TLS int next0, next1;$/;"	v	typeref:typename:DECL_TLS int	file:
next1	diffutils/src/side.c	/^static DECL_TLS int next0, next1;$/;"	v	typeref:typename:DECL_TLS int	file:
next_line	diffutils/src/ifdef.c	/^static DECL_TLS int next_line;$/;"	v	typeref:typename:DECL_TLS int	file:
nidiffs	DiffItem.h	/^	int nidiffs;					\/**< Amount of ignored differences *\/$/;"	m	class:DIFFITEM	typeref:typename:int
nlfs	Common/UniFile.h	/^		int nlfs;$/;"	m	struct:UniFile::txtstats	typeref:typename:int
nlfs	FileTextStats.h	/^	__int64 nlfs; \/**< Count of Unix (LF-byte) EOLs. *\/$/;"	m	struct:FileTextStats	typeref:typename:__int64
nlosses	Common/UniFile.h	/^		int nlosses;$/;"	m	struct:UniFile::txtstats	typeref:typename:int
no	charsets.c	/^enum { no, yes };$/;"	e	enum:__anonf85915530103	file:
noPlugin	SelectUnpackerDlg.h	/^	std::unique_ptr<PluginInfo> noPlugin;$/;"	m	class:CSelectUnpackerDlg	typeref:typename:std::unique_ptr<PluginInfo>
no_details_flag	diffutils/src/diff.h	/^EXTERN int 	no_details_flag;$/;"	v	typeref:typename:EXTERN int
no_diff_means_no_output	diffutils/src/diff.h	/^EXTERN int no_diff_means_no_output;$/;"	v	typeref:typename:EXTERN int
no_discards	diffutils/src/analyze.c	/^DECL_TLS int no_discards;$/;"	v	typeref:typename:DECL_TLS int
nondiscarded_lines	diffutils/src/diff.h	/^    int		    nondiscarded_lines;$/;"	m	struct:file_data	typeref:typename:int
normalize	paths.cpp	/^void normalize(String & sPath)$/;"	f	namespace:paths	typeref:typename:void
nsdiffs	DiffItem.h	/^	int	nsdiffs;					\/**< Amount of non-ignored differences *\/$/;"	m	class:DIFFITEM	typeref:typename:int
numCharsetInfo	charsets.c	/^enum { numCharsetInfo = sizeof charsetInfo \/ sizeof *charsetInfo - 1 };$/;"	e	enum:__anonf85915530203	file:
nzeros	Common/UniFile.h	/^		int nzeros;$/;"	m	struct:UniFile::txtstats	typeref:typename:int
nzeros	FileTextStats.h	/^	__int64 nzeros; \/**< Count of zero-bytes. *\/$/;"	m	struct:FileTextStats	typeref:typename:__int64
off_t	diffutils/src/system.h	/^typedef long off_t;$/;"	t	typeref:typename:long
offset	DirViewColItems.h	/^	size_t offset;	\/**< Offset into DIFFITEM::diffFileInfo[] *\/$/;"	m	struct:DirColInfo	typeref:typename:size_t
onp	stringdiffs.cpp	/^stringdiffs::onp(std::vector<char> &edscript)$/;"	f	class:strdiff::stringdiffs	typeref:typename:int
op	DiffList.h	/^	OP_TYPE op = OP_NONE;		\/**< Operation done with this diff *\/$/;"	m	struct:DIFFRANGE	typeref:typename:OP_TYPE
op	LocationView.h	/^	int op;$/;"	m	struct:DiffBlock	typeref:typename:int
op	MergeDoc.h	/^	int op;$/;"	m	struct:WordDiff	typeref:typename:int
op	stringdiffs.h	/^	int op;$/;"	m	struct:strdiff::wdiff	typeref:typename:int
opFxn	Common/lwdisp.h	/^#define opFxn /;"	d
opGet	Common/lwdisp.h	/^#define opGet /;"	d
opPut	Common/lwdisp.h	/^#define opPut /;"	d
opSet	Common/lwdisp.h	/^#define opSet /;"	d
operator !	Common/MyCom.h	/^  bool operator!() const {  return (m_str == NULL); }$/;"	f	class:CMyComBSTR	typeref:typename:bool
operator !	Common/MyCom.h	/^  bool operator!() const { return (_p == NULL); }$/;"	f	class:CMyComPtr	typeref:typename:bool
operator !=	DirItemIterator.h	/^	bool operator!=(const DirItemIterator& it) const$/;"	f	class:DirItemIterator	typeref:typename:bool
operator !=	DirItemIterator.h	/^	bool operator!=(const DirItemWithIndexIterator& it) const$/;"	f	class:DirItemWithIndexIterator	typeref:typename:bool
operator !=	FileTextEncoding.h	/^	bool operator!=(const FileTextEncoding & fte2) const { return Collate(*this, fte2) != 0; }$/;"	f	struct:FileTextEncoding	typeref:typename:bool
operator !=	PathContext.h	/^	bool operator!=(const PathContextIterator& it) const$/;"	f	class:PathContextIterator	typeref:typename:bool
operator &	Common/MyCom.h	/^  BSTR* operator&() { return &m_str; }$/;"	f	class:CMyComBSTR	typeref:typename:BSTR *
operator &	Common/MyCom.h	/^  T** operator&() { return &_p; }$/;"	f	class:CMyComPtr	typeref:typename:T **
operator ()	DiffWrapper.cpp	/^	bool operator()(const DiffRangeInfo &dr3)$/;"	f	struct:Comp02Functor	typeref:typename:bool	file:
operator ()	DirActions.h	/^	FileActionScript *operator()(FileActionScript *pscript, const std::pair<int, const DIFFITEM *>&/;"	f	struct:DirActions	typeref:typename:FileActionScript *
operator ()	DirActions.h	/^	bool operator()(const DIFFITEM &di) const$/;"	f	struct:DirActions	typeref:typename:bool
operator ()	DirTravel.cpp	/^	bool operator()(const DirItem &elem1, const DirItem &elem2)$/;"	f	struct:StringComparer	typeref:typename:bool	file:
operator ()	DirView.cpp	/^	bool operator()(REPORT_TYPE nReportType, IListCtrl *pList, int nIndex, const String &sDestDir, /;"	f	struct:FileCmpReport	typeref:typename:bool	file:
operator ()	DropHandler.cpp	/^		void operator()(HANDLE h) { if (h != nullptr && h != INVALID_HANDLE_VALUE) ::CloseHandle(h); }$/;"	f	struct:__anonfdfe2aa90111::HandleDeleter	typeref:typename:void	file:
operator ()	stringdiffs.cpp	/^	bool operator()(const wdiff &wd3)$/;"	f	struct:strdiff::Comp02Functor	typeref:typename:bool	file:
operator *	DirItemIterator.h	/^	DIFFITEM& operator*()$/;"	f	class:DirItemIterator	typeref:typename:DIFFITEM &
operator *	DirItemIterator.h	/^	const DIFFITEM& operator*() const$/;"	f	class:DirItemIterator	typeref:typename:const DIFFITEM &
operator *	DirItemIterator.h	/^	std::pair<int, DIFFITEM *> operator*()$/;"	f	class:DirItemWithIndexIterator	typeref:typename:std::pair<int,DIFFITEM * >
operator *	PathContext.h	/^	String operator*()$/;"	f	class:PathContextIterator	typeref:typename:String
operator ++	DirItemIterator.h	/^	DirItemIterator& operator++()$/;"	f	class:DirItemIterator	typeref:typename:DirItemIterator &
operator ++	DirItemIterator.h	/^	DirItemWithIndexIterator& operator++()$/;"	f	class:DirItemWithIndexIterator	typeref:typename:DirItemWithIndexIterator &
operator ++	PathContext.h	/^	PathContextIterator& operator++()$/;"	f	class:PathContextIterator	typeref:typename:PathContextIterator &
operator +=	Common/MyCom.h	/^  CMyComBSTR& operator+=(LPCOLESTR src)$/;"	f	class:CMyComBSTR	typeref:typename:CMyComBSTR &
operator ->	7zCommon.cpp	/^interface Merge7z *Merge7z::Proxy::operator->()$/;"	f	class:Merge7z::Proxy	typeref:typename:interface Merge7z *
operator ->	Common/MyCom.h	/^  T* operator->() const { return _p; }$/;"	f	class:CMyComPtr	typeref:typename:T *
operator ->	Common/memdc.h	/^	CMyMemDC* operator->() $/;"	f	class:CMyMemDC	typeref:typename:CMyMemDC *
operator =	Common/MyCom.h	/^  CMyComBSTR& operator=(LPCOLESTR src)$/;"	f	class:CMyComBSTR	typeref:typename:CMyComBSTR &
operator =	Common/MyCom.h	/^  CMyComBSTR& operator=(const CMyComBSTR& src)$/;"	f	class:CMyComBSTR	typeref:typename:CMyComBSTR &
operator =	Common/MyCom.h	/^  T* operator=(T* p)$/;"	f	class:CMyComPtr	typeref:typename:T *
operator =	Common/OptionsMgr.cpp	/^COption& COption::operator=(const COption& option)$/;"	f	class:COption	typeref:typename:COption &
operator =	Common/varprop.cpp	/^VariantValue& VariantValue::operator=(const VariantValue& value)$/;"	f	class:varprop::VariantValue	typeref:typename:VariantValue &
operator =	DirItemIterator.h	/^	DirItemIterator& operator=(const DirItemIterator& it)$/;"	f	class:DirItemIterator	typeref:typename:DirItemIterator &
operator =	DirItemIterator.h	/^	DirItemWithIndexIterator& operator=(const DirItemWithIndexIterator& it)$/;"	f	class:DirItemWithIndexIterator	typeref:typename:DirItemWithIndexIterator &
operator =	PathContext.h	/^	PathContextIterator& operator=(const PathContextIterator& it)$/;"	f	class:PathContextIterator	typeref:typename:PathContextIterator &
operator ==	Common/MyCom.h	/^  bool operator == (const CMyComBSTR &src)$/;"	f	class:CMyComBSTR	typeref:typename:bool
operator ==	DirItemIterator.h	/^	bool operator==(const DirItemIterator& it) const$/;"	f	class:DirItemIterator	typeref:typename:bool
operator ==	DirItemIterator.h	/^	bool operator==(const DirItemWithIndexIterator& it) const$/;"	f	class:DirItemWithIndexIterator	typeref:typename:bool
operator ==	FileTextEncoding.h	/^	bool operator==(const FileTextEncoding & fte2) const { return Collate(*this, fte2) == 0; }$/;"	f	struct:FileTextEncoding	typeref:typename:bool
operator ==	PathContext.h	/^	bool operator==(const PathContextIterator& it) const$/;"	f	class:PathContextIterator	typeref:typename:bool
operator BSTR	Common/MyCom.h	/^  operator BSTR() const { return m_str; }$/;"	f	class:CMyComBSTR
operator CLIPFORMAT	Common/MyCom.h	/^	operator CLIPFORMAT() const { return cf; }$/;"	f	class:CMyClipFormat
operator CMyMemDC*	Common/memdc.h	/^	operator CMyMemDC*() $/;"	f	class:CMyMemDC
operator T*	Common/MyCom.h	/^  operator T*() const { return _p; }$/;"	f	class:CMyComPtr
operator []	Common/MyCom.h	/^	CMyDispParamsUnnamed &operator[](const T &value)$/;"	f	class:CMyDispParamsUnnamed	typeref:typename:CMyDispParamsUnnamed &
operator []	PathContext.h	/^	String operator[](int nIndex) const { return GetAt(nIndex); }$/;"	f	class:PathContext	typeref:typename:String
operator []	PathContext.h	/^	String& operator[](int nIndex) { return GetElement(nIndex); }$/;"	f	class:PathContext	typeref:typename:String &
optionalFormats	7zCommon.cpp	/^std::vector<Merge7z::Format *(*)(const String& path)> Merge7zFormatRegister::optionalFormats;$/;"	m	class:Merge7zFormatRegister	typeref:typename:std::vector<Merge7z::Format * (*)(const String & path)>
optionalFormats	Merge7zFormatRegister.h	/^	static std::vector<Merge7z::Format *(*)(const String& path)> optionalFormats;$/;"	m	struct:Merge7zFormatRegister	typeref:typename:std::vector<Merge7z::Format * (*)(const String & path)>
origFileName	FolderCmp.h	/^	PathContext origFileName;$/;"	m	struct:PluginsContext	typeref:typename:PathContext
origin	StdAfx.cpp	/^LARGE_INTEGER CWinMergeProfile::origin;$/;"	m	class:CWinMergeProfile	typeref:typename:LARGE_INTEGER
origin	StdAfx.h	/^	static LARGE_INTEGER origin;$/;"	m	class:CWinMergeProfile	typeref:typename:LARGE_INTEGER
outfile	diffutils/src/diff.h	/^EXTERN FILE *outfile;$/;"	v	typeref:typename:EXTERN FILE *
outputStyle	DiffWrapper.h	/^	enum output_style outputStyle; \/**< Patch file style. *\/$/;"	m	struct:PATCHOPTIONS	typeref:enum:output_style
output_1_escapedhtml	PatchHTML.cpp	/^output_1_escapedhtml(const char *text, const char *limit)$/;"	f	typeref:typename:void	file:
output_1_line	diffutils/src/util.c	/^output_1_line (char const *text, char const *limit, char const *flag_format, char const *line_fl/;"	f	typeref:typename:void
output_style	diffutils/src/diff.h	/^EXTERN int output_style;$/;"	v	typeref:typename:EXTERN int
output_style	diffutils/src/diff.h	/^enum output_style {$/;"	g
p	Plugins.cpp	/^	T *p;$/;"	m	struct:AutoReleaser	typeref:typename:T *	file:
pBGR	Common/BCMenu.cpp	/^typedef sBGR *pBGR;$/;"	t	typeref:typename:sBGR *	file:
pColItems	DirView.h	/^		const DirViewColItems *const pColItems;$/;"	m	class:CDirView::CompareState	typeref:typename:const DirViewColItems * const
pContext	Common/BCMenu.h	/^	void *pContext; \/\/ used to attach user data$/;"	m	class:BCMenuData	typeref:typename:void *
pCopy	markdown.h	/^	void *pCopy;$/;"	m	class:CMarkdown::FileImage	typeref:typename:void *
pCtxt	DirView.h	/^		const CDiffContext *const pCtxt;$/;"	m	class:CDirView::CompareState	typeref:typename:const CDiffContext * const
pImage	markdown.h	/^	void *pImage;$/;"	m	class:CMarkdown::FileImage	typeref:typename:void *
pPage	Common/PropertyPageHost.h	/^	CPropertyPage* pPage;$/;"	m	struct:PAGEITEM	typeref:typename:CPropertyPage *
pSemaphore	DiffThread.h	/^	Poco::Semaphore *pSemaphore; \/**< Semaphore for synchronizing threads. *\/$/;"	m	struct:DiffFuncStruct	typeref:typename:Poco::Semaphore *
pTempPathContext	7zCommon.h	/^	CTempPathContext *pTempPathContext;$/;"	m	struct:DecompressResult	typeref:typename:CTempPathContext *
pView	7zCommon.h	/^	typedef CListCtrl *pView;$/;"	t	class:DirItemEnumerator	typeref:typename:CListCtrl *
pack	Plugins.cpp	/^static bool pack(const wchar_t *method, const String& source, const String& dest, int & nChanged/;"	f	namespace:plugin	typeref:typename:bool	file:
pad	Common/BCMenu.cpp	/^	unsigned char pad;$/;"	m	struct:ssBGR	typeref:typename:unsigned char	file:
paginate_flag	diffutils/src/diff.h	/^EXTERN int	paginate_flag;$/;"	v	typeref:typename:EXTERN int
pane	WinIMergeLib.h	/^		int pane;$/;"	m	struct:IImgMergeWindow::Event	typeref:typename:int
params	JumpList.h	/^		String params;$/;"	m	struct:JumpList::Item	typeref:typename:String
parent	DiffItem.h	/^	DIFFITEM *parent;				\/**< Parent of current item *\/$/;"	m	class:DIFFITEM	typeref:typename:DIFFITEM *
partition	diffutils/src/analyze.c	/^struct partition$/;"	s	file:
path	Common/ShellContextMenu.h	/^		String path; \/**< path to file, including all but file name *\/$/;"	m	struct:CShellContextMenu::FileEntry	typeref:typename:String
path	DirItem.h	/^	boost::flyweight<String> path; \/**< full path (excluding filename) for the item *\/$/;"	m	struct:DirItem	typeref:typename:boost::flyweight<String>
path	JumpList.h	/^		String path;$/;"	m	struct:JumpList::Item	typeref:typename:String
pathLeft	PatchTool.h	/^	String pathLeft; \/**< Left path added to patch file *\/$/;"	m	struct:PATCHFILES	typeref:typename:String
pathRight	PatchTool.h	/^	String pathRight; \/**< Right path added to patch file *\/$/;"	m	struct:PATCHFILES	typeref:typename:String
paths	paths.cpp	/^namespace paths$/;"	n	file:
paths	paths.h	/^namespace paths$/;"	n
pathsType	7zCommon.h	/^	paths::PATH_EXISTENCE pathsType;$/;"	m	struct:DecompressResult	typeref:typename:paths::PATH_EXISTENCE
pclose	diffutils/src/system.h	/^#define pclose	/;"	d
perror_with_name	diffutils/src/util.c	/^perror_with_name (char const *text)$/;"	f	typeref:typename:void
pfatal_with_name	diffutils/src/util.c	/^pfatal_with_name (char const *text)$/;"	f	typeref:typename:void
pfnProc	Common/lwdisp.c	/^	LWDispFxn pfnProc;$/;"	m	struct:LWDispMap	typeref:typename:LWDispFxn	file:
pfnProc	Common/lwdisp.h	/^	LWDispFxn pfnProc;$/;"	m	struct:LWDispRef	typeref:typename:LWDispFxn
phy_col	DirColsDlg.h	/^		int phy_col; \/**< Physical (in memory) order number *\/$/;"	m	struct:CDirColsDlg::column	typeref:typename:int
physicalIndex	DirViewColItems.h	/^	int physicalIndex; \/**< Current physical index, -1 if not displayed *\/$/;"	m	struct:DirColInfo	typeref:typename:int
pid_t	diffutils/src/system.h	/^typedef int pid_t;$/;"	t	typeref:typename:int
placement_cast	Common/SuperComboBox.cpp	/^T &placement_cast(void *p)$/;"	f	typeref:typename:T &
plugin	Plugins.cpp	/^namespace plugin$/;"	n	file:
plugin	Plugins.h	/^namespace plugin$/;"	n
pointer	DropHandler.cpp	/^		typedef HANDLE pointer;$/;"	t	struct:__anonfdfe2aa90111::HandleDeleter	typeref:typename:HANDLE	file:
popPosition	GhostTextView.cpp	/^void CGhostTextView::popPosition(SCursorPushed Ssrc, CPoint & pt)$/;"	f	class:CGhostTextView	typeref:typename:void
popen	diffutils/src/system.h	/^#define popen	/;"	d
pr_context_hunk	diffutils/src/context.c	/^pr_context_hunk (struct change *hunk)$/;"	f	typeref:typename:void	file:
pr_forward_ed_hunk	diffutils/src/ED.C	/^pr_forward_ed_hunk (struct change *hunk)$/;"	f	typeref:typename:void	file:
pr_forward_ed_script	diffutils/src/ED.C	/^pr_forward_ed_script (struct change *script)$/;"	f	typeref:typename:void
pr_pid	diffutils/src/util.c	/^static pid_t pr_pid;$/;"	v	typeref:typename:pid_t	file:
pr_unidiff_hunk	PatchHTML.cpp	/^pr_unidiff_hunk (struct change *hunk)$/;"	f	typeref:typename:void	file:
pr_unidiff_hunk	diffutils/src/context.c	/^pr_unidiff_hunk (struct change *hunk)$/;"	f	typeref:typename:void	file:
prdlg	Common/CMoveConstraint.cpp	/^namespace prdlg {$/;"	n	file:
prdlg	Common/CMoveConstraint.h	/^namespace prdlg {$/;"	n
prefix_end	diffutils/src/diff.h	/^    char const HUGE *prefix_end;$/;"	m	struct:file_data	typeref:typename:char const HUGE *
prefix_lines	diffutils/src/diff.h	/^    int prefix_lines;$/;"	m	struct:file_data	typeref:typename:int
prepAndCompareFiles	FolderCmp.cpp	/^int FolderCmp::prepAndCompareFiles(DIFFITEM &di)$/;"	f	class:FolderCmp	typeref:typename:int
prepareForRescan	DiffTextBuffer.cpp	/^void CDiffTextBuffer::prepareForRescan()$/;"	f	class:CDiffTextBuffer	typeref:typename:void
prepareListbox	SelectUnpackerDlg.cpp	/^void CSelectUnpackerDlg::prepareListbox() $/;"	f	class:CSelectUnpackerDlg	typeref:typename:void
prepare_text_end	diffutils/src/io.c	/^prepare_text_end (struct file_data *current, short side)$/;"	f	typeref:typename:char *	file:
prev	DiffList.h	/^	ptrdiff_t prev; \/**< link (array index) for doubly-linked chain of non-trivial DIFFRANGEs *\/$/;"	m	struct:DiffRangeInfo	typeref:typename:ptrdiff_t
primes	diffutils/src/io.c	/^static int const primes[] =$/;"	v	typeref:typename:int const[]	file:
print_1_escapedhtml	PatchHTML.cpp	/^print_1_escapedhtml(const char **line)$/;"	f	typeref:typename:void	file:
print_1_line	diffutils/src/util.c	/^print_1_line (char const *line_flag, char const * const *line)$/;"	f	typeref:typename:void
print_1sdiff_line	diffutils/src/side.c	/^print_1sdiff_line (char const HUGE * const *left, int sep, char const HUGE * const *right)$/;"	f	typeref:typename:void	file:
print_context_header	diffutils/src/context.c	/^print_context_header(struct file_data inf[], int unidiff_flag)$/;"	f	typeref:typename:void
print_context_label	diffutils/src/context.c	/^print_context_label(char const *mark, struct file_data *inf, char const *label)$/;"	f	typeref:typename:void	file:
print_context_number_range	diffutils/src/context.c	/^print_context_number_range (struct file_data const *file, int a, int b)$/;"	f	typeref:typename:void	file:
print_context_script	diffutils/src/context.c	/^print_context_script (struct change *script, int unidiff_flag)$/;"	f	typeref:typename:void
print_ed_hunk	diffutils/src/ED.C	/^print_ed_hunk (struct change *hunk)$/;"	f	typeref:typename:void	file:
print_ed_script	diffutils/src/ED.C	/^print_ed_script (struct change *script)$/;"	f	typeref:typename:void
print_file_same_flag	diffutils/src/diff.h	/^EXTERN int      print_file_same_flag;$/;"	v	typeref:typename:EXTERN int
print_half_line	diffutils/src/side.c	/^print_half_line (char const * const *line, unsigned indent, unsigned out_bound)$/;"	f	typeref:typename:unsigned	file:
print_html_diff_header	PatchHTML.cpp	/^print_html_diff_header (struct file_data inf[])$/;"	f	typeref:typename:void
print_html_diff_terminator	PatchHTML.cpp	/^print_html_diff_terminator (void)$/;"	f	typeref:typename:void
print_html_header	PatchHTML.cpp	/^print_html_header (void)$/;"	f	typeref:typename:void
print_html_script	PatchHTML.cpp	/^print_html_script (struct change *script\/*, int src_codepage*\/)$/;"	f	typeref:typename:void
print_html_terminator	PatchHTML.cpp	/^print_html_terminator (void)$/;"	f	typeref:typename:void
print_ifdef_hunk	diffutils/src/ifdef.c	/^print_ifdef_hunk (struct change *hunk)$/;"	f	typeref:typename:void	file:
print_ifdef_lines	diffutils/src/ifdef.c	/^print_ifdef_lines (register FILE *out, char *format, struct group const *group)$/;"	f	typeref:typename:void	file:
print_ifdef_script	diffutils/src/ifdef.c	/^print_ifdef_script (struct change *script)$/;"	f	typeref:typename:void
print_message_queue	diffutils/src/util.c	/^print_message_queue ()$/;"	f	typeref:typename:void
print_normal_hunk	diffutils/src/NORMAL.C	/^print_normal_hunk (struct change *hunk)$/;"	f	typeref:typename:void	file:
print_normal_script	diffutils/src/NORMAL.C	/^print_normal_script (struct change *script)$/;"	f	typeref:typename:void
print_number_range	diffutils/src/util.c	/^print_number_range (int sepchar, struct file_data *file, int a, int b)$/;"	f	typeref:typename:void
print_rcs_hunk	diffutils/src/ED.C	/^print_rcs_hunk (struct change *hunk)$/;"	f	typeref:typename:void	file:
print_rcs_script	diffutils/src/ED.C	/^print_rcs_script (struct change *script)$/;"	f	typeref:typename:void
print_script	diffutils/src/util.c	/^print_script (struct change *script, $/;"	f	typeref:typename:void
print_sdiff_common_lines	diffutils/src/side.c	/^print_sdiff_common_lines (int limit0, int limit1)$/;"	f	typeref:typename:void	file:
print_sdiff_hunk	diffutils/src/side.c	/^print_sdiff_hunk (struct change *hunk)$/;"	f	typeref:typename:void	file:
print_sdiff_script	diffutils/src/side.c	/^print_sdiff_script (struct change *script)$/;"	f	typeref:typename:void
print_unidiff_number_range	diffutils/src/context.c	/^print_unidiff_number_range (struct file_data const *file, int a, int b)$/;"	f	typeref:typename:void	file:
private_build	MergeApp.h	/^	String private_build;$/;"	m	struct:AboutInfo	typeref:typename:String
processingInstruction	ProjectFile.cpp	/^	void processingInstruction(const XMLString& target, const XMLString& data) {}$/;"	f	class:ProjectFileHandler	typeref:typename:void	file:
program	diffutils/src/diff.h	/^EXTERN char *	program;$/;"	v	typeref:typename:EXTERN char *
ptLeft	LocationView.h	/^	CPoint ptLeft;$/;"	m	struct:MovedLine	typeref:typename:CPoint
ptOrg	Common/scbarg.h	/^    CPoint  ptOrg;$/;"	m	class:CSCBButton	typeref:typename:CPoint
ptRight	LocationView.h	/^	CPoint ptRight;$/;"	m	struct:MovedLine	typeref:typename:CPoint
ptr	Common/unicoder.h	/^	unsigned char * ptr; \/**< Pointer to a buffer. *\/$/;"	m	struct:ucr::buffer	typeref:typename:unsigned char *
pushPosition	GhostTextView.cpp	/^void CGhostTextView::pushPosition(SCursorPushed & Sdest, CPoint pt)$/;"	f	class:CGhostTextView	typeref:typename:void
pv	PropCompareBinary.cpp	/^	HMODULE pv;$/;"	m	class:Heksedit	typeref:typename:HMODULE	file:
pwcName	Common/lwdisp.h	/^	LPCWSTR pwcName;$/;"	m	struct:LWDispRef	typeref:typename:LPCWSTR
queueResult	DirScan.cpp	/^	NotificationQueue& queueResult() const { return m_queueResult; }$/;"	f	class:WorkNotification	typeref:typename:NotificationQueue &	file:
r	Common/BCMenu.cpp	/^	unsigned char r;$/;"	m	struct:ssBGR	typeref:typename:unsigned char	file:
read_files	diffutils/src/io.c	/^read_files (struct file_data filevec[], int pretend_binary, int *bin_file)$/;"	f	typeref:typename:int
read_mmfile	xdiff_gnudiff_compat.cpp	/^static bool read_mmfile(int fd, mmfile_t& mmfile)$/;"	f	typeref:typename:bool	file:
realindexes	diffutils/src/diff.h	/^    int		   *realindexes;$/;"	m	struct:file_data	typeref:typename:int *
recursive	diffutils/src/Diff.cpp	/^DECL_TLS int recursive;$/;"	v	typeref:typename:DECL_TLS int
ref	Common/lwdisp.c	/^	struct LWDispRef ref[1];$/;"	m	struct:LWDispMap	typeref:struct:LWDispRef[1]	file:
refc	Common/lwdisp.h	/^	ULONG refc;$/;"	m	struct:LWDispatch	typeref:typename:ULONG
regName	DirViewColItems.h	/^	const TCHAR *regName; \/**< Internal name used for registry entries etc *\/$/;"	m	struct:DirColInfo	typeref:typename:const TCHAR *
regexp	FileFilter.h	/^	Poco::RegularExpression regexp; \/**< Compiled regular expression *\/$/;"	m	struct:FileFilterElement	typeref:typename:Poco::RegularExpression
regexp	FilterList.h	/^	Poco::RegularExpression regexp; \/**< Compiled regular expression *\/$/;"	m	struct:filter_item	typeref:typename:Poco::RegularExpression
renameTo	TFile.h	/^	void renameTo(const String& path) { File::renameTo(ucr::toUTF8(path)); }$/;"	f	class:TFile	typeref:typename:void
replace	Common/UnicodeString.cpp	/^void replace(String &target, const String &find, const String &replace)$/;"	f	namespace:strutils	typeref:typename:void
replace_char	paths.cpp	/^static void replace_char(TCHAR *s, int target, int repl)$/;"	f	namespace:paths	typeref:typename:void	file:
reportType	DirCmpReportDlg.cpp	/^	REPORT_TYPE reportType; \/**< Report-type ID *\/$/;"	m	struct:ReportTypeInfo	typeref:typename:REPORT_TYPE	file:
reportType	DirFilterDlg.cpp	/^	REPORT_TYPE reportType; \/**< Report-type ID *\/$/;"	m	struct:ReportTypeInfo	typeref:typename:REPORT_TYPE	file:
reset	DirItem.h	/^	void reset() { attributes = 0; } \/\/\/ Reset fileattributes$/;"	f	struct:FileFlags	typeref:typename:void
resize	Common/unicoder.cpp	/^void buffer::resize(size_t newSize)$/;"	f	class:ucr::buffer	typeref:typename:void
resultType	CompareStatisticsDlg.cpp	/^	static const struct { int ctlID; CompareStats::RESULT resultType; bool isDir; } ctlResultTypeMa/;"	m	struct:BEGIN_MESSAGE_MAP::__anonc685a11f0208	typeref:typename:CompareStats::RESULT	file:
rfile	PatchTool.h	/^	String rfile; \/**< Right file *\/$/;"	m	struct:PATCHFILES	typeref:typename:String
rg	Common/LanguageSelect.cpp	/^	static const struct rg rg[];$/;"	m	class:LangFileInfo	typeref:typename:const struct rg[]	file:
rg	Common/LanguageSelect.cpp	/^	struct rg$/;"	s	class:LangFileInfo	file:
rg	Common/LanguageSelect.cpp	/^const struct LangFileInfo::rg LangFileInfo::rg[] =$/;"	m	class:LangFileInfo	typeref:typename:const struct LangFileInfo::rg[]
rgDispinfoText	DirView.cpp	/^static String rgDispinfoText[2]; \/\/ used in function below$/;"	v	typeref:typename:String[2]	file:
rgvarg	Common/MyCom.h	/^	VARIANT rgvarg[cArgs + 1];$/;"	m	union:CMyDispParams	typeref:typename:VARIANT[]
rtime	PatchTool.h	/^	time_t rtime; \/**< Right time *\/$/;"	m	struct:PATCHFILES	typeref:typename:time_t
run	DirScan.cpp	/^	void run()$/;"	f	class:DiffWorker	typeref:typename:void	file:
sBGR	Common/BCMenu.cpp	/^} sBGR;$/;"	t	typeref:struct:ssBGR	file:
sTitle	Common/PropertyPageHost.h	/^	CString sTitle;$/;"	m	struct:PAGEITEM	typeref:typename:CString
safeInvokeA	Plugins.cpp	/^static HRESULT safeInvokeA(LPDISPATCH pi, VARIANT *ret, DISPID id, LPCCH op, ...)$/;"	f	typeref:typename:HRESULT	file:
safeInvokeW	Plugins.cpp	/^static HRESULT safeInvokeW(LPDISPATCH pi, VARIANT *ret, LPCOLESTR silent, LPCCH op, ...)$/;"	f	typeref:typename:HRESULT	file:
scan_char_literal	diffutils/src/ifdef.c	/^scan_char_literal (char *lit, int *intptr)$/;"	f	typeref:typename:char *	file:
scan_printf_spec	diffutils/src/ifdef.c	/^scan_printf_spec (register char *spec)$/;"	f	typeref:typename:char *	file:
scriptletsLoaded	Plugins.cpp	/^static bool scriptletsLoaded=false;$/;"	v	typeref:typename:bool	file:
scriptletsSem	Plugins.cpp	/^static FastMutex scriptletsSem;$/;"	v	typeref:typename:FastMutex	file:
sdiff_column2_offset	diffutils/src/diff.h	/^EXTERN unsigned sdiff_column2_offset;$/;"	v	typeref:typename:EXTERN unsigned
sdiff_half_width	diffutils/src/diff.h	/^EXTERN unsigned sdiff_half_width;$/;"	v	typeref:typename:EXTERN unsigned
sdiff_help_sdiff	diffutils/src/diff.h	/^EXTERN int sdiff_help_sdiff;$/;"	v	typeref:typename:EXTERN int
sdiff_left_only	diffutils/src/diff.h	/^EXTERN int sdiff_left_only;$/;"	v	typeref:typename:EXTERN int
sdiff_skip_common_lines	diffutils/src/diff.h	/^EXTERN int sdiff_skip_common_lines;$/;"	v	typeref:typename:EXTERN int
seh_trans_func	Exceptions.h	/^	static void seh_trans_func(unsigned u, EXCEPTION_POINTERS* pExp) $/;"	f	class:SE_Handler	typeref:typename:void
setCodepage	DiffTextBuffer.h	/^	void setCodepage(int value) { m_encoding.SetCodepage(value); }$/;"	f	class:CDiffTextBuffer	typeref:typename:void
setDefaultCodepage	Common/unicoder.cpp	/^void setDefaultCodepage(int cp)$/;"	f	namespace:ucr	typeref:typename:void
setDocumentLocator	ProjectFile.cpp	/^	void setDocumentLocator(const Locator* loc) {}$/;"	f	class:ProjectFileHandler	typeref:typename:void	file:
setEncoding	DiffTextBuffer.h	/^	void setEncoding(const FileTextEncoding &encoding) { m_encoding = encoding; }$/;"	f	class:CDiffTextBuffer	typeref:typename:void
setHasBom	DiffTextBuffer.h	/^	void setHasBom(bool value) { m_encoding.m_bom = value; }$/;"	f	class:CDiffTextBuffer	typeref:typename:void
setPath	FileLocation.h	/^	void setPath(const String & sFilePath) { this->filepath = sFilePath; }$/;"	f	struct:FileLocation	typeref:typename:void
setSideFlag	DiffItem.h	/^	void setSideFlag(int nIndex)$/;"	f	struct:DIFFCODE	typeref:typename:void
setSideNone	DiffItem.h	/^	void setSideNone() { SetSide(0); }$/;"	f	struct:DIFFCODE	typeref:typename:void
setUnicoding	DiffTextBuffer.h	/^	void setUnicoding(ucr::UNICODESET value) { m_encoding.m_unicoding = value; }$/;"	f	class:CDiffTextBuffer	typeref:typename:void
set_statbuf	diffutils/src/mystat.cpp	/^inline void set_statbuf(const FileInfo& hfi, struct _stat64& buf)$/;"	f	typeref:typename:void
setup_output	diffutils/src/util.c	/^setup_output (char const *name0, char const *name1, int depth)$/;"	f	typeref:typename:void
shift_boundaries	diffutils/src/analyze.c	/^shift_boundaries (struct file_data filevec[])$/;"	f	typeref:typename:void	file:
show_binaries	DirActions.h	/^	bool show_binaries;$/;"	m	struct:DirViewFilterSettings	typeref:typename:bool
show_different	DirActions.h	/^	bool show_different;$/;"	m	struct:DirViewFilterSettings	typeref:typename:bool
show_different_left_only	DirActions.h	/^	bool show_different_left_only;$/;"	m	struct:DirViewFilterSettings	typeref:typename:bool
show_different_middle_only	DirActions.h	/^	bool show_different_middle_only;$/;"	m	struct:DirViewFilterSettings	typeref:typename:bool
show_different_right_only	DirActions.h	/^	bool show_different_right_only;$/;"	m	struct:DirViewFilterSettings	typeref:typename:bool
show_identical	DirActions.h	/^	bool show_identical;$/;"	m	struct:DirViewFilterSettings	typeref:typename:bool
show_missing_left_only	DirActions.h	/^	bool show_missing_left_only;$/;"	m	struct:DirViewFilterSettings	typeref:typename:bool
show_missing_middle_only	DirActions.h	/^	bool show_missing_middle_only;$/;"	m	struct:DirViewFilterSettings	typeref:typename:bool
show_missing_right_only	DirActions.h	/^	bool show_missing_right_only;$/;"	m	struct:DirViewFilterSettings	typeref:typename:bool
show_skipped	DirActions.h	/^	bool show_skipped;$/;"	m	struct:DirViewFilterSettings	typeref:typename:bool
show_unique_left	DirActions.h	/^	bool show_unique_left;$/;"	m	struct:DirViewFilterSettings	typeref:typename:bool
show_unique_middle	DirActions.h	/^	bool show_unique_middle;$/;"	m	struct:DirViewFilterSettings	typeref:typename:bool
show_unique_right	DirActions.h	/^	bool show_unique_right;$/;"	m	struct:DirViewFilterSettings	typeref:typename:bool
sign64	DirViewColItems.cpp	/^static int sign64(int64_t val)$/;"	f	typeref:typename:int	file:
signature	Common/LanguageSelect.cpp	/^		WORD signature;$/;"	m	struct:CLanguageSelect::RetranslateDialog::__anone6888ab20108	typeref:typename:WORD	file:
sip	diffutils/src/io.c	/^sip (struct file_data *current, int skip_test)$/;"	f	typeref:typename:int
size	Common/unicoder.h	/^	size_t size; \/**< Size of the data in the buffer, <= capacity. *\/$/;"	m	struct:ucr::buffer	typeref:typename:size_t
size	DirItem.h	/^	Poco::File::FileSize size; \/**< file size in bytes, FILE_SIZE_NONE (== -1) means file does not/;"	m	struct:DirItem	typeref:typename:Poco::File::FileSize
skippedEntity	ProjectFile.cpp	/^	void skippedEntity(const XMLString& name) {}$/;"	f	class:ProjectFileHandler	typeref:typename:void	file:
slurp	diffutils/src/io.c	/^slurp (struct file_data *current)$/;"	f	typeref:typename:void
snake	stringdiffs.cpp	/^stringdiffs::snake(int k, int y, bool exchanged)$/;"	f	class:strdiff::stringdiffs	typeref:typename:int
sortCol	DirView.h	/^		const int sortCol;$/;"	m	class:CDirView::CompareState	typeref:typename:const int
sortfnc	DirViewColItems.h	/^	ColSortFncPtrType sortfnc; \/**< Handler for sorting this column *\/$/;"	m	struct:DirColInfo	typeref:typename:ColSortFncPtrType
src	FileActionScript.h	/^	String src; \/**< Source for action *\/$/;"	m	struct:FileAction	typeref:typename:String
ssBGR	Common/BCMenu.cpp	/^typedef struct ssBGR {$/;"	s	file:
start	stringdiffsi.h	/^		int start; \/\/ index of first character of word in original string$/;"	m	struct:strdiff::stringdiffs::word	typeref:typename:int
startDocument	ProjectFile.cpp	/^	void startDocument() {}$/;"	f	class:ProjectFileHandler	typeref:typename:void	file:
startElement	ProjectFile.cpp	/^	void startElement(const XMLString& uri, const XMLString& localName, const XMLString& qname, con/;"	f	class:ProjectFileHandler	typeref:typename:void	file:
startPrefixMapping	ProjectFile.cpp	/^	void startPrefixMapping(const XMLString& prefix, const XMLString& uri) {}$/;"	f	class:ProjectFileHandler	typeref:typename:void	file:
stat	StdAfx.h	/^		struct stat {$/;"	s	function:CWinMergeProfile::~CWinMergeProfile
stat	diffutils/src/diff.h	/^    struct _stat64  stat;	\/* File status from fstat()  *\/$/;"	m	struct:file_data	typeref:struct:_stat64
stat	diffutils/src/diff.h	/^    struct stat     stat;	\/* File status from fstat()  *\/$/;"	m	struct:file_data	typeref:struct:stat
stateful	charsets.c	/^	unsigned stateful;$/;"	m	struct:_charsetInfo	typeref:typename:unsigned	file:
std_tchar	Common/UnicodeString.h	/^#define std_tchar(/;"	d
storageForPlugins	Common/multiformatText.h	/^	storageForPlugins()$/;"	f	class:storageForPlugins
storageForPlugins	Common/multiformatText.h	/^class storageForPlugins$/;"	c
strMessage	Common/MessageBoxDialog.cpp	/^	CString strMessage;$/;"	m	struct:ModelessMesssageBoxParam	typeref:typename:CString	file:
strProgPath	Environment.cpp	/^static String strProgPath;$/;"	v	namespace:env	typeref:typename:String	file:
strTempPath	Environment.cpp	/^static String strTempPath;$/;"	v	namespace:env	typeref:typename:String	file:
strchr	diffutils/src/system.h	/^#define strchr /;"	d
strdiff	stringdiffs.cpp	/^namespace strdiff$/;"	n	file:
strdiff	stringdiffs.h	/^namespace strdiff$/;"	n
strdiff	stringdiffsi.h	/^namespace strdiff$/;"	n
stringdiffs	stringdiffs.cpp	/^stringdiffs::stringdiffs(const String & str1, const String & str2,$/;"	f	class:strdiff::stringdiffs
stringdiffs	stringdiffsi.h	/^class stringdiffs$/;"	c	namespace:strdiff
stringlen_of_utf8	Common/unicoder.cpp	/^size_t stringlen_of_utf8(const char* text, size_t size)$/;"	f	namespace:ucr	typeref:typename:size_t
strrchr	diffutils/src/system.h	/^#define strrchr /;"	d
strs_	stringdiffs.cpp	/^	const String *strs_;$/;"	m	struct:strdiff::Comp02Functor	typeref:typename:const String *	file:
strutils	Common/UnicodeString.cpp	/^namespace strutils$/;"	n	file:
strutils	Common/UnicodeString.h	/^namespace strutils$/;"	n
style	Common/LanguageSelect.cpp	/^		DWORD style;$/;"	m	struct:CLanguageSelect::RetranslateDialog::__anone6888ab20108	typeref:typename:DWORD	file:
style	Common/LanguageSelect.cpp	/^		DWORD style;$/;"	m	struct:CLanguageSelect::RetranslateDialog::__anone6888ab20208	typeref:typename:DWORD	file:
suffix_begin	diffutils/src/diff.h	/^    char const HUGE *suffix_begin;$/;"	m	struct:file_data	typeref:typename:char const HUGE *
sum	StdAfx.h	/^			int sum = 0;$/;"	m	struct:CWinMergeProfile::~CWinMergeProfile::stat	typeref:typename:int
swap	DiffItem.h	/^	void swap(int idx1, int idx2)$/;"	f	struct:DIFFCODE	typeref:typename:void
swap_sides	DiffList.cpp	/^void DIFFRANGE::swap_sides(int index1, int index2)$/;"	f	class:DIFFRANGE	typeref:typename:void
swap_sides	PatchTool.h	/^	void swap_sides()$/;"	f	struct:PATCHFILES	typeref:typename:void
switch_string	diffutils/src/diff.h	/^EXTERN char *	switch_string;$/;"	v	typeref:typename:EXTERN char *
synbegin1	stringdiffsi.h	/^	synbegin1 = 0, $/;"	e	enum:strdiff::__anon8d10c7270203
synbegin2	stringdiffsi.h	/^	synbegin2,$/;"	e	enum:strdiff::__anon8d10c7270203
syncflag	Common/BCMenu.h	/^	UINT nFlags,syncflag;$/;"	m	class:BCMenuData	typeref:typename:UINT
synend1	stringdiffsi.h	/^	synend1, $/;"	e	enum:strdiff::__anon8d10c7270203
synend2	stringdiffsi.h	/^	synend2 $/;"	e	enum:strdiff::__anon8d10c7270203
szClassName	MainFrm.cpp	/^const TCHAR CMainFrame::szClassName[] = _T("WinMergeWindowClassW");$/;"	m	class:CMainFrame	typeref:typename:const TCHAR[]
szClassName	MainFrm.h	/^	static const TCHAR szClassName[];$/;"	m	class:CMainFrame	typeref:typename:const TCHAR[]
szRelativePath	Common/LanguageSelect.cpp	/^static const TCHAR szRelativePath[] = _T("Languages");$/;"	v	typeref:typename:const TCHAR[]	file:
tab_align_flag	diffutils/src/diff.h	/^EXTERN int	tab_align_flag;$/;"	v	typeref:typename:EXTERN int
tab_expand_flag	diffutils/src/diff.h	/^EXTERN int	tab_expand_flag;$/;"	v	typeref:typename:EXTERN int
tab_from_to	diffutils/src/side.c	/^tab_from_to (unsigned from, unsigned to)$/;"	f	typeref:typename:unsigned	file:
tagMSGBOXBTN	Common/MessageBoxDialog.h	/^	typedef struct tagMSGBOXBTN$/;"	s	class:CMessageBoxDialog
target	Common/lwdisp.h	/^	void *target;$/;"	m	struct:LWDispatch	typeref:typename:void *
theApp	Merge.cpp	/^CMergeApp theApp;$/;"	v	typeref:typename:CMergeApp
theScriptletHandleList	Plugins.cpp	/^static vector<HANDLE> theScriptletHandleList;$/;"	v	typeref:typename:vector<HANDLE>	file:
theScriptletList	Plugins.cpp	/^static vector<String> theScriptletList;$/;"	v	typeref:typename:vector<String>	file:
tip	Common/CMoveConstraint.h	/^	struct tip { CString m_sText; int m_nResourceId; tip() : m_nResourceId(0) { } };$/;"	f	struct:prdlg::CMoveConstraint::tip
tip	Common/CMoveConstraint.h	/^	struct tip { CString m_sText; int m_nResourceId; tip() : m_nResourceId(0) { } };$/;"	s	class:prdlg::CMoveConstraint
title	JumpList.h	/^		String title;$/;"	m	struct:JumpList::Item	typeref:typename:String
toSystemCP	Common/unicoder.cpp	/^std::string toSystemCP(const std::string& str)$/;"	f	namespace:ucr	typeref:typename:std::string
toSystemCP	Common/unicoder.cpp	/^std::string toSystemCP(const std::wstring& str)$/;"	f	namespace:ucr	typeref:typename:std::string
toTString	Common/unicoder.cpp	/^String toTString(const std::string& str)$/;"	f	namespace:ucr	typeref:typename:String
toTString	Common/unicoder.cpp	/^String toTString(const std::wstring& str)$/;"	f	namespace:ucr	typeref:typename:String
toThreadCP	Common/unicoder.cpp	/^std::string toThreadCP(const std::string& str)$/;"	f	namespace:ucr	typeref:typename:std::string
toThreadCP	Common/unicoder.cpp	/^std::string toThreadCP(const std::wstring& str)$/;"	f	namespace:ucr	typeref:typename:std::string
toUTF16	Common/unicoder.cpp	/^std::wstring toUTF16(const String& tstr)$/;"	f	namespace:ucr	typeref:typename:std::wstring
toUTF16	Common/unicoder.cpp	/^void toUTF16(const String& tstr, std::wstring& wstr)$/;"	f	namespace:ucr	typeref:typename:void
toUTF8	Common/unicoder.cpp	/^std::string toUTF8(const String& tstr)$/;"	f	namespace:ucr	typeref:typename:std::string
toUTF8	Common/unicoder.cpp	/^void toUTF8(const String& tstr, std::string& u8str)$/;"	f	namespace:ucr	typeref:typename:void
to_str	Common/UnicodeString.h	/^inline String to_str(double val) { return strutils::format(_T("%f"), val); }$/;"	f	namespace:strutils	typeref:typename:String
to_str	Common/UnicodeString.h	/^inline String to_str(float val) { return strutils::format(_T("%f"), val); }$/;"	f	namespace:strutils	typeref:typename:String
to_str	Common/UnicodeString.h	/^inline String to_str(int val) { return strutils::format(_T("%d"), val); }$/;"	f	namespace:strutils	typeref:typename:String
to_str	Common/UnicodeString.h	/^inline String to_str(long long val) { return strutils::format(_T("%I64d"), val); }$/;"	f	namespace:strutils	typeref:typename:String
to_str	Common/UnicodeString.h	/^inline String to_str(long val) { return strutils::format(_T("%ld"), val); }$/;"	f	namespace:strutils	typeref:typename:String
to_str	Common/UnicodeString.h	/^inline String to_str(unsigned long long val) { return strutils::format(_T("%I64u"), val); }$/;"	f	namespace:strutils	typeref:typename:String
to_str	Common/UnicodeString.h	/^inline String to_str(unsigned long val) { return strutils::format(_T("%lu"), val); }$/;"	f	namespace:strutils	typeref:typename:String
to_str	Common/UnicodeString.h	/^inline String to_str(unsigned val) { return strutils::format(_T("%u"), val); }$/;"	f	namespace:strutils	typeref:typename:String
to_utf8_advance	Common/unicoder.cpp	/^int to_utf8_advance(unsigned u, unsigned char * &lpd)$/;"	f	namespace:ucr	typeref:typename:int
too_expensive	diffutils/src/analyze.c	/^static DECL_TLS int too_expensive;	\/* Edit scripts longer than this are too$/;"	v	typeref:typename:DECL_TLS int	file:
top_coord	LocationView.h	/^	unsigned top_coord; \/**< X-coord of diff block begin. *\/$/;"	m	struct:DiffBlock	typeref:typename:unsigned
top_line	LocationView.h	/^	unsigned top_line; \/**< First line of the difference. *\/$/;"	m	struct:DiffBlock	typeref:typename:unsigned
total	DirActions.h	/^	int total;$/;"	m	struct:Counts	typeref:typename:int
tr	MergeApp.cpp	/^String tr(const char *msgctxt, const std::string &str)$/;"	f	typeref:typename:String
tr	MergeApp.cpp	/^String tr(const std::string &str)$/;"	f	typeref:typename:String
translate_line_number	diffutils/src/util.c	/^translate_line_number (struct file_data const *file, int lnum)$/;"	f	typeref:typename:int
translate_range	diffutils/src/util.c	/^translate_range (struct file_data const *file, int a, int b, int *aptr, int *bptr)$/;"	f	typeref:typename:void
tree_mode	DirActions.h	/^	bool tree_mode;$/;"	m	struct:DirViewFilterSettings	typeref:typename:bool
trim_ws	Common/UnicodeString.cpp	/^String trim_ws(const String & str)$/;"	f	namespace:strutils	typeref:typename:String
trim_ws_begin	Common/UnicodeString.cpp	/^String trim_ws_begin(const String & str)$/;"	f	namespace:strutils	typeref:typename:String
trim_ws_end	Common/UnicodeString.cpp	/^String trim_ws_end(const String & str)$/;"	f	namespace:strutils	typeref:typename:String
trivial	diffutils/src/diff.h	/^  char trivial;                 \/* Flag if change is trivial (ignored blanks or filtered regexp/;"	m	struct:change	typeref:typename:char
txtstats	Common/UniFile.h	/^		txtstats() { clear(); }$/;"	f	struct:UniFile::txtstats
txtstats	Common/UniFile.h	/^	struct txtstats$/;"	s	class:UniFile
ucr	Common/unicoder.cpp	/^namespace ucr$/;"	n	file:
ucr	Common/unicoder.h	/^namespace ucr$/;"	n
undiscarded	diffutils/src/diff.h	/^    int		   *undiscarded;$/;"	m	struct:file_data	typeref:typename:int *
undoTgt	MergeDoc.h	/^	std::vector<int> undoTgt;$/;"	m	class:CMergeDoc	typeref:typename:std::vector<int>
unidirectional_new_file_flag	diffutils/src/diff.h	/^EXTERN int	unidirectional_new_file_flag;$/;"	v	typeref:typename:EXTERN int
unique_handle	DropHandler.cpp	/^	typedef std::unique_ptr<HANDLE, HandleDeleter> unique_handle;$/;"	t	namespace:__anonfdfe2aa90111	typeref:typename:std::unique_ptr<HANDLE,HandleDeleter>	file:
unpack	Plugins.cpp	/^static bool unpack(const wchar_t *method, const String& source, const String& dest, int & nChang/;"	f	namespace:plugin	typeref:typename:bool	file:
unsetSideFlag	DiffItem.h	/^	void unsetSideFlag(int nIndex)$/;"	f	struct:DIFFCODE	typeref:typename:void
unslash	Common/LanguageSelect.cpp	/^static void unslash(std::wstring &s)$/;"	f	typeref:typename:void	file:
upper	markdown.cpp	/^	const char *upper;$/;"	m	class:CMarkdown::Token	typeref:typename:const char *	file:
upper	markdown.h	/^	const char *upper;	\/\/ end of enclosed text (initially beginning of file)$/;"	m	class:CMarkdown	typeref:typename:const char *
upto	diffutils/src/ifdef.c	/^  int from, upto; \/* start and limit lines for this group of lines *\/$/;"	m	struct:group	typeref:typename:int	file:
userdata	WinIMergeLib.h	/^		void *userdata;$/;"	m	struct:IImgMergeWindow::Event	typeref:typename:void *
utags	markdown.h	/^	const char *const utags;$/;"	m	class:CMarkdown	typeref:typename:const char * const
valid_lines	diffutils/src/diff.h	/^    int linbuf_base, buffered_lines, valid_lines, alloc_lines;$/;"	m	struct:file_data	typeref:typename:int
varprop	Common/varprop.cpp	/^namespace varprop$/;"	n	file:
varprop	Common/varprop.h	/^namespace varprop$/;"	n
version	DirItem.h	/^	FileVersion version; \/**< string of fixed file version, eg, 1.2.3.4 *\/$/;"	m	struct:DirItem	typeref:typename:FileVersion
version	MergeApp.h	/^	String version;$/;"	m	struct:AboutInfo	typeref:typename:String
version_string	diffutils/GnuVersion.c	/^char const version_string[] = "2.5";$/;"	v	typeref:typename:char const[]
volatile	diffutils/src/system.h	/^#define volatile$/;"	d
vtbl	Common/lwdisp.c	/^static const struct LWDispVtbl vtbl =$/;"	v	typeref:typename:const struct LWDispVtbl	file:
wCodePage	Common/VersionInfo.cpp	/^	WORD wCodePage;$/;"	m	struct:LANGUAGEANDCODEPAGE	typeref:typename:WORD	file:
wLanguage	Common/VersionInfo.cpp	/^	WORD wLanguage;$/;"	m	struct:LANGUAGEANDCODEPAGE	typeref:typename:WORD	file:
wSourceLangId	Common/LanguageSelect.cpp	/^const WORD wSourceLangId = MAKELANGID(LANG_ENGLISH, SUBLANG_ENGLISH_US);$/;"	v	typeref:typename:const WORD
wait	diffutils/src/system.h	/^#define wait /;"	d
warning	MergeApp.cpp	/^int warning(const String& msg, int type)$/;"	f	namespace:AppMsgBox	typeref:typename:int
wdiff	stringdiffs.h	/^	wdiff(const wdiff & src)$/;"	f	struct:strdiff::wdiff
wdiff	stringdiffs.h	/^	wdiff(int s1=0, int e1=0, int s2=0, int e2=0, int s3=0, int e3=0)$/;"	f	struct:strdiff::wdiff
wdiff	stringdiffs.h	/^struct wdiff {$/;"	s	namespace:strdiff
website	MergeApp.h	/^	String website;$/;"	m	struct:AboutInfo	typeref:typename:String
width	WinIMergeLib.h	/^		int width;$/;"	m	struct:IImgMergeWindow::Event	typeref:typename:int
wnd	PropCompareBinary.cpp	/^	CWnd wnd;$/;"	m	class:Heksedit	typeref:typename:CWnd	file:
word	diffutils/src/io.c	/^typedef unsigned word;$/;"	t	typeref:typename:unsigned	file:
word	stringdiffsi.h	/^		word(int s = 0, int e = 0, int b = 0, int h = 0) : start(s), end(e), bBreak(b),hash(h) { }$/;"	f	struct:strdiff::stringdiffs::word
word	stringdiffsi.h	/^	struct word {$/;"	s	class:strdiff::stringdiffs
wordLevelToByteLevel	stringdiffs.cpp	/^void stringdiffs::wordLevelToByteLevel()$/;"	f	class:strdiff::stringdiffs	typeref:typename:void
writeBom	Common/unicoder.cpp	/^int writeBom(void* dest, UNICODESET unicoding)$/;"	f	namespace:ucr	typeref:typename:int
writeElement	ProjectFile.cpp	/^void writeElement(XMLWriter& writer, const std::string& tagname, const std::string& characters)$/;"	f	namespace:__anond6e6a54d0111	typeref:typename:void
x	Common/LanguageSelect.cpp	/^		short x;$/;"	m	struct:CLanguageSelect::RetranslateDialog::__anone6888ab20108	typeref:typename:short	file:
x	Common/LanguageSelect.cpp	/^		short x;$/;"	m	struct:CLanguageSelect::RetranslateDialog::__anone6888ab20208	typeref:typename:short	file:
x	GhostTextView.h	/^		int x;$/;"	m	struct:CGhostTextView::SCursorPushed	typeref:typename:int
x	WinIMergeLib.h	/^		int x;$/;"	m	struct:IImgMergeWindow::Event	typeref:typename:int
xmalloc	diffutils/src/util.c	/^xmalloc (size_t size)$/;"	f	typeref:typename:VOID *
xmid	diffutils/src/analyze.c	/^  int xmid, ymid;	\/* Midpoints of this partition.  *\/$/;"	m	struct:partition	typeref:typename:int	file:
xmlch2tstr	ProjectFile.cpp	/^String xmlch2tstr(const XMLChar *ch, int length)$/;"	f	namespace:__anond6e6a54d0111	typeref:typename:String
xoffset	Common/BCMenu.h	/^	INT_PTR xoffset,global_offset;$/;"	m	class:BCMenuData	typeref:typename:INT_PTR
xrealloc	diffutils/src/util.c	/^xrealloc (VOID *old, size_t size)$/;"	f	typeref:typename:VOID *
xsi	res/WinMergeU.VisualElementsManifest.xml	/^<Application xmlns:xsi="http:\/\/www.w3.org\/2001\/XMLSchema-instance">$/;"	n	uri:http://www.w3.org/2001/XMLSchema-instance
xvec	diffutils/src/analyze.c	/^static DECL_TLS int *xvec, *yvec;	\/* Vectors being compared. *\/$/;"	v	typeref:typename:DECL_TLS int *	file:
y	Common/LanguageSelect.cpp	/^		short y;$/;"	m	struct:CLanguageSelect::RetranslateDialog::__anone6888ab20108	typeref:typename:short	file:
y	Common/LanguageSelect.cpp	/^		short y;$/;"	m	struct:CLanguageSelect::RetranslateDialog::__anone6888ab20208	typeref:typename:short	file:
y	GhostTextView.h	/^		int y;$/;"	m	struct:CGhostTextView::SCursorPushed	typeref:typename:int
y	WinIMergeLib.h	/^		int y;$/;"	m	struct:IImgMergeWindow::Event	typeref:typename:int
yes	charsets.c	/^enum { no, yes };$/;"	e	enum:__anonf85915530103	file:
ymid	diffutils/src/analyze.c	/^  int xmid, ymid;	\/* Midpoints of this partition.  *\/$/;"	m	struct:partition	typeref:typename:int	file:
yvec	diffutils/src/analyze.c	/^static DECL_TLS int *xvec, *yvec;	\/* Vectors being compared. *\/$/;"	v	typeref:typename:DECL_TLS int **	file:
~AutoReleaser	Plugins.cpp	/^	~AutoReleaser() { if (p!=nullptr) p->Release(); }$/;"	f	struct:AutoReleaser	file:
~BCMenu	Common/BCMenu.cpp	/^BCMenu::~BCMenu()$/;"	f	class:BCMenu
~BCMenuData	Common/BCMenu.cpp	/^BCMenuData::~BCMenuData()$/;"	f	class:BCMenuData
~BinaryCompare	CompareEngines/BinaryCompare.cpp	/^BinaryCompare::~BinaryCompare()$/;"	f	class:CompareEngines::BinaryCompare
~ByteCompare	CompareEngines/ByteCompare.cpp	/^ByteCompare::~ByteCompare()$/;"	f	class:CompareEngines::ByteCompare
~CAboutDlg	AboutDlg.cpp	/^CAboutDlg::~CAboutDlg() {}$/;"	f	class:CAboutDlg
~CAssureScriptsForThread	Plugins.cpp	/^CAssureScriptsForThread::~CAssureScriptsForThread()$/;"	f	class:CAssureScriptsForThread
~CConfigLog	ConfigLog.cpp	/^CConfigLog::~CConfigLog()$/;"	f	class:CConfigLog
~CDiffContext	DiffContext.cpp	/^CDiffContext::~CDiffContext()$/;"	f	class:CDiffContext
~CDiffThread	DiffThread.cpp	/^CDiffThread::~CDiffThread()$/;"	f	class:CDiffThread
~CDiffViewBar	DiffViewBar.cpp	/^CDiffViewBar::~CDiffViewBar()$/;"	f	class:CDiffViewBar
~CDiffWrapper	DiffWrapper.cpp	/^CDiffWrapper::~CDiffWrapper()$/;"	f	class:CDiffWrapper
~CDirDoc	DirDoc.cpp	/^CDirDoc::~CDirDoc()$/;"	f	class:CDirDoc
~CDirFrame	DirFrame.cpp	/^CDirFrame::~CDirFrame()$/;"	f	class:CDirFrame
~CDirView	DirView.cpp	/^CDirView::~CDirView()$/;"	f	class:CDirView
~CEditorFilePathBar	EditorFilepathBar.cpp	/^CEditorFilePathBar::~CEditorFilePathBar()$/;"	f	class:CEditorFilePathBar
~CExconverterMLang	Common/ExConverter.cpp	/^	~CExconverterMLang()$/;"	f	class:CExconverterMLang	file:
~CHexMergeDoc	HexMergeDoc.cpp	/^CHexMergeDoc::~CHexMergeDoc()$/;"	f	class:CHexMergeDoc
~CHexMergeFrame	HexMergeFrm.cpp	/^CHexMergeFrame::~CHexMergeFrame()$/;"	f	class:CHexMergeFrame
~CImgMergeFrame	ImgMergeFrm.cpp	/^CImgMergeFrame::~CImgMergeFrame()$/;"	f	class:CImgMergeFrame
~CLocationBar	LocationBar.cpp	/^CLocationBar::~CLocationBar()$/;"	f	class:CLocationBar
~CLocationView	LocationView.cpp	/^CLocationView::~CLocationView()$/;"	f	class:CLocationView
~CMDITabBar	Common/MDITabBar.h	/^	virtual ~CMDITabBar() {}$/;"	f	class:CMDITabBar
~CMainFrame	MainFrm.cpp	/^CMainFrame::~CMainFrame()$/;"	f	class:CMainFrame
~CMergeApp	Merge.cpp	/^CMergeApp::~CMergeApp()$/;"	f	class:CMergeApp
~CMergeDoc	MergeDoc.cpp	/^CMergeDoc::~CMergeDoc()$/;"	f	class:CMergeDoc
~CMergeEditFrame	MergeEditFrm.cpp	/^CMergeEditFrame::~CMergeEditFrame()$/;"	f	class:CMergeEditFrame
~CMergeEditSplitterView	MergeEditSplitterView.cpp	/^CMergeEditSplitterView::~CMergeEditSplitterView()$/;"	f	class:CMergeEditSplitterView
~CMergeEditView	MergeEditView.cpp	/^CMergeEditView::~CMergeEditView()$/;"	f	class:CMergeEditView
~CMergeStatusBar	MergeStatusBar.cpp	/^CMergeStatusBar::~CMergeStatusBar()$/;"	f	class:CMergeStatusBar
~CMessageBoxDialog	Common/MessageBoxDialog.cpp	/^CMessageBoxDialog::~CMessageBoxDialog ( )$/;"	f	class:CMessageBoxDialog
~CMoveConstraint	Common/CMoveConstraint.cpp	/^CMoveConstraint::~CMoveConstraint()$/;"	f	class:prdlg::CMoveConstraint
~CMyComBSTR	Common/MyCom.h	/^  ~CMyComBSTR() { ::SysFreeString(m_str); }$/;"	f	class:CMyComBSTR
~CMyComPtr	Common/MyCom.h	/^  ~CMyComPtr() { if (_p) _p->Release(); }$/;"	f	class:CMyComPtr
~CMyDispParams	Common/MyCom.h	/^	~CMyDispParams() { Unnamed.Drop(); }$/;"	f	union:CMyDispParams
~CMyMemDC	Common/memdc.h	/^	~CMyMemDC()	$/;"	f	class:CMyMemDC
~CMyStgMedium	Common/MyCom.h	/^	~CMyStgMedium()$/;"	f	class:CMyStgMedium
~CMyVariant	Common/MyCom.h	/^	~CMyVariant() { VariantClear(this); }$/;"	f	class:CMyVariant
~COpenDoc	OpenDoc.cpp	/^COpenDoc::~COpenDoc()$/;"	f	class:COpenDoc
~COpenFrame	OpenFrm.cpp	/^COpenFrame::~COpenFrame()$/;"	f	class:COpenFrame
~COpenView	OpenView.cpp	/^COpenView::~COpenView()$/;"	f	class:COpenView
~COptionsMgr	Common/OptionsMgr.h	/^	virtual ~COptionsMgr() {}$/;"	f	class:COptionsMgr
~CPatchTool	PatchTool.cpp	/^CPatchTool::~CPatchTool()$/;"	f	class:CPatchTool
~CPidlContainer	Common/PidlContainer.cpp	/^CPidlContainer::~CPidlContainer()$/;"	f	class:CPidlContainer
~CPreferencesDlg	Common/PreferencesDlg.cpp	/^CPreferencesDlg::~CPreferencesDlg()$/;"	f	class:CPreferencesDlg
~CPropertyPageHost	Common/PropertyPageHost.cpp	/^CPropertyPageHost::~CPropertyPageHost()$/;"	f	class:CPropertyPageHost
~CRegKeyEx	Common/RegKey.cpp	/^CRegKeyEx::~CRegKeyEx()$/;"	f	class:CRegKeyEx
~CRegOptionsMgr	Common/RegOptionsMgr.h	/^	virtual ~CRegOptionsMgr() { }$/;"	f	class:CRegOptionsMgr
~CScriptsOfThread	Plugins.cpp	/^CScriptsOfThread::~CScriptsOfThread()$/;"	f	class:CScriptsOfThread
~CSelectUnpackerDlg	SelectUnpackerDlg.cpp	/^CSelectUnpackerDlg::~CSelectUnpackerDlg()$/;"	f	class:CSelectUnpackerDlg
~CShellContextMenu	Common/ShellContextMenu.cpp	/^CShellContextMenu::~CShellContextMenu()$/;"	f	class:CShellContextMenu
~CSizingControlBar	Common/sizecbar.cpp	/^CSizingControlBar::~CSizingControlBar()$/;"	f	class:CSizingControlBar
~CSizingControlBarG	Common/scbarg.cpp	/^CSizingControlBarG::~CSizingControlBarG()$/;"	f	class:CSizingControlBarG
~CSortHeaderCtrl	Common/SortHeaderCtrl.cpp	/^CSortHeaderCtrl::~CSortHeaderCtrl()$/;"	f	class:CSortHeaderCtrl
~CSplitterWndEx	Common/SplitterWndEx.cpp	/^CSplitterWndEx::~CSplitterWndEx()$/;"	f	class:CSplitterWndEx
~CSuperComboBox	Common/SuperComboBox.cpp	/^CSuperComboBox::~CSuperComboBox()$/;"	f	class:CSuperComboBox
~CWinMergeProfile	StdAfx.h	/^	~CWinMergeProfile() {$/;"	f	class:CWinMergeProfile
~CodeToGroupMap	MovedBlocks.cpp	/^	~CodeToGroupMap()$/;"	f	class:CodeToGroupMap	file:
~CompareStats	CompareStats.cpp	/^CompareStats::~CompareStats()$/;"	f	class:CompareStats
~ConfirmFolderCopyDlg	ConfirmFolderCopyDlg.cpp	/^ConfirmFolderCopyDlg::~ConfirmFolderCopyDlg()$/;"	f	class:ConfirmFolderCopyDlg
~DIFFITEM	DiffItem.cpp	/^DIFFITEM::~DIFFITEM()$/;"	f	class:DIFFITEM
~DiffFileData	DiffFileData.cpp	/^DiffFileData::~DiffFileData()$/;"	f	class:DiffFileData
~DiffItemList	DiffItemList.cpp	/^DiffItemList::~DiffItemList()$/;"	f	class:DiffItemList
~DiffUtils	CompareEngines/Wrap_DiffUtils.cpp	/^DiffUtils::~DiffUtils()$/;"	f	class:CompareEngines::DiffUtils
~DirCompProgressBar	DirCompProgressBar.cpp	/^DirCompProgressBar::~DirCompProgressBar()$/;"	f	class:DirCompProgressBar
~DirItemIterator	DirItemIterator.h	/^	~DirItemIterator() {}$/;"	f	class:DirItemIterator
~DirItemWithIndexIterator	DirItemIterator.h	/^	~DirItemWithIndexIterator() {}$/;"	f	class:DirItemWithIndexIterator
~DirSelectFilesDlg	DirSelectFilesDlg.cpp	/^DirSelectFilesDlg::~DirSelectFilesDlg() {}$/;"	f	class:DirSelectFilesDlg
~DropHandler	DropHandler.cpp	/^DropHandler::~DropHandler()$/;"	f	class:DropHandler
~FileActionScript	FileActionScript.cpp	/^FileActionScript::~FileActionScript()$/;"	f	class:FileActionScript
~FileFilter	FileFilter.cpp	/^FileFilter::~FileFilter()$/;"	f	class:FileFilter
~FileFilterHelper	FileFilterHelper.cpp	/^FileFilterHelper::~FileFilterHelper()$/;"	f	class:FileFilterHelper
~FileFilterMgr	FileFilterMgr.cpp	/^FileFilterMgr::~FileFilterMgr()$/;"	f	class:FileFilterMgr
~FileImage	markdown.cpp	/^CMarkdown::FileImage::~FileImage()$/;"	f	class:CMarkdown::FileImage
~FilterList	FilterList.cpp	/^FilterList::~FilterList()$/;"	f	class:FilterList
~FolderCmp	FolderCmp.cpp	/^FolderCmp::~FolderCmp()$/;"	f	class:FolderCmp
~LWRet	Common/lwdisp.h	/^~	LWRet() {VariantClear(this);}$/;"	f	struct:LWRet
~LineFiltersList	LineFiltersList.cpp	/^LineFiltersList::~LineFiltersList()$/;"	f	class:LineFiltersList
~Merge7zFormatMergePluginScope	Merge7zFormatMergePluginImpl.h	/^	~Merge7zFormatMergePluginScope()$/;"	f	struct:Merge7zFormatMergePluginScope
~PathContextIterator	PathContext.h	/^	~PathContextIterator() {}$/;"	f	class:PathContextIterator
~PluginInfo	Plugins.h	/^	~PluginInfo()$/;"	f	class:PluginInfo
~PluginManager	PluginManager.cpp	/^PluginManager::~PluginManager()$/;"	f	class:PluginManager
~PluginsListDlg	PluginsListDlg.cpp	/^PluginsListDlg::~PluginsListDlg()$/;"	f	class:PluginsListDlg
~PropGeneral	PropGeneral.cpp	/^PropGeneral::~PropGeneral()$/;"	f	class:PropGeneral
~RescanSuppress	MergeDoc.cpp	/^	~RescanSuppress()$/;"	f	class:RescanSuppress	file:
~SE_Exception	Exceptions.h	/^	~SE_Exception() {};$/;"	f	class:SE_Exception
~SE_Handler	Exceptions.h	/^	~SE_Handler() { _set_se_translator(fnOld); }$/;"	f	class:SE_Handler
~TempFile	TempFile.cpp	/^TempFile::~TempFile()$/;"	f	class:TempFile
~TimeSizeCompare	CompareEngines/TimeSizeCompare.cpp	/^TimeSizeCompare::~TimeSizeCompare()$/;"	f	class:CompareEngines::TimeSizeCompare
~UniFile	Common/UniFile.h	/^	virtual ~UniFile() { }$/;"	f	class:UniFile
~UniMemFile	Common/UniFile.h	/^	virtual ~UniMemFile() { Close(); }$/;"	f	class:UniMemFile
~UniStdioFile	Common/UniFile.cpp	/^UniStdioFile::~UniStdioFile()$/;"	f	class:UniStdioFile
~WMGotoDlg	WMGotoDlg.cpp	/^WMGotoDlg::~WMGotoDlg() {}$/;"	f	class:WMGotoDlg
~buffer	Common/unicoder.cpp	/^buffer::~buffer()$/;"	f	class:ucr::buffer
~storageForPlugins	Common/multiformatText.h	/^	~storageForPlugins()$/;"	f	class:storageForPlugins
~stringdiffs	stringdiffs.cpp	/^stringdiffs::~stringdiffs()$/;"	f	class:strdiff::stringdiffs
